<?xml version="1.0" encoding="utf-8"?>
<fpdoc-descriptions>
  <package name="nvidia-widgets">
    <module name="nvWidgets">
      <short/>
      <descr/>
      <element name="Point">
        <short>2D point object</short>
      </element>
      <element name="SetPoint.Result">
        <short>Initialize the point object</short>
      </element>
      <element name="Rect">
        <short>Rectangle object</short>
      </element>
      <element name="Rect.x">
        <short>X position of top left point</short>
      </element>
      <element name="Rect.y">
        <short>Y position of top left point</short>
      </element>
      <element name="Rect.w">
        <short>Width of rectangle</short>
      </element>
      <element name="Rect.h">
        <short>Height of rectangle</short>
      </element>
      <element name="MouseButton_Left">
        <short>An enum to identify the left mouse button</short>
      </element>
      <element name="MouseButton_Middle">
        <short>An enum to identify the middle mouse button</short>
      </element>
      <element name="MouseButton_Right">
        <short>An enum to identify the right mouse button</short>
      </element>
      <element name="UIContext.reshape">
        <short>UI method for processing window size events</short>
      </element>
      <element name="UIContext.isOnFocus">
        <short>Check if the UI is currently on Focus</short>
      </element>
      <element name="UIContext.mouse">
        <short>UI method for processing mouse events</short>
      </element>
      <element name="Group">
        <short>Group record</short>
      </element>
      <element name="Group.bounds">
        <short>anchor point + width and height of the region </short>
      </element>
      <element name="Group.flags">
        <short>group behavior</short>
      </element>
      <element name="Group.margin">
        <short>border</short>
      </element>
      <element name="Group.space">
        <short>interior</short>
      </element>
      <element name="UIContext.mouseMotion">
        <short>UI method for processing mouse motion events</short>
      </element>
      <element name="UIContext.keyboard">
        <short>UI method for processing key events</short>
      </element>
      <element name="UIContext._begin">
        <short>UI method for entering UI processing mode</short>
        <descr>This function must be used to begin the UI processing </descr>
      </element>
      <element name="UIContext._end">
        <short>UI method for leaving UI processing mode</short>
        <descr>This function must be used to end the UI processing</descr>
      </element>
      <element name="UIContext.doLabel">
        <short>UI method for drawing a static text label</short>
        <descr>The label display a non interactive text.
The text can have multiple lines</descr>
      </element>
      <element name="UIContext.doLabel.r">
        <short>optionally provides a location and size for the label</short>
      </element>
      <element name="UIContext.doLabel.Text">
        <short>Text to display for the label (can have several lines)</short>
      </element>
      <element name="UIContext.doLabel.style">
        <short>optional style flag to modify the look</short>
      </element>
      <element name="UIContext.doButton">
        <short>UI method for rendering and processing a push button</short>
      </element>
      <element name="UIContext.doButton.r">
        <short>optionally provides a location and size for the button</short>
      </element>
      <element name="UIContext.doButton.Text">
        <short>text to display on the button</short>
      </element>
      <element name="UIContext.doButton.state">
        <short>whether the button is depressed</short>
        <descr>if state is NULL; the button behave like a touch button else; the button behave like a toggle button</descr>
      </element>
      <element name="UIContext.doButton.style">
        <short>optional style flag to modify the look</short>
      </element>
      <element name="UIContext.doCheckButton">
        <short>UI method for rendering and processing a check button</short>
        <descr>Check button behaves similarly as a toggle button used to display and edit a bool property.</descr>
      </element>
      <element name="UIContext.doCheckButton.r">
        <short>optionally provides a location and size for the button</short>
      </element>
      <element name="UIContext.doCheckButton.Text">
        <short>text to display on the button</short>
      </element>
      <element name="UIContext.doCheckButton.state">
        <short>whether the check button is checked or not</short>
        <descr>if state is NULL; the button behave like if a touch button unchecked</descr>
      </element>
      <element name="UIContext.doCheckButton.style">
        <short>optional style flag to modify the look</short>
      </element>
      <element name="UIContext.doRadioButton">
        <short>UI method for rendering and processing a radio button</short>
        <descr>Radio buttons are typically used in groups to diplay and edit the possible reference values taken by an int value.

One radio button is representing a possible reference value taken by the current value.
It is displaying a boolean state true if the current value is equal to the reference value.
</descr>
      </element>
      <element name="UIContext.doRadioButton.reference">
        <short>The reference int value represented by this radio button.</short>
      </element>
      <element name="UIContext.doRadioButton.r">
        <short>optionally provides a location and size for the button</short>
      </element>
      <element name="UIContext.doRadioButton.Text">
        <short>text to display on the button</short>
      </element>
      <element name="UIContext.doRadioButton.Value">
        <short>The value parameter compared to the reference value parameter.</short>
        <descr>if value is NULL; the radio button is off</descr>
      </element>
      <element name="UIContext.doRadioButton.style">
        <short>optional style flag to modify the look </short>
      </element>
      <element name="UIContext.doRadioButton.Result">
        <short>True if the radio button value changed</short>
      </element>
      <element name="UIContext.doCheckButton.Result">
        <short>True if the check button state changed</short>
      </element>
      <element name="UIContext.doHorizontalSlider">
        <short>UI method for rendering and processing a horizontal slider</short>
        <descr>Horizontal slider is used to edit and display a scalar value in the specified range [min; max].</descr>
      </element>
      <element name="UIContext.doHorizontalSlider.aRect">
        <short>optionally provides a location and size for the widget</short>
      </element>
      <element name="UIContext.doHorizontalSlider.min">
        <short>min bound of the varying range of the value</short>
      </element>
      <element name="UIContext.doHorizontalSlider.max">
        <short>max bound of the varying range of the value</short>
      </element>
      <element name="UIContext.doHorizontalSlider.Value">
        <short>the value edited by the widget</short>
        <descr>if value is NULL; the value is set to min</descr>
      </element>
      <element name="UIContext.doHorizontalSlider.style">
        <short>optional style flag to modify the look</short>
      </element>
      <element name="UIContext.doHorizontalSlider.Result">
        <short>True if the slider value changed</short>
      </element>
      <element name="UIContext.doTextureView">
        <short>UI method for drawing a texture view</short>
        <descr>
          <p>Several parameters control the equation used to display the texel</p>
          <code>texel = texture2DFetch(...);
pixel = texelSwizzling( texel * texelScale + texelOffset );
</code>
        </descr>
      </element>
      <element name="UIContext.doTextureView.aRect">
        <short>provides a location and size for the texture view</short>
      </element>
      <element name="UIContext.doTextureView.texID">
        <short>texture identifier (Graphics API specific)</short>
      </element>
      <element name="UIContext.doTextureView.zoomRect">
        <short>rectangle area of the texture displayed</short>
      </element>
      <element name="UIContext.doTextureView.mipLevel">
        <short>mip Level of the texture displayed</short>
      </element>
      <element name="UIContext.doTextureView.texelScale">
        <short>scale applyed to the texel fetch</short>
      </element>
      <element name="UIContext.doTextureView.texelOffset">
        <short>offset applyed to the texel after scale</short>
      </element>
      <element name="UIContext.doTextureView.style">
        <short>optional style flag to modify the look</short>
      </element>
      <element name="Point.x">
        <short>X location</short>
      </element>
      <element name="Point.y">
        <short>Y location</short>
      </element>
      <element name="UIContext.getPainter">
        <short>Active widget painter</short>
      </element>
      <element name="EvalBool">
        <short>Boolean evaluation function</short>
        <descr>This function evaluates a boolean to a numerical value.

True equals 1
False equals 0</descr>
      </element>
      <element name="Point.Point">
        <short>Constructor for the point object</short>
      </element>
      <element name="Rect.Rect">
        <short>Constructor for the rect object</short>
      </element>
      <element name="SetPoint">
        <short>Helper function to initialize the point object</short>
      </element>
      <element name="SetRect">
        <short>Helper function to initialize the rect object</short>
      </element>
    </module>
    <short>NVIDIA widget library</short>
    <descr>
      <p>This library is originally based on the NVIDIA widget library. NVIDIA Widgets is the 
<url href="https://mollyrocket.com/forums/viewforum.php?f=10">immediate mode graphical user interface</url> toolkit used by the 
<url href="http://developer.nvidia.com/object/sdk_home.html">NVIDIA SDK samples</url>.
</p>
      <p>Originally ported to FPC by Darius Blaszyk in June 2011.</p>
      <p>This library is distributed under the <url href="http://www.opensource.org/licenses/mit-license.php">MIT</url> license, as the original library was.</p>
      <p>The original code can be found here: <url href="http://code.google.com/p/nvidia-widgets/"/>
      </p>
      <img file="nvwidgets.png" caption="nvidia-widgets class chart"/>
      <p>For more information see the <url href="http://wiki.lazarus.freepascal.org/nvidia-widgets">Lazarus wiki</url>.</p>
    </descr>
  </package>
</fpdoc-descriptions>
