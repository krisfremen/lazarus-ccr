unit Gtk3;

{$MODE OBJFPC}{$H+}

{$PACKRECORDS C}
{$BITPACKING ON}
{$MODESWITCH DUPLICATELOCALS+}

{$LINKLIB libgtk-3.so.0}
interface
uses
  CTypes, Atk1, GLib2, GModule2, GObject2, Gdk3, GdkPixbuf2, Gio2, Pango1, cairo1, xlib2;

const
  Gtk3_library = 'libgtk-3.so.0';

  BINARY_AGE = 116;
  INPUT_ERROR = -1;
  INTERFACE_AGE = 0;
  MAJOR_VERSION = 3;
  MAX_COMPOSE_LEN = 7;
  MICRO_VERSION = 16;
  MINOR_VERSION = 1;
  PAPER_NAME_A3 = 'iso_a3';
  PAPER_NAME_A4 = 'iso_a4';
  PAPER_NAME_A5 = 'iso_a5';
  PAPER_NAME_B5 = 'iso_b5';
  PAPER_NAME_EXECUTIVE = 'na_executive';
  PAPER_NAME_LEGAL = 'na_legal';
  PAPER_NAME_LETTER = 'na_letter';
  PATH_PRIO_MASK = 15;
  PRINT_SETTINGS_COLLATE = 'collate';
  PRINT_SETTINGS_DEFAULT_SOURCE = 'default-source';
  PRINT_SETTINGS_DITHER = 'dither';
  PRINT_SETTINGS_DUPLEX = 'duplex';
  PRINT_SETTINGS_FINISHINGS = 'finishings';
  PRINT_SETTINGS_MEDIA_TYPE = 'media-type';
  PRINT_SETTINGS_NUMBER_UP = 'number-up';
  PRINT_SETTINGS_NUMBER_UP_LAYOUT = 'number-up-layout';
  PRINT_SETTINGS_N_COPIES = 'n-copies';
  PRINT_SETTINGS_ORIENTATION = 'orientation';
  PRINT_SETTINGS_OUTPUT_BIN = 'output-bin';
  PRINT_SETTINGS_OUTPUT_FILE_FORMAT = 'output-file-format';
  PRINT_SETTINGS_OUTPUT_URI = 'output-uri';
  PRINT_SETTINGS_PAGE_RANGES = 'page-ranges';
  PRINT_SETTINGS_PAGE_SET = 'page-set';
  PRINT_SETTINGS_PAPER_FORMAT = 'paper-format';
  PRINT_SETTINGS_PAPER_HEIGHT = 'paper-height';
  PRINT_SETTINGS_PAPER_WIDTH = 'paper-width';
  PRINT_SETTINGS_PRINTER = 'printer';
  PRINT_SETTINGS_PRINTER_LPI = 'printer-lpi';
  PRINT_SETTINGS_PRINT_PAGES = 'print-pages';
  PRINT_SETTINGS_QUALITY = 'quality';
  PRINT_SETTINGS_RESOLUTION = 'resolution';
  PRINT_SETTINGS_RESOLUTION_X = 'resolution-x';
  PRINT_SETTINGS_RESOLUTION_Y = 'resolution-y';
  PRINT_SETTINGS_REVERSE = 'reverse';
  PRINT_SETTINGS_SCALE = 'scale';
  PRINT_SETTINGS_USE_COLOR = 'use-color';
  PRINT_SETTINGS_WIN32_DRIVER_EXTRA = 'win32-driver-extra';
  PRINT_SETTINGS_WIN32_DRIVER_VERSION = 'win32-driver-version';
  PRIORITY_RESIZE = 10;
  STOCK_ABOUT = 'gtk-about';
  STOCK_ADD = 'gtk-add';
  STOCK_APPLY = 'gtk-apply';
  STOCK_BOLD = 'gtk-bold';
  STOCK_CANCEL = 'gtk-cancel';
  STOCK_CAPS_LOCK_WARNING = 'gtk-caps-lock-warning';
  STOCK_CDROM = 'gtk-cdrom';
  STOCK_CLEAR = 'gtk-clear';
  STOCK_CLOSE = 'gtk-close';
  STOCK_COLOR_PICKER = 'gtk-color-picker';
  STOCK_CONNECT = 'gtk-connect';
  STOCK_CONVERT = 'gtk-convert';
  STOCK_COPY = 'gtk-copy';
  STOCK_CUT = 'gtk-cut';
  STOCK_DELETE = 'gtk-delete';
  STOCK_DIALOG_AUTHENTICATION = 'gtk-dialog-authentication';
  STOCK_DIALOG_ERROR = 'gtk-dialog-error';
  STOCK_DIALOG_INFO = 'gtk-dialog-info';
  STOCK_DIALOG_QUESTION = 'gtk-dialog-question';
  STOCK_DIALOG_WARNING = 'gtk-dialog-warning';
  STOCK_DIRECTORY = 'gtk-directory';
  STOCK_DISCARD = 'gtk-discard';
  STOCK_DISCONNECT = 'gtk-disconnect';
  STOCK_DND = 'gtk-dnd';
  STOCK_DND_MULTIPLE = 'gtk-dnd-multiple';
  STOCK_EDIT = 'gtk-edit';
  STOCK_EXECUTE = 'gtk-execute';
  STOCK_FILE = 'gtk-file';
  STOCK_FIND = 'gtk-find';
  STOCK_FIND_AND_REPLACE = 'gtk-find-and-replace';
  STOCK_FLOPPY = 'gtk-floppy';
  STOCK_FULLSCREEN = 'gtk-fullscreen';
  STOCK_GOTO_BOTTOM = 'gtk-goto-bottom';
  STOCK_GOTO_FIRST = 'gtk-goto-first';
  STOCK_GOTO_LAST = 'gtk-goto-last';
  STOCK_GOTO_TOP = 'gtk-goto-top';
  STOCK_GO_BACK = 'gtk-go-back';
  STOCK_GO_DOWN = 'gtk-go-down';
  STOCK_GO_FORWARD = 'gtk-go-forward';
  STOCK_GO_UP = 'gtk-go-up';
  STOCK_HARDDISK = 'gtk-harddisk';
  STOCK_HELP = 'gtk-help';
  STOCK_HOME = 'gtk-home';
  STOCK_INDENT = 'gtk-indent';
  STOCK_INDEX = 'gtk-index';
  STOCK_INFO = 'gtk-info';
  STOCK_ITALIC = 'gtk-italic';
  STOCK_JUMP_TO = 'gtk-jump-to';
  STOCK_JUSTIFY_CENTER = 'gtk-justify-center';
  STOCK_JUSTIFY_FILL = 'gtk-justify-fill';
  STOCK_JUSTIFY_LEFT = 'gtk-justify-left';
  STOCK_JUSTIFY_RIGHT = 'gtk-justify-right';
  STOCK_LEAVE_FULLSCREEN = 'gtk-leave-fullscreen';
  STOCK_MEDIA_FORWARD = 'gtk-media-forward';
  STOCK_MEDIA_NEXT = 'gtk-media-next';
  STOCK_MEDIA_PAUSE = 'gtk-media-pause';
  STOCK_MEDIA_PLAY = 'gtk-media-play';
  STOCK_MEDIA_PREVIOUS = 'gtk-media-previous';
  STOCK_MEDIA_RECORD = 'gtk-media-record';
  STOCK_MEDIA_REWIND = 'gtk-media-rewind';
  STOCK_MEDIA_STOP = 'gtk-media-stop';
  STOCK_MISSING_IMAGE = 'gtk-missing-image';
  STOCK_NETWORK = 'gtk-network';
  STOCK_NEW = 'gtk-new';
  STOCK_NO = 'gtk-no';
  STOCK_OK = 'gtk-ok';
  STOCK_OPEN = 'gtk-open';
  STOCK_ORIENTATION_LANDSCAPE = 'gtk-orientation-landscape';
  STOCK_ORIENTATION_PORTRAIT = 'gtk-orientation-portrait';
  STOCK_ORIENTATION_REVERSE_LANDSCAPE = 'gtk-orientation-reverse-landscape';
  STOCK_ORIENTATION_REVERSE_PORTRAIT = 'gtk-orientation-reverse-portrait';
  STOCK_PAGE_SETUP = 'gtk-page-setup';
  STOCK_PASTE = 'gtk-paste';
  STOCK_PREFERENCES = 'gtk-preferences';
  STOCK_PRINT = 'gtk-print';
  STOCK_PRINT_ERROR = 'gtk-print-error';
  STOCK_PRINT_PAUSED = 'gtk-print-paused';
  STOCK_PRINT_PREVIEW = 'gtk-print-preview';
  STOCK_PRINT_REPORT = 'gtk-print-report';
  STOCK_PRINT_WARNING = 'gtk-print-warning';
  STOCK_PROPERTIES = 'gtk-properties';
  STOCK_QUIT = 'gtk-quit';
  STOCK_REDO = 'gtk-redo';
  STOCK_REFRESH = 'gtk-refresh';
  STOCK_REMOVE = 'gtk-remove';
  STOCK_REVERT_TO_SAVED = 'gtk-revert-to-saved';
  STOCK_SAVE = 'gtk-save';
  STOCK_SAVE_AS = 'gtk-save-as';
  STOCK_SELECT_ALL = 'gtk-select-all';
  STOCK_SELECT_COLOR = 'gtk-select-color';
  STOCK_SELECT_FONT = 'gtk-select-font';
  STOCK_SORT_ASCENDING = 'gtk-sort-ascending';
  STOCK_SORT_DESCENDING = 'gtk-sort-descending';
  STOCK_SPELL_CHECK = 'gtk-spell-check';
  STOCK_STOP = 'gtk-stop';
  STOCK_STRIKETHROUGH = 'gtk-strikethrough';
  STOCK_UNDELETE = 'gtk-undelete';
  STOCK_UNDERLINE = 'gtk-underline';
  STOCK_UNDO = 'gtk-undo';
  STOCK_UNINDENT = 'gtk-unindent';
  STOCK_YES = 'gtk-yes';
  STOCK_ZOOM_100 = 'gtk-zoom-100';
  STOCK_ZOOM_FIT = 'gtk-zoom-fit';
  STOCK_ZOOM_IN = 'gtk-zoom-in';
  STOCK_ZOOM_OUT = 'gtk-zoom-out';
  STYLE_CLASS_ACCELERATOR = 'accelerator';
  STYLE_CLASS_BACKGROUND = 'background';
  STYLE_CLASS_BUTTON = 'button';
  STYLE_CLASS_CALENDAR = 'calendar';
  STYLE_CLASS_CELL = 'cell';
  STYLE_CLASS_CHECK = 'check';
  STYLE_CLASS_COMBOBOX_ENTRY = 'combobox-entry';
  STYLE_CLASS_DEFAULT = 'default';
  STYLE_CLASS_DND = 'dnd';
  STYLE_CLASS_DOCK = 'dock';
  STYLE_CLASS_ENTRY = 'entry';
  STYLE_CLASS_ERROR = 'error';
  STYLE_CLASS_EXPANDER = 'expander';
  STYLE_CLASS_FRAME = 'frame';
  STYLE_CLASS_GRIP = 'grip';
  STYLE_CLASS_HEADER = 'header';
  STYLE_CLASS_HIGHLIGHT = 'highlight';
  STYLE_CLASS_HORIZONTAL = 'horizontal';
  STYLE_CLASS_IMAGE = 'image';
  STYLE_CLASS_INFO = 'info';
  STYLE_CLASS_INLINE_TOOLBAR = 'inline-toolbar';
  STYLE_CLASS_MARK = 'mark';
  STYLE_CLASS_MENU = 'menu';
  STYLE_CLASS_MENUBAR = 'menubar';
  STYLE_CLASS_MENUITEM = 'menuitem';
  STYLE_CLASS_NOTEBOOK = 'notebook';
  STYLE_CLASS_PANE_SEPARATOR = 'pane-separator';
  STYLE_CLASS_PRIMARY_TOOLBAR = 'primary-toolbar';
  STYLE_CLASS_PROGRESSBAR = 'progressbar';
  STYLE_CLASS_QUESTION = 'question';
  STYLE_CLASS_RADIO = 'radio';
  STYLE_CLASS_RAISED = 'raised';
  STYLE_CLASS_RUBBERBAND = 'rubberband';
  STYLE_CLASS_SCALE = 'scale';
  STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = 'scale-has-marks-above';
  STYLE_CLASS_SCALE_HAS_MARKS_BELOW = 'scale-has-marks-below';
  STYLE_CLASS_SCROLLBAR = 'scrollbar';
  STYLE_CLASS_SEPARATOR = 'separator';
  STYLE_CLASS_SIDEBAR = 'sidebar';
  STYLE_CLASS_SLIDER = 'slider';
  STYLE_CLASS_SPINBUTTON = 'spinbutton';
  STYLE_CLASS_SPINNER = 'spinner';
  STYLE_CLASS_TOOLBAR = 'toolbar';
  STYLE_CLASS_TOOLTIP = 'tooltip';
  STYLE_CLASS_TROUGH = 'trough';
  STYLE_CLASS_VERTICAL = 'vertical';
  STYLE_CLASS_VIEW = 'view';
  STYLE_CLASS_WARNING = 'warning';
  STYLE_PROPERTY_BACKGROUND_COLOR = 'background-color';
  STYLE_PROPERTY_BACKGROUND_IMAGE = 'background-image';
  STYLE_PROPERTY_BORDER_COLOR = 'border-color';
  STYLE_PROPERTY_BORDER_RADIUS = 'border-radius';
  STYLE_PROPERTY_BORDER_STYLE = 'border-style';
  STYLE_PROPERTY_BORDER_WIDTH = 'border-width';
  STYLE_PROPERTY_COLOR = 'color';
  STYLE_PROPERTY_FONT = 'font';
  STYLE_PROPERTY_MARGIN = 'margin';
  STYLE_PROPERTY_PADDING = 'padding';
  STYLE_PROVIDER_PRIORITY_APPLICATION = 600;
  STYLE_PROVIDER_PRIORITY_FALLBACK = 1;
  STYLE_PROVIDER_PRIORITY_SETTINGS = 400;
  STYLE_PROVIDER_PRIORITY_THEME = 200;
  STYLE_PROVIDER_PRIORITY_USER = 800;
  STYLE_REGION_COLUMN = 'column';
  STYLE_REGION_COLUMN_HEADER = 'column-header';
  STYLE_REGION_ROW = 'row';
  STYLE_REGION_TAB = 'tab';
  TEXT_VIEW_PRIORITY_VALIDATE = 5;

type
  TGtkTextDirection = Integer;
const
  { GtkTextDirection }
  GTK_TEXT_DIR_NONE: TGtkTextDirection = 0;
  GTK_TEXT_DIR_LTR: TGtkTextDirection = 1;
  GTK_TEXT_DIR_RTL: TGtkTextDirection = 2;

  { GtkAccelFlags }
  GTK_ACCEL_VISIBLE = 1;
  GTK_ACCEL_LOCKED = 2;
  GTK_ACCEL_MASK = 7;

type
  TGtkDirectionType = Integer;
const
  { GtkDirectionType }
  GTK_DIR_TAB_FORWARD: TGtkDirectionType = 0;
  GTK_DIR_TAB_BACKWARD: TGtkDirectionType = 1;
  GTK_DIR_UP: TGtkDirectionType = 2;
  GTK_DIR_DOWN: TGtkDirectionType = 3;
  GTK_DIR_LEFT: TGtkDirectionType = 4;
  GTK_DIR_RIGHT: TGtkDirectionType = 5;

type
  TGtkOrientation = Integer;
const
  { GtkOrientation }
  GTK_ORIENTATION_HORIZONTAL: TGtkOrientation = 0;
  GTK_ORIENTATION_VERTICAL: TGtkOrientation = 1;

  { GtkDestDefaults }
  GTK_DEST_DEFAULT_MOTION = 1;
  GTK_DEST_DEFAULT_HIGHLIGHT = 2;
  GTK_DEST_DEFAULT_DROP = 4;
  GTK_DEST_DEFAULT_ALL = 7;

  { GtkStateFlags }
  GTK_STATE_FLAG_NORMAL = 0;
  GTK_STATE_FLAG_ACTIVE = 1;
  GTK_STATE_FLAG_PRELIGHT = 2;
  GTK_STATE_FLAG_SELECTED = 4;
  GTK_STATE_FLAG_INSENSITIVE = 8;
  GTK_STATE_FLAG_INCONSISTENT = 16;
  GTK_STATE_FLAG_FOCUSED = 32;

type
  TGtkStateType = Integer;
const
  { GtkStateType }
  GTK_STATE_NORMAL: TGtkStateType = 0;
  GTK_STATE_ACTIVE: TGtkStateType = 1;
  GTK_STATE_PRELIGHT: TGtkStateType = 2;
  GTK_STATE_SELECTED: TGtkStateType = 3;
  GTK_STATE_INSENSITIVE: TGtkStateType = 4;
  GTK_STATE_INCONSISTENT: TGtkStateType = 5;
  GTK_STATE_FOCUSED: TGtkStateType = 6;

type
  TGtkAlign = Integer;
const
  { GtkAlign }
  GTK_ALIGN_FILL: TGtkAlign = 0;
  GTK_ALIGN_START: TGtkAlign = 1;
  GTK_ALIGN_END: TGtkAlign = 2;
  GTK_ALIGN_CENTER: TGtkAlign = 3;

type
  TGtkLicense = Integer;
const
  { GtkLicense }
  GTK_LICENSE_UNKNOWN: TGtkLicense = 0;
  GTK_LICENSE_CUSTOM: TGtkLicense = 1;
  GTK_LICENSE_GPL_2_0: TGtkLicense = 2;
  GTK_LICENSE_GPL_3_0: TGtkLicense = 3;
  GTK_LICENSE_LGPL_2_1: TGtkLicense = 4;
  GTK_LICENSE_LGPL_3_0: TGtkLicense = 5;
  GTK_LICENSE_BSD: TGtkLicense = 6;
  GTK_LICENSE_MIT_X11: TGtkLicense = 7;
  GTK_LICENSE_ARTISTIC: TGtkLicense = 8;

  { GtkDialogFlags }
  GTK_DIALOG_MODAL = 1;
  GTK_DIALOG_DESTROY_WITH_PARENT = 2;

type
  TGtkJustification = Integer;
const
  { GtkJustification }
  GTK_JUSTIFY_LEFT: TGtkJustification = 0;
  GTK_JUSTIFY_RIGHT: TGtkJustification = 1;
  GTK_JUSTIFY_CENTER: TGtkJustification = 2;
  GTK_JUSTIFY_FILL: TGtkJustification = 3;

type
  TGtkMovementStep = Integer;
const
  { GtkMovementStep }
  GTK_MOVEMENT_LOGICAL_POSITIONS: TGtkMovementStep = 0;
  GTK_MOVEMENT_VISUAL_POSITIONS: TGtkMovementStep = 1;
  GTK_MOVEMENT_WORDS: TGtkMovementStep = 2;
  GTK_MOVEMENT_DISPLAY_LINES: TGtkMovementStep = 3;
  GTK_MOVEMENT_DISPLAY_LINE_ENDS: TGtkMovementStep = 4;
  GTK_MOVEMENT_PARAGRAPHS: TGtkMovementStep = 5;
  GTK_MOVEMENT_PARAGRAPH_ENDS: TGtkMovementStep = 6;
  GTK_MOVEMENT_PAGES: TGtkMovementStep = 7;
  GTK_MOVEMENT_BUFFER_ENDS: TGtkMovementStep = 8;
  GTK_MOVEMENT_HORIZONTAL_PAGES: TGtkMovementStep = 9;

type
  TGtkResizeMode = Integer;
const
  { GtkResizeMode }
  GTK_RESIZE_PARENT: TGtkResizeMode = 0;
  GTK_RESIZE_QUEUE: TGtkResizeMode = 1;
  GTK_RESIZE_IMMEDIATE: TGtkResizeMode = 2;

type
  TGtkDragResult = Integer;
const
  { GtkDragResult }
  GTK_DRAG_RESULT_SUCCESS: TGtkDragResult = 0;
  GTK_DRAG_RESULT_NO_TARGET: TGtkDragResult = 1;
  GTK_DRAG_RESULT_USER_CANCELLED: TGtkDragResult = 2;
  GTK_DRAG_RESULT_TIMEOUT_EXPIRED: TGtkDragResult = 3;
  GTK_DRAG_RESULT_GRAB_BROKEN: TGtkDragResult = 4;
  GTK_DRAG_RESULT_ERROR: TGtkDragResult = 5;

type
  TGtkWidgetHelpType = Integer;
const
  { GtkWidgetHelpType }
  GTK_WIDGET_HELP_TOOLTIP: TGtkWidgetHelpType = 0;
  GTK_WIDGET_HELP_WHATS_THIS: TGtkWidgetHelpType = 1;

type
  TGtkSensitivityType = Integer;
const
  { GtkSensitivityType }
  GTK_SENSITIVITY_AUTO: TGtkSensitivityType = 0;
  GTK_SENSITIVITY_ON: TGtkSensitivityType = 1;
  GTK_SENSITIVITY_OFF: TGtkSensitivityType = 2;

type
  TGtkPackType = Integer;
const
  { GtkPackType }
  GTK_PACK_START: TGtkPackType = 0;
  GTK_PACK_END: TGtkPackType = 1;

type
  TGtkArrowType = Integer;
const
  { GtkArrowType }
  GTK_ARROW_UP: TGtkArrowType = 0;
  GTK_ARROW_DOWN: TGtkArrowType = 1;
  GTK_ARROW_LEFT: TGtkArrowType = 2;
  GTK_ARROW_RIGHT: TGtkArrowType = 3;
  GTK_ARROW_NONE: TGtkArrowType = 4;

type
  TGtkShadowType = Integer;
const
  { GtkShadowType }
  GTK_SHADOW_NONE: TGtkShadowType = 0;
  GTK_SHADOW_IN: TGtkShadowType = 1;
  GTK_SHADOW_OUT: TGtkShadowType = 2;
  GTK_SHADOW_ETCHED_IN: TGtkShadowType = 3;
  GTK_SHADOW_ETCHED_OUT: TGtkShadowType = 4;

type
  TGtkArrowPlacement = Integer;
const
  { GtkArrowPlacement }
  GTK_ARROWS_BOTH: TGtkArrowPlacement = 0;
  GTK_ARROWS_START: TGtkArrowPlacement = 1;
  GTK_ARROWS_END: TGtkArrowPlacement = 2;

type
  TGtkAssistantPageType = Integer;
const
  { GtkAssistantPageType }
  GTK_ASSISTANT_PAGE_CONTENT: TGtkAssistantPageType = 0;
  GTK_ASSISTANT_PAGE_INTRO: TGtkAssistantPageType = 1;
  GTK_ASSISTANT_PAGE_CONFIRM: TGtkAssistantPageType = 2;
  GTK_ASSISTANT_PAGE_SUMMARY: TGtkAssistantPageType = 3;
  GTK_ASSISTANT_PAGE_PROGRESS: TGtkAssistantPageType = 4;
  GTK_ASSISTANT_PAGE_CUSTOM: TGtkAssistantPageType = 5;

  { GtkAttachOptions }
  GTK_EXPAND = 1;
  GTK_SHRINK = 2;
  GTK_FILL = 4;

type
  TGtkPathType = Integer;
const
  { GtkPathType }
  GTK_PATH_WIDGET: TGtkPathType = 0;
  GTK_PATH_WIDGET_CLASS: TGtkPathType = 1;
  GTK_PATH_CLASS: TGtkPathType = 2;

type
  TGtkPathPriorityType = Integer;
const
  { GtkPathPriorityType }
  GTK_PATH_PRIO_LOWEST: TGtkPathPriorityType = 0;
  GTK_PATH_PRIO_GTK: TGtkPathPriorityType = 4;
  GTK_PATH_PRIO_APPLICATION: TGtkPathPriorityType = 8;
  GTK_PATH_PRIO_THEME: TGtkPathPriorityType = 10;
  GTK_PATH_PRIO_RC: TGtkPathPriorityType = 12;
  GTK_PATH_PRIO_HIGHEST: TGtkPathPriorityType = 15;

type
  TGtkBorderStyle = Integer;
const
  { GtkBorderStyle }
  GTK_BORDER_STYLE_NONE: TGtkBorderStyle = 0;
  GTK_BORDER_STYLE_SOLID: TGtkBorderStyle = 1;
  GTK_BORDER_STYLE_INSET: TGtkBorderStyle = 2;
  GTK_BORDER_STYLE_OUTSET: TGtkBorderStyle = 3;

type
  TGtkBuilderError = Integer;
const
  { GtkBuilderError }
  GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION: TGtkBuilderError = 0;
  GTK_BUILDER_ERROR_UNHANDLED_TAG: TGtkBuilderError = 1;
  GTK_BUILDER_ERROR_MISSING_ATTRIBUTE: TGtkBuilderError = 2;
  GTK_BUILDER_ERROR_INVALID_ATTRIBUTE: TGtkBuilderError = 3;
  GTK_BUILDER_ERROR_INVALID_TAG: TGtkBuilderError = 4;
  GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE: TGtkBuilderError = 5;
  GTK_BUILDER_ERROR_INVALID_VALUE: TGtkBuilderError = 6;
  GTK_BUILDER_ERROR_VERSION_MISMATCH: TGtkBuilderError = 7;
  GTK_BUILDER_ERROR_DUPLICATE_ID: TGtkBuilderError = 8;

type
  TGtkPositionType = Integer;
const
  { GtkPositionType }
  GTK_POS_LEFT: TGtkPositionType = 0;
  GTK_POS_RIGHT: TGtkPositionType = 1;
  GTK_POS_TOP: TGtkPositionType = 2;
  GTK_POS_BOTTOM: TGtkPositionType = 3;

type
  TGtkReliefStyle = Integer;
const
  { GtkReliefStyle }
  GTK_RELIEF_NORMAL: TGtkReliefStyle = 0;
  GTK_RELIEF_HALF: TGtkReliefStyle = 1;
  GTK_RELIEF_NONE: TGtkReliefStyle = 2;

type
  TGtkButtonBoxStyle = Integer;
const
  { GtkButtonBoxStyle }
  GTK_BUTTONBOX_SPREAD: TGtkButtonBoxStyle = 1;
  GTK_BUTTONBOX_EDGE: TGtkButtonBoxStyle = 2;
  GTK_BUTTONBOX_START: TGtkButtonBoxStyle = 3;
  GTK_BUTTONBOX_END: TGtkButtonBoxStyle = 4;
  GTK_BUTTONBOX_CENTER: TGtkButtonBoxStyle = 5;

type
  TGtkButtonsType = Integer;
const
  { GtkButtonsType }
  GTK_BUTTONS_NONE: TGtkButtonsType = 0;
  GTK_BUTTONS_OK: TGtkButtonsType = 1;
  GTK_BUTTONS_CLOSE: TGtkButtonsType = 2;
  GTK_BUTTONS_CANCEL: TGtkButtonsType = 3;
  GTK_BUTTONS_YES_NO: TGtkButtonsType = 4;
  GTK_BUTTONS_OK_CANCEL: TGtkButtonsType = 5;

  { GtkCalendarDisplayOptions }
  GTK_CALENDAR_SHOW_HEADING = 1;
  GTK_CALENDAR_SHOW_DAY_NAMES = 2;
  GTK_CALENDAR_NO_MONTH_CHANGE = 4;
  GTK_CALENDAR_SHOW_WEEK_NUMBERS = 8;
  GTK_CALENDAR_SHOW_DETAILS = 32;

  { GtkCellRendererState }
  GTK_CELL_RENDERER_SELECTED = 1;
  GTK_CELL_RENDERER_PRELIT = 2;
  GTK_CELL_RENDERER_INSENSITIVE = 4;
  GTK_CELL_RENDERER_SORTED = 8;
  GTK_CELL_RENDERER_FOCUSED = 16;

  { GtkTreeModelFlags }
  GTK_TREE_MODEL_ITERS_PERSIST = 1;
  GTK_TREE_MODEL_LIST_ONLY = 2;

type
  TGtkSizeRequestMode = Integer;
const
  { GtkSizeRequestMode }
  GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH: TGtkSizeRequestMode = 0;
  GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT: TGtkSizeRequestMode = 1;
  GTK_SIZE_REQUEST_CONSTANT_SIZE: TGtkSizeRequestMode = 2;

type
  TGtkCellRendererMode = Integer;
const
  { GtkCellRendererMode }
  GTK_CELL_RENDERER_MODE_INERT: TGtkCellRendererMode = 0;
  GTK_CELL_RENDERER_MODE_ACTIVATABLE: TGtkCellRendererMode = 1;
  GTK_CELL_RENDERER_MODE_EDITABLE: TGtkCellRendererMode = 2;

type
  TGtkCellRendererAccelMode = Integer;
const
  { GtkCellRendererAccelMode }
  GTK_CELL_RENDERER_ACCEL_MODE_GTK: TGtkCellRendererAccelMode = 0;
  GTK_CELL_RENDERER_ACCEL_MODE_OTHER: TGtkCellRendererAccelMode = 1;

type
  TGtkIconSize = Integer;
const
  { GtkIconSize }
  GTK_ICON_SIZE_INVALID: TGtkIconSize = 0;
  GTK_ICON_SIZE_MENU: TGtkIconSize = 1;
  GTK_ICON_SIZE_SMALL_TOOLBAR: TGtkIconSize = 2;
  GTK_ICON_SIZE_LARGE_TOOLBAR: TGtkIconSize = 3;
  GTK_ICON_SIZE_BUTTON: TGtkIconSize = 4;
  GTK_ICON_SIZE_DND: TGtkIconSize = 5;
  GTK_ICON_SIZE_DIALOG: TGtkIconSize = 6;

type
  TGtkScrollType = Integer;
const
  { GtkScrollType }
  GTK_SCROLL_NONE: TGtkScrollType = 0;
  GTK_SCROLL_JUMP: TGtkScrollType = 1;
  GTK_SCROLL_STEP_BACKWARD: TGtkScrollType = 2;
  GTK_SCROLL_STEP_FORWARD: TGtkScrollType = 3;
  GTK_SCROLL_PAGE_BACKWARD: TGtkScrollType = 4;
  GTK_SCROLL_PAGE_FORWARD: TGtkScrollType = 5;
  GTK_SCROLL_STEP_UP: TGtkScrollType = 6;
  GTK_SCROLL_STEP_DOWN: TGtkScrollType = 7;
  GTK_SCROLL_PAGE_UP: TGtkScrollType = 8;
  GTK_SCROLL_PAGE_DOWN: TGtkScrollType = 9;
  GTK_SCROLL_STEP_LEFT: TGtkScrollType = 10;
  GTK_SCROLL_STEP_RIGHT: TGtkScrollType = 11;
  GTK_SCROLL_PAGE_LEFT: TGtkScrollType = 12;
  GTK_SCROLL_PAGE_RIGHT: TGtkScrollType = 13;
  GTK_SCROLL_START: TGtkScrollType = 14;
  GTK_SCROLL_END: TGtkScrollType = 15;

  { GtkRegionFlags }
  GTK_REGION_EVEN = 1;
  GTK_REGION_ODD = 2;
  GTK_REGION_FIRST = 4;
  GTK_REGION_LAST = 8;
  GTK_REGION_SORTED = 32;

type
  TGtkCornerType = Integer;
const
  { GtkCornerType }
  GTK_CORNER_TOP_LEFT: TGtkCornerType = 0;
  GTK_CORNER_BOTTOM_LEFT: TGtkCornerType = 1;
  GTK_CORNER_TOP_RIGHT: TGtkCornerType = 2;
  GTK_CORNER_BOTTOM_RIGHT: TGtkCornerType = 3;

type
  TGtkCssProviderError = Integer;
const
  { GtkCssProviderError }
  GTK_CSS_PROVIDER_ERROR_FAILED: TGtkCssProviderError = 0;
  GTK_CSS_PROVIDER_ERROR_SYNTAX: TGtkCssProviderError = 1;
  GTK_CSS_PROVIDER_ERROR_IMPORT: TGtkCssProviderError = 2;
  GTK_CSS_PROVIDER_ERROR_NAME: TGtkCssProviderError = 3;
  GTK_CSS_PROVIDER_ERROR_DEPRECATED: TGtkCssProviderError = 4;
  GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE: TGtkCssProviderError = 5;

type
  TGtkCssSectionType = Integer;
const
  { GtkCssSectionType }
  GTK_CSS_SECTION_DOCUMENT: TGtkCssSectionType = 0;
  GTK_CSS_SECTION_IMPORT: TGtkCssSectionType = 1;
  GTK_CSS_SECTION_COLOR_DEFINITION: TGtkCssSectionType = 2;
  GTK_CSS_SECTION_BINDING_SET: TGtkCssSectionType = 3;
  GTK_CSS_SECTION_RULESET: TGtkCssSectionType = 4;
  GTK_CSS_SECTION_SELECTOR: TGtkCssSectionType = 5;
  GTK_CSS_SECTION_DECLARATION: TGtkCssSectionType = 6;
  GTK_CSS_SECTION_VALUE: TGtkCssSectionType = 7;

  { GtkDebugFlag }
  GTK_DEBUG_MISC = 1;
  GTK_DEBUG_PLUGSOCKET = 2;
  GTK_DEBUG_TEXT = 4;
  GTK_DEBUG_TREE = 8;
  GTK_DEBUG_UPDATES = 16;
  GTK_DEBUG_KEYBINDINGS = 32;
  GTK_DEBUG_MULTIHEAD = 64;
  GTK_DEBUG_MODULES = 128;
  GTK_DEBUG_GEOMETRY = 256;
  GTK_DEBUG_ICONTHEME = 512;
  GTK_DEBUG_PRINTING = 1024;
  GTK_DEBUG_BUILDER = 2048;
  GTK_DEBUG_SIZE_REQUEST = 4096;

type
  TGtkDeleteType = Integer;
const
  { GtkDeleteType }
  GTK_DELETE_CHARS: TGtkDeleteType = 0;
  GTK_DELETE_WORD_ENDS: TGtkDeleteType = 1;
  GTK_DELETE_WORDS: TGtkDeleteType = 2;
  GTK_DELETE_DISPLAY_LINES: TGtkDeleteType = 3;
  GTK_DELETE_DISPLAY_LINE_ENDS: TGtkDeleteType = 4;
  GTK_DELETE_PARAGRAPH_ENDS: TGtkDeleteType = 5;
  GTK_DELETE_PARAGRAPHS: TGtkDeleteType = 6;
  GTK_DELETE_WHITESPACE: TGtkDeleteType = 7;

type
  TGtkEntryIconPosition = Integer;
const
  { GtkEntryIconPosition }
  GTK_ENTRY_ICON_PRIMARY: TGtkEntryIconPosition = 0;
  GTK_ENTRY_ICON_SECONDARY: TGtkEntryIconPosition = 1;

type
  TGtkImageType = Integer;
const
  { GtkImageType }
  GTK_IMAGE_EMPTY: TGtkImageType = 0;
  GTK_IMAGE_PIXBUF: TGtkImageType = 1;
  GTK_IMAGE_STOCK: TGtkImageType = 2;
  GTK_IMAGE_ICON_SET: TGtkImageType = 3;
  GTK_IMAGE_ANIMATION: TGtkImageType = 4;
  GTK_IMAGE_ICON_NAME: TGtkImageType = 5;
  GTK_IMAGE_GICON: TGtkImageType = 6;

type
  TGtkExpanderStyle = Integer;
const
  { GtkExpanderStyle }
  GTK_EXPANDER_COLLAPSED: TGtkExpanderStyle = 0;
  GTK_EXPANDER_SEMI_COLLAPSED: TGtkExpanderStyle = 1;
  GTK_EXPANDER_SEMI_EXPANDED: TGtkExpanderStyle = 2;
  GTK_EXPANDER_EXPANDED: TGtkExpanderStyle = 3;

  { GtkFileFilterFlags }
  GTK_FILE_FILTER_FILENAME = 1;
  GTK_FILE_FILTER_URI = 2;
  GTK_FILE_FILTER_DISPLAY_NAME = 4;
  GTK_FILE_FILTER_MIME_TYPE = 8;

type
  TGtkFileChooserAction = Integer;
const
  { GtkFileChooserAction }
  GTK_FILE_CHOOSER_ACTION_OPEN: TGtkFileChooserAction = 0;
  GTK_FILE_CHOOSER_ACTION_SAVE: TGtkFileChooserAction = 1;
  GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER: TGtkFileChooserAction = 2;
  GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER: TGtkFileChooserAction = 3;

type
  TGtkFileChooserConfirmation = Integer;
const
  { GtkFileChooserConfirmation }
  GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM: TGtkFileChooserConfirmation = 0;
  GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME: TGtkFileChooserConfirmation = 1;
  GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN: TGtkFileChooserConfirmation = 2;

type
  TGtkFileChooserError = Integer;
const
  { GtkFileChooserError }
  GTK_FILE_CHOOSER_ERROR_NONEXISTENT: TGtkFileChooserError = 0;
  GTK_FILE_CHOOSER_ERROR_BAD_FILENAME: TGtkFileChooserError = 1;
  GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS: TGtkFileChooserError = 2;
  GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME: TGtkFileChooserError = 3;

type
  TGtkIMPreeditStyle = Integer;
const
  { GtkIMPreeditStyle }
  GTK_IM_PREEDIT_NOTHING: TGtkIMPreeditStyle = 0;
  GTK_IM_PREEDIT_CALLBACK: TGtkIMPreeditStyle = 1;
  GTK_IM_PREEDIT_NONE: TGtkIMPreeditStyle = 2;

type
  TGtkIMStatusStyle = Integer;
const
  { GtkIMStatusStyle }
  GTK_IM_STATUS_NOTHING: TGtkIMStatusStyle = 0;
  GTK_IM_STATUS_CALLBACK: TGtkIMStatusStyle = 1;
  GTK_IM_STATUS_NONE: TGtkIMStatusStyle = 2;

  { GtkIconLookupFlags }
  GTK_ICON_LOOKUP_NO_SVG = 1;
  GTK_ICON_LOOKUP_FORCE_SVG = 2;
  GTK_ICON_LOOKUP_USE_BUILTIN = 4;
  GTK_ICON_LOOKUP_GENERIC_FALLBACK = 8;
  GTK_ICON_LOOKUP_FORCE_SIZE = 16;

  { GtkJunctionSides }
  GTK_JUNCTION_NONE = 0;
  GTK_JUNCTION_CORNER_TOPLEFT = 1;
  GTK_JUNCTION_CORNER_TOPRIGHT = 2;
  GTK_JUNCTION_CORNER_BOTTOMLEFT = 4;
  GTK_JUNCTION_CORNER_BOTTOMRIGHT = 8;
  GTK_JUNCTION_TOP = 3;
  GTK_JUNCTION_BOTTOM = 12;
  GTK_JUNCTION_LEFT = 5;
  GTK_JUNCTION_RIGHT = 10;

type
  TGtkIconThemeError = Integer;
const
  { GtkIconThemeError }
  GTK_ICON_THEME_NOT_FOUND: TGtkIconThemeError = 0;
  GTK_ICON_THEME_FAILED: TGtkIconThemeError = 1;

type
  TGtkScrollablePolicy = Integer;
const
  { GtkScrollablePolicy }
  GTK_SCROLL_MINIMUM: TGtkScrollablePolicy = 0;
  GTK_SCROLL_NATURAL: TGtkScrollablePolicy = 1;

type
  TGtkIconViewDropPosition = Integer;
const
  { GtkIconViewDropPosition }
  GTK_ICON_VIEW_NO_DROP: TGtkIconViewDropPosition = 0;
  GTK_ICON_VIEW_DROP_INTO: TGtkIconViewDropPosition = 1;
  GTK_ICON_VIEW_DROP_LEFT: TGtkIconViewDropPosition = 2;
  GTK_ICON_VIEW_DROP_RIGHT: TGtkIconViewDropPosition = 3;
  GTK_ICON_VIEW_DROP_ABOVE: TGtkIconViewDropPosition = 4;
  GTK_ICON_VIEW_DROP_BELOW: TGtkIconViewDropPosition = 5;

type
  TGtkSelectionMode = Integer;
const
  { GtkSelectionMode }
  GTK_SELECTION_NONE: TGtkSelectionMode = 0;
  GTK_SELECTION_SINGLE: TGtkSelectionMode = 1;
  GTK_SELECTION_BROWSE: TGtkSelectionMode = 2;
  GTK_SELECTION_MULTIPLE: TGtkSelectionMode = 3;

type
  TGtkMessageType = Integer;
const
  { GtkMessageType }
  GTK_MESSAGE_INFO: TGtkMessageType = 0;
  GTK_MESSAGE_WARNING: TGtkMessageType = 1;
  GTK_MESSAGE_QUESTION: TGtkMessageType = 2;
  GTK_MESSAGE_ERROR: TGtkMessageType = 3;
  GTK_MESSAGE_OTHER: TGtkMessageType = 4;

type
  TGtkSortType = Integer;
const
  { GtkSortType }
  GTK_SORT_ASCENDING: TGtkSortType = 0;
  GTK_SORT_DESCENDING: TGtkSortType = 1;

type
  TGtkPackDirection = Integer;
const
  { GtkPackDirection }
  GTK_PACK_DIRECTION_LTR: TGtkPackDirection = 0;
  GTK_PACK_DIRECTION_RTL: TGtkPackDirection = 1;
  GTK_PACK_DIRECTION_TTB: TGtkPackDirection = 2;
  GTK_PACK_DIRECTION_BTT: TGtkPackDirection = 3;

type
  TGtkMenuDirectionType = Integer;
const
  { GtkMenuDirectionType }
  GTK_MENU_DIR_PARENT: TGtkMenuDirectionType = 0;
  GTK_MENU_DIR_CHILD: TGtkMenuDirectionType = 1;
  GTK_MENU_DIR_NEXT: TGtkMenuDirectionType = 2;
  GTK_MENU_DIR_PREV: TGtkMenuDirectionType = 3;

type
  TGtkNotebookTab = Integer;
const
  { GtkNotebookTab }
  GTK_NOTEBOOK_TAB_FIRST: TGtkNotebookTab = 0;
  GTK_NOTEBOOK_TAB_LAST: TGtkNotebookTab = 1;

type
  TGtkNumberUpLayout = Integer;
const
  { GtkNumberUpLayout }
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM: TGtkNumberUpLayout = 0;
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP: TGtkNumberUpLayout = 1;
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM: TGtkNumberUpLayout = 2;
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP: TGtkNumberUpLayout = 3;
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT: TGtkNumberUpLayout = 4;
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT: TGtkNumberUpLayout = 5;
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT: TGtkNumberUpLayout = 6;
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT: TGtkNumberUpLayout = 7;

type
  TGtkPageOrientation = Integer;
const
  { GtkPageOrientation }
  GTK_PAGE_ORIENTATION_PORTRAIT: TGtkPageOrientation = 0;
  GTK_PAGE_ORIENTATION_LANDSCAPE: TGtkPageOrientation = 1;
  GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT: TGtkPageOrientation = 2;
  GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE: TGtkPageOrientation = 3;

type
  TGtkPageSet = Integer;
const
  { GtkPageSet }
  GTK_PAGE_SET_ALL: TGtkPageSet = 0;
  GTK_PAGE_SET_EVEN: TGtkPageSet = 1;
  GTK_PAGE_SET_ODD: TGtkPageSet = 2;

type
  TGtkUnit = Integer;
const
  { GtkUnit }
  GTK_UNIT_PIXEL: TGtkUnit = 0;
  GTK_UNIT_POINTS: TGtkUnit = 1;
  GTK_UNIT_INCH: TGtkUnit = 2;
  GTK_UNIT_MM: TGtkUnit = 3;

type
  TGtkPolicyType = Integer;
const
  { GtkPolicyType }
  GTK_POLICY_ALWAYS: TGtkPolicyType = 0;
  GTK_POLICY_AUTOMATIC: TGtkPolicyType = 1;
  GTK_POLICY_NEVER: TGtkPolicyType = 2;

type
  TGtkPrintDuplex = Integer;
const
  { GtkPrintDuplex }
  GTK_PRINT_DUPLEX_SIMPLEX: TGtkPrintDuplex = 0;
  GTK_PRINT_DUPLEX_HORIZONTAL: TGtkPrintDuplex = 1;
  GTK_PRINT_DUPLEX_VERTICAL: TGtkPrintDuplex = 2;

type
  TGtkPrintError = Integer;
const
  { GtkPrintError }
  GTK_PRINT_ERROR_GENERAL: TGtkPrintError = 0;
  GTK_PRINT_ERROR_INTERNAL_ERROR: TGtkPrintError = 1;
  GTK_PRINT_ERROR_NOMEM: TGtkPrintError = 2;
  GTK_PRINT_ERROR_INVALID_FILE: TGtkPrintError = 3;

type
  TGtkPrintOperationAction = Integer;
const
  { GtkPrintOperationAction }
  GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG: TGtkPrintOperationAction = 0;
  GTK_PRINT_OPERATION_ACTION_PRINT: TGtkPrintOperationAction = 1;
  GTK_PRINT_OPERATION_ACTION_PREVIEW: TGtkPrintOperationAction = 2;
  GTK_PRINT_OPERATION_ACTION_EXPORT: TGtkPrintOperationAction = 3;

type
  TGtkPrintOperationResult = Integer;
const
  { GtkPrintOperationResult }
  GTK_PRINT_OPERATION_RESULT_ERROR: TGtkPrintOperationResult = 0;
  GTK_PRINT_OPERATION_RESULT_APPLY: TGtkPrintOperationResult = 1;
  GTK_PRINT_OPERATION_RESULT_CANCEL: TGtkPrintOperationResult = 2;
  GTK_PRINT_OPERATION_RESULT_IN_PROGRESS: TGtkPrintOperationResult = 3;

type
  TGtkPrintPages = Integer;
const
  { GtkPrintPages }
  GTK_PRINT_PAGES_ALL: TGtkPrintPages = 0;
  GTK_PRINT_PAGES_CURRENT: TGtkPrintPages = 1;
  GTK_PRINT_PAGES_RANGES: TGtkPrintPages = 2;
  GTK_PRINT_PAGES_SELECTION: TGtkPrintPages = 3;

type
  TGtkPrintQuality = Integer;
const
  { GtkPrintQuality }
  GTK_PRINT_QUALITY_LOW: TGtkPrintQuality = 0;
  GTK_PRINT_QUALITY_NORMAL: TGtkPrintQuality = 1;
  GTK_PRINT_QUALITY_HIGH: TGtkPrintQuality = 2;
  GTK_PRINT_QUALITY_DRAFT: TGtkPrintQuality = 3;

type
  TGtkPrintStatus = Integer;
const
  { GtkPrintStatus }
  GTK_PRINT_STATUS_INITIAL: TGtkPrintStatus = 0;
  GTK_PRINT_STATUS_PREPARING: TGtkPrintStatus = 1;
  GTK_PRINT_STATUS_GENERATING_DATA: TGtkPrintStatus = 2;
  GTK_PRINT_STATUS_SENDING_DATA: TGtkPrintStatus = 3;
  GTK_PRINT_STATUS_PENDING: TGtkPrintStatus = 4;
  GTK_PRINT_STATUS_PENDING_ISSUE: TGtkPrintStatus = 5;
  GTK_PRINT_STATUS_PRINTING: TGtkPrintStatus = 6;
  GTK_PRINT_STATUS_FINISHED: TGtkPrintStatus = 7;
  GTK_PRINT_STATUS_FINISHED_ABORTED: TGtkPrintStatus = 8;

  { GtkRcFlags }
  GTK_RC_FG = 1;
  GTK_RC_BG = 2;
  GTK_RC_TEXT = 4;
  GTK_RC_BASE = 8;

type
  TGtkRcTokenType = Integer;
const
  { GtkRcTokenType }
  GTK_RC_TOKEN_INVALID: TGtkRcTokenType = 270;
  GTK_RC_TOKEN_INCLUDE: TGtkRcTokenType = 271;
  GTK_RC_TOKEN_NORMAL: TGtkRcTokenType = 272;
  GTK_RC_TOKEN_ACTIVE: TGtkRcTokenType = 273;
  GTK_RC_TOKEN_PRELIGHT: TGtkRcTokenType = 274;
  GTK_RC_TOKEN_SELECTED: TGtkRcTokenType = 275;
  GTK_RC_TOKEN_INSENSITIVE: TGtkRcTokenType = 276;
  GTK_RC_TOKEN_FG: TGtkRcTokenType = 277;
  GTK_RC_TOKEN_BG: TGtkRcTokenType = 278;
  GTK_RC_TOKEN_TEXT: TGtkRcTokenType = 279;
  GTK_RC_TOKEN_BASE: TGtkRcTokenType = 280;
  GTK_RC_TOKEN_XTHICKNESS: TGtkRcTokenType = 281;
  GTK_RC_TOKEN_YTHICKNESS: TGtkRcTokenType = 282;
  GTK_RC_TOKEN_FONT: TGtkRcTokenType = 283;
  GTK_RC_TOKEN_FONTSET: TGtkRcTokenType = 284;
  GTK_RC_TOKEN_FONT_NAME: TGtkRcTokenType = 285;
  GTK_RC_TOKEN_BG_PIXMAP: TGtkRcTokenType = 286;
  GTK_RC_TOKEN_PIXMAP_PATH: TGtkRcTokenType = 287;
  GTK_RC_TOKEN_STYLE: TGtkRcTokenType = 288;
  GTK_RC_TOKEN_BINDING: TGtkRcTokenType = 289;
  GTK_RC_TOKEN_BIND: TGtkRcTokenType = 290;
  GTK_RC_TOKEN_WIDGET: TGtkRcTokenType = 291;
  GTK_RC_TOKEN_WIDGET_CLASS: TGtkRcTokenType = 292;
  GTK_RC_TOKEN_CLASS: TGtkRcTokenType = 293;
  GTK_RC_TOKEN_LOWEST: TGtkRcTokenType = 294;
  GTK_RC_TOKEN_GTK: TGtkRcTokenType = 295;
  GTK_RC_TOKEN_APPLICATION: TGtkRcTokenType = 296;
  GTK_RC_TOKEN_THEME: TGtkRcTokenType = 297;
  GTK_RC_TOKEN_RC: TGtkRcTokenType = 298;
  GTK_RC_TOKEN_HIGHEST: TGtkRcTokenType = 299;
  GTK_RC_TOKEN_ENGINE: TGtkRcTokenType = 300;
  GTK_RC_TOKEN_MODULE_PATH: TGtkRcTokenType = 301;
  GTK_RC_TOKEN_IM_MODULE_PATH: TGtkRcTokenType = 302;
  GTK_RC_TOKEN_IM_MODULE_FILE: TGtkRcTokenType = 303;
  GTK_RC_TOKEN_STOCK: TGtkRcTokenType = 304;
  GTK_RC_TOKEN_LTR: TGtkRcTokenType = 305;
  GTK_RC_TOKEN_RTL: TGtkRcTokenType = 306;
  GTK_RC_TOKEN_COLOR: TGtkRcTokenType = 307;
  GTK_RC_TOKEN_UNBIND: TGtkRcTokenType = 308;
  GTK_RC_TOKEN_LAST: TGtkRcTokenType = 309;

type
  TGtkRecentSortType = Integer;
const
  { GtkRecentSortType }
  GTK_RECENT_SORT_NONE: TGtkRecentSortType = 0;
  GTK_RECENT_SORT_MRU: TGtkRecentSortType = 1;
  GTK_RECENT_SORT_LRU: TGtkRecentSortType = 2;
  GTK_RECENT_SORT_CUSTOM: TGtkRecentSortType = 3;

  { GtkRecentFilterFlags }
  GTK_RECENT_FILTER_URI = 1;
  GTK_RECENT_FILTER_DISPLAY_NAME = 2;
  GTK_RECENT_FILTER_MIME_TYPE = 4;
  GTK_RECENT_FILTER_APPLICATION = 8;
  GTK_RECENT_FILTER_GROUP = 16;
  GTK_RECENT_FILTER_AGE = 32;

type
  TGtkRecentChooserError = Integer;
const
  { GtkRecentChooserError }
  GTK_RECENT_CHOOSER_ERROR_NOT_FOUND: TGtkRecentChooserError = 0;
  GTK_RECENT_CHOOSER_ERROR_INVALID_URI: TGtkRecentChooserError = 1;

type
  TGtkRecentManagerError = Integer;
const
  { GtkRecentManagerError }
  GTK_RECENT_MANAGER_ERROR_NOT_FOUND: TGtkRecentManagerError = 0;
  GTK_RECENT_MANAGER_ERROR_INVALID_URI: TGtkRecentManagerError = 1;
  GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING: TGtkRecentManagerError = 2;
  GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED: TGtkRecentManagerError = 3;
  GTK_RECENT_MANAGER_ERROR_READ: TGtkRecentManagerError = 4;
  GTK_RECENT_MANAGER_ERROR_WRITE: TGtkRecentManagerError = 5;
  GTK_RECENT_MANAGER_ERROR_UNKNOWN: TGtkRecentManagerError = 6;

type
  TGtkResponseType = Integer;
const
  { GtkResponseType }
  GTK_RESPONSE_NONE: TGtkResponseType = -1;
  GTK_RESPONSE_REJECT: TGtkResponseType = -2;
  GTK_RESPONSE_ACCEPT: TGtkResponseType = -3;
  GTK_RESPONSE_DELETE_EVENT: TGtkResponseType = -4;
  GTK_RESPONSE_OK: TGtkResponseType = -5;
  GTK_RESPONSE_CANCEL: TGtkResponseType = -6;
  GTK_RESPONSE_CLOSE: TGtkResponseType = -7;
  GTK_RESPONSE_YES: TGtkResponseType = -8;
  GTK_RESPONSE_NO: TGtkResponseType = -9;
  GTK_RESPONSE_APPLY: TGtkResponseType = -10;
  GTK_RESPONSE_HELP: TGtkResponseType = -11;

type
  TGtkScrollStep = Integer;
const
  { GtkScrollStep }
  GTK_SCROLL_STEPS: TGtkScrollStep = 0;
  GTK_SCROLL_PAGES: TGtkScrollStep = 1;
  GTK_SCROLL_ENDS: TGtkScrollStep = 2;
  GTK_SCROLL_HORIZONTAL_STEPS: TGtkScrollStep = 3;
  GTK_SCROLL_HORIZONTAL_PAGES: TGtkScrollStep = 4;
  GTK_SCROLL_HORIZONTAL_ENDS: TGtkScrollStep = 5;

type
  TGtkToolbarStyle = Integer;
const
  { GtkToolbarStyle }
  GTK_TOOLBAR_ICONS: TGtkToolbarStyle = 0;
  GTK_TOOLBAR_TEXT: TGtkToolbarStyle = 1;
  GTK_TOOLBAR_BOTH: TGtkToolbarStyle = 2;
  GTK_TOOLBAR_BOTH_HORIZ: TGtkToolbarStyle = 3;

type
  TGtkSizeGroupMode = Integer;
const
  { GtkSizeGroupMode }
  GTK_SIZE_GROUP_NONE: TGtkSizeGroupMode = 0;
  GTK_SIZE_GROUP_HORIZONTAL: TGtkSizeGroupMode = 1;
  GTK_SIZE_GROUP_VERTICAL: TGtkSizeGroupMode = 2;
  GTK_SIZE_GROUP_BOTH: TGtkSizeGroupMode = 3;

type
  TGtkSpinButtonUpdatePolicy = Integer;
const
  { GtkSpinButtonUpdatePolicy }
  GTK_UPDATE_ALWAYS: TGtkSpinButtonUpdatePolicy = 0;
  GTK_UPDATE_IF_VALID: TGtkSpinButtonUpdatePolicy = 1;

type
  TGtkSpinType = Integer;
const
  { GtkSpinType }
  GTK_SPIN_STEP_FORWARD: TGtkSpinType = 0;
  GTK_SPIN_STEP_BACKWARD: TGtkSpinType = 1;
  GTK_SPIN_PAGE_FORWARD: TGtkSpinType = 2;
  GTK_SPIN_PAGE_BACKWARD: TGtkSpinType = 3;
  GTK_SPIN_HOME: TGtkSpinType = 4;
  GTK_SPIN_END: TGtkSpinType = 5;
  GTK_SPIN_USER_DEFINED: TGtkSpinType = 6;

  { GtkTargetFlags }
  GTK_TARGET_SAME_APP = 1;
  GTK_TARGET_SAME_WIDGET = 2;
  GTK_TARGET_OTHER_APP = 4;
  GTK_TARGET_OTHER_WIDGET = 8;

  { GtkTextSearchFlags }
  GTK_TEXT_SEARCH_VISIBLE_ONLY = 1;
  GTK_TEXT_SEARCH_TEXT_ONLY = 2;
  GTK_TEXT_SEARCH_CASE_INSENSITIVE = 4;

type
  TGtkTextBufferTargetInfo = Integer;
const
  { GtkTextBufferTargetInfo }
  GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS: TGtkTextBufferTargetInfo = -1;
  GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT: TGtkTextBufferTargetInfo = -2;
  GTK_TEXT_BUFFER_TARGET_INFO_TEXT: TGtkTextBufferTargetInfo = -3;

type
  TGtkTextWindowType = Integer;
const
  { GtkTextWindowType }
  GTK_TEXT_WINDOW_PRIVATE: TGtkTextWindowType = 0;
  GTK_TEXT_WINDOW_WIDGET: TGtkTextWindowType = 1;
  GTK_TEXT_WINDOW_TEXT: TGtkTextWindowType = 2;
  GTK_TEXT_WINDOW_LEFT: TGtkTextWindowType = 3;
  GTK_TEXT_WINDOW_RIGHT: TGtkTextWindowType = 4;
  GTK_TEXT_WINDOW_TOP: TGtkTextWindowType = 5;
  GTK_TEXT_WINDOW_BOTTOM: TGtkTextWindowType = 6;

  { GtkToolPaletteDragTargets }
  GTK_TOOL_PALETTE_DRAG_ITEMS = 1;
  GTK_TOOL_PALETTE_DRAG_GROUPS = 2;

type
  TGtkToolbarSpaceStyle = Integer;
const
  { GtkToolbarSpaceStyle }
  GTK_TOOLBAR_SPACE_EMPTY: TGtkToolbarSpaceStyle = 0;
  GTK_TOOLBAR_SPACE_LINE: TGtkToolbarSpaceStyle = 1;

type
  TGtkTreeViewColumnSizing = Integer;
const
  { GtkTreeViewColumnSizing }
  GTK_TREE_VIEW_COLUMN_GROW_ONLY: TGtkTreeViewColumnSizing = 0;
  GTK_TREE_VIEW_COLUMN_AUTOSIZE: TGtkTreeViewColumnSizing = 1;
  GTK_TREE_VIEW_COLUMN_FIXED: TGtkTreeViewColumnSizing = 2;

type
  TGtkTreeViewDropPosition = Integer;
const
  { GtkTreeViewDropPosition }
  GTK_TREE_VIEW_DROP_BEFORE: TGtkTreeViewDropPosition = 0;
  GTK_TREE_VIEW_DROP_AFTER: TGtkTreeViewDropPosition = 1;
  GTK_TREE_VIEW_DROP_INTO_OR_BEFORE: TGtkTreeViewDropPosition = 2;
  GTK_TREE_VIEW_DROP_INTO_OR_AFTER: TGtkTreeViewDropPosition = 3;

type
  TGtkTreeViewGridLines = Integer;
const
  { GtkTreeViewGridLines }
  GTK_TREE_VIEW_GRID_LINES_NONE: TGtkTreeViewGridLines = 0;
  GTK_TREE_VIEW_GRID_LINES_HORIZONTAL: TGtkTreeViewGridLines = 1;
  GTK_TREE_VIEW_GRID_LINES_VERTICAL: TGtkTreeViewGridLines = 2;
  GTK_TREE_VIEW_GRID_LINES_BOTH: TGtkTreeViewGridLines = 3;

  { GtkUIManagerItemType }
  GTK_UI_MANAGER_AUTO = 0;
  GTK_UI_MANAGER_MENUBAR = 1;
  GTK_UI_MANAGER_MENU = 2;
  GTK_UI_MANAGER_TOOLBAR = 4;
  GTK_UI_MANAGER_PLACEHOLDER = 8;
  GTK_UI_MANAGER_POPUP = 16;
  GTK_UI_MANAGER_MENUITEM = 32;
  GTK_UI_MANAGER_TOOLITEM = 64;
  GTK_UI_MANAGER_SEPARATOR = 128;
  GTK_UI_MANAGER_ACCELERATOR = 256;
  GTK_UI_MANAGER_POPUP_WITH_ACCELS = 512;

type
  TGtkWindowPosition = Integer;
const
  { GtkWindowPosition }
  GTK_WIN_POS_NONE: TGtkWindowPosition = 0;
  GTK_WIN_POS_CENTER: TGtkWindowPosition = 1;
  GTK_WIN_POS_MOUSE: TGtkWindowPosition = 2;
  GTK_WIN_POS_CENTER_ALWAYS: TGtkWindowPosition = 3;
  GTK_WIN_POS_CENTER_ON_PARENT: TGtkWindowPosition = 4;

type
  TGtkWindowType = Integer;
const
  { GtkWindowType }
  GTK_WINDOW_TOPLEVEL: TGtkWindowType = 0;
  GTK_WINDOW_POPUP: TGtkWindowType = 1;

type
  TGtkWrapMode = Integer;
const
  { GtkWrapMode }
  GTK_WRAP_NONE: TGtkWrapMode = 0;
  GTK_WRAP_CHAR: TGtkWrapMode = 1;
  GTK_WRAP_WORD: TGtkWrapMode = 2;
  GTK_WRAP_WORD_CHAR: TGtkWrapMode = 3;
type

  PPGtkAllocation = ^PGtkAllocation;
  PGtkAllocation = ^TGtkAllocation;
  TGtkAllocation = TGdkRectangle;

  PPGtkBuildable = ^PGtkBuildable;
  PGtkBuildable = ^TGtkBuildable;

  PPGtkBuilder = ^PGtkBuilder;
  PGtkBuilder = ^TGtkBuilder;
  TGtkBuildable = object
    procedure add_child(builder: PGtkBuilder; child: PGObject; type_: Pgchar); cdecl; inline;
    function construct_child(builder: PGtkBuilder; name: Pgchar): PGObject; cdecl; inline;
    procedure custom_finished(builder: PGtkBuilder; child: PGObject; tagname: Pgchar; data: gpointer); cdecl; inline;
    procedure custom_tag_end(builder: PGtkBuilder; child: PGObject; tagname: Pgchar; data: Pgpointer); cdecl; inline;
    function custom_tag_start(builder: PGtkBuilder; child: PGObject; tagname: Pgchar; parser: PGMarkupParser; data: Pgpointer): gboolean; cdecl; inline;
    function get_internal_child(builder: PGtkBuilder; childname: Pgchar): PGObject; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    procedure parser_finished(builder: PGtkBuilder); cdecl; inline;
    procedure set_buildable_property(builder: PGtkBuilder; name: Pgchar; value: PGValue); cdecl; inline;
    procedure set_name(name: Pgchar); cdecl; inline;
  end;

  PPGtkWidget = ^PGtkWidget;
  PGtkWidget = ^TGtkWidget;

  PPGtkTextDirection = ^PGtkTextDirection;
  PGtkTextDirection = ^TGtkTextDirection;

  PPGtkStyle = ^PGtkStyle;
  PGtkStyle = ^TGtkStyle;

  PPGtkAccelGroup = ^PGtkAccelGroup;
  PGtkAccelGroup = ^TGtkAccelGroup;

  PPGtkAccelFlags = ^PGtkAccelFlags;
  PGtkAccelFlags = ^TGtkAccelFlags;
  TGtkAccelFlags = packed object(TBitObject32)
  public
    property visible: DWord index 1 read GetBit write SetBit;
    property locked: DWord index 2 read GetBit write SetBit;
    property mask: DWord index 7 read GetBit write SetBit;
  end;


  PPGtkDirectionType = ^PGtkDirectionType;
  PGtkDirectionType = ^TGtkDirectionType;

  PPGtkOrientation = ^PGtkOrientation;
  PGtkOrientation = ^TGtkOrientation;

  PPGtkTargetList = ^PGtkTargetList;
  PGtkTargetList = ^TGtkTargetList;

  PPGtkDestDefaults = ^PGtkDestDefaults;
  PGtkDestDefaults = ^TGtkDestDefaults;
  TGtkDestDefaults = packed object(TBitObject32)
  public
    property motion: DWord index 1 read GetBit write SetBit;
    property highlight: DWord index 2 read GetBit write SetBit;
    property drop: DWord index 4 read GetBit write SetBit;
    property all: DWord index 7 read GetBit write SetBit;
  end;


  PPPGtkTargetEntry = ^PPGtkTargetEntry;
  PPGtkTargetEntry = ^PGtkTargetEntry;
  PGtkTargetEntry = ^TGtkTargetEntry;

  PPGtkClipboard = ^PGtkClipboard;
  PGtkClipboard = ^TGtkClipboard;

  PPGtkAlign = ^PGtkAlign;
  PGtkAlign = ^TGtkAlign;

  PPGtkRcStyle = ^PGtkRcStyle;
  PGtkRcStyle = ^TGtkRcStyle;

  PPGtkWidgetPath = ^PGtkWidgetPath;
  PGtkWidgetPath = ^TGtkWidgetPath;

  PPGtkRequisition = ^PGtkRequisition;
  PGtkRequisition = ^TGtkRequisition;

  PPGtkSizeRequestMode = ^PGtkSizeRequestMode;
  PGtkSizeRequestMode = ^TGtkSizeRequestMode;

  PPGtkSettings = ^PGtkSettings;
  PGtkSettings = ^TGtkSettings;

  PPGtkStateType = ^PGtkStateType;
  PGtkStateType = ^TGtkStateType;

  PPGtkStateFlags = ^PGtkStateFlags;
  PGtkStateFlags = ^TGtkStateFlags;
  TGtkStateFlags = packed object(TBitObject32)
  public
    property normal: DWord index 0 read GetBit write SetBit;
    property active: DWord index 1 read GetBit write SetBit;
    property prelight: DWord index 2 read GetBit write SetBit;
    property selected: DWord index 4 read GetBit write SetBit;
    property insensitive: DWord index 8 read GetBit write SetBit;
    property inconsistent: DWord index 16 read GetBit write SetBit;
    property focused: DWord index 32 read GetBit write SetBit;
  end;


  PPGtkStyleContext = ^PGtkStyleContext;
  PGtkStyleContext = ^TGtkStyleContext;

  PPGtkWidgetPrivate = ^PGtkWidgetPrivate;
  PGtkWidgetPrivate = ^TGtkWidgetPrivate;
  TGtkWidget = object(TGInitiallyUnowned)
    priv: PGtkWidgetPrivate;
    //function new(type_: TGType; first_property_name: Pgchar; args: array of const): PGtkWidget; cdecl; inline; static;
    function get_default_direction: TGtkTextDirection; cdecl; inline; static;
    function get_default_style: PGtkStyle; cdecl; inline; static;
    procedure pop_composite_child; cdecl; inline; static;
    procedure push_composite_child; cdecl; inline; static;
    procedure set_default_direction(dir: TGtkTextDirection); cdecl; inline; static;
    function activate: gboolean; cdecl; inline;
    procedure add_accelerator(accel_signal: Pgchar; accel_group: PGtkAccelGroup; accel_key: guint; accel_mods: TGdkModifierType; accel_flags: TGtkAccelFlags); cdecl; inline;
    procedure add_device_events(device: PGdkDevice; events: TGdkEventMask); cdecl; inline;
    procedure add_events(events: gint); cdecl; inline;
    procedure add_mnemonic_label(label_: PGtkWidget); cdecl; inline;
    function can_activate_accel(signal_id: guint): gboolean; cdecl; inline;
    function child_focus(direction: TGtkDirectionType): gboolean; cdecl; inline;
    procedure child_notify(child_property: Pgchar); cdecl; inline;
    procedure class_path(path_length: Pguint; path: PPgchar; path_reversed: PPgchar); cdecl; inline;
    function compute_expand(orientation: TGtkOrientation): gboolean; cdecl; inline;
    function create_pango_context: PPangoContext; cdecl; inline;
    function create_pango_layout(text: Pgchar): PPangoLayout; cdecl; inline;
    procedure destroy_; cdecl; inline;
    procedure destroyed(widget_pointer: PPGtkWidget); cdecl; inline;
    function device_is_shadowed(device: PGdkDevice): gboolean; cdecl; inline;
    function drag_begin(targets: PGtkTargetList; actions: TGdkDragAction; button: gint; event: PGdkEvent): PGdkDragContext; cdecl; inline;
    function drag_check_threshold(start_x: gint; start_y: gint; current_x: gint; current_y: gint): gboolean; cdecl; inline;
    procedure drag_dest_add_image_targets; cdecl; inline;
    procedure drag_dest_add_text_targets; cdecl; inline;
    procedure drag_dest_add_uri_targets; cdecl; inline;
    function drag_dest_find_target(context: PGdkDragContext; target_list: PGtkTargetList): TGdkAtom; cdecl; inline;
    function drag_dest_get_target_list: PGtkTargetList; cdecl; inline;
    function drag_dest_get_track_motion: gboolean; cdecl; inline;
    procedure drag_dest_set(flags: TGtkDestDefaults; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; inline;
    procedure drag_dest_set_proxy(proxy_window: PGdkWindow; protocol: TGdkDragProtocol; use_coordinates: gboolean); cdecl; inline;
    procedure drag_dest_set_target_list(target_list: PGtkTargetList); cdecl; inline;
    procedure drag_dest_set_track_motion(track_motion: gboolean); cdecl; inline;
    procedure drag_dest_unset; cdecl; inline;
    procedure drag_get_data(context: PGdkDragContext; target: TGdkAtom; time_: guint32); cdecl; inline;
    procedure drag_highlight; cdecl; inline;
    procedure drag_source_add_image_targets; cdecl; inline;
    procedure drag_source_add_text_targets; cdecl; inline;
    procedure drag_source_add_uri_targets; cdecl; inline;
    function drag_source_get_target_list: PGtkTargetList; cdecl; inline;
    procedure drag_source_set(start_button_mask: TGdkModifierType; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; inline;
    procedure drag_source_set_icon_gicon(icon: PGIcon); cdecl; inline;
    procedure drag_source_set_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure drag_source_set_icon_pixbuf(pixbuf: PGdkPixbuf); cdecl; inline;
    procedure drag_source_set_icon_stock(stock_id: Pgchar); cdecl; inline;
    procedure drag_source_set_target_list(target_list: PGtkTargetList); cdecl; inline;
    procedure drag_source_unset; cdecl; inline;
    procedure drag_unhighlight; cdecl; inline;
    procedure draw(cr: Pcairo_t); cdecl; inline;
    procedure ensure_style; cdecl; inline;
    procedure error_bell; cdecl; inline;
    function event(event: PGdkEvent): gboolean; cdecl; inline;
    procedure freeze_child_notify; cdecl; inline;
    function get_accessible: PAtkObject; cdecl; inline;
    function get_allocated_height: gint; cdecl; inline;
    function get_allocated_width: gint; cdecl; inline;
    procedure get_allocation(allocation: PGtkAllocation); cdecl; inline;
    function get_ancestor(widget_type: TGType): PGtkWidget; cdecl; inline;
    function get_app_paintable: gboolean; cdecl; inline;
    function get_can_default: gboolean; cdecl; inline;
    function get_can_focus: gboolean; cdecl; inline;
    
    function get_child_visible: gboolean; cdecl; inline;
    function get_clipboard(selection: TGdkAtom): PGtkClipboard; cdecl; inline;
    function get_composite_name: Pgchar; cdecl; inline;
    function get_device_enabled(device: PGdkDevice): gboolean; cdecl; inline;
    function get_device_events(device: PGdkDevice): TGdkEventMask; cdecl; inline;
    function get_direction: TGtkTextDirection; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_double_buffered: gboolean; cdecl; inline;
    function get_events: gint; cdecl; inline;
    function get_halign: TGtkAlign; cdecl; inline;
    function get_has_tooltip: gboolean; cdecl; inline;
    function get_has_window: gboolean; cdecl; inline;
    function get_hexpand: gboolean; cdecl; inline;
    function get_hexpand_set: gboolean; cdecl; inline;
    function get_mapped: gboolean; cdecl; inline;
    function get_margin_bottom: gint; cdecl; inline;
    function get_margin_left: gint; cdecl; inline;
    function get_margin_right: gint; cdecl; inline;
    function get_margin_top: gint; cdecl; inline;
    function get_modifier_style: PGtkRcStyle; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_no_show_all: gboolean; cdecl; inline;
    function get_pango_context: PPangoContext; cdecl; inline;
    function get_parent: PGtkWidget; cdecl; inline;
    function get_parent_window: PGdkWindow; cdecl; inline;
    function get_path: PGtkWidgetPath; cdecl; inline;
    procedure get_pointer(x: Pgint; y: Pgint); cdecl; inline;
    procedure get_preferred_height(minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_height_for_width(width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_size(minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl; inline;
    procedure get_preferred_width(minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    procedure get_preferred_width_for_height(height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    function get_realized: gboolean; cdecl; inline;
    function get_receives_default: gboolean; cdecl; inline;
    function get_request_mode: TGtkSizeRequestMode; cdecl; inline;
    
    function get_root_window: PGdkWindow; cdecl; inline;
    function get_screen: PGdkScreen; cdecl; inline;
    function get_sensitive: gboolean; cdecl; inline;
    function get_settings: PGtkSettings; cdecl; inline;
    procedure get_size_request(width: Pgint; height: Pgint); cdecl; inline;
    function get_state: TGtkStateType; cdecl; inline;
    function get_state_flags: TGtkStateFlags; cdecl; inline;
    function get_style: PGtkStyle; cdecl; inline;
    function get_style_context: PGtkStyleContext; cdecl; inline;
    function get_support_multidevice: gboolean; cdecl; inline;
    function get_tooltip_markup: Pgchar; cdecl; inline;
    function get_tooltip_text: Pgchar; cdecl; inline;
    function get_tooltip_window: PAtkWindow; cdecl; inline;
    function get_toplevel: PGtkWidget; cdecl; inline;
    function get_valign: TGtkAlign; cdecl; inline;
    function get_vexpand: gboolean; cdecl; inline;
    function get_vexpand_set: gboolean; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    function get_visual: PGdkVisual; cdecl; inline;
    function get_window: PGdkWindow; cdecl; inline;
    procedure grab_add; cdecl; inline;
    procedure grab_default; cdecl; inline;
    procedure grab_focus; cdecl; inline;
    procedure grab_remove; cdecl; inline;
    function has_default: gboolean; cdecl; inline;
    function has_focus: gboolean; cdecl; inline;
    function has_grab: gboolean; cdecl; inline;
    function has_rc_style: gboolean; cdecl; inline;
    function has_screen: gboolean; cdecl; inline;
    function has_visible_focus: gboolean; cdecl; inline;
    procedure hide; cdecl; inline;
    function hide_on_delete: gboolean; cdecl; inline;
    function in_destruction: gboolean; cdecl; inline;
    procedure input_shape_combine_region(region: Pcairo_region_t); cdecl; inline;
    function intersect(area: PGdkRectangle; intersection: PGdkRectangle): gboolean; cdecl; inline;
    function is_ancestor(ancestor: PGtkWidget): gboolean; cdecl; inline;
    function is_composited: gboolean; cdecl; inline;
    function is_drawable: gboolean; cdecl; inline;
    function is_focus: gboolean; cdecl; inline;
    function is_sensitive: gboolean; cdecl; inline;
    function is_toplevel: gboolean; cdecl; inline;
    function keynav_failed(direction: TGtkDirectionType): gboolean; cdecl; inline;
    function list_accel_closures: PGList; cdecl; inline;
    function list_mnemonic_labels: PGList; cdecl; inline;
    procedure map; cdecl; inline;
    function mnemonic_activate(group_cycling: gboolean): gboolean; cdecl; inline;
    procedure modify_base(state: TGtkStateType; color: PGdkColor); cdecl; inline;
    procedure modify_bg(state: TGtkStateType; color: PGdkColor); cdecl; inline;
    procedure modify_cursor(primary: PGdkColor; secondary: PGdkColor); cdecl; inline;
    procedure modify_fg(state: TGtkStateType; color: PGdkColor); cdecl; inline;
    procedure modify_font(font_desc: PPangoFontDescription); cdecl; inline;
    procedure modify_style(style: PGtkRcStyle); cdecl; inline;
    procedure modify_text(state: TGtkStateType; color: PGdkColor); cdecl; inline;
    procedure override_background_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl; inline;
    procedure override_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl; inline;
    procedure override_cursor(cursor: PGdkRGBA; secondary_cursor: PGdkRGBA); cdecl; inline;
    procedure override_font(font_desc: PPangoFontDescription); cdecl; inline;
    procedure override_symbolic_color(name: Pgchar; color: PGdkRGBA); cdecl; inline;
    procedure path(path_length: Pguint; path: PPgchar; path_reversed: PPgchar); cdecl; inline;
    procedure queue_compute_expand; cdecl; inline;
    procedure queue_draw; cdecl; inline;
    procedure queue_draw_area(x: gint; y: gint; width: gint; height: gint); cdecl; inline;
    procedure queue_draw_region(region: Pcairo_region_t); cdecl; inline;
    procedure queue_resize; cdecl; inline;
    procedure queue_resize_no_redraw; cdecl; inline;
    procedure realize; cdecl; inline;
    function region_intersect(region: Pcairo_region_t): Pcairo_region_t; cdecl; inline;
    function remove_accelerator(accel_group: PGtkAccelGroup; accel_key: guint; accel_mods: TGdkModifierType): gboolean; cdecl; inline;
    procedure remove_mnemonic_label(label_: PGtkWidget); cdecl; inline;
    
    function render_icon_pixbuf(stock_id: Pgchar; size: gint): PGdkPixbuf; cdecl; inline;
    procedure reparent(new_parent: PGtkWidget); cdecl; inline;
    procedure reset_rc_styles; cdecl; inline;
    procedure reset_style; cdecl; inline;
    function send_expose(event: PGdkEvent): gint; cdecl; inline;
    function send_focus_change(event: PGdkEvent): gboolean; cdecl; inline;
    procedure set_accel_path(accel_path: Pgchar; accel_group: PGtkAccelGroup); cdecl; inline;
    procedure set_allocation(allocation: PGtkAllocation); cdecl; inline;
    procedure set_app_paintable(app_paintable: gboolean); cdecl; inline;
    procedure set_can_default(can_default: gboolean); cdecl; inline;
    procedure set_can_focus(can_focus: gboolean); cdecl; inline;
    procedure set_child_visible(is_visible: gboolean); cdecl; inline;
    procedure set_composite_name(name: Pgchar); cdecl; inline;
    procedure set_device_enabled(device: PGdkDevice; enabled: gboolean); cdecl; inline;
    procedure set_device_events(device: PGdkDevice; events: TGdkEventMask); cdecl; inline;
    procedure set_direction(dir: TGtkTextDirection); cdecl; inline;
    procedure set_double_buffered(double_buffered: gboolean); cdecl; inline;
    procedure set_events(events: gint); cdecl; inline;
    procedure set_halign(align: TGtkAlign); cdecl; inline;
    procedure set_has_tooltip(has_tooltip: gboolean); cdecl; inline;
    procedure set_has_window(has_window: gboolean); cdecl; inline;
    procedure set_hexpand(expand: gboolean); cdecl; inline;
    procedure set_hexpand_set(set_: gboolean); cdecl; inline;
    procedure set_mapped(mapped: gboolean); cdecl; inline;
    procedure set_margin_bottom(margin: gint); cdecl; inline;
    procedure set_margin_left(margin: gint); cdecl; inline;
    procedure set_margin_right(margin: gint); cdecl; inline;
    procedure set_margin_top(margin: gint); cdecl; inline;
    procedure set_name(name: Pgchar); cdecl; inline;
    procedure set_no_show_all(no_show_all: gboolean); cdecl; inline;
    procedure set_parent(parent: PGtkWidget); cdecl; inline;
    procedure set_parent_window(parent_window: PGdkWindow); cdecl; inline;
    procedure set_realized(realized: gboolean); cdecl; inline;
    procedure set_receives_default(receives_default: gboolean); cdecl; inline;
    procedure set_redraw_on_allocate(redraw_on_allocate: gboolean); cdecl; inline;
    procedure set_sensitive(sensitive: gboolean); cdecl; inline;
    procedure set_size_request(width: gint; height: gint); cdecl; inline;
    procedure set_state(state: TGtkStateType); cdecl; inline;
    procedure set_state_flags(flags: TGtkStateFlags; clear: gboolean); cdecl; inline;
    procedure set_style(style: PGtkStyle); cdecl; inline;
    procedure set_support_multidevice(support_multidevice: gboolean); cdecl; inline;
    procedure set_tooltip_markup(markup: Pgchar); cdecl; inline;
    procedure set_tooltip_text(text: Pgchar); cdecl; inline;
    procedure set_tooltip_window(custom_window: PAtkWindow); cdecl; inline;
    procedure set_valign(align: TGtkAlign); cdecl; inline;
    procedure set_vexpand(expand: gboolean); cdecl; inline;
    procedure set_vexpand_set(set_: gboolean); cdecl; inline;
    procedure set_visible(visible: gboolean); cdecl; inline;
    procedure set_visual(visual: PGdkVisual); cdecl; inline;
    procedure set_window(window: PGdkWindow); cdecl; inline;
    procedure shape_combine_region(region: Pcairo_region_t); cdecl; inline;
    procedure show; cdecl; inline;
    procedure show_all; cdecl; inline;
    procedure show_now; cdecl; inline;
    procedure size_allocate(allocation: PGtkAllocation); cdecl; inline;
    
    procedure style_attach; cdecl; inline;
    //procedure style_get(first_property_name: Pgchar; args: array of const); cdecl; inline;
    procedure style_get_property(property_name: Pgchar; value: PGValue); cdecl; inline;
    //procedure style_get_valist(first_property_name: Pgchar; var_args: Tva_list); cdecl; inline;
    procedure thaw_child_notify; cdecl; inline;
    function translate_coordinates(dest_widget: PGtkWidget; src_x: gint; src_y: gint; dest_x: Pgint; dest_y: Pgint): gboolean; cdecl; inline;
    procedure trigger_tooltip_query; cdecl; inline;
    procedure unmap; cdecl; inline;
    procedure unparent; cdecl; inline;
    procedure unrealize; cdecl; inline;
    procedure unset_state_flags(flags: TGtkStateFlags); cdecl; inline;
    property app_paintable:  gboolean read get_app_paintable  { property is writeable but setter not declared } ;
    property can_default:  gboolean read get_can_default  { property is writeable but setter not declared } ;
    property can_focus:  gboolean read get_can_focus  { property is writeable but setter not declared } ;
    //property composite_child: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_composite_child ;
    property double_buffered:  gboolean read get_double_buffered  { property is writeable but setter not declared } ;
    property events:  gint read get_events  { property is writeable but setter not declared } ;
    //property expand: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_expand  { property is writeable but setter not declared } ;
    property halign:  TGtkAlign read get_halign  { property is writeable but setter not declared } ;
    //property has_default1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_default  { property is writeable but setter not declared } ;
    //property has_focus1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_focus  { property is writeable but setter not declared } ;
    property has_tooltip:  gboolean read get_has_tooltip  { property is writeable but setter not declared } ;
    //property height_request: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_height_request  { property is writeable but setter not declared } ;
    property hexpand:  gboolean read get_hexpand  { property is writeable but setter not declared } ;
    property hexpand_set:  gboolean read get_hexpand_set  { property is writeable but setter not declared } ;
    //property is_focus1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_focus  { property is writeable but setter not declared } ;
    //property margin: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_margin  { property is writeable but setter not declared } ;
    property margin_bottom:  gint read get_margin_bottom  { property is writeable but setter not declared } ;
    property margin_left:  gint read get_margin_left  { property is writeable but setter not declared } ;
    property margin_right:  gint read get_margin_right  { property is writeable but setter not declared } ;
    property margin_top:  gint read get_margin_top  { property is writeable but setter not declared } ;
    property name:  Pgchar read get_name  { property is writeable but setter not declared } ;
    property no_show_all:  gboolean read get_no_show_all  { property is writeable but setter not declared } ;
    property parent:  PGtkWidget read get_parent  { property is writeable but setter not declared } ;
    property receives_default:  gboolean read get_receives_default  { property is writeable but setter not declared } ;
    property sensitive:  gboolean read get_sensitive  { property is writeable but setter not declared } ;
    property style:  PGtkStyle read get_style  { property is writeable but setter not declared } ;
    property tooltip_markup:  Pgchar read get_tooltip_markup  { property is writeable but setter not declared } ;
    property tooltip_text:  Pgchar read get_tooltip_text  { property is writeable but setter not declared } ;
    property valign:  TGtkAlign read get_valign  { property is writeable but setter not declared } ;
    property vexpand:  gboolean read get_vexpand  { property is writeable but setter not declared } ;
    property vexpand_set:  gboolean read get_vexpand_set  { property is writeable but setter not declared } ;
    property visible:  gboolean read get_visible  { property is writeable but setter not declared } ;
    //property width_request: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_width_request  { property is writeable but setter not declared } ;
    property window:  PGdkWindow read get_window ;
  end;

  PPGtkLicense = ^PGtkLicense;
  PGtkLicense = ^TGtkLicense;

  PPGtkDialog = ^PGtkDialog;
  PGtkDialog = ^TGtkDialog;

  PPGtkDialogFlags = ^PGtkDialogFlags;
  PGtkDialogFlags = ^TGtkDialogFlags;
  TGtkDialogFlags = packed object(TBitObject32)
  public
    property modal: DWord index 1 read GetBit write SetBit;
    property destroy_with_parent: DWord index 2 read GetBit write SetBit;
  end;


  PPGtkDialogPrivate = ^PGtkDialogPrivate;
  PGtkDialogPrivate = ^TGtkDialogPrivate;
  TGtkDialog = object
    window: TAtkWindow;
    priv: PGtkDialogPrivate;
    function new: PGtkDialog; cdecl; inline; static;
    //function new_with_buttons(title: Pgchar; parent: PAtkWindow; flags: TGtkDialogFlags; first_button_text: Pgchar; args: array of const): PGtkDialog; cdecl; inline; static;
    procedure add_action_widget(child: PGtkWidget; response_id: gint); cdecl; inline;
    function add_button(button_text: Pgchar; response_id: gint): PGtkWidget; cdecl; inline;
    //procedure add_buttons(first_button_text: Pgchar; args: array of const); cdecl; inline;
    function get_action_area: PGtkWidget; cdecl; inline;
    function get_content_area: PGtkWidget; cdecl; inline;
    function get_response_for_widget(widget: PGtkWidget): gint; cdecl; inline;
    function get_widget_for_response(response_id: gint): PGtkWidget; cdecl; inline;
    procedure response(response_id: gint); cdecl; inline;
    function run: gint; cdecl; inline;
    //procedure set_alternative_button_order(first_response_id: gint; args: array of const); cdecl; inline;
    procedure set_alternative_button_order_from_array(n_params: gint; new_order: Pgint); cdecl; inline;
    procedure set_default_response(response_id: gint); cdecl; inline;
    procedure set_response_sensitive(response_id: gint; setting: gboolean); cdecl; inline;
  end;

  PPGtkAboutDialogPrivate = ^PGtkAboutDialogPrivate;
  PGtkAboutDialogPrivate = ^TGtkAboutDialogPrivate;

  TGtkAboutDialogPrivate = record
    Unknown: Pointer;
  end;



  PPGtkAboutDialog = ^PGtkAboutDialog;
  PGtkAboutDialog = ^TGtkAboutDialog;
  TGtkAboutDialog = object(TGtkDialog)
    priv1: PGtkAboutDialogPrivate;
    function new: PGtkAboutDialog; cdecl; inline; static;
    function get_artists: PPgchar; cdecl; inline;
    function get_authors: PPgchar; cdecl; inline;
    function get_comments: Pgchar; cdecl; inline;
    function get_copyright: Pgchar; cdecl; inline;
    function get_documenters: PPgchar; cdecl; inline;
    function get_license: Pgchar; cdecl; inline;
    function get_license_type: TGtkLicense; cdecl; inline;
    function get_logo: PGdkPixbuf; cdecl; inline;
    function get_logo_icon_name: Pgchar; cdecl; inline;
    function get_program_name: Pgchar; cdecl; inline;
    function get_translator_credits: Pgchar; cdecl; inline;
    function get_version: Pgchar; cdecl; inline;
    function get_website: Pgchar; cdecl; inline;
    function get_website_label: Pgchar; cdecl; inline;
    function get_wrap_license: gboolean; cdecl; inline;
    procedure set_artists(artists: PPgchar); cdecl; inline;
    procedure set_authors(authors: PPgchar); cdecl; inline;
    procedure set_comments(comments: Pgchar); cdecl; inline;
    procedure set_copyright(copyright: Pgchar); cdecl; inline;
    procedure set_documenters(documenters: PPgchar); cdecl; inline;
    procedure set_license(license: Pgchar); cdecl; inline;
    procedure set_license_type(license_type: TGtkLicense); cdecl; inline;
    procedure set_logo(logo: PGdkPixbuf); cdecl; inline;
    procedure set_logo_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_program_name(name: Pgchar); cdecl; inline;
    procedure set_translator_credits(translator_credits: Pgchar); cdecl; inline;
    procedure set_version(version: Pgchar); cdecl; inline;
    procedure set_website(website: Pgchar); cdecl; inline;
    procedure set_website_label(website_label: Pgchar); cdecl; inline;
    procedure set_wrap_license(wrap_license: gboolean); cdecl; inline;
    property artists:  PPgchar read get_artists  { property is writeable but setter not declared } ;
    property authors:  PPgchar read get_authors  { property is writeable but setter not declared } ;
    property comments:  Pgchar read get_comments  { property is writeable but setter not declared } ;
    property copyright:  Pgchar read get_copyright  { property is writeable but setter not declared } ;
    property documenters:  PPgchar read get_documenters  { property is writeable but setter not declared } ;
    property license:  Pgchar read get_license  { property is writeable but setter not declared } ;
    property license_type:  TGtkLicense read get_license_type  { property is writeable but setter not declared } ;
    property logo:  PGdkPixbuf read get_logo  { property is writeable but setter not declared } ;
    property logo_icon_name:  Pgchar read get_logo_icon_name  { property is writeable but setter not declared } ;
    property program_name:  Pgchar read get_program_name  { property is writeable but setter not declared } ;
    property translator_credits:  Pgchar read get_translator_credits  { property is writeable but setter not declared } ;
    property version:  Pgchar read get_version  { property is writeable but setter not declared } ;
    property website:  Pgchar read get_website  { property is writeable but setter not declared } ;
    property website_label:  Pgchar read get_website_label  { property is writeable but setter not declared } ;
    property wrap_license:  gboolean read get_wrap_license  { property is writeable but setter not declared } ;
  end;

  PPGtkDialogClass = ^PGtkDialogClass;
  PGtkDialogClass = ^TGtkDialogClass;
  TGtkDialogClass = object
    parent_class: TGdkWindowClass;
    response: procedure(dialog: PGtkDialog; response_id: gint); cdecl;
    close: procedure(dialog: PGtkDialog); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkAboutDialogClass = ^PGtkAboutDialogClass;
  PGtkAboutDialogClass = ^TGtkAboutDialogClass;
  TGtkAboutDialogClass = object
    parent_class: TGtkDialogClass;
    activate_link: function(dialog: PGtkAboutDialog; uri: Pgchar): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkAccelKey = ^PGtkAccelKey;
  PGtkAccelKey = ^TGtkAccelKey;

  PPGtkAccelGroupFindFunc = ^PGtkAccelGroupFindFunc;
  PGtkAccelGroupFindFunc = ^TGtkAccelGroupFindFunc;
  TGtkAccelGroupFindFunc = function(key: PGtkAccelKey; closure: PGClosure; data: gpointer): gboolean; cdecl;

  PPGtkAccelGroupEntry = ^PGtkAccelGroupEntry;
  PGtkAccelGroupEntry = ^TGtkAccelGroupEntry;

  PPGtkAccelGroupPrivate = ^PGtkAccelGroupPrivate;
  PGtkAccelGroupPrivate = ^TGtkAccelGroupPrivate;
  TGtkAccelGroup = object(TGObject)
    priv: PGtkAccelGroupPrivate;
    function new: PGtkAccelGroup; cdecl; inline; static;
    function from_accel_closure(closure: PGClosure): PGtkAccelGroup; cdecl; inline; static;
    function activate(accel_quark: TGQuark; acceleratable: PGObject; accel_key: guint; accel_mods: TGdkModifierType): gboolean; cdecl; inline;
    procedure connect(accel_key: guint; accel_mods: TGdkModifierType; accel_flags: TGtkAccelFlags; closure: PGClosure); cdecl; inline;
    procedure connect_by_path(accel_path: Pgchar; closure: PGClosure); cdecl; inline;
    function disconnect(closure: PGClosure): gboolean; cdecl; inline;
    function disconnect_key(accel_key: guint; accel_mods: TGdkModifierType): gboolean; cdecl; inline;
    function find(find_func: TGtkAccelGroupFindFunc; data: gpointer): PGtkAccelKey; cdecl; inline;
    function get_is_locked: gboolean; cdecl; inline;
    function get_modifier_mask: TGdkModifierType; cdecl; inline;
    procedure lock; cdecl; inline;
    function query(accel_key: guint; accel_mods: TGdkModifierType; n_entries: Pguint): PGtkAccelGroupEntry; cdecl; inline;
    procedure unlock; cdecl; inline;
    property is_locked:  gboolean read get_is_locked ;
    property modifier_mask:  TGdkModifierType read get_modifier_mask ;
  end;

  TGtkAccelKey = record
    accel_key: guint;
    accel_mods: TGdkModifierType;
    accel_flags: guint16 { changed from guint to accomodate 16 bitsize requirement };
  end;



  TGtkAccelGroupEntry = record
    key: TGtkAccelKey;
    closure: PGClosure;
    accel_path_quark: TGQuark;
  end;



  TGtkAccelGroupPrivate = record
    Unknown: Pointer;
  end;


  TGtkAccelGroupActivate = function(accel_group: PGtkAccelGroup; acceleratable: PGObject; keyval: guint; modifier: TGdkModifierType): gboolean; cdecl;

  PPGtkAccelGroupClass = ^PGtkAccelGroupClass;
  PGtkAccelGroupClass = ^TGtkAccelGroupClass;
  TGtkAccelGroupClass = object
    parent_class: TGObjectClass;
    accel_changed: procedure(accel_group: PGtkAccelGroup; keyval: guint; modifier: TGdkModifierType; accel_closure: PGClosure); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkLabel = ^PGtkLabel;
  PGtkLabel = ^TGtkLabel;

  PPGtkJustification = ^PGtkJustification;
  PGtkJustification = ^TGtkJustification;

  PPGtkLabelPrivate = ^PGtkLabelPrivate;
  PGtkLabelPrivate = ^TGtkLabelPrivate;
  TGtkLabel = object
    misc: TAtkMisc;
    priv: PGtkLabelPrivate;
    function new(str: Pgchar): PGtkLabel; cdecl; inline; static;
    function new_with_mnemonic(str: Pgchar): PGtkLabel; cdecl; inline; static;
    function get_angle: gdouble; cdecl; inline;
    function get_attributes: PPangoAttrList; cdecl; inline;
    function get_current_uri: Pgchar; cdecl; inline;
    function get_ellipsize: TPangoEllipsizeMode; cdecl; inline;
    function get_justify: TGtkJustification; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_layout: PPangoLayout; cdecl; inline;
    procedure get_layout_offsets(x: Pgint; y: Pgint); cdecl; inline;
    function get_line_wrap: gboolean; cdecl; inline;
    function get_line_wrap_mode: TPangoWrapMode; cdecl; inline;
    function get_max_width_chars: gint; cdecl; inline;
    function get_mnemonic_keyval: guint; cdecl; inline;
    function get_mnemonic_widget: PGtkWidget; cdecl; inline;
    function get_selectable: gboolean; cdecl; inline;
    function get_selection_bounds(start: Pgint; end_: Pgint): gboolean; cdecl; inline;
    function get_single_line_mode: gboolean; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    function get_track_visited_links: gboolean; cdecl; inline;
    function get_use_markup: gboolean; cdecl; inline;
    function get_use_underline: gboolean; cdecl; inline;
    function get_width_chars: gint; cdecl; inline;
    procedure select_region(start_offset: gint; end_offset: gint); cdecl; inline;
    procedure set_angle(angle: gdouble); cdecl; inline;
    procedure set_attributes(attrs: PPangoAttrList); cdecl; inline;
    procedure set_ellipsize(mode: TPangoEllipsizeMode); cdecl; inline;
    procedure set_justify(jtype: TGtkJustification); cdecl; inline;
    procedure set_label(str: Pgchar); cdecl; inline;
    procedure set_line_wrap(wrap: gboolean); cdecl; inline;
    procedure set_line_wrap_mode(wrap_mode: TPangoWrapMode); cdecl; inline;
    procedure set_markup(str: Pgchar); cdecl; inline;
    procedure set_markup_with_mnemonic(str: Pgchar); cdecl; inline;
    procedure set_max_width_chars(n_chars: gint); cdecl; inline;
    procedure set_mnemonic_widget(widget: PGtkWidget); cdecl; inline;
    procedure set_pattern(pattern: Pgchar); cdecl; inline;
    procedure set_selectable(setting: gboolean); cdecl; inline;
    procedure set_single_line_mode(single_line_mode: gboolean); cdecl; inline;
    procedure set_text(str: Pgchar); cdecl; inline;
    procedure set_text_with_mnemonic(str: Pgchar); cdecl; inline;
    procedure set_track_visited_links(track_links: gboolean); cdecl; inline;
    procedure set_use_markup(setting: gboolean); cdecl; inline;
    procedure set_use_underline(setting: gboolean); cdecl; inline;
    procedure set_width_chars(n_chars: gint); cdecl; inline;
    property angle:  gdouble read get_angle  { property is writeable but setter not declared } ;
    property attributes:  PPangoAttrList read get_attributes  { property is writeable but setter not declared } ;
    //property cursor_position: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cursor_position ;
    property ellipsize:  TPangoEllipsizeMode read get_ellipsize  { property is writeable but setter not declared } ;
    property justify:  TGtkJustification read get_justify  { property is writeable but setter not declared } ;
    property label_:  Pgchar read get_label  { property is writeable but setter not declared } ;
    property max_width_chars:  gint read get_max_width_chars  { property is writeable but setter not declared } ;
    property mnemonic_keyval:  guint read get_mnemonic_keyval ;
    property mnemonic_widget:  PGtkWidget read get_mnemonic_widget  { property is writeable but setter not declared } ;
    //property pattern: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pattern  { property is writeable but setter not declared } ;
    property selectable:  gboolean read get_selectable  { property is writeable but setter not declared } ;
    //property selection_bound: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_selection_bound ;
    property single_line_mode:  gboolean read get_single_line_mode  { property is writeable but setter not declared } ;
    property track_visited_links:  gboolean read get_track_visited_links  { property is writeable but setter not declared } ;
    property use_markup:  gboolean read get_use_markup  { property is writeable but setter not declared } ;
    property use_underline:  gboolean read get_use_underline  { property is writeable but setter not declared } ;
    property width_chars:  gint read get_width_chars  { property is writeable but setter not declared } ;
    //property wrap: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_wrap  { property is writeable but setter not declared } ;
    //property wrap_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_wrap_mode  { property is writeable but setter not declared } ;
  end;

  PPGtkAccelLabelPrivate = ^PGtkAccelLabelPrivate;
  PGtkAccelLabelPrivate = ^TGtkAccelLabelPrivate;

  TGtkAccelLabelPrivate = record
    Unknown: Pointer;
  end;



  PPGtkAccelLabel = ^PGtkAccelLabel;
  PGtkAccelLabel = ^TGtkAccelLabel;
  TGtkAccelLabel = object(TGtkLabel)
    priv1: PGtkAccelLabelPrivate;
    function new(string_: Pgchar): PGtkAccelLabel; cdecl; inline; static;
    function get_accel_widget: PGtkWidget; cdecl; inline;
    function get_accel_width: guint; cdecl; inline;
    function refetch: gboolean; cdecl; inline;
    procedure set_accel_closure(accel_closure: PGClosure); cdecl; inline;
    procedure set_accel_widget(accel_widget: PGtkWidget); cdecl; inline;
    //property accel_closure: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accel_closure  { property is writeable but setter not declared } ;
    property accel_widget:  PGtkWidget read get_accel_widget  { property is writeable but setter not declared } ;
  end;

  PPGtkLabelClass = ^PGtkLabelClass;
  PGtkLabelClass = ^TGtkLabelClass;

  PPGtkMovementStep = ^PGtkMovementStep;
  PGtkMovementStep = ^TGtkMovementStep;

  PPGtkMenu = ^PGtkMenu;
  PGtkMenu = ^TGtkMenu;
  TGtkLabelClass = object
    parent_class: TAtkMiscClass;
    move_cursor: procedure(label_: PGtkLabel; step: TGtkMovementStep; count: gint; extend_selection: gboolean); cdecl;
    copy_clipboard: procedure(label_: PGtkLabel); cdecl;
    populate_popup: procedure(label_: PGtkLabel; menu: PGtkMenu); cdecl;
    activate_link: function(label_: PGtkLabel; uri: Pgchar): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkAccelLabelClass = ^PGtkAccelLabelClass;
  PGtkAccelLabelClass = ^TGtkAccelLabelClass;
  TGtkAccelLabelClass = object
    parent_class: TGtkLabelClass;
    signal_quote1: Pgchar;
    signal_quote2: Pgchar;
    mod_name_shift: Pgchar;
    mod_name_control: Pgchar;
    mod_name_alt: Pgchar;
    mod_separator: Pgchar;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;
  TGtkAccelMapForeach = procedure(data: gpointer; accel_path: Pgchar; accel_key: guint; accel_mods: TGdkModifierType; changed: gboolean); cdecl;

  PPGtkAccelMap = ^PGtkAccelMap;
  PGtkAccelMap = ^TGtkAccelMap;

  PPGtkAccelMapForeach = ^PGtkAccelMapForeach;
  PGtkAccelMapForeach = ^TGtkAccelMapForeach;
  TGtkAccelMap = object(TGObject)
    procedure add_entry(accel_path: Pgchar; accel_key: guint; accel_mods: TGdkModifierType); cdecl; inline; static;
    procedure add_filter(filter_pattern: Pgchar); cdecl; inline; static;
    function change_entry(accel_path: Pgchar; accel_key: guint; accel_mods: TGdkModifierType; replace: gboolean): gboolean; cdecl; inline; static;
    procedure foreach(data: gpointer; foreach_func: TGtkAccelMapForeach); cdecl; inline; static;
    procedure foreach_unfiltered(data: gpointer; foreach_func: TGtkAccelMapForeach); cdecl; inline; static;
    function get: PGtkAccelMap; cdecl; inline; static;
    procedure load(file_name: Pgchar); cdecl; inline; static;
    procedure load_fd(fd: gint); cdecl; inline; static;
    procedure load_scanner(scanner: PGScanner); cdecl; inline; static;
    procedure lock_path(accel_path: Pgchar); cdecl; inline; static;
    function lookup_entry(accel_path: Pgchar; key: PGtkAccelKey): gboolean; cdecl; inline; static;
    procedure save(file_name: Pgchar); cdecl; inline; static;
    procedure save_fd(fd: gint); cdecl; inline; static;
    procedure unlock_path(accel_path: Pgchar); cdecl; inline; static;
  end;

  PPGtkAccelMapClass = ^PGtkAccelMapClass;
  PGtkAccelMapClass = ^TGtkAccelMapClass;
  TGtkAccelMapClass = object
  end;

  PPGtkAccessiblePrivate = ^PGtkAccessiblePrivate;
  PGtkAccessiblePrivate = ^TGtkAccessiblePrivate;

  TGtkAccessiblePrivate = record
    Unknown: Pointer;
  end;



  PPGtkAccessible = ^PGtkAccessible;
  PGtkAccessible = ^TGtkAccessible;
  TGtkAccessible = object(TAtkObject)
    priv: PGtkAccessiblePrivate;
    procedure connect_widget_destroyed; cdecl; inline;
    function get_widget: PGtkWidget; cdecl; inline;
    procedure set_widget(widget: PGtkWidget); cdecl; inline;
  end;

  PPGtkAccessibleClass = ^PGtkAccessibleClass;
  PGtkAccessibleClass = ^TGtkAccessibleClass;
  TGtkAccessibleClass = object
    parent_class: TAtkObjectClass;
    connect_widget_destroyed: procedure(accessible: PGtkAccessible); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkActionPrivate = ^PGtkActionPrivate;
  PGtkActionPrivate = ^TGtkActionPrivate;

  TGtkActionPrivate = record
    Unknown: Pointer;
  end;



  PPGtkAction = ^PGtkAction;
  PGtkAction = ^TGtkAction;
  TGtkAction = object(TGObject)
    private_data: PGtkActionPrivate;
    function new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar): PGtkAction; cdecl; inline; static;
    procedure activate; cdecl; inline;
    procedure block_activate; cdecl; inline;
    procedure connect_accelerator; cdecl; inline;
    function create_icon(icon_size: gint): PGtkWidget; cdecl; inline;
    function create_menu: PGtkWidget; cdecl; inline;
    function create_menu_item: PGtkWidget; cdecl; inline;
    function create_tool_item: PGtkWidget; cdecl; inline;
    procedure disconnect_accelerator; cdecl; inline;
    function get_accel_closure: PGClosure; cdecl; inline;
    function get_accel_path: Pgchar; cdecl; inline;
    function get_always_show_image: gboolean; cdecl; inline;
    function get_gicon: PGIcon; cdecl; inline;
    function get_icon_name: Pgchar; cdecl; inline;
    function get_is_important: gboolean; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_proxies: PGSList; cdecl; inline;
    function get_sensitive: gboolean; cdecl; inline;
    function get_short_label: Pgchar; cdecl; inline;
    function get_stock_id: Pgchar; cdecl; inline;
    function get_tooltip: Pgchar; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    function get_visible_horizontal: gboolean; cdecl; inline;
    function get_visible_vertical: gboolean; cdecl; inline;
    function is_sensitive: gboolean; cdecl; inline;
    function is_visible: gboolean; cdecl; inline;
    procedure set_accel_group(accel_group: PGtkAccelGroup); cdecl; inline;
    procedure set_accel_path(accel_path: Pgchar); cdecl; inline;
    procedure set_always_show_image(always_show: gboolean); cdecl; inline;
    procedure set_gicon(icon: PGIcon); cdecl; inline;
    procedure set_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_is_important(is_important: gboolean); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_sensitive(sensitive: gboolean); cdecl; inline;
    procedure set_short_label(short_label: Pgchar); cdecl; inline;
    procedure set_stock_id(stock_id: Pgchar); cdecl; inline;
    procedure set_tooltip(tooltip: Pgchar); cdecl; inline;
    procedure set_visible(visible: gboolean); cdecl; inline;
    procedure set_visible_horizontal(visible_horizontal: gboolean); cdecl; inline;
    procedure set_visible_vertical(visible_vertical: gboolean); cdecl; inline;
    procedure unblock_activate; cdecl; inline;
    //property action_group: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_action_group  { property is writeable but setter not declared } ;
    property always_show_image:  gboolean read get_always_show_image  { property is writeable but setter not declared } ;
    property gicon:  PGIcon read get_gicon  { property is writeable but setter not declared } ;
    //property hide_if_empty: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_hide_if_empty  { property is writeable but setter not declared } ;
    property icon_name:  Pgchar read get_icon_name  { property is writeable but setter not declared } ;
    property is_important:  gboolean read get_is_important  { property is writeable but setter not declared } ;
    property label_:  Pgchar read get_label  { property is writeable but setter not declared } ;
    property name:  Pgchar read get_name  { property is writeable but setter not declared } ;
    property sensitive:  gboolean read get_sensitive  { property is writeable but setter not declared } ;
    property short_label:  Pgchar read get_short_label  { property is writeable but setter not declared } ;
    property stock_id:  Pgchar read get_stock_id  { property is writeable but setter not declared } ;
    property tooltip:  Pgchar read get_tooltip  { property is writeable but setter not declared } ;
    property visible:  gboolean read get_visible  { property is writeable but setter not declared } ;
    property visible_horizontal:  gboolean read get_visible_horizontal  { property is writeable but setter not declared } ;
    //property visible_overflown: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_visible_overflown  { property is writeable but setter not declared } ;
    property visible_vertical:  gboolean read get_visible_vertical  { property is writeable but setter not declared } ;
  end;

  PPGtkActionClass = ^PGtkActionClass;
  PGtkActionClass = ^TGtkActionClass;
  TGtkActionClass = object
    parent_class: TGObjectClass;
    activate: procedure(action: PGtkAction); cdecl;
    menu_item_type: TGType;
    toolbar_item_type: TGType;
    create_menu_item: function(action: PGtkAction): PGtkWidget; cdecl;
    create_tool_item: function(action: PGtkAction): PGtkWidget; cdecl;
    connect_proxy: procedure(action: PGtkAction; proxy: PGtkWidget); cdecl;
    disconnect_proxy: procedure(action: PGtkAction; proxy: PGtkWidget); cdecl;
    create_menu: function(action: PGtkAction): PGtkWidget; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkActionEntry = ^PGtkActionEntry;
  PGtkActionEntry = ^TGtkActionEntry;

  TGtkActionEntry = record
    name: Pgchar;
    stock_id: Pgchar;
    label_: Pgchar;
    accelerator: Pgchar;
    tooltip: Pgchar;
    callback: TGCallback;
  end;



  PPGtkRadioActionEntry = ^PGtkRadioActionEntry;
  PGtkRadioActionEntry = ^TGtkRadioActionEntry;

  TGtkRadioActionEntry = record
    name: Pgchar;
    stock_id: Pgchar;
    label_: Pgchar;
    accelerator: Pgchar;
    tooltip: Pgchar;
    value: gint;
  end;



  PPGtkToggleActionEntry = ^PGtkToggleActionEntry;
  PGtkToggleActionEntry = ^TGtkToggleActionEntry;

  TGtkToggleActionEntry = record
    name: Pgchar;
    stock_id: Pgchar;
    label_: Pgchar;
    accelerator: Pgchar;
    tooltip: Pgchar;
    callback: TGCallback;
    is_active: gboolean;
  end;



  PPGtkActionGroupPrivate = ^PGtkActionGroupPrivate;
  PGtkActionGroupPrivate = ^TGtkActionGroupPrivate;

  TGtkActionGroupPrivate = record
    Unknown: Pointer;
  end;



  PPGtkActionGroup = ^PGtkActionGroup;
  PGtkActionGroup = ^TGtkActionGroup;
  TGtkActionGroup = object(TGObject)
    priv: PGtkActionGroupPrivate;
    function new(name: Pgchar): PGtkActionGroup; cdecl; inline; static;
    procedure add_action(action: PGtkAction); cdecl; inline;
    procedure add_action_with_accel(action: PGtkAction; accelerator: Pgchar); cdecl; inline;
    procedure add_actions(entries: PGtkActionEntry; n_entries: guint; user_data: gpointer); cdecl; inline;
    procedure add_actions_full(entries: PGtkActionEntry; n_entries: guint; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure add_radio_actions(entries: PGtkRadioActionEntry; n_entries: guint; value: gint; on_change: TGCallback; user_data: gpointer); cdecl; inline;
    procedure add_radio_actions_full(entries: PGtkRadioActionEntry; n_entries: guint; value: gint; on_change: TGCallback; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure add_toggle_actions(entries: PGtkToggleActionEntry; n_entries: guint; user_data: gpointer); cdecl; inline;
    procedure add_toggle_actions_full(entries: PGtkToggleActionEntry; n_entries: guint; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    function get_action(action_name: Pgchar): PGtkAction; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_sensitive: gboolean; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    function list_actions: PGList; cdecl; inline;
    procedure remove_action(action: PGtkAction); cdecl; inline;
    procedure set_sensitive(sensitive: gboolean); cdecl; inline;
    procedure set_translate_func(func: TGTranslateFunc; data: gpointer; notify: TGDestroyNotify); cdecl; inline;
    procedure set_translation_domain(domain: Pgchar); cdecl; inline;
    procedure set_visible(visible: gboolean); cdecl; inline;
    function translate_string(string_: Pgchar): Pgchar; cdecl; inline;
    property name:  Pgchar read get_name  { property is writeable but setter not declared } ;
    property sensitive:  gboolean read get_sensitive  { property is writeable but setter not declared } ;
    property visible:  gboolean read get_visible  { property is writeable but setter not declared } ;
  end;

  PPGtkActionGroupClass = ^PGtkActionGroupClass;
  PGtkActionGroupClass = ^TGtkActionGroupClass;
  TGtkActionGroupClass = object
    parent_class: TGObjectClass;
    get_action: function(action_group: PGtkActionGroup; action_name: Pgchar): PGtkAction; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkActivatable = ^PGtkActivatable;
  PGtkActivatable = ^TGtkActivatable;
  TGtkActivatable = object
    procedure do_set_related_action(action: PGtkAction); cdecl; inline;
    function get_related_action: PGtkAction; cdecl; inline;
    function get_use_action_appearance: gboolean; cdecl; inline;
    procedure set_related_action(action: PGtkAction); cdecl; inline;
    procedure set_use_action_appearance(use_appearance: gboolean); cdecl; inline;
    procedure sync_action_properties(action: PGtkAction); cdecl; inline;
    property related_action:  PGtkAction read get_related_action  { property is writeable but setter not declared } ;
    property use_action_appearance:  gboolean read get_use_action_appearance  { property is writeable but setter not declared } ;
  end;

  PPGtkActivatableIface = ^PGtkActivatableIface;
  PGtkActivatableIface = ^TGtkActivatableIface;
  TGtkActivatableIface = object
    g_iface: TGTypeInterface;
    update: procedure(activatable: PGtkActivatable; action: PGtkAction; property_name: Pgchar); cdecl;
    sync_action_properties: procedure(activatable: PGtkActivatable; action: PGtkAction); cdecl;
  end;

  PPGtkAdjustment = ^PGtkAdjustment;
  PGtkAdjustment = ^TGtkAdjustment;

  PPGtkAdjustmentPrivate = ^PGtkAdjustmentPrivate;
  PGtkAdjustmentPrivate = ^TGtkAdjustmentPrivate;
  TGtkAdjustment = object(TGInitiallyUnowned)
    priv: PGtkAdjustmentPrivate;
    function new(value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble): PGtkAdjustment; cdecl; inline; static;
    procedure changed; cdecl; inline;
    procedure clamp_page(lower: gdouble; upper: gdouble); cdecl; inline;
    procedure configure(value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble); cdecl; inline;
    function get_lower: gdouble; cdecl; inline;
    function get_minimum_increment: gdouble; cdecl; inline;
    function get_page_increment: gdouble; cdecl; inline;
    function get_page_size: gdouble; cdecl; inline;
    function get_step_increment: gdouble; cdecl; inline;
    function get_upper: gdouble; cdecl; inline;
    function get_value: gdouble; cdecl; inline;
    procedure set_lower(lower: gdouble); cdecl; inline;
    procedure set_page_increment(page_increment: gdouble); cdecl; inline;
    procedure set_page_size(page_size: gdouble); cdecl; inline;
    procedure set_step_increment(step_increment: gdouble); cdecl; inline;
    procedure set_upper(upper: gdouble); cdecl; inline;
    procedure set_value(value: gdouble); cdecl; inline;
    procedure value_changed; cdecl; inline;
    property lower:  gdouble read get_lower  { property is writeable but setter not declared } ;
    property page_increment:  gdouble read get_page_increment  { property is writeable but setter not declared } ;
    property page_size:  gdouble read get_page_size  { property is writeable but setter not declared } ;
    property step_increment:  gdouble read get_step_increment  { property is writeable but setter not declared } ;
    property upper:  gdouble read get_upper  { property is writeable but setter not declared } ;
    property value:  gdouble read get_value  { property is writeable but setter not declared } ;
  end;

  TGtkAdjustmentPrivate = record
    Unknown: Pointer;
  end;



  PPGtkAdjustmentClass = ^PGtkAdjustmentClass;
  PGtkAdjustmentClass = ^TGtkAdjustmentClass;
  TGtkAdjustmentClass = object
    parent_class: TGInitiallyUnownedClass;
    changed: procedure(adjustment: PGtkAdjustment); cdecl;
    value_changed: procedure(adjustment: PGtkAdjustment); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkBin = ^PGtkBin;
  PGtkBin = ^TGtkBin;

  PPGtkContainer = ^PGtkContainer;
  PGtkContainer = ^TGtkContainer;

  PPGtkCallback = ^PGtkCallback;
  PGtkCallback = ^TGtkCallback;
  TGtkCallback = procedure(widget: PGtkWidget; data: gpointer); cdecl;

  PPGtkResizeMode = ^PGtkResizeMode;
  PGtkResizeMode = ^TGtkResizeMode;

  PPGtkContainerPrivate = ^PGtkContainerPrivate;
  PGtkContainerPrivate = ^TGtkContainerPrivate;
  TGtkContainer = object(TGtkWidget)
    priv1: PGtkContainerPrivate;
    procedure add(widget: PGtkWidget); cdecl; inline;
    //procedure add_with_properties(widget: PGtkWidget; first_prop_name: Pgchar; args: array of const); cdecl; inline;
    procedure check_resize; cdecl; inline;
    //procedure child_get(child: PGtkWidget; first_prop_name: Pgchar; args: array of const); cdecl; inline;
    procedure child_get_property(child: PGtkWidget; property_name: Pgchar; value: PGValue); cdecl; inline;
    //procedure child_get_valist(child: PGtkWidget; first_property_name: Pgchar; var_args: Tva_list); cdecl; inline;
    procedure child_notify(child: PGtkWidget; child_property: Pgchar); cdecl; inline;
    //procedure child_set(child: PGtkWidget; first_prop_name: Pgchar; args: array of const); cdecl; inline;
    procedure child_set_property(child: PGtkWidget; property_name: Pgchar; value: PGValue); cdecl; inline;
    //procedure child_set_valist(child: PGtkWidget; first_property_name: Pgchar; var_args: Tva_list); cdecl; inline;
    function child_type: TGType; cdecl; inline;
    procedure forall(callback: TGtkCallback; callback_data: gpointer); cdecl; inline;
    procedure foreach(callback: TGtkCallback; callback_data: gpointer); cdecl; inline;
    function get_border_width: guint; cdecl; inline;
    function get_children: PGList; cdecl; inline;
    function get_focus_chain(focusable_widgets: PPGList): gboolean; cdecl; inline;
    function get_focus_child: PGtkWidget; cdecl; inline;
    function get_focus_hadjustment: PGtkAdjustment; cdecl; inline;
    function get_focus_vadjustment: PGtkAdjustment; cdecl; inline;
    function get_path_for_child(child: PGtkWidget): PGtkWidgetPath; cdecl; inline;
    function get_resize_mode: TGtkResizeMode; cdecl; inline;
    procedure propagate_draw(child: PGtkWidget; cr: Pcairo_t); cdecl; inline;
    procedure remove(widget: PGtkWidget); cdecl; inline;
    procedure resize_children; cdecl; inline;
    procedure set_border_width(border_width: guint); cdecl; inline;
    procedure set_focus_chain(focusable_widgets: PGList); cdecl; inline;
    procedure set_focus_child(child: PGtkWidget); cdecl; inline;
    procedure set_focus_hadjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure set_focus_vadjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure set_reallocate_redraws(needs_redraws: gboolean); cdecl; inline;
    procedure set_resize_mode(resize_mode: TGtkResizeMode); cdecl; inline;
    procedure unset_focus_chain; cdecl; inline;
    property border_width:  guint read get_border_width  { property is writeable but setter not declared } ;
    //property child: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_child  { property is writeable but setter not declared } ;
    property resize_mode:  TGtkResizeMode read get_resize_mode  { property is writeable but setter not declared } ;
  end;

  PPGtkBinPrivate = ^PGtkBinPrivate;
  PGtkBinPrivate = ^TGtkBinPrivate;
  TGtkBin = object(TGtkContainer)
    priv2: PGtkBinPrivate;
    function get_child: PGtkWidget; cdecl; inline;
  end;

  PPGtkAlignmentPrivate = ^PGtkAlignmentPrivate;
  PGtkAlignmentPrivate = ^TGtkAlignmentPrivate;

  TGtkAlignmentPrivate = record
    Unknown: Pointer;
  end;



  PPGtkAlignment = ^PGtkAlignment;
  PGtkAlignment = ^TGtkAlignment;
  TGtkAlignment = object(TGtkBin)
    priv3: PGtkAlignmentPrivate;
    function new(xalign: gfloat; yalign: gfloat; xscale: gfloat; yscale: gfloat): PGtkAlignment; cdecl; inline; static;
    procedure get_padding(padding_top: Pguint; padding_bottom: Pguint; padding_left: Pguint; padding_right: Pguint); cdecl; inline;
    procedure set_(xalign: gfloat; yalign: gfloat; xscale: gfloat; yscale: gfloat); cdecl; inline;
    procedure set_padding(padding_top: guint; padding_bottom: guint; padding_left: guint; padding_right: guint); cdecl; inline;
    //property bottom_padding: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_bottom_padding  { property is writeable but setter not declared } ;
    //property left_padding: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_left_padding  { property is writeable but setter not declared } ;
    //property right_padding: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_right_padding  { property is writeable but setter not declared } ;
    //property top_padding: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_top_padding  { property is writeable but setter not declared } ;
    //property xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xalign  { property is writeable but setter not declared } ;
    //property xscale: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xscale  { property is writeable but setter not declared } ;
    //property yalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_yalign  { property is writeable but setter not declared } ;
    //property yscale: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_yscale  { property is writeable but setter not declared } ;
  end;

  PPGtkBinClass = ^PGtkBinClass;
  PGtkBinClass = ^TGtkBinClass;

  PPGtkContainerClass = ^PGtkContainerClass;
  PGtkContainerClass = ^TGtkContainerClass;

  PPGtkWidgetClass = ^PGtkWidgetClass;
  PGtkWidgetClass = ^TGtkWidgetClass;

  PPGtkRcPropertyParser = ^PGtkRcPropertyParser;
  PGtkRcPropertyParser = ^TGtkRcPropertyParser;
  TGtkRcPropertyParser = function(pspec: PGParamSpec; rc_string: PGString; property_value: PGValue): gboolean; cdecl;

  PPGtkSelectionData = ^PGtkSelectionData;
  PGtkSelectionData = ^TGtkSelectionData;

  PPGtkDragResult = ^PGtkDragResult;
  PGtkDragResult = ^TGtkDragResult;

  PPGtkWidgetHelpType = ^PGtkWidgetHelpType;
  PGtkWidgetHelpType = ^TGtkWidgetHelpType;

  PPGtkTooltip = ^PGtkTooltip;
  PGtkTooltip = ^TGtkTooltip;

  PPGtkWidgetClassPrivate = ^PGtkWidgetClassPrivate;
  PGtkWidgetClassPrivate = ^TGtkWidgetClassPrivate;
  TGtkWidgetClass = object
    parent_class: TGInitiallyUnownedClass;
    activate_signal: guint;
    dispatch_child_properties_changed: procedure(widget: PGtkWidget; n_pspecs: guint; pspecs: PPGParamSpec); cdecl;
    destroy_: procedure(widget: PGtkWidget); cdecl;
    show: procedure(widget: PGtkWidget); cdecl;
    show_all: procedure(widget: PGtkWidget); cdecl;
    hide: procedure(widget: PGtkWidget); cdecl;
    map: procedure(widget: PGtkWidget); cdecl;
    unmap: procedure(widget: PGtkWidget); cdecl;
    realize: procedure(widget: PGtkWidget); cdecl;
    unrealize: procedure(widget: PGtkWidget); cdecl;
    size_allocate: procedure(widget: PGtkWidget; allocation: PGtkAllocation); cdecl;
    state_changed: procedure(widget: PGtkWidget; previous_state: TGtkStateType); cdecl;
    state_flags_changed: procedure(widget: PGtkWidget; previous_state_flags: TGtkStateFlags); cdecl;
    parent_set: procedure(widget: PGtkWidget; previous_parent: PGtkWidget); cdecl;
    hierarchy_changed: procedure(widget: PGtkWidget; previous_toplevel: PGtkWidget); cdecl;
    style_set: procedure(widget: PGtkWidget; previous_style: PGtkStyle); cdecl;
    direction_changed: procedure(widget: PGtkWidget; previous_direction: TGtkTextDirection); cdecl;
    grab_notify: procedure(widget: PGtkWidget; was_grabbed: gboolean); cdecl;
    child_notify: procedure(widget: PGtkWidget; pspec: PGParamSpec); cdecl;
    draw: function(widget: PGtkWidget; cr: Pcairo_t): gboolean; cdecl;
    get_request_mode: function(widget: PGtkWidget): TGtkSizeRequestMode; cdecl;
    get_preferred_height: procedure(widget: PGtkWidget; minimum_height: Pgint; natural_height: Pgint); cdecl;
    get_preferred_width_for_height: procedure(widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
    get_preferred_width: procedure(widget: PGtkWidget; minimum_width: Pgint; natural_width: Pgint); cdecl;
    get_preferred_height_for_width: procedure(widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
    mnemonic_activate: function(widget: PGtkWidget; group_cycling: gboolean): gboolean; cdecl;
    grab_focus: procedure(widget: PGtkWidget); cdecl;
    focus: function(widget: PGtkWidget; direction: TGtkDirectionType): gboolean; cdecl;
    move_focus: procedure(widget: PGtkWidget; direction: TGtkDirectionType); cdecl;
    keynav_failed: function(widget: PGtkWidget; direction: TGtkDirectionType): gboolean; cdecl;
    event: function(widget: PGtkWidget; event: PGdkEvent): gboolean; cdecl;
    button_press_event: function(widget: PGtkWidget; event: PGdkEventButton): gboolean; cdecl;
    button_release_event: function(widget: PGtkWidget; event: PGdkEventButton): gboolean; cdecl;
    scroll_event: function(widget: PGtkWidget; event: PGdkEventScroll): gboolean; cdecl;
    motion_notify_event: function(widget: PGtkWidget; event: PGdkEventMotion): gboolean; cdecl;
    delete_event: function(widget: PGtkWidget; event: PGdkEventAny): gboolean; cdecl;
    destroy_event: function(widget: PGtkWidget; event: PGdkEventAny): gboolean; cdecl;
    key_press_event: function(widget: PGtkWidget; event: PGdkEventKey): gboolean; cdecl;
    key_release_event: function(widget: PGtkWidget; event: PGdkEventKey): gboolean; cdecl;
    enter_notify_event: function(widget: PGtkWidget; event: PGdkEventCrossing): gboolean; cdecl;
    leave_notify_event: function(widget: PGtkWidget; event: PGdkEventCrossing): gboolean; cdecl;
    configure_event: function(widget: PGtkWidget; event: PGdkEventConfigure): gboolean; cdecl;
    focus_in_event: function(widget: PGtkWidget; event: PGdkEventFocus): gboolean; cdecl;
    focus_out_event: function(widget: PGtkWidget; event: PGdkEventFocus): gboolean; cdecl;
    map_event: function(widget: PGtkWidget; event: PGdkEventAny): gboolean; cdecl;
    unmap_event: function(widget: PGtkWidget; event: PGdkEventAny): gboolean; cdecl;
    property_notify_event: function(widget: PGtkWidget; event: PGdkEventProperty): gboolean; cdecl;
    selection_clear_event: function(widget: PGtkWidget; event: PGdkEventSelection): gboolean; cdecl;
    selection_request_event: function(widget: PGtkWidget; event: PGdkEventSelection): gboolean; cdecl;
    selection_notify_event: function(widget: PGtkWidget; event: PGdkEventSelection): gboolean; cdecl;
    proximity_in_event: function(widget: PGtkWidget; event: PGdkEventProximity): gboolean; cdecl;
    proximity_out_event: function(widget: PGtkWidget; event: PGdkEventProximity): gboolean; cdecl;
    visibility_notify_event: function(widget: PGtkWidget; event: PGdkEventVisibility): gboolean; cdecl;
    window_state_event: function(widget: PGtkWidget; event: PGdkEventWindowState): gboolean; cdecl;
    damage_event: function(widget: PGtkWidget; event: PGdkEventExpose): gboolean; cdecl;
    grab_broken_event: function(widget: PGtkWidget; event: PGdkEventGrabBroken): gboolean; cdecl;
    selection_get: procedure(widget: PGtkWidget; selection_data: PGtkSelectionData; info: guint; time_: guint); cdecl;
    selection_received: procedure(widget: PGtkWidget; selection_data: PGtkSelectionData; time_: guint); cdecl;
    drag_begin: procedure(widget: PGtkWidget; context: PGdkDragContext); cdecl;
    drag_end: procedure(widget: PGtkWidget; context: PGdkDragContext); cdecl;
    drag_data_get: procedure(widget: PGtkWidget; context: PGdkDragContext; selection_data: PGtkSelectionData; info: guint; time_: guint); cdecl;
    drag_data_delete: procedure(widget: PGtkWidget; context: PGdkDragContext); cdecl;
    drag_leave: procedure(widget: PGtkWidget; context: PGdkDragContext; time_: guint); cdecl;
    drag_motion: function(widget: PGtkWidget; context: PGdkDragContext; x: gint; y: gint; time_: guint): gboolean; cdecl;
    drag_drop: function(widget: PGtkWidget; context: PGdkDragContext; x: gint; y: gint; time_: guint): gboolean; cdecl;
    drag_data_received: procedure(widget: PGtkWidget; context: PGdkDragContext; x: gint; y: gint; selection_data: PGtkSelectionData; info: guint; time_: guint); cdecl;
    drag_failed: function(widget: PGtkWidget; context: PGdkDragContext; result_: TGtkDragResult): gboolean; cdecl;
    popup_menu: function(widget: PGtkWidget): gboolean; cdecl;
    show_help: function(widget: PGtkWidget; help_type: TGtkWidgetHelpType): gboolean; cdecl;
    get_accessible: function(widget: PGtkWidget): PAtkObject; cdecl;
    screen_changed: procedure(widget: PGtkWidget; previous_screen: PGdkScreen); cdecl;
    can_activate_accel: function(widget: PGtkWidget; signal_id: guint): gboolean; cdecl;
    composited_changed: procedure(widget: PGtkWidget); cdecl;
    query_tooltip: function(widget: PGtkWidget; x: gint; y: gint; keyboard_tooltip: gboolean; tooltip: PGtkTooltip): gboolean; cdecl;
    compute_expand: procedure(widget: PGtkWidget; hexpand_p: Pgboolean; vexpand_p: Pgboolean); cdecl;
    adjust_size_request: procedure(widget: PGtkWidget; orientation: TGtkOrientation; minimum_size: Pgint; natural_size: Pgint); cdecl;
    adjust_size_allocation: procedure(widget: PGtkWidget; orientation: TGtkOrientation; minimum_size: Pgint; natural_size: Pgint; allocated_pos: Pgint; allocated_size: Pgint); cdecl;
    style_updated: procedure(widget: PGtkWidget); cdecl;
    priv: PGtkWidgetClassPrivate;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
    function find_style_property(property_name: Pgchar): PGParamSpec; cdecl; inline;
    procedure install_style_property(pspec: PGParamSpec); cdecl; inline;
    procedure install_style_property_parser(pspec: PGParamSpec; parser: TGtkRcPropertyParser); cdecl; inline;
    function list_style_properties(n_properties: Pguint): PPGParamSpec; cdecl; inline;
    procedure set_accessible_role(role: TAtkRole); cdecl; inline;
    procedure set_accessible_type(type_: TGType); cdecl; inline;
  end;
  TGtkContainerClass = object
    parent_class: TGtkWidgetClass;
    add: procedure(container: PGtkContainer; widget: PGtkWidget); cdecl;
    remove: procedure(container: PGtkContainer; widget: PGtkWidget); cdecl;
    check_resize: procedure(container: PGtkContainer); cdecl;
    forall: procedure(container: PGtkContainer; include_internals: gboolean; callback: TGtkCallback; callback_data: gpointer); cdecl;
    set_focus_child: procedure(container: PGtkContainer; child: PGtkWidget); cdecl;
    child_type: function(container: PGtkContainer): TGType; cdecl;
    composite_name: function(container: PGtkContainer; child: PGtkWidget): Pgchar; cdecl;
    set_child_property: procedure(container: PGtkContainer; child: PGtkWidget; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;
    get_child_property: procedure(container: PGtkContainer; child: PGtkWidget; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;
    get_path_for_child: function(container: PGtkContainer; child: PGtkWidget): PGtkWidgetPath; cdecl;
    _handle_border_width: guint1 { changed from guint to accomodate 1 bitsize requirement };
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
    function find_child_property(property_name: Pgchar): PGParamSpec; cdecl; inline;
    procedure handle_border_width; cdecl; inline;
    procedure install_child_property(property_id: guint; pspec: PGParamSpec); cdecl; inline;
    function list_child_properties(n_properties: Pguint): PPGParamSpec; cdecl; inline;
  end;
  TGtkBinClass = object
    parent_class: TGtkContainerClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkAlignmentClass = ^PGtkAlignmentClass;
  PGtkAlignmentClass = ^TGtkAlignmentClass;
  TGtkAlignmentClass = object
    parent_class: TGtkBinClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkAppChooser = ^PGtkAppChooser;
  PGtkAppChooser = ^TGtkAppChooser;
  TGtkAppChooser = object
    function get_app_info: PGAppInfo; cdecl; inline;
    function get_content_type: Pgchar; cdecl; inline;
    procedure refresh; cdecl; inline;
    property content_type:  Pgchar read get_content_type  { property is writeable but setter not declared } ;
  end;

  PPGtkCellEditable = ^PGtkCellEditable;
  PGtkCellEditable = ^TGtkCellEditable;
  TGtkCellEditable = object
    editing_done1: procedure; cdecl;
    remove_widget1: procedure; cdecl;
    procedure editing_done; cdecl; inline;
    procedure remove_widget; cdecl; inline;
    procedure start_editing(event: PGdkEvent); cdecl; inline;
    //property editing_canceled: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editing_canceled  { property is writeable but setter not declared } ;
  end;

  PPGtkCellLayout = ^PGtkCellLayout;
  PGtkCellLayout = ^TGtkCellLayout;

  PPGtkCellRenderer = ^PGtkCellRenderer;
  PGtkCellRenderer = ^TGtkCellRenderer;

  PPGtkCellArea = ^PGtkCellArea;
  PGtkCellArea = ^TGtkCellArea;

  PPGtkCellLayoutDataFunc = ^PGtkCellLayoutDataFunc;
  PGtkCellLayoutDataFunc = ^TGtkCellLayoutDataFunc;

  PPGtkTreeModel = ^PGtkTreeModel;
  PGtkTreeModel = ^TGtkTreeModel;

  PPGtkTreeIter = ^PGtkTreeIter;
  PGtkTreeIter = ^TGtkTreeIter;
  TGtkCellLayoutDataFunc = procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; tree_model: PGtkTreeModel; iter: PGtkTreeIter; data: gpointer); cdecl;
  TGtkCellLayout = object
    procedure add_attribute(cell: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; inline;
    procedure clear; cdecl; inline;
    procedure clear_attributes(cell: PGtkCellRenderer); cdecl; inline;
    function get_area: PGtkCellArea; cdecl; inline;
    function get_cells: PGList; cdecl; inline;
    procedure pack_end(cell: PGtkCellRenderer; expand: gboolean); cdecl; inline;
    procedure pack_start(cell: PGtkCellRenderer; expand: gboolean); cdecl; inline;
    procedure reorder(cell: PGtkCellRenderer; position: gint); cdecl; inline;
    //procedure set_attributes(cell: PGtkCellRenderer; args: array of const); cdecl; inline;
    procedure set_cell_data_func(cell: PGtkCellRenderer; func: TGtkCellLayoutDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
  end;

  PPGtkComboBox = ^PGtkComboBox;
  PGtkComboBox = ^TGtkComboBox;

  PPGtkSensitivityType = ^PGtkSensitivityType;
  PGtkSensitivityType = ^TGtkSensitivityType;

  PPGtkTreeViewRowSeparatorFunc = ^PGtkTreeViewRowSeparatorFunc;
  PGtkTreeViewRowSeparatorFunc = ^TGtkTreeViewRowSeparatorFunc;
  TGtkTreeViewRowSeparatorFunc = function(model: PGtkTreeModel; iter: PGtkTreeIter; data: gpointer): gboolean; cdecl;

  PPGtkComboBoxPrivate = ^PGtkComboBoxPrivate;
  PGtkComboBoxPrivate = ^TGtkComboBoxPrivate;
  TGtkComboBox = object(TGtkBin)
    priv3: PGtkComboBoxPrivate;
    function new: PGtkComboBox; cdecl; inline; static;
    function new_with_area(area: PGtkCellArea): PGtkComboBox; cdecl; inline; static;
    function new_with_area_and_entry(area: PGtkCellArea): PGtkComboBox; cdecl; inline; static;
    function new_with_entry: PGtkComboBox; cdecl; inline; static;
    function new_with_model(model: PGtkTreeModel): PGtkComboBox; cdecl; inline; static;
    function new_with_model_and_entry(model: PGtkTreeModel): PGtkComboBox; cdecl; inline; static;
    function get_active: gint; cdecl; inline;
    function get_active_id: Pgchar; cdecl; inline;
    function get_active_iter(iter: PGtkTreeIter): gboolean; cdecl; inline;
    function get_add_tearoffs: gboolean; cdecl; inline;
    function get_button_sensitivity: TGtkSensitivityType; cdecl; inline;
    function get_column_span_column: gint; cdecl; inline;
    function get_entry_text_column: gint; cdecl; inline;
    function get_focus_on_click: gboolean; cdecl; inline;
    function get_has_entry: gboolean; cdecl; inline;
    function get_id_column: gint; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function get_popup_accessible: PAtkObject; cdecl; inline;
    function get_popup_fixed_width: gboolean; cdecl; inline;
    function get_row_separator_func: TGtkTreeViewRowSeparatorFunc; cdecl; inline;
    function get_row_span_column: gint; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_wrap_width: gint; cdecl; inline;
    procedure popdown; cdecl; inline;
    procedure popup; cdecl; inline;
    procedure popup_for_device(device: PGdkDevice); cdecl; inline;
    procedure set_active(index_: gint); cdecl; inline;
    function set_active_id(active_id: Pgchar): gboolean; cdecl; inline;
    procedure set_active_iter(iter: PGtkTreeIter); cdecl; inline;
    procedure set_add_tearoffs(add_tearoffs: gboolean); cdecl; inline;
    procedure set_button_sensitivity(sensitivity: TGtkSensitivityType); cdecl; inline;
    procedure set_column_span_column(column_span: gint); cdecl; inline;
    procedure set_entry_text_column(text_column: gint); cdecl; inline;
    procedure set_focus_on_click(focus_on_click: gboolean); cdecl; inline;
    procedure set_id_column(id_column: gint); cdecl; inline;
    procedure set_model(model: PGtkTreeModel); cdecl; inline;
    procedure set_popup_fixed_width(fixed: gboolean); cdecl; inline;
    procedure set_row_separator_func(func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_row_span_column(row_span: gint); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_wrap_width(width: gint); cdecl; inline;
    property active:  gint read get_active  { property is writeable but setter not declared } ;
    property active_id:  Pgchar read get_active_id  { property is writeable but setter not declared } ;
    property add_tearoffs:  gboolean read get_add_tearoffs  { property is writeable but setter not declared } ;
    property button_sensitivity:  TGtkSensitivityType read get_button_sensitivity  { property is writeable but setter not declared } ;
    //property cell_area: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_area  { property is writeable but setter not declared } ;
    property column_span_column:  gint read get_column_span_column  { property is writeable but setter not declared } ;
    property entry_text_column:  gint read get_entry_text_column  { property is writeable but setter not declared } ;
    property focus_on_click:  gboolean read get_focus_on_click  { property is writeable but setter not declared } ;
    property has_entry:  gboolean read get_has_entry  { property is writeable but setter not declared } ;
    //property has_frame: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_frame  { property is writeable but setter not declared } ;
    property id_column:  gint read get_id_column  { property is writeable but setter not declared } ;
    property model:  PGtkTreeModel read get_model  { property is writeable but setter not declared } ;
    property popup_fixed_width:  gboolean read get_popup_fixed_width  { property is writeable but setter not declared } ;
    //property popup_shown: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_popup_shown ;
    property row_span_column:  gint read get_row_span_column  { property is writeable but setter not declared } ;
    //property tearoff_title: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tearoff_title  { property is writeable but setter not declared } ;
    property wrap_width:  gint read get_wrap_width  { property is writeable but setter not declared } ;
  end;

  PPGtkAppChooserButtonPrivate = ^PGtkAppChooserButtonPrivate;
  PGtkAppChooserButtonPrivate = ^TGtkAppChooserButtonPrivate;

  TGtkAppChooserButtonPrivate = record
    Unknown: Pointer;
  end;



  PPGtkAppChooserButton = ^PGtkAppChooserButton;
  PGtkAppChooserButton = ^TGtkAppChooserButton;
  TGtkAppChooserButton = object(TGtkComboBox)
    priv4: PGtkAppChooserButtonPrivate;
    function new(content_type: Pgchar): PGtkAppChooserButton; cdecl; inline; static;
    procedure append_custom_item(name: Pgchar; label_: Pgchar; icon: PGIcon); cdecl; inline;
    procedure append_separator; cdecl; inline;
    function get_heading: Pgchar; cdecl; inline;
    function get_show_dialog_item: gboolean; cdecl; inline;
    procedure set_active_custom_item(name: Pgchar); cdecl; inline;
    procedure set_heading(heading: Pgchar); cdecl; inline;
    procedure set_show_dialog_item(setting: gboolean); cdecl; inline;
    property heading:  Pgchar read get_heading  { property is writeable but setter not declared } ;
    property show_dialog_item:  gboolean read get_show_dialog_item  { property is writeable but setter not declared } ;
  end;

  PPGtkComboBoxClass = ^PGtkComboBoxClass;
  PGtkComboBoxClass = ^TGtkComboBoxClass;
  TGtkComboBoxClass = object
    parent_class: TGtkBinClass;
    changed: procedure(combo_box: PGtkComboBox); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkAppChooserButtonClass = ^PGtkAppChooserButtonClass;
  PGtkAppChooserButtonClass = ^TGtkAppChooserButtonClass;
  TGtkAppChooserButtonClass = object
    parent_class: TGtkComboBoxClass;
    custom_item_activated: procedure(self: PGtkAppChooserButton; item_name: Pgchar); cdecl;
    padding: array [0..15] of gpointer;
  end;

  PPGtkAppChooserDialogPrivate = ^PGtkAppChooserDialogPrivate;
  PGtkAppChooserDialogPrivate = ^TGtkAppChooserDialogPrivate;

  TGtkAppChooserDialogPrivate = record
    Unknown: Pointer;
  end;



  PPGtkAppChooserDialog = ^PGtkAppChooserDialog;
  PGtkAppChooserDialog = ^TGtkAppChooserDialog;
  TGtkAppChooserDialog = object(TGtkDialog)
    priv1: PGtkAppChooserDialogPrivate;
    function new(parent: PAtkWindow; flags: TGtkDialogFlags; file_: PGFile): PGtkAppChooserDialog; cdecl; inline; static;
    function new_for_content_type(parent: PAtkWindow; flags: TGtkDialogFlags; content_type: Pgchar): PGtkAppChooserDialog; cdecl; inline; static;
    function get_heading: Pgchar; cdecl; inline;
    function get_widget: PGtkWidget; cdecl; inline;
    procedure set_heading(heading: Pgchar); cdecl; inline;
    //property gfile: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gfile  { property is writeable but setter not declared } ;
    property heading:  Pgchar read get_heading  { property is writeable but setter not declared } ;
  end;

  PPGtkAppChooserDialogClass = ^PGtkAppChooserDialogClass;
  PGtkAppChooserDialogClass = ^TGtkAppChooserDialogClass;
  TGtkAppChooserDialogClass = object
    parent_class: TGtkDialogClass;
    padding: array [0..15] of gpointer;
  end;

  PPGtkOrientable = ^PGtkOrientable;
  PGtkOrientable = ^TGtkOrientable;
  TGtkOrientable = object
    function get_orientation: TGtkOrientation; cdecl; inline;
    procedure set_orientation(orientation: TGtkOrientation); cdecl; inline;
    property orientation:  TGtkOrientation read get_orientation  { property is writeable but setter not declared } ;
  end;

  PPGtkMenuShell = ^PGtkMenuShell;
  PGtkMenuShell = ^TGtkMenuShell;

  PPGtkMenuShellPrivate = ^PGtkMenuShellPrivate;
  PGtkMenuShellPrivate = ^TGtkMenuShellPrivate;
  TGtkMenuShell = object(TGtkContainer)
    priv2: PGtkMenuShellPrivate;
    procedure activate_item(menu_item: PGtkWidget; force_deactivate: gboolean); cdecl; inline;
    procedure append(child: PGtkWidget); cdecl; inline;
    procedure cancel; cdecl; inline;
    procedure deactivate; cdecl; inline;
    procedure deselect; cdecl; inline;
    function get_parent_shell: PGtkWidget; cdecl; inline;
    function get_selected_item: PGtkWidget; cdecl; inline;
    function get_take_focus: gboolean; cdecl; inline;
    procedure insert(child: PGtkWidget; position: gint); cdecl; inline;
    procedure prepend(child: PGtkWidget); cdecl; inline;
    procedure select_first(search_sensitive: gboolean); cdecl; inline;
    procedure select_item(menu_item: PGtkWidget); cdecl; inline;
    procedure set_take_focus(take_focus: gboolean); cdecl; inline;
    property take_focus:  gboolean read get_take_focus  { property is writeable but setter not declared } ;
  end;

  PPGtkMenuDetachFunc = ^PGtkMenuDetachFunc;
  PGtkMenuDetachFunc = ^TGtkMenuDetachFunc;
  TGtkMenuDetachFunc = procedure(attach_widget: PGtkWidget; menu: PGtkMenu); cdecl;

  PPGtkMenuPositionFunc = ^PGtkMenuPositionFunc;
  PGtkMenuPositionFunc = ^TGtkMenuPositionFunc;
  TGtkMenuPositionFunc = procedure(menu: PGtkMenu; x: Pgint; y: Pgint; push_in: Pgboolean; user_data: gpointer); cdecl;

  PPGtkMenuPrivate = ^PGtkMenuPrivate;
  PGtkMenuPrivate = ^TGtkMenuPrivate;
  TGtkMenu = object(TGtkMenuShell)
    priv3: PGtkMenuPrivate;
    function new: PGtkMenu; cdecl; inline; static;
    function get_for_attach_widget(widget: PGtkWidget): PGList; cdecl; inline; static;
    procedure attach(child: PGtkWidget; left_attach: guint; right_attach: guint; top_attach: guint; bottom_attach: guint); cdecl; inline;
    procedure attach_to_widget(attach_widget: PGtkWidget; detacher: TGtkMenuDetachFunc); cdecl; inline;
    procedure detach; cdecl; inline;
    function get_accel_group: PGtkAccelGroup; cdecl; inline;
    function get_accel_path: Pgchar; cdecl; inline;
    function get_active: PGtkWidget; cdecl; inline;
    function get_attach_widget: PGtkWidget; cdecl; inline;
    function get_monitor: gint; cdecl; inline;
    function get_reserve_toggle_size: gboolean; cdecl; inline;
    function get_tearoff_state: gboolean; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    procedure popdown; cdecl; inline;
    procedure popup(parent_menu_shell: PGtkWidget; parent_menu_item: PGtkWidget; func: TGtkMenuPositionFunc; data: gpointer; button: guint; activate_time: guint32); cdecl; inline;
    procedure popup_for_device(device: PGdkDevice; parent_menu_shell: PGtkWidget; parent_menu_item: PGtkWidget; func: TGtkMenuPositionFunc; data: gpointer; destroy_: TGDestroyNotify; button: guint; activate_time: guint32); cdecl; inline;
    procedure reorder_child(child: PGtkWidget; position: gint); cdecl; inline;
    procedure reposition; cdecl; inline;
    procedure set_accel_group(accel_group: PGtkAccelGroup); cdecl; inline;
    procedure set_accel_path(accel_path: Pgchar); cdecl; inline;
    procedure set_active(index: guint); cdecl; inline;
    procedure set_monitor(monitor_num: gint); cdecl; inline;
    procedure set_reserve_toggle_size(reserve_toggle_size: gboolean); cdecl; inline;
    procedure set_screen(screen: PGdkScreen); cdecl; inline;
    procedure set_tearoff_state(torn_off: gboolean); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    property accel_group:  PGtkAccelGroup read get_accel_group  { property is writeable but setter not declared } ;
    property accel_path:  Pgchar read get_accel_path  { property is writeable but setter not declared } ;
    property active:  PGtkWidget read get_active  { property is writeable but setter not declared } ;
    property attach_widget:  PGtkWidget read get_attach_widget  { property is writeable but setter not declared } ;
    property monitor:  gint read get_monitor  { property is writeable but setter not declared } ;
    property reserve_toggle_size:  gboolean read get_reserve_toggle_size  { property is writeable but setter not declared } ;
    property tearoff_state:  gboolean read get_tearoff_state  { property is writeable but setter not declared } ;
    //property tearoff_title: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tearoff_title  { property is writeable but setter not declared } ;
  end;

  PPGtkBox = ^PGtkBox;
  PGtkBox = ^TGtkBox;

  PPGtkPackType = ^PGtkPackType;
  PGtkPackType = ^TGtkPackType;

  PPGtkBoxPrivate = ^PGtkBoxPrivate;
  PGtkBoxPrivate = ^TGtkBoxPrivate;
  TGtkBox = object(TGtkContainer)
    priv2: PGtkBoxPrivate;
    function new(orientation: TGtkOrientation; spacing: gint): PGtkBox; cdecl; inline; static;
    function get_homogeneous: gboolean; cdecl; inline;
    function get_spacing: gint; cdecl; inline;
    procedure pack_end(child: PGtkWidget; expand: gboolean; fill: gboolean; padding: guint); cdecl; inline;
    procedure pack_start(child: PGtkWidget; expand: gboolean; fill: gboolean; padding: guint); cdecl; inline;
    procedure query_child_packing(child: PGtkWidget; expand: Pgboolean; fill: Pgboolean; padding: Pguint; pack_type: PGtkPackType); cdecl; inline;
    procedure reorder_child(child: PGtkWidget; position: gint); cdecl; inline;
    procedure set_child_packing(child: PGtkWidget; expand: gboolean; fill: gboolean; padding: guint; pack_type: TGtkPackType); cdecl; inline;
    procedure set_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_spacing(spacing: gint); cdecl; inline;
    property homogeneous:  gboolean read get_homogeneous  { property is writeable but setter not declared } ;
    property spacing:  gint read get_spacing  { property is writeable but setter not declared } ;
  end;

  PPGtkAppChooserWidgetPrivate = ^PGtkAppChooserWidgetPrivate;
  PGtkAppChooserWidgetPrivate = ^TGtkAppChooserWidgetPrivate;

  TGtkAppChooserWidgetPrivate = record
    Unknown: Pointer;
  end;



  PPGtkAppChooserWidget = ^PGtkAppChooserWidget;
  PGtkAppChooserWidget = ^TGtkAppChooserWidget;
  TGtkAppChooserWidget = object(TGtkBox)
    priv3: PGtkAppChooserWidgetPrivate;
    function new(content_type: Pgchar): PGtkAppChooserWidget; cdecl; inline; static;
    function get_default_text: Pgchar; cdecl; inline;
    function get_show_all: gboolean; cdecl; inline;
    function get_show_default: gboolean; cdecl; inline;
    function get_show_fallback: gboolean; cdecl; inline;
    function get_show_other: gboolean; cdecl; inline;
    function get_show_recommended: gboolean; cdecl; inline;
    procedure set_default_text(text: Pgchar); cdecl; inline;
    procedure set_show_all(setting: gboolean); cdecl; inline;
    procedure set_show_default(setting: gboolean); cdecl; inline;
    procedure set_show_fallback(setting: gboolean); cdecl; inline;
    procedure set_show_other(setting: gboolean); cdecl; inline;
    procedure set_show_recommended(setting: gboolean); cdecl; inline;
    property default_text:  Pgchar read get_default_text  { property is writeable but setter not declared } ;
    property show_all:  gboolean read get_show_all  { property is writeable but setter not declared } ;
    property show_default:  gboolean read get_show_default  { property is writeable but setter not declared } ;
    property show_fallback:  gboolean read get_show_fallback  { property is writeable but setter not declared } ;
    property show_other:  gboolean read get_show_other  { property is writeable but setter not declared } ;
    property show_recommended:  gboolean read get_show_recommended  { property is writeable but setter not declared } ;
  end;

  PPGtkBoxClass = ^PGtkBoxClass;
  PGtkBoxClass = ^TGtkBoxClass;
  TGtkBoxClass = object
    parent_class: TGtkContainerClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkAppChooserWidgetClass = ^PGtkAppChooserWidgetClass;
  PGtkAppChooserWidgetClass = ^TGtkAppChooserWidgetClass;
  TGtkAppChooserWidgetClass = object
    parent_class: TGtkBoxClass;
    application_selected: procedure(self: PGtkAppChooserWidget; app_info: PGAppInfo); cdecl;
    application_activated: procedure(self: PGtkAppChooserWidget; app_info: PGAppInfo); cdecl;
    populate_popup: procedure(self: PGtkAppChooserWidget; menu: PGtkMenu; app_info: PGAppInfo); cdecl;
    padding: array [0..15] of gpointer;
  end;

  PPGtkApplication = ^PGtkApplication;
  PGtkApplication = ^TGtkApplication;
  TGtkApplication = object(TGApplication)
    priv1: PGApplicationPrivate;
    function new(application_id: Pgchar; flags: TGApplicationFlags): PGtkApplication; cdecl; inline; static;
    procedure add_window(window: PAtkWindow); cdecl; inline;
    function get_windows: PGList; cdecl; inline;
    procedure remove_window(window: PAtkWindow); cdecl; inline;
  end;

  PPGtkApplicationClass = ^PGtkApplicationClass;
  PGtkApplicationClass = ^TGtkApplicationClass;
  TGtkApplicationClass = object
    parent_class: TGApplicationClass;
    window_added: procedure(application: PGtkApplication; window: PAtkWindow); cdecl;
    window_removed: procedure(application: PGtkApplication; window: PAtkWindow); cdecl;
    padding: array [0..13] of gpointer;
  end;

  PPGtkApplicationPrivate = ^PGtkApplicationPrivate;
  PGtkApplicationPrivate = ^TGtkApplicationPrivate;

  TGtkApplicationPrivate = record
    Unknown: Pointer;
  end;



  PPGtkArrowType = ^PGtkArrowType;
  PGtkArrowType = ^TGtkArrowType;

  PPGtkShadowType = ^PGtkShadowType;
  PGtkShadowType = ^TGtkShadowType;

  PPGtkArrowPrivate = ^PGtkArrowPrivate;
  PGtkArrowPrivate = ^TGtkArrowPrivate;

  TGtkArrowPrivate = record
    Unknown: Pointer;
  end;



  PPGtkArrow = ^PGtkArrow;
  PGtkArrow = ^TGtkArrow;
  TGtkArrow = object
    misc: TAtkMisc;
    priv: PGtkArrowPrivate;
    function new(arrow_type: TGtkArrowType; shadow_type: TGtkShadowType): PGtkArrow; cdecl; inline; static;
    procedure set_(arrow_type: TGtkArrowType; shadow_type: TGtkShadowType); cdecl; inline;
    //property arrow_type: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_arrow_type  { property is writeable but setter not declared } ;
    //property shadow_type: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_shadow_type  { property is writeable but setter not declared } ;
  end;

  PPGtkArrowClass = ^PGtkArrowClass;
  PGtkArrowClass = ^TGtkArrowClass;
  TGtkArrowClass = object
    parent_class: TAtkMiscClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkArrowPlacement = ^PGtkArrowPlacement;
  PGtkArrowPlacement = ^TGtkArrowPlacement;

  PPGtkFrame = ^PGtkFrame;
  PGtkFrame = ^TGtkFrame;

  PPGtkFramePrivate = ^PGtkFramePrivate;
  PGtkFramePrivate = ^TGtkFramePrivate;
  TGtkFrame = object(TGtkBin)
    priv3: PGtkFramePrivate;
    function new(label_: Pgchar): PGtkFrame; cdecl; inline; static;
    function get_label: Pgchar; cdecl; inline;
    procedure get_label_align(xalign: Pgfloat; yalign: Pgfloat); cdecl; inline;
    function get_label_widget: PGtkWidget; cdecl; inline;
    function get_shadow_type: TGtkShadowType; cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_label_align(xalign: gfloat; yalign: gfloat); cdecl; inline;
    procedure set_label_widget(label_widget: PGtkWidget); cdecl; inline;
    procedure set_shadow_type(type_: TGtkShadowType); cdecl; inline;
    property label_:  Pgchar read get_label  { property is writeable but setter not declared } ;
    property label_widget:  PGtkWidget read get_label_widget  { property is writeable but setter not declared } ;
    //property label_xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_label_xalign  { property is writeable but setter not declared } ;
    //property label_yalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_label_yalign  { property is writeable but setter not declared } ;
    property shadow_type:  TGtkShadowType read get_shadow_type  { property is writeable but setter not declared } ;
  end;

  PPGtkAspectFramePrivate = ^PGtkAspectFramePrivate;
  PGtkAspectFramePrivate = ^TGtkAspectFramePrivate;

  TGtkAspectFramePrivate = record
    Unknown: Pointer;
  end;



  PPGtkAspectFrame = ^PGtkAspectFrame;
  PGtkAspectFrame = ^TGtkAspectFrame;
  TGtkAspectFrame = object(TGtkFrame)
    priv4: PGtkAspectFramePrivate;
    function new(label_: Pgchar; xalign: gfloat; yalign: gfloat; ratio: gfloat; obey_child: gboolean): PGtkAspectFrame; cdecl; inline; static;
    procedure set_(xalign: gfloat; yalign: gfloat; ratio: gfloat; obey_child: gboolean); cdecl; inline;
    //property obey_child: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_obey_child  { property is writeable but setter not declared } ;
    //property ratio: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_ratio  { property is writeable but setter not declared } ;
    //property xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xalign  { property is writeable but setter not declared } ;
    //property yalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_yalign  { property is writeable but setter not declared } ;
  end;

  PPGtkFrameClass = ^PGtkFrameClass;
  PGtkFrameClass = ^TGtkFrameClass;
  TGtkFrameClass = object
    parent_class: TGtkBinClass;
    compute_child_allocation: procedure(frame: PGtkFrame; allocation: PGtkAllocation); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkAspectFrameClass = ^PGtkAspectFrameClass;
  PGtkAspectFrameClass = ^TGtkAspectFrameClass;
  TGtkAspectFrameClass = object
    parent_class: TGtkFrameClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkAssistantPageType = ^PGtkAssistantPageType;
  PGtkAssistantPageType = ^TGtkAssistantPageType;
  TGtkAssistantPageFunc = function(current_page: gint; data: gpointer): gint; cdecl;

  PPGtkAssistantPrivate = ^PGtkAssistantPrivate;
  PGtkAssistantPrivate = ^TGtkAssistantPrivate;

  TGtkAssistantPrivate = record
    Unknown: Pointer;
  end;



  PPGtkAssistant = ^PGtkAssistant;
  PGtkAssistant = ^TGtkAssistant;

  PPGtkAssistantPageFunc = ^PGtkAssistantPageFunc;
  PGtkAssistantPageFunc = ^TGtkAssistantPageFunc;
  TGtkAssistant = object
    parent: TAtkWindow;
    priv: PGtkAssistantPrivate;
    function new: PGtkAssistant; cdecl; inline; static;
    procedure add_action_widget(child: PGtkWidget); cdecl; inline;
    function append_page(page: PGtkWidget): gint; cdecl; inline;
    procedure commit; cdecl; inline;
    function get_current_page: gint; cdecl; inline;
    function get_n_pages: gint; cdecl; inline;
    function get_nth_page(page_num: gint): PGtkWidget; cdecl; inline;
    function get_page_complete(page: PGtkWidget): gboolean; cdecl; inline;
    
    
    function get_page_title(page: PGtkWidget): Pgchar; cdecl; inline;
    function get_page_type(page: PGtkWidget): TGtkAssistantPageType; cdecl; inline;
    function insert_page(page: PGtkWidget; position: gint): gint; cdecl; inline;
    procedure next_page; cdecl; inline;
    function prepend_page(page: PGtkWidget): gint; cdecl; inline;
    procedure previous_page; cdecl; inline;
    procedure remove_action_widget(child: PGtkWidget); cdecl; inline;
    procedure remove_page(page_num: gint); cdecl; inline;
    procedure set_current_page(page_num: gint); cdecl; inline;
    procedure set_forward_page_func(page_func: TGtkAssistantPageFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_page_complete(page: PGtkWidget; complete: gboolean); cdecl; inline;
    
    
    procedure set_page_title(page: PGtkWidget; title: Pgchar); cdecl; inline;
    procedure set_page_type(page: PGtkWidget; type_: TGtkAssistantPageType); cdecl; inline;
    procedure update_buttons_state; cdecl; inline;
  end;

  PPGtkAssistantClass = ^PGtkAssistantClass;
  PGtkAssistantClass = ^TGtkAssistantClass;
  TGtkAssistantClass = object
    parent_class: TGdkWindowClass;
    prepare: procedure(assistant: PGtkAssistant; page: PGtkWidget); cdecl;
    apply: procedure(assistant: PGtkAssistant); cdecl;
    close: procedure(assistant: PGtkAssistant); cdecl;
    cancel: procedure(assistant: PGtkAssistant); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
  end;
  TGtkAttachOptions = packed object(TBitObject32)
  public
    property expand: DWord index 1 read GetBit write SetBit;
    property shrink: DWord index 2 read GetBit write SetBit;
    property fill: DWord index 4 read GetBit write SetBit;
  end;


  TGtkBinPrivate = record
    Unknown: Pointer;
  end;



  PPGtkBindingArg = ^PGtkBindingArg;
  PGtkBindingArg = ^TGtkBindingArg;

  TGtkBindingArg = record
    arg_type: TGType;
      case longint of
    0 : (long_data: glong);
    1 : (double_data: gdouble);
    2 : (string_data: Pgchar);


  end;



  PPGtkBindingSet = ^PGtkBindingSet;
  PGtkBindingSet = ^TGtkBindingSet;

  PPGtkPathType = ^PGtkPathType;
  PGtkPathType = ^TGtkPathType;

  PPGtkPathPriorityType = ^PGtkPathPriorityType;
  PGtkPathPriorityType = ^TGtkPathPriorityType;

  PPGtkBindingEntry = ^PGtkBindingEntry;
  PGtkBindingEntry = ^TGtkBindingEntry;
  TGtkBindingSet = object
    set_name: Pgchar;
    priority: gint;
    widget_path_pspecs: PGSList;
    widget_class_pspecs: PGSList;
    class_branch_pspecs: PGSList;
    entries: PGtkBindingEntry;
    current: PGtkBindingEntry;
    parsed: guint1 { changed from guint to accomodate 1 bitsize requirement };
    function activate(keyval: guint; modifiers: TGdkModifierType; object_: PGObject): gboolean; cdecl; inline;
    procedure add_path(path_type: TGtkPathType; path_pattern: Pgchar; priority: TGtkPathPriorityType); cdecl; inline;
    function by_class(object_class: gpointer): PGtkBindingSet; cdecl; inline; static;
    function find(set_name: Pgchar): PGtkBindingSet; cdecl; inline; static;
    function new(set_name: Pgchar): PGtkBindingSet; cdecl; inline; static;
  end;

  PPGtkBindingSignal = ^PGtkBindingSignal;
  PGtkBindingSignal = ^TGtkBindingSignal;
  TGtkBindingEntry = object
    keyval: guint;
    modifiers: TGdkModifierType;
    binding_set: PGtkBindingSet;
    destroyed: guint1 { changed from guint to accomodate 1 bitsize requirement };
    in_emission: guint1 { changed from guint to accomodate 1 bitsize requirement };
    marks_unbound: guint1 { changed from guint to accomodate 1 bitsize requirement };
    set_next: PGtkBindingEntry;
    hash_next: PGtkBindingEntry;
    signals: PGtkBindingSignal;
    //procedure add_signal(binding_set: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType; signal_name: Pgchar; n_args: guint; args: array of const); cdecl; inline; static;
    function add_signal_from_string(binding_set: PGtkBindingSet; signal_desc: Pgchar): TGTokenType; cdecl; inline; static;
    procedure add_signall(binding_set: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType; signal_name: Pgchar; binding_args: PGSList); cdecl; inline; static;
    procedure remove(binding_set: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType); cdecl; inline; static;
    procedure skip(binding_set: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType); cdecl; inline; static;
  end;

  TGtkBindingSignal = record
    next: PGtkBindingSignal;
    signal_name: Pgchar;
    n_args: guint;
    args: PGtkBindingArg;
  end;



  PPGtkBorder = ^PGtkBorder;
  PGtkBorder = ^TGtkBorder;
  TGtkBorder = object
    left: gint16;
    right: gint16;
    top: gint16;
    bottom: gint16;
    function new: PGtkBorder; cdecl; inline; static;
    function copy: PGtkBorder; cdecl; inline;
    procedure free; cdecl; inline;
  end;

  PPGtkBorderStyle = ^PGtkBorderStyle;
  PGtkBorderStyle = ^TGtkBorderStyle;

  TGtkBoxPrivate = record
    Unknown: Pointer;
  end;



  PPGtkBuilderConnectFunc = ^PGtkBuilderConnectFunc;
  PGtkBuilderConnectFunc = ^TGtkBuilderConnectFunc;
  TGtkBuilderConnectFunc = procedure(builder: PGtkBuilder; object_: PGObject; signal_name: Pgchar; handler_name: Pgchar; connect_object: PGObject; flags: TGConnectFlags; user_data: gpointer); cdecl;

  PPGtkBuilderPrivate = ^PGtkBuilderPrivate;
  PGtkBuilderPrivate = ^TGtkBuilderPrivate;
  TGtkBuilder = object(TGObject)
    priv: PGtkBuilderPrivate;
    function new: PGtkBuilder; cdecl; inline; static;
    function add_from_file(filename: Pgchar): guint; cdecl; inline;
    function add_from_string(buffer: Pgchar; length: gsize): guint; cdecl; inline;
    function add_objects_from_file(filename: Pgchar; object_ids: PPgchar): guint; cdecl; inline;
    function add_objects_from_string(buffer: Pgchar; length: gsize; object_ids: PPgchar): guint; cdecl; inline;
    procedure connect_signals(user_data: gpointer); cdecl; inline;
    procedure connect_signals_full(func: TGtkBuilderConnectFunc; user_data: gpointer); cdecl; inline;
    function get_object(name: Pgchar): PGObject; cdecl; inline;
    function get_objects: PGSList; cdecl; inline;
    function get_translation_domain: Pgchar; cdecl; inline;
    function get_type_from_name(type_name: Pgchar): TGType; cdecl; inline;
    procedure set_translation_domain(domain: Pgchar); cdecl; inline;
    function value_from_string(pspec: PGParamSpec; string_: Pgchar; value: PGValue): gboolean; cdecl; inline;
    function value_from_string_type(type_: TGType; string_: Pgchar; value: PGValue): gboolean; cdecl; inline;
    property translation_domain:  Pgchar read get_translation_domain  { property is writeable but setter not declared } ;
  end;

  PPGtkBuildableIface = ^PGtkBuildableIface;
  PGtkBuildableIface = ^TGtkBuildableIface;
  TGtkBuildableIface = object
    g_iface: TGTypeInterface;
    set_name: procedure(buildable: PGtkBuildable; name: Pgchar); cdecl;
    get_name: function(buildable: PGtkBuildable): Pgchar; cdecl;
    add_child: procedure(buildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; type_: Pgchar); cdecl;
    set_buildable_property: procedure(buildable: PGtkBuildable; builder: PGtkBuilder; name: Pgchar; value: PGValue); cdecl;
    construct_child: function(buildable: PGtkBuildable; builder: PGtkBuilder; name: Pgchar): PGObject; cdecl;
    custom_tag_start: function(buildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; tagname: Pgchar; parser: PGMarkupParser; data: Pgpointer): gboolean; cdecl;
    custom_tag_end: procedure(buildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; tagname: Pgchar; data: Pgpointer); cdecl;
    custom_finished: procedure(buildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; tagname: Pgchar; data: gpointer); cdecl;
    parser_finished: procedure(buildable: PGtkBuildable; builder: PGtkBuilder); cdecl;
    get_internal_child: function(buildable: PGtkBuildable; builder: PGtkBuilder; childname: Pgchar): PGObject; cdecl;
  end;

  TGtkBuilderPrivate = record
    Unknown: Pointer;
  end;



  PPGtkBuilderClass = ^PGtkBuilderClass;
  PGtkBuilderClass = ^TGtkBuilderClass;
  TGtkBuilderClass = object
    parent_class: TGObjectClass;
    get_type_from_name: function(builder: PGtkBuilder; type_name: Pgchar): TGType; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkBuilderError = ^PGtkBuilderError;
  PGtkBuilderError = ^TGtkBuilderError;

  PPGtkPositionType = ^PGtkPositionType;
  PGtkPositionType = ^TGtkPositionType;

  PPGtkReliefStyle = ^PGtkReliefStyle;
  PGtkReliefStyle = ^TGtkReliefStyle;

  PPGtkButtonPrivate = ^PGtkButtonPrivate;
  PGtkButtonPrivate = ^TGtkButtonPrivate;

  TGtkButtonPrivate = record
    Unknown: Pointer;
  end;



  PPGtkButton = ^PGtkButton;
  PGtkButton = ^TGtkButton;
  TGtkButton = object(TGtkBin)
    priv3: PGtkButtonPrivate;
    function new: PGtkButton; cdecl; inline; static;
    function new_from_stock(stock_id: Pgchar): PGtkButton; cdecl; inline; static;
    function new_with_label(label_: Pgchar): PGtkButton; cdecl; inline; static;
    function new_with_mnemonic(label_: Pgchar): PGtkButton; cdecl; inline; static;
    procedure clicked; cdecl; inline;
    procedure enter; cdecl; inline;
    procedure get_alignment(xalign: Pgfloat; yalign: Pgfloat); cdecl; inline;
    function get_event_window: PGdkWindow; cdecl; inline;
    function get_focus_on_click: gboolean; cdecl; inline;
    function get_image: PGtkWidget; cdecl; inline;
    function get_image_position: TGtkPositionType; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_relief: TGtkReliefStyle; cdecl; inline;
    function get_use_stock: gboolean; cdecl; inline;
    function get_use_underline: gboolean; cdecl; inline;
    procedure leave; cdecl; inline;
    procedure pressed; cdecl; inline;
    procedure released; cdecl; inline;
    procedure set_alignment(xalign: gfloat; yalign: gfloat); cdecl; inline;
    procedure set_focus_on_click(focus_on_click: gboolean); cdecl; inline;
    procedure set_image(image: PGtkWidget); cdecl; inline;
    procedure set_image_position(position: TGtkPositionType); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_relief(newstyle: TGtkReliefStyle); cdecl; inline;
    procedure set_use_stock(use_stock: gboolean); cdecl; inline;
    procedure set_use_underline(use_underline: gboolean); cdecl; inline;
    property focus_on_click:  gboolean read get_focus_on_click  { property is writeable but setter not declared } ;
    property image:  PGtkWidget read get_image  { property is writeable but setter not declared } ;
    property image_position:  TGtkPositionType read get_image_position  { property is writeable but setter not declared } ;
    property label_:  Pgchar read get_label  { property is writeable but setter not declared } ;
    property relief:  TGtkReliefStyle read get_relief  { property is writeable but setter not declared } ;
    property use_stock:  gboolean read get_use_stock  { property is writeable but setter not declared } ;
    property use_underline:  gboolean read get_use_underline  { property is writeable but setter not declared } ;
    //property xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xalign  { property is writeable but setter not declared } ;
    //property yalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_yalign  { property is writeable but setter not declared } ;
  end;

  PPGtkButtonBoxStyle = ^PGtkButtonBoxStyle;
  PGtkButtonBoxStyle = ^TGtkButtonBoxStyle;

  PPGtkButtonBoxPrivate = ^PGtkButtonBoxPrivate;
  PGtkButtonBoxPrivate = ^TGtkButtonBoxPrivate;

  TGtkButtonBoxPrivate = record
    Unknown: Pointer;
  end;



  PPGtkButtonBox = ^PGtkButtonBox;
  PGtkButtonBox = ^TGtkButtonBox;
  TGtkButtonBox = object(TGtkBox)
    priv3: PGtkButtonBoxPrivate;
    function new(orientation: TGtkOrientation): PGtkButtonBox; cdecl; inline; static;
    function get_child_non_homogeneous(child: PGtkWidget): gboolean; cdecl; inline;
    function get_child_secondary(child: PGtkWidget): gboolean; cdecl; inline;
    function get_layout: TGtkButtonBoxStyle; cdecl; inline;
    procedure set_child_non_homogeneous(child: PGtkWidget; non_homogeneous: gboolean); cdecl; inline;
    procedure set_child_secondary(child: PGtkWidget; is_secondary: gboolean); cdecl; inline;
    procedure set_layout(layout_style: TGtkButtonBoxStyle); cdecl; inline;
    //property layout_style: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_layout_style  { property is writeable but setter not declared } ;
  end;

  PPGtkButtonBoxClass = ^PGtkButtonBoxClass;
  PGtkButtonBoxClass = ^TGtkButtonBoxClass;
  TGtkButtonBoxClass = object
    parent_class: TGtkBoxClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkButtonClass = ^PGtkButtonClass;
  PGtkButtonClass = ^TGtkButtonClass;
  TGtkButtonClass = object
    parent_class: TGtkBinClass;
    pressed: procedure(button: PGtkButton); cdecl;
    released: procedure(button: PGtkButton); cdecl;
    clicked: procedure(button: PGtkButton); cdecl;
    enter: procedure(button: PGtkButton); cdecl;
    leave: procedure(button: PGtkButton); cdecl;
    activate: procedure(button: PGtkButton); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkButtonsType = ^PGtkButtonsType;
  PGtkButtonsType = ^TGtkButtonsType;
  TGtkCalendarDisplayOptions = packed object(TBitObject32)
  public
    property show_heading: DWord index 1 read GetBit write SetBit;
    property show_day_names: DWord index 2 read GetBit write SetBit;
    property no_month_change: DWord index 4 read GetBit write SetBit;
    property show_week_numbers: DWord index 8 read GetBit write SetBit;
    property show_details: DWord index 32 read GetBit write SetBit;
  end;


  PPGtkCalendar = ^PGtkCalendar;
  PGtkCalendar = ^TGtkCalendar;
  TGtkCalendarDetailFunc = function(calendar: PGtkCalendar; year: guint; month: guint; day: guint; user_data: gpointer): Pgchar; cdecl;

  PPGtkCalendarPrivate = ^PGtkCalendarPrivate;
  PGtkCalendarPrivate = ^TGtkCalendarPrivate;

  TGtkCalendarPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCalendarDisplayOptions = ^PGtkCalendarDisplayOptions;
  PGtkCalendarDisplayOptions = ^TGtkCalendarDisplayOptions;

  PPGtkCalendarDetailFunc = ^PGtkCalendarDetailFunc;
  PGtkCalendarDetailFunc = ^TGtkCalendarDetailFunc;
  TGtkCalendar = object(TGtkWidget)
    priv1: PGtkCalendarPrivate;
    function new: PGtkCalendar; cdecl; inline; static;
    procedure clear_marks; cdecl; inline;
    procedure get_date(year: Pguint; month: Pguint; day: Pguint); cdecl; inline;
    function get_day_is_marked(day: guint): gboolean; cdecl; inline;
    function get_detail_height_rows: gint; cdecl; inline;
    function get_detail_width_chars: gint; cdecl; inline;
    function get_display_options: TGtkCalendarDisplayOptions; cdecl; inline;
    procedure mark_day(day: guint); cdecl; inline;
    procedure select_day(day: guint); cdecl; inline;
    procedure select_month(month: guint; year: guint); cdecl; inline;
    procedure set_detail_func(func: TGtkCalendarDetailFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_detail_height_rows(rows: gint); cdecl; inline;
    procedure set_detail_width_chars(chars: gint); cdecl; inline;
    procedure set_display_options(flags: TGtkCalendarDisplayOptions); cdecl; inline;
    procedure unmark_day(day: guint); cdecl; inline;
    //property day: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_day  { property is writeable but setter not declared } ;
    property detail_height_rows:  gint read get_detail_height_rows  { property is writeable but setter not declared } ;
    property detail_width_chars:  gint read get_detail_width_chars  { property is writeable but setter not declared } ;
    //property month: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_month  { property is writeable but setter not declared } ;
    //property no_month_change: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_no_month_change  { property is writeable but setter not declared } ;
    //property show_day_names: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_day_names  { property is writeable but setter not declared } ;
    //property show_details: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_details  { property is writeable but setter not declared } ;
    //property show_heading: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_heading  { property is writeable but setter not declared } ;
    //property show_week_numbers: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_week_numbers  { property is writeable but setter not declared } ;
    //property year: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_year  { property is writeable but setter not declared } ;
  end;

  PPGtkCalendarClass = ^PGtkCalendarClass;
  PGtkCalendarClass = ^TGtkCalendarClass;
  TGtkCalendarClass = object
    parent_class: TGtkWidgetClass;
    month_changed: procedure(calendar: PGtkCalendar); cdecl;
    day_selected: procedure(calendar: PGtkCalendar); cdecl;
    day_selected_double_click: procedure(calendar: PGtkCalendar); cdecl;
    prev_month: procedure(calendar: PGtkCalendar); cdecl;
    next_month: procedure(calendar: PGtkCalendar); cdecl;
    prev_year: procedure(calendar: PGtkCalendar); cdecl;
    next_year: procedure(calendar: PGtkCalendar); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkCellRendererState = ^PGtkCellRendererState;
  PGtkCellRendererState = ^TGtkCellRendererState;
  TGtkCellRendererState = packed object(TBitObject32)
  public
    property selected: DWord index 1 read GetBit write SetBit;
    property prelit: DWord index 2 read GetBit write SetBit;
    property insensitive: DWord index 4 read GetBit write SetBit;
    property sorted: DWord index 8 read GetBit write SetBit;
    property focused: DWord index 16 read GetBit write SetBit;
  end;


  PPGtkCellRendererPrivate = ^PGtkCellRendererPrivate;
  PGtkCellRendererPrivate = ^TGtkCellRendererPrivate;
  TGtkCellRenderer = object(TGInitiallyUnowned)
    priv: PGtkCellRendererPrivate;
    function activate(event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl; inline;
    procedure get_aligned_area(widget: PGtkWidget; flags: TGtkCellRendererState; cell_area: PGdkRectangle; aligned_area: PGdkRectangle); cdecl; inline;
    procedure get_alignment(xalign: Pgfloat; yalign: Pgfloat); cdecl; inline;
    procedure get_fixed_size(width: Pgint; height: Pgint); cdecl; inline;
    procedure get_padding(xpad: Pgint; ypad: Pgint); cdecl; inline;
    procedure get_preferred_height(widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl; inline;
    procedure get_preferred_height_for_width(widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_size(widget: PGtkWidget; minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl; inline;
    procedure get_preferred_width(widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl; inline;
    procedure get_preferred_width_for_height(widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    function get_request_mode: TGtkSizeRequestMode; cdecl; inline;
    function get_sensitive: gboolean; cdecl; inline;
    
    function get_state(widget: PGtkWidget; cell_state: TGtkCellRendererState): TGtkStateFlags; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    function is_activatable: gboolean; cdecl; inline;
    procedure render(cr: Pcairo_t; widget: PGtkWidget; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState); cdecl; inline;
    procedure set_alignment(xalign: gfloat; yalign: gfloat); cdecl; inline;
    procedure set_fixed_size(width: gint; height: gint); cdecl; inline;
    procedure set_padding(xpad: gint; ypad: gint); cdecl; inline;
    procedure set_sensitive(sensitive: gboolean); cdecl; inline;
    procedure set_visible(visible: gboolean); cdecl; inline;
    function start_editing(event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): PGtkCellEditable; cdecl; inline;
    procedure stop_editing(canceled: gboolean); cdecl; inline;
    //property cell_background: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_background  { property is writeable but setter not declared } ;
    //property cell_background_gdk: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_background_gdk  { property is writeable but setter not declared } ;
    //property cell_background_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_background_rgba  { property is writeable but setter not declared } ;
    //property cell_background_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_background_set  { property is writeable but setter not declared } ;
    //property editing: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editing ;
    //property height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_height  { property is writeable but setter not declared } ;
    //property is_expanded: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_expanded  { property is writeable but setter not declared } ;
    //property is_expander: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_expander  { property is writeable but setter not declared } ;
    //property mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_mode  { property is writeable but setter not declared } ;
    property sensitive:  gboolean read get_sensitive  { property is writeable but setter not declared } ;
    property visible:  gboolean read get_visible  { property is writeable but setter not declared } ;
    //property width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_width  { property is writeable but setter not declared } ;
    //property xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xalign  { property is writeable but setter not declared } ;
    //property xpad: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xpad  { property is writeable but setter not declared } ;
    //property yalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_yalign  { property is writeable but setter not declared } ;
    //property ypad: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_ypad  { property is writeable but setter not declared } ;
  end;
  TGtkCellAllocCallback = function(renderer: PGtkCellRenderer; cell_area: PGdkRectangle; cell_background: PGdkRectangle; data: gpointer): gboolean; cdecl;

  PPGtkCellAreaContext = ^PGtkCellAreaContext;
  PGtkCellAreaContext = ^TGtkCellAreaContext;

  PPGtkCellAreaContextPrivate = ^PGtkCellAreaContextPrivate;
  PGtkCellAreaContextPrivate = ^TGtkCellAreaContextPrivate;
  TGtkCellAreaContext = object(TGObject)
    priv: PGtkCellAreaContextPrivate;
    procedure allocate(width: gint; height: gint); cdecl; inline;
    procedure get_allocation(width: Pgint; height: Pgint); cdecl; inline;
    function get_area: PGtkCellArea; cdecl; inline;
    procedure get_preferred_height(minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_height_for_width(width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_width(minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    procedure get_preferred_width_for_height(height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    procedure push_preferred_height(minimum_height: gint; natural_height: gint); cdecl; inline;
    procedure push_preferred_width(minimum_width: gint; natural_width: gint); cdecl; inline;
    procedure reset; cdecl; inline;
    property area:  PGtkCellArea read get_area  { property is writeable but setter not declared } ;
    //property minimum_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_minimum_height ;
    //property minimum_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_minimum_width ;
    //property natural_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_natural_height ;
    //property natural_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_natural_width ;
  end;

  PPGtkTreePath = ^PGtkTreePath;
  PGtkTreePath = ^TGtkTreePath;

  PPGtkTreeModelForeachFunc = ^PGtkTreeModelForeachFunc;
  PGtkTreeModelForeachFunc = ^TGtkTreeModelForeachFunc;
  TGtkTreeModelForeachFunc = function(model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter; data: gpointer): gboolean; cdecl;

  PPGtkTreeModelFlags = ^PGtkTreeModelFlags;
  PGtkTreeModelFlags = ^TGtkTreeModelFlags;
  TGtkTreeModelFlags = packed object(TBitObject32)
  public
    property iters_persist: DWord index 1 read GetBit write SetBit;
    property list_only: DWord index 2 read GetBit write SetBit;
  end;

  TGtkTreePath = object
    function new: PGtkTreePath; cdecl; inline; static;
    function new_first: PGtkTreePath; cdecl; inline; static;
    //function new_from_indices(first_index: gint; args: array of const): PGtkTreePath; cdecl; inline; static;
    function new_from_string(path: Pgchar): PGtkTreePath; cdecl; inline; static;
    procedure append_index(index_: gint); cdecl; inline;
    function compare(b: PGtkTreePath): gint; cdecl; inline;
    function copy: PGtkTreePath; cdecl; inline;
    procedure down; cdecl; inline;
    procedure free; cdecl; inline;
    function get_depth: gint; cdecl; inline;
    function get_indices: Pgint; cdecl; inline;
    function get_indices_with_depth(depth: Pgint): Pgint; cdecl; inline;
    function is_ancestor(descendant: PGtkTreePath): gboolean; cdecl; inline;
    function is_descendant(ancestor: PGtkTreePath): gboolean; cdecl; inline;
    procedure next; cdecl; inline;
    procedure prepend_index(index_: gint); cdecl; inline;
    function prev: gboolean; cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
    function up: gboolean; cdecl; inline;
  end;
  TGtkTreeIter = object
    stamp: gint;
    user_data: gpointer;
    user_data2: gpointer;
    user_data3: gpointer;
    function copy: PGtkTreeIter; cdecl; inline;
    procedure free; cdecl; inline;
  end;
  TGtkTreeModel = object
    row_changed1: procedure(path: TGtkTreePath; iter: TGtkTreeIter); cdecl;
    row_deleted1: procedure(path: TGtkTreePath); cdecl;
    row_has_child_toggled1: procedure(path: TGtkTreePath; iter: TGtkTreeIter); cdecl;
    row_inserted1: procedure(path: TGtkTreePath; iter: TGtkTreeIter); cdecl;
    rows_reordered1: procedure(path: TGtkTreePath; iter: TGtkTreeIter; new_order: gpointer); cdecl;
    function filter_new(root: PGtkTreePath): PGtkTreeModel; cdecl; inline;
    procedure foreach(func: TGtkTreeModelForeachFunc; user_data: gpointer); cdecl; inline;
    //procedure get(iter: PGtkTreeIter; args: array of const); cdecl; inline;
    function get_column_type(index_: gint): TGType; cdecl; inline;
    function get_flags: TGtkTreeModelFlags; cdecl; inline;
    function get_iter(iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl; inline;
    function get_iter_first(iter: PGtkTreeIter): gboolean; cdecl; inline;
    function get_iter_from_string(iter: PGtkTreeIter; path_string: Pgchar): gboolean; cdecl; inline;
    function get_n_columns: gint; cdecl; inline;
    function get_path(iter: PGtkTreeIter): PGtkTreePath; cdecl; inline;
    function get_string_from_iter(iter: PGtkTreeIter): Pgchar; cdecl; inline;
    //procedure get_valist(iter: PGtkTreeIter; var_args: Tva_list); cdecl; inline;
    procedure get_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; inline;
    function iter_children(iter: PGtkTreeIter; parent: PGtkTreeIter): gboolean; cdecl; inline;
    function iter_has_child(iter: PGtkTreeIter): gboolean; cdecl; inline;
    function iter_n_children(iter: PGtkTreeIter): gint; cdecl; inline;
    function iter_next(iter: PGtkTreeIter): gboolean; cdecl; inline;
    function iter_nth_child(iter: PGtkTreeIter; parent: PGtkTreeIter; n: gint): gboolean; cdecl; inline;
    function iter_parent(iter: PGtkTreeIter; child: PGtkTreeIter): gboolean; cdecl; inline;
    function iter_previous(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure ref_node(iter: PGtkTreeIter); cdecl; inline;
    procedure row_changed(path: PGtkTreePath; iter: PGtkTreeIter); cdecl; inline;
    procedure row_deleted(path: PGtkTreePath); cdecl; inline;
    procedure row_has_child_toggled(path: PGtkTreePath; iter: PGtkTreeIter); cdecl; inline;
    procedure row_inserted(path: PGtkTreePath; iter: PGtkTreeIter); cdecl; inline;
    procedure rows_reordered(path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl; inline;
    function sort_new_with_model: PGtkTreeModel; cdecl; inline;
    procedure unref_node(iter: PGtkTreeIter); cdecl; inline;
  end;
  TGtkCellCallback = function(renderer: PGtkCellRenderer; data: gpointer): gboolean; cdecl;

  PPGtkCellAreaPrivate = ^PGtkCellAreaPrivate;
  PGtkCellAreaPrivate = ^TGtkCellAreaPrivate;

  TGtkCellAreaPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellCallback = ^PGtkCellCallback;
  PGtkCellCallback = ^TGtkCellCallback;

  PPGtkCellAllocCallback = ^PGtkCellAllocCallback;
  PGtkCellAllocCallback = ^TGtkCellAllocCallback;
  TGtkCellArea = object(TGInitiallyUnowned)
    priv: PGtkCellAreaPrivate;
    function activate(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; flags: TGtkCellRendererState; edit_only: gboolean): gboolean; cdecl; inline;
    function activate_cell(widget: PGtkWidget; renderer: PGtkCellRenderer; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl; inline;
    procedure add(renderer: PGtkCellRenderer); cdecl; inline;
    procedure add_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl; inline;
    //procedure add_with_properties(renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; inline;
    procedure apply_attributes(tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl; inline;
    procedure attribute_connect(renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; inline;
    procedure attribute_disconnect(renderer: PGtkCellRenderer; attribute: Pgchar); cdecl; inline;
    //procedure cell_get(renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; inline;
    procedure cell_get_property(renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl; inline;
    //procedure cell_get_valist(renderer: PGtkCellRenderer; first_property_name: Pgchar; var_args: Tva_list); cdecl; inline;
    //procedure cell_set(renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; inline;
    procedure cell_set_property(renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl; inline;
    //procedure cell_set_valist(renderer: PGtkCellRenderer; first_property_name: Pgchar; var_args: Tva_list); cdecl; inline;
    function copy_context(context: PGtkCellAreaContext): PGtkCellAreaContext; cdecl; inline;
    function create_context: PGtkCellAreaContext; cdecl; inline;
    function event(context: PGtkCellAreaContext; widget: PGtkWidget; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gint; cdecl; inline;
    function focus(direction: TGtkDirectionType): gboolean; cdecl; inline;
    procedure foreach(callback: TGtkCellCallback; callback_data: gpointer); cdecl; inline;
    procedure foreach_alloc(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; background_area: PGdkRectangle; callback: TGtkCellAllocCallback; callback_data: gpointer); cdecl; inline;
    procedure get_cell_allocation(context: PGtkCellAreaContext; widget: PGtkWidget; renderer: PGtkCellRenderer; cell_area: PGdkRectangle; allocation: PGdkRectangle); cdecl; inline;
    function get_cell_at_position(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; x: gint; y: gint; alloc_area: PGdkRectangle): PGtkCellRenderer; cdecl; inline;
    function get_current_path_string: Pgchar; cdecl; inline;
    function get_edit_widget: PGtkCellEditable; cdecl; inline;
    function get_edited_cell: PGtkCellRenderer; cdecl; inline;
    function get_focus_cell: PGtkCellRenderer; cdecl; inline;
    function get_focus_from_sibling(renderer: PGtkCellRenderer): PGtkCellRenderer; cdecl; inline;
    function get_focus_siblings(renderer: PGtkCellRenderer): PGList; cdecl; inline;
    procedure get_preferred_height(context: PGtkCellAreaContext; widget: PGtkWidget; minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_height_for_width(context: PGtkCellAreaContext; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; inline;
    procedure get_preferred_width(context: PGtkCellAreaContext; widget: PGtkWidget; minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    procedure get_preferred_width_for_height(context: PGtkCellAreaContext; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; inline;
    function get_request_mode: TGtkSizeRequestMode; cdecl; inline;
    function has_renderer(renderer: PGtkCellRenderer): gboolean; cdecl; inline;
    procedure inner_cell_area(widget: PGtkWidget; cell_area: PGdkRectangle; inner_area: PGdkRectangle); cdecl; inline;
    function is_activatable: gboolean; cdecl; inline;
    function is_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer): gboolean; cdecl; inline;
    procedure remove(renderer: PGtkCellRenderer); cdecl; inline;
    procedure remove_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl; inline;
    procedure render(context: PGtkCellAreaContext; widget: PGtkWidget; cr: Pcairo_t; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState; paint_focus: gboolean); cdecl; inline;
    procedure request_renderer(renderer: PGtkCellRenderer; orientation: TGtkOrientation; widget: PGtkWidget; for_size: gint; minimum_size: Pgint; natural_size: Pgint); cdecl; inline;
    procedure set_focus_cell(renderer: PGtkCellRenderer); cdecl; inline;
    procedure stop_editing(canceled: gboolean); cdecl; inline;
    property edit_widget:  PGtkCellEditable read get_edit_widget ;
    property edited_cell:  PGtkCellRenderer read get_edited_cell ;
    property focus_cell:  PGtkCellRenderer read get_focus_cell  { property is writeable but setter not declared } ;
  end;

  PPGtkCellAreaBoxPrivate = ^PGtkCellAreaBoxPrivate;
  PGtkCellAreaBoxPrivate = ^TGtkCellAreaBoxPrivate;

  TGtkCellAreaBoxPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellAreaBox = ^PGtkCellAreaBox;
  PGtkCellAreaBox = ^TGtkCellAreaBox;
  TGtkCellAreaBox = object(TGtkCellArea)
    priv1: PGtkCellAreaBoxPrivate;
    function new: PGtkCellAreaBox; cdecl; inline; static;
    function get_spacing: gint; cdecl; inline;
    procedure pack_end(renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl; inline;
    procedure pack_start(renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl; inline;
    procedure set_spacing(spacing: gint); cdecl; inline;
    property spacing:  gint read get_spacing  { property is writeable but setter not declared } ;
  end;

  PPGtkCellAreaClass = ^PGtkCellAreaClass;
  PGtkCellAreaClass = ^TGtkCellAreaClass;
  TGtkCellAreaClass = object
    parent_class: TGInitiallyUnownedClass;
    add: procedure(area: PGtkCellArea; renderer: PGtkCellRenderer); cdecl;
    remove: procedure(area: PGtkCellArea; renderer: PGtkCellRenderer); cdecl;
    foreach: procedure(area: PGtkCellArea; callback: TGtkCellCallback; callback_data: gpointer); cdecl;
    foreach_alloc: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; background_area: PGdkRectangle; callback: TGtkCellAllocCallback; callback_data: gpointer); cdecl;
    event: function(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gint; cdecl;
    render: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cr: Pcairo_t; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState; paint_focus: gboolean); cdecl;
    apply_attributes: procedure(area: PGtkCellArea; tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl;
    create_context: function(area: PGtkCellArea): PGtkCellAreaContext; cdecl;
    copy_context: function(area: PGtkCellArea; context: PGtkCellAreaContext): PGtkCellAreaContext; cdecl;
    get_request_mode: function(area: PGtkCellArea): TGtkSizeRequestMode; cdecl;
    get_preferred_width: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; minimum_width: Pgint; natural_width: Pgint); cdecl;
    get_preferred_height_for_width: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
    get_preferred_height: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; minimum_height: Pgint; natural_height: Pgint); cdecl;
    get_preferred_width_for_height: procedure(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
    set_cell_property: procedure(area: PGtkCellArea; renderer: PGtkCellRenderer; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;
    get_cell_property: procedure(area: PGtkCellArea; renderer: PGtkCellRenderer; property_id: guint; value: PGValue; pspec: PGParamSpec); cdecl;
    focus: function(area: PGtkCellArea; direction: TGtkDirectionType): gboolean; cdecl;
    is_activatable: function(area: PGtkCellArea): gboolean; cdecl;
    activate: function(area: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; flags: TGtkCellRendererState; edit_only: gboolean): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
    function find_cell_property(property_name: Pgchar): PGParamSpec; cdecl; inline;
    procedure install_cell_property(property_id: guint; pspec: PGParamSpec); cdecl; inline;
    function list_cell_properties(n_properties: Pguint): PPGParamSpec; cdecl; inline;
  end;

  PPGtkCellAreaBoxClass = ^PGtkCellAreaBoxClass;
  PGtkCellAreaBoxClass = ^TGtkCellAreaBoxClass;
  TGtkCellAreaBoxClass = object
    parent_class: TGtkCellAreaClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkCellAreaContextPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellAreaContextClass = ^PGtkCellAreaContextClass;
  PGtkCellAreaContextClass = ^TGtkCellAreaContextClass;
  TGtkCellAreaContextClass = object
    parent_class: TGObjectClass;
    allocate: procedure(context: PGtkCellAreaContext; width: gint; height: gint); cdecl;
    reset: procedure(context: PGtkCellAreaContext); cdecl;
    get_preferred_height_for_width: procedure(context: PGtkCellAreaContext; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
    get_preferred_width_for_height: procedure(context: PGtkCellAreaContext; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
  end;

  PPGtkCellEditableIface = ^PGtkCellEditableIface;
  PGtkCellEditableIface = ^TGtkCellEditableIface;
  TGtkCellEditableIface = object
    g_iface: TGTypeInterface;
    editing_done: procedure(cell_editable: PGtkCellEditable); cdecl;
    remove_widget: procedure(cell_editable: PGtkCellEditable); cdecl;
    start_editing: procedure(cell_editable: PGtkCellEditable; event: PGdkEvent); cdecl;
  end;

  PPGtkCellLayoutIface = ^PGtkCellLayoutIface;
  PGtkCellLayoutIface = ^TGtkCellLayoutIface;
  TGtkCellLayoutIface = object
    g_iface: TGTypeInterface;
    pack_start: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; expand: gboolean); cdecl;
    pack_end: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; expand: gboolean); cdecl;
    clear: procedure(cell_layout: PGtkCellLayout); cdecl;
    add_attribute: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl;
    set_cell_data_func: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; func: TGtkCellLayoutDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl;
    clear_attributes: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer); cdecl;
    reorder: procedure(cell_layout: PGtkCellLayout; cell: PGtkCellRenderer; position: gint); cdecl;
    get_cells: function(cell_layout: PGtkCellLayout): PGList; cdecl;
    get_area: function(cell_layout: PGtkCellLayout): PGtkCellArea; cdecl;
  end;
  TGtkRequisition = object
    width: gint;
    height: gint;
    function new: PGtkRequisition; cdecl; inline; static;
    function copy: PGtkRequisition; cdecl; inline;
    procedure free; cdecl; inline;
  end;

  PPGtkCellRendererMode = ^PGtkCellRendererMode;
  PGtkCellRendererMode = ^TGtkCellRendererMode;

  TGtkCellRendererPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellRendererAccelMode = ^PGtkCellRendererAccelMode;
  PGtkCellRendererAccelMode = ^TGtkCellRendererAccelMode;

  PPGtkCellRendererText = ^PGtkCellRendererText;
  PGtkCellRendererText = ^TGtkCellRendererText;

  PPGtkCellRendererTextPrivate = ^PGtkCellRendererTextPrivate;
  PGtkCellRendererTextPrivate = ^TGtkCellRendererTextPrivate;
  TGtkCellRendererText = object(TGtkCellRenderer)
    priv1: PGtkCellRendererTextPrivate;
    function new: PGtkCellRendererText; cdecl; inline; static;
    procedure set_fixed_height_from_font(number_of_rows: gint); cdecl; inline;
    //property align_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_align_set  { property is writeable but setter not declared } ;
    //property alignment: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_alignment  { property is writeable but setter not declared } ;
    //property attributes: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_attributes  { property is writeable but setter not declared } ;
    //property background: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background  { property is writeable but setter not declared } ;
    //property background_gdk: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_gdk  { property is writeable but setter not declared } ;
    //property background_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_rgba  { property is writeable but setter not declared } ;
    //property background_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_set  { property is writeable but setter not declared } ;
    //property editable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editable  { property is writeable but setter not declared } ;
    //property editable_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editable_set  { property is writeable but setter not declared } ;
    //property ellipsize: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_ellipsize  { property is writeable but setter not declared } ;
    //property ellipsize_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_ellipsize_set  { property is writeable but setter not declared } ;
    //property family: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_family  { property is writeable but setter not declared } ;
    //property family_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_family_set  { property is writeable but setter not declared } ;
    //property font: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_font  { property is writeable but setter not declared } ;
    //property font_desc: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_font_desc  { property is writeable but setter not declared } ;
    //property foreground: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground  { property is writeable but setter not declared } ;
    //property foreground_gdk: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground_gdk  { property is writeable but setter not declared } ;
    //property foreground_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground_rgba  { property is writeable but setter not declared } ;
    //property foreground_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground_set  { property is writeable but setter not declared } ;
    //property language: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_language  { property is writeable but setter not declared } ;
    //property language_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_language_set  { property is writeable but setter not declared } ;
    //property markup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_markup  { property is writeable but setter not declared } ;
    //property max_width_chars: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_max_width_chars  { property is writeable but setter not declared } ;
    //property rise: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_rise  { property is writeable but setter not declared } ;
    //property rise_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_rise_set  { property is writeable but setter not declared } ;
    //property scale: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scale  { property is writeable but setter not declared } ;
    //property scale_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scale_set  { property is writeable but setter not declared } ;
    //property single_paragraph_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_single_paragraph_mode  { property is writeable but setter not declared } ;
    //property size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size  { property is writeable but setter not declared } ;
    //property size_points: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size_points  { property is writeable but setter not declared } ;
    //property size_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size_set  { property is writeable but setter not declared } ;
    //property stretch: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stretch  { property is writeable but setter not declared } ;
    //property stretch_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stretch_set  { property is writeable but setter not declared } ;
    //property strikethrough: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_strikethrough  { property is writeable but setter not declared } ;
    //property strikethrough_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_strikethrough_set  { property is writeable but setter not declared } ;
    //property style: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_style  { property is writeable but setter not declared } ;
    //property style_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_style_set  { property is writeable but setter not declared } ;
    //property text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text  { property is writeable but setter not declared } ;
    //property underline: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_underline  { property is writeable but setter not declared } ;
    //property underline_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_underline_set  { property is writeable but setter not declared } ;
    //property variant: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_variant  { property is writeable but setter not declared } ;
    //property variant_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_variant_set  { property is writeable but setter not declared } ;
    //property weight: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_weight  { property is writeable but setter not declared } ;
    //property weight_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_weight_set  { property is writeable but setter not declared } ;
    //property width_chars: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_width_chars  { property is writeable but setter not declared } ;
    //property wrap_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_wrap_mode  { property is writeable but setter not declared } ;
    //property wrap_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_wrap_width  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererAccelPrivate = ^PGtkCellRendererAccelPrivate;
  PGtkCellRendererAccelPrivate = ^TGtkCellRendererAccelPrivate;

  TGtkCellRendererAccelPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellRendererAccel = ^PGtkCellRendererAccel;
  PGtkCellRendererAccel = ^TGtkCellRendererAccel;
  TGtkCellRendererAccel = object(TGtkCellRendererText)
    priv2: PGtkCellRendererAccelPrivate;
    function new: PGtkCellRendererAccel; cdecl; inline; static;
    //property accel_key: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accel_key  { property is writeable but setter not declared } ;
    //property accel_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accel_mode  { property is writeable but setter not declared } ;
    //property accel_mods: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accel_mods  { property is writeable but setter not declared } ;
    //property keycode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_keycode  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererTextClass = ^PGtkCellRendererTextClass;
  PGtkCellRendererTextClass = ^TGtkCellRendererTextClass;

  PPGtkCellRendererClass = ^PGtkCellRendererClass;
  PGtkCellRendererClass = ^TGtkCellRendererClass;
  TGtkCellRendererClass = object
    parent_class: TGInitiallyUnownedClass;
    get_request_mode: function(cell: PGtkCellRenderer): TGtkSizeRequestMode; cdecl;
    get_preferred_width: procedure(cell: PGtkCellRenderer; widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl;
    get_preferred_height_for_width: procedure(cell: PGtkCellRenderer; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
    get_preferred_height: procedure(cell: PGtkCellRenderer; widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl;
    get_preferred_width_for_height: procedure(cell: PGtkCellRenderer; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
    get_aligned_area: procedure(cell: PGtkCellRenderer; widget: PGtkWidget; flags: TGtkCellRendererState; cell_area: PGdkRectangle; aligned_area: PGdkRectangle); cdecl;
    get_size: procedure(cell: PGtkCellRenderer; widget: PGtkWidget; cell_area: PGdkRectangle; x_offset: Pgint; y_offset: Pgint; width: Pgint; height: Pgint); cdecl;
    render: procedure(cell: PGtkCellRenderer; cr: Pcairo_t; widget: PGtkWidget; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState); cdecl;
    activate: function(cell: PGtkCellRenderer; event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl;
    start_editing: function(cell: PGtkCellRenderer; event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): PGtkCellEditable; cdecl;
    editing_canceled: procedure(cell: PGtkCellRenderer); cdecl;
    editing_started: procedure(cell: PGtkCellRenderer; editable: PGtkCellEditable; path: Pgchar); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;
  TGtkCellRendererTextClass = object
    parent_class: TGtkCellRendererClass;
    edited: procedure(cell_renderer_text: PGtkCellRendererText; path: Pgchar; new_text: Pgchar); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkCellRendererAccelClass = ^PGtkCellRendererAccelClass;
  PGtkCellRendererAccelClass = ^TGtkCellRendererAccelClass;
  TGtkCellRendererAccelClass = object
    parent_class: TGtkCellRendererTextClass;
    accel_edited: procedure(accel: PGtkCellRendererAccel; path_string: Pgchar; accel_key: guint; accel_mods: TGdkModifierType; hardware_keycode: guint); cdecl;
    accel_cleared: procedure(accel: PGtkCellRendererAccel; path_string: Pgchar); cdecl;
    _gtk_reserved0: procedure; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkCellRendererComboPrivate = ^PGtkCellRendererComboPrivate;
  PGtkCellRendererComboPrivate = ^TGtkCellRendererComboPrivate;

  TGtkCellRendererComboPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellRendererCombo = ^PGtkCellRendererCombo;
  PGtkCellRendererCombo = ^TGtkCellRendererCombo;
  TGtkCellRendererCombo = object(TGtkCellRendererText)
    priv2: PGtkCellRendererComboPrivate;
    function new: PGtkCellRendererCombo; cdecl; inline; static;
    //property has_entry: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_entry  { property is writeable but setter not declared } ;
    //property model: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_model  { property is writeable but setter not declared } ;
    //property text_column: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_column  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererComboClass = ^PGtkCellRendererComboClass;
  PGtkCellRendererComboClass = ^TGtkCellRendererComboClass;
  TGtkCellRendererComboClass = object
    parent: TGtkCellRendererTextClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkCellRendererPixbufPrivate = ^PGtkCellRendererPixbufPrivate;
  PGtkCellRendererPixbufPrivate = ^TGtkCellRendererPixbufPrivate;

  TGtkCellRendererPixbufPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellRendererPixbuf = ^PGtkCellRendererPixbuf;
  PGtkCellRendererPixbuf = ^TGtkCellRendererPixbuf;
  TGtkCellRendererPixbuf = object(TGtkCellRenderer)
    priv1: PGtkCellRendererPixbufPrivate;
    function new: PGtkCellRendererPixbuf; cdecl; inline; static;
    //property follow_state: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_follow_state  { property is writeable but setter not declared } ;
    //property gicon: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gicon  { property is writeable but setter not declared } ;
    //property icon_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icon_name  { property is writeable but setter not declared } ;
    //property pixbuf: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixbuf  { property is writeable but setter not declared } ;
    //property pixbuf_expander_closed: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixbuf_expander_closed  { property is writeable but setter not declared } ;
    //property pixbuf_expander_open: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixbuf_expander_open  { property is writeable but setter not declared } ;
    //property stock_detail: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stock_detail  { property is writeable but setter not declared } ;
    //property stock_id: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stock_id  { property is writeable but setter not declared } ;
    //property stock_size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stock_size  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererPixbufClass = ^PGtkCellRendererPixbufClass;
  PGtkCellRendererPixbufClass = ^TGtkCellRendererPixbufClass;
  TGtkCellRendererPixbufClass = object
    parent_class: TGtkCellRendererClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkCellRendererProgressPrivate = ^PGtkCellRendererProgressPrivate;
  PGtkCellRendererProgressPrivate = ^TGtkCellRendererProgressPrivate;

  TGtkCellRendererProgressPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellRendererProgress = ^PGtkCellRendererProgress;
  PGtkCellRendererProgress = ^TGtkCellRendererProgress;
  TGtkCellRendererProgress = object(TGtkCellRenderer)
    priv1: PGtkCellRendererProgressPrivate;
    function new: PGtkCellRendererProgress; cdecl; inline; static;
    //property inverted: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_inverted  { property is writeable but setter not declared } ;
    //property pulse: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pulse  { property is writeable but setter not declared } ;
    //property text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text  { property is writeable but setter not declared } ;
    //property text_xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_xalign  { property is writeable but setter not declared } ;
    //property text_yalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_yalign  { property is writeable but setter not declared } ;
    //property value: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_value  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererProgressClass = ^PGtkCellRendererProgressClass;
  PGtkCellRendererProgressClass = ^TGtkCellRendererProgressClass;
  TGtkCellRendererProgressClass = object
    parent_class: TGtkCellRendererClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkCellRendererSpinPrivate = ^PGtkCellRendererSpinPrivate;
  PGtkCellRendererSpinPrivate = ^TGtkCellRendererSpinPrivate;

  TGtkCellRendererSpinPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellRendererSpin = ^PGtkCellRendererSpin;
  PGtkCellRendererSpin = ^TGtkCellRendererSpin;
  TGtkCellRendererSpin = object(TGtkCellRendererText)
    priv2: PGtkCellRendererSpinPrivate;
    function new: PGtkCellRendererSpin; cdecl; inline; static;
    //property adjustment: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_adjustment  { property is writeable but setter not declared } ;
    //property climb_rate: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_climb_rate  { property is writeable but setter not declared } ;
    //property digits: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_digits  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererSpinClass = ^PGtkCellRendererSpinClass;
  PGtkCellRendererSpinClass = ^TGtkCellRendererSpinClass;
  TGtkCellRendererSpinClass = object
    parent: TGtkCellRendererTextClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkIconSize = ^PGtkIconSize;
  PGtkIconSize = ^TGtkIconSize;

  PPGtkCellRendererSpinnerPrivate = ^PGtkCellRendererSpinnerPrivate;
  PGtkCellRendererSpinnerPrivate = ^TGtkCellRendererSpinnerPrivate;

  TGtkCellRendererSpinnerPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellRendererSpinner = ^PGtkCellRendererSpinner;
  PGtkCellRendererSpinner = ^TGtkCellRendererSpinner;
  TGtkCellRendererSpinner = object(TGtkCellRenderer)
    priv1: PGtkCellRendererSpinnerPrivate;
    function new: PGtkCellRendererSpinner; cdecl; inline; static;
    //property active: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_active  { property is writeable but setter not declared } ;
    //property pulse: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pulse  { property is writeable but setter not declared } ;
    //property size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererSpinnerClass = ^PGtkCellRendererSpinnerClass;
  PGtkCellRendererSpinnerClass = ^TGtkCellRendererSpinnerClass;
  TGtkCellRendererSpinnerClass = object
    parent_class: TGtkCellRendererClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkCellRendererTextPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellRendererTogglePrivate = ^PGtkCellRendererTogglePrivate;
  PGtkCellRendererTogglePrivate = ^TGtkCellRendererTogglePrivate;

  TGtkCellRendererTogglePrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellRendererToggle = ^PGtkCellRendererToggle;
  PGtkCellRendererToggle = ^TGtkCellRendererToggle;
  TGtkCellRendererToggle = object(TGtkCellRenderer)
    priv1: PGtkCellRendererTogglePrivate;
    function new: PGtkCellRendererToggle; cdecl; inline; static;
    function get_activatable: gboolean; cdecl; inline;
    function get_active: gboolean; cdecl; inline;
    function get_radio: gboolean; cdecl; inline;
    procedure set_activatable(setting: gboolean); cdecl; inline;
    procedure set_active(setting: gboolean); cdecl; inline;
    procedure set_radio(radio: gboolean); cdecl; inline;
    property activatable:  gboolean read get_activatable  { property is writeable but setter not declared } ;
    property active:  gboolean read get_active  { property is writeable but setter not declared } ;
    //property inconsistent: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_inconsistent  { property is writeable but setter not declared } ;
    //property indicator_size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_indicator_size  { property is writeable but setter not declared } ;
    property radio:  gboolean read get_radio  { property is writeable but setter not declared } ;
  end;

  PPGtkCellRendererToggleClass = ^PGtkCellRendererToggleClass;
  PGtkCellRendererToggleClass = ^TGtkCellRendererToggleClass;
  TGtkCellRendererToggleClass = object
    parent_class: TGtkCellRendererClass;
    toggled: procedure(cell_renderer_toggle: PGtkCellRendererToggle; path: Pgchar); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkCellViewPrivate = ^PGtkCellViewPrivate;
  PGtkCellViewPrivate = ^TGtkCellViewPrivate;

  TGtkCellViewPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCellView = ^PGtkCellView;
  PGtkCellView = ^TGtkCellView;
  TGtkCellView = object(TGtkWidget)
    priv1: PGtkCellViewPrivate;
    function new: PGtkCellView; cdecl; inline; static;
    function new_with_context(area: PGtkCellArea; context: PGtkCellAreaContext): PGtkCellView; cdecl; inline; static;
    function new_with_markup(markup: Pgchar): PGtkCellView; cdecl; inline; static;
    function new_with_pixbuf(pixbuf: PGdkPixbuf): PGtkCellView; cdecl; inline; static;
    function new_with_text(text: Pgchar): PGtkCellView; cdecl; inline; static;
    function get_displayed_row: PGtkTreePath; cdecl; inline;
    function get_draw_sensitive: gboolean; cdecl; inline;
    function get_fit_model: gboolean; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    
    procedure set_background_color(color: PGdkColor); cdecl; inline;
    procedure set_background_rgba(rgba: PGdkRGBA); cdecl; inline;
    procedure set_displayed_row(path: PGtkTreePath); cdecl; inline;
    procedure set_draw_sensitive(draw_sensitive: gboolean); cdecl; inline;
    procedure set_fit_model(fit_model: gboolean); cdecl; inline;
    procedure set_model(model: PGtkTreeModel); cdecl; inline;
    //property background: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background  { property is writeable but setter not declared } ;
    //property background_gdk: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_gdk  { property is writeable but setter not declared } ;
    //property background_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_rgba  { property is writeable but setter not declared } ;
    //property background_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_set  { property is writeable but setter not declared } ;
    //property cell_area: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_area  { property is writeable but setter not declared } ;
    //property cell_area_context: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_area_context  { property is writeable but setter not declared } ;
    property draw_sensitive:  gboolean read get_draw_sensitive  { property is writeable but setter not declared } ;
    property fit_model:  gboolean read get_fit_model  { property is writeable but setter not declared } ;
    property model:  PGtkTreeModel read get_model  { property is writeable but setter not declared } ;
  end;

  PPGtkCellViewClass = ^PGtkCellViewClass;
  PGtkCellViewClass = ^TGtkCellViewClass;
  TGtkCellViewClass = object
    parent_class: TGtkWidgetClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkToggleButton = ^PGtkToggleButton;
  PGtkToggleButton = ^TGtkToggleButton;

  PPGtkToggleButtonPrivate = ^PGtkToggleButtonPrivate;
  PGtkToggleButtonPrivate = ^TGtkToggleButtonPrivate;
  TGtkToggleButton = object(TGtkButton)
    priv4: PGtkToggleButtonPrivate;
    function new: PGtkToggleButton; cdecl; inline; static;
    function new_with_label(label_: Pgchar): PGtkToggleButton; cdecl; inline; static;
    function new_with_mnemonic(label_: Pgchar): PGtkToggleButton; cdecl; inline; static;
    function get_active: gboolean; cdecl; inline;
    function get_inconsistent: gboolean; cdecl; inline;
    function get_mode: gboolean; cdecl; inline;
    procedure set_active(is_active: gboolean); cdecl; inline;
    procedure set_inconsistent(setting: gboolean); cdecl; inline;
    procedure set_mode(draw_indicator: gboolean); cdecl; inline;
    procedure toggled; cdecl; inline;
    property active:  gboolean read get_active  { property is writeable but setter not declared } ;
    //property draw_indicator: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_draw_indicator  { property is writeable but setter not declared } ;
    property inconsistent:  gboolean read get_inconsistent  { property is writeable but setter not declared } ;
  end;

  PPGtkCheckButton = ^PGtkCheckButton;
  PGtkCheckButton = ^TGtkCheckButton;
  TGtkCheckButton = object(TGtkToggleButton)
    function new: PGtkCheckButton; cdecl; inline; static;
    function new_with_label(label_: Pgchar): PGtkCheckButton; cdecl; inline; static;
    function new_with_mnemonic(label_: Pgchar): PGtkCheckButton; cdecl; inline; static;
  end;

  PPGtkToggleButtonClass = ^PGtkToggleButtonClass;
  PGtkToggleButtonClass = ^TGtkToggleButtonClass;
  TGtkToggleButtonClass = object
    parent_class: TGtkButtonClass;
    toggled: procedure(toggle_button: PGtkToggleButton); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkCheckButtonClass = ^PGtkCheckButtonClass;
  PGtkCheckButtonClass = ^TGtkCheckButtonClass;
  TGtkCheckButtonClass = object
    parent_class: TGtkToggleButtonClass;
    draw_indicator: procedure(check_button: PGtkCheckButton; cr: Pcairo_t); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkMenuItem = ^PGtkMenuItem;
  PGtkMenuItem = ^TGtkMenuItem;

  PPGtkMenuItemPrivate = ^PGtkMenuItemPrivate;
  PGtkMenuItemPrivate = ^TGtkMenuItemPrivate;
  TGtkMenuItem = object(TGtkBin)
    priv3: PGtkMenuItemPrivate;
    function new: PGtkMenuItem; cdecl; inline; static;
    function new_with_label(label_: Pgchar): PGtkMenuItem; cdecl; inline; static;
    function new_with_mnemonic(label_: Pgchar): PGtkMenuItem; cdecl; inline; static;
    procedure activate; cdecl; inline;
    procedure deselect; cdecl; inline;
    function get_accel_path: Pgchar; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_reserve_indicator: gboolean; cdecl; inline;
    
    function get_submenu: PGtkWidget; cdecl; inline;
    function get_use_underline: gboolean; cdecl; inline;
    procedure select; cdecl; inline;
    procedure set_accel_path(accel_path: Pgchar); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_reserve_indicator(reserve: gboolean); cdecl; inline;
    
    procedure set_submenu(submenu: PGtkWidget); cdecl; inline;
    procedure set_use_underline(setting: gboolean); cdecl; inline;
    procedure toggle_size_allocate(allocation: gint); cdecl; inline;
    procedure toggle_size_request(requisition: Pgint); cdecl; inline;
    property accel_path:  Pgchar read get_accel_path  { property is writeable but setter not declared } ;
    property label_:  Pgchar read get_label  { property is writeable but setter not declared } ;
    //property right_justified: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_right_justified  { property is writeable but setter not declared } ;
    property submenu:  PGtkWidget read get_submenu  { property is writeable but setter not declared } ;
    property use_underline:  gboolean read get_use_underline  { property is writeable but setter not declared } ;
  end;

  PPGtkCheckMenuItemPrivate = ^PGtkCheckMenuItemPrivate;
  PGtkCheckMenuItemPrivate = ^TGtkCheckMenuItemPrivate;

  TGtkCheckMenuItemPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCheckMenuItem = ^PGtkCheckMenuItem;
  PGtkCheckMenuItem = ^TGtkCheckMenuItem;
  TGtkCheckMenuItem = object(TGtkMenuItem)
    priv4: PGtkCheckMenuItemPrivate;
    function new: PGtkCheckMenuItem; cdecl; inline; static;
    function new_with_label(label_: Pgchar): PGtkCheckMenuItem; cdecl; inline; static;
    function new_with_mnemonic(label_: Pgchar): PGtkCheckMenuItem; cdecl; inline; static;
    function get_active: gboolean; cdecl; inline;
    function get_draw_as_radio: gboolean; cdecl; inline;
    function get_inconsistent: gboolean; cdecl; inline;
    procedure set_active(is_active: gboolean); cdecl; inline;
    procedure set_draw_as_radio(draw_as_radio: gboolean); cdecl; inline;
    procedure set_inconsistent(setting: gboolean); cdecl; inline;
    procedure toggled; cdecl; inline;
    property active:  gboolean read get_active  { property is writeable but setter not declared } ;
    property draw_as_radio:  gboolean read get_draw_as_radio  { property is writeable but setter not declared } ;
    property inconsistent:  gboolean read get_inconsistent  { property is writeable but setter not declared } ;
  end;

  PPGtkMenuItemClass = ^PGtkMenuItemClass;
  PGtkMenuItemClass = ^TGtkMenuItemClass;
  TGtkMenuItemClass = object
    parent_class: TGtkBinClass;
    hide_on_activate: guint1 { changed from guint to accomodate 1 bitsize requirement };
    activate: procedure(menu_item: PGtkMenuItem); cdecl;
    activate_item: procedure(menu_item: PGtkMenuItem); cdecl;
    toggle_size_request: procedure(menu_item: PGtkMenuItem; requisition: Pgint); cdecl;
    toggle_size_allocate: procedure(menu_item: PGtkMenuItem; allocation: gint); cdecl;
    set_label: procedure(menu_item: PGtkMenuItem; label_: Pgchar); cdecl;
    get_label: function(menu_item: PGtkMenuItem): Pgchar; cdecl;
    select: procedure(menu_item: PGtkMenuItem); cdecl;
    deselect: procedure(menu_item: PGtkMenuItem); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkCheckMenuItemClass = ^PGtkCheckMenuItemClass;
  PGtkCheckMenuItemClass = ^TGtkCheckMenuItemClass;
  TGtkCheckMenuItemClass = object
    parent_class: TGtkMenuItemClass;
    toggled: procedure(check_menu_item: PGtkCheckMenuItem); cdecl;
    draw_indicator: procedure(check_menu_item: PGtkCheckMenuItem; cr: Pcairo_t); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkClipboardReceivedFunc = ^PGtkClipboardReceivedFunc;
  PGtkClipboardReceivedFunc = ^TGtkClipboardReceivedFunc;
  TGtkClipboardReceivedFunc = procedure(clipboard: PGtkClipboard; selection_data: PGtkSelectionData; data: gpointer); cdecl;

  PPGtkClipboardImageReceivedFunc = ^PGtkClipboardImageReceivedFunc;
  PGtkClipboardImageReceivedFunc = ^TGtkClipboardImageReceivedFunc;
  TGtkClipboardImageReceivedFunc = procedure(clipboard: PGtkClipboard; pixbuf: PGdkPixbuf; data: gpointer); cdecl;

  PPGtkTextBuffer = ^PGtkTextBuffer;
  PGtkTextBuffer = ^TGtkTextBuffer;

  PPGtkClipboardRichTextReceivedFunc = ^PGtkClipboardRichTextReceivedFunc;
  PGtkClipboardRichTextReceivedFunc = ^TGtkClipboardRichTextReceivedFunc;
  TGtkClipboardRichTextReceivedFunc = procedure(clipboard: PGtkClipboard; format: TGdkAtom; text: Pguint8; length: gsize; data: gpointer); cdecl;

  PPGtkClipboardTargetsReceivedFunc = ^PGtkClipboardTargetsReceivedFunc;
  PGtkClipboardTargetsReceivedFunc = ^TGtkClipboardTargetsReceivedFunc;
  TGtkClipboardTargetsReceivedFunc = procedure(clipboard: PGtkClipboard; atoms: PGdkAtom; n_atoms: gint; data: gpointer); cdecl;

  PPGtkClipboardTextReceivedFunc = ^PGtkClipboardTextReceivedFunc;
  PGtkClipboardTextReceivedFunc = ^TGtkClipboardTextReceivedFunc;
  TGtkClipboardTextReceivedFunc = procedure(clipboard: PGtkClipboard; text: Pgchar; data: gpointer); cdecl;

  PPGtkClipboardURIReceivedFunc = ^PGtkClipboardURIReceivedFunc;
  PGtkClipboardURIReceivedFunc = ^TGtkClipboardURIReceivedFunc;
  TGtkClipboardURIReceivedFunc = procedure(clipboard: PGtkClipboard; uris: PPgchar; data: gpointer); cdecl;

  PPGtkClipboardGetFunc = ^PGtkClipboardGetFunc;
  PGtkClipboardGetFunc = ^TGtkClipboardGetFunc;
  TGtkClipboardGetFunc = procedure(clipboard: PGtkClipboard; selection_data: PGtkSelectionData; info: guint; user_data_or_owner: gpointer); cdecl;

  PPGtkClipboardClearFunc = ^PGtkClipboardClearFunc;
  PGtkClipboardClearFunc = ^TGtkClipboardClearFunc;
  TGtkClipboardClearFunc = procedure(clipboard: PGtkClipboard; user_data_or_owner: gpointer); cdecl;
  TGtkClipboard = object(TGObject)
    function get(selection: TGdkAtom): PGtkClipboard; cdecl; inline; static;
    function get_for_display(display: PGdkDisplay; selection: TGdkAtom): PGtkClipboard; cdecl; inline; static;
    procedure clear; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_owner: PGObject; cdecl; inline;
    procedure request_contents(target: TGdkAtom; callback: TGtkClipboardReceivedFunc; user_data: gpointer); cdecl; inline;
    procedure request_image(callback: TGtkClipboardImageReceivedFunc; user_data: gpointer); cdecl; inline;
    procedure request_rich_text(buffer: PGtkTextBuffer; callback: TGtkClipboardRichTextReceivedFunc; user_data: gpointer); cdecl; inline;
    procedure request_targets(callback: TGtkClipboardTargetsReceivedFunc; user_data: gpointer); cdecl; inline;
    procedure request_text(callback: TGtkClipboardTextReceivedFunc; user_data: gpointer); cdecl; inline;
    procedure request_uris(callback: TGtkClipboardURIReceivedFunc; user_data: gpointer); cdecl; inline;
    procedure set_can_store(targets: PGtkTargetEntry; n_targets: gint); cdecl; inline;
    procedure set_image(pixbuf: PGdkPixbuf); cdecl; inline;
    procedure set_text(text: Pgchar; len: gint); cdecl; inline;
    function set_with_data(targets: PGtkTargetEntry; n_targets: guint; get_func: TGtkClipboardGetFunc; clear_func: TGtkClipboardClearFunc; user_data: gpointer): gboolean; cdecl; inline;
    function set_with_owner(targets: PGtkTargetEntry; n_targets: guint; get_func: TGtkClipboardGetFunc; clear_func: TGtkClipboardClearFunc; owner: PGObject): gboolean; cdecl; inline;
    procedure store; cdecl; inline;
    function wait_for_contents(target: TGdkAtom): PGtkSelectionData; cdecl; inline;
    function wait_for_image: PGdkPixbuf; cdecl; inline;
    function wait_for_rich_text(buffer: PGtkTextBuffer; format: PGdkAtom; length: Pgsize): Pguint8; cdecl; inline;
    function wait_for_targets(targets: PPGdkAtom; n_targets: Pgint): gboolean; cdecl; inline;
    function wait_for_text: Pgchar; cdecl; inline;
    function wait_for_uris: PPgchar; cdecl; inline;
    function wait_is_image_available: gboolean; cdecl; inline;
    function wait_is_rich_text_available(buffer: PGtkTextBuffer): gboolean; cdecl; inline;
    function wait_is_target_available(target: TGdkAtom): gboolean; cdecl; inline;
    function wait_is_text_available: gboolean; cdecl; inline;
    function wait_is_uris_available: gboolean; cdecl; inline;
  end;

  PPGtkTextTagTable = ^PGtkTextTagTable;
  PGtkTextTagTable = ^TGtkTextTagTable;

  PPGtkTextMark = ^PGtkTextMark;
  PGtkTextMark = ^TGtkTextMark;

  PPGtkTextIter = ^PGtkTextIter;
  PGtkTextIter = ^TGtkTextIter;

  PPGtkTextTag = ^PGtkTextTag;
  PGtkTextTag = ^TGtkTextTag;

  PPGtkTextChildAnchor = ^PGtkTextChildAnchor;
  PGtkTextChildAnchor = ^TGtkTextChildAnchor;

  PPGtkTextBufferDeserializeFunc = ^PGtkTextBufferDeserializeFunc;
  PGtkTextBufferDeserializeFunc = ^TGtkTextBufferDeserializeFunc;
  TGtkTextBufferDeserializeFunc = function(register_buffer: PGtkTextBuffer; content_buffer: PGtkTextBuffer; iter: PGtkTextIter; data: Pguint8; length: gsize; create_tags: gboolean; user_data: gpointer): gboolean; cdecl;

  PPGtkTextBufferSerializeFunc = ^PGtkTextBufferSerializeFunc;
  PGtkTextBufferSerializeFunc = ^TGtkTextBufferSerializeFunc;
  TGtkTextBufferSerializeFunc = function(register_buffer: PGtkTextBuffer; content_buffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter; length: Pgsize; user_data: gpointer): Pguint8; cdecl;

  PPGtkTextBufferPrivate = ^PGtkTextBufferPrivate;
  PGtkTextBufferPrivate = ^TGtkTextBufferPrivate;
  TGtkTextBuffer = object(TGObject)
    priv: PGtkTextBufferPrivate;
    function new(table: PGtkTextTagTable): PGtkTextBuffer; cdecl; inline; static;
    procedure add_mark(mark: PGtkTextMark; where: PGtkTextIter); cdecl; inline;
    procedure add_selection_clipboard(clipboard: PGtkClipboard); cdecl; inline;
    procedure apply_tag(tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    procedure apply_tag_by_name(name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    function backspace(iter: PGtkTextIter; interactive: gboolean; default_editable: gboolean): gboolean; cdecl; inline;
    procedure begin_user_action; cdecl; inline;
    procedure copy_clipboard(clipboard: PGtkClipboard); cdecl; inline;
    function create_child_anchor(iter: PGtkTextIter): PGtkTextChildAnchor; cdecl; inline;
    function create_mark(mark_name: Pgchar; where: PGtkTextIter; left_gravity: gboolean): PGtkTextMark; cdecl; inline;
    //function create_tag(tag_name: Pgchar; first_property_name: Pgchar; args: array of const): PGtkTextTag; cdecl; inline;
    procedure cut_clipboard(clipboard: PGtkClipboard; default_editable: gboolean); cdecl; inline;
    procedure delete(start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    function delete_interactive(start_iter: PGtkTextIter; end_iter: PGtkTextIter; default_editable: gboolean): gboolean; cdecl; inline;
    procedure delete_mark(mark: PGtkTextMark); cdecl; inline;
    procedure delete_mark_by_name(name: Pgchar); cdecl; inline;
    function delete_selection(interactive: gboolean; default_editable: gboolean): gboolean; cdecl; inline;
    function deserialize(content_buffer: PGtkTextBuffer; format: TGdkAtom; iter: PGtkTextIter; data: Pguint8; length: gsize): gboolean; cdecl; inline;
    function deserialize_get_can_create_tags(format: TGdkAtom): gboolean; cdecl; inline;
    procedure deserialize_set_can_create_tags(format: TGdkAtom; can_create_tags: gboolean); cdecl; inline;
    procedure end_user_action; cdecl; inline;
    procedure get_bounds(start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    function get_char_count: gint; cdecl; inline;
    function get_copy_target_list: PGtkTargetList; cdecl; inline;
    function get_deserialize_formats(n_formats: Pgint): PGdkAtom; cdecl; inline;
    procedure get_end_iter(iter: PGtkTextIter); cdecl; inline;
    function get_has_selection: gboolean; cdecl; inline;
    function get_insert: PGtkTextMark; cdecl; inline;
    procedure get_iter_at_child_anchor(iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl; inline;
    procedure get_iter_at_line(iter: PGtkTextIter; line_number: gint); cdecl; inline;
    procedure get_iter_at_line_index(iter: PGtkTextIter; line_number: gint; byte_index: gint); cdecl; inline;
    procedure get_iter_at_line_offset(iter: PGtkTextIter; line_number: gint; char_offset: gint); cdecl; inline;
    procedure get_iter_at_mark(iter: PGtkTextIter; mark: PGtkTextMark); cdecl; inline;
    procedure get_iter_at_offset(iter: PGtkTextIter; char_offset: gint); cdecl; inline;
    function get_line_count: gint; cdecl; inline;
    function get_mark(name: Pgchar): PGtkTextMark; cdecl; inline;
    function get_modified: gboolean; cdecl; inline;
    function get_paste_target_list: PGtkTargetList; cdecl; inline;
    function get_selection_bound: PGtkTextMark; cdecl; inline;
    function get_selection_bounds(start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl; inline;
    function get_serialize_formats(n_formats: Pgint): PGdkAtom; cdecl; inline;
    function get_slice(start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl; inline;
    procedure get_start_iter(iter: PGtkTextIter); cdecl; inline;
    function get_tag_table: PGtkTextTagTable; cdecl; inline;
    function get_text(start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl; inline;
    procedure insert(iter: PGtkTextIter; text: Pgchar; len: gint); cdecl; inline;
    procedure insert_at_cursor(text: Pgchar; len: gint); cdecl; inline;
    procedure insert_child_anchor(iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl; inline;
    function insert_interactive(iter: PGtkTextIter; text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl; inline;
    function insert_interactive_at_cursor(text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl; inline;
    procedure insert_pixbuf(iter: PGtkTextIter; pixbuf: PGdkPixbuf); cdecl; inline;
    procedure insert_range(iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    function insert_range_interactive(iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter; default_editable: gboolean): gboolean; cdecl; inline;
    //procedure insert_with_tags(iter: PGtkTextIter; text: Pgchar; len: gint; first_tag: PGtkTextTag; args: array of const); cdecl; inline;
    //procedure insert_with_tags_by_name(iter: PGtkTextIter; text: Pgchar; len: gint; first_tag_name: Pgchar; args: array of const); cdecl; inline;
    procedure move_mark(mark: PGtkTextMark; where: PGtkTextIter); cdecl; inline;
    procedure move_mark_by_name(name: Pgchar; where: PGtkTextIter); cdecl; inline;
    procedure paste_clipboard(clipboard: PGtkClipboard; override_location: PGtkTextIter; default_editable: gboolean); cdecl; inline;
    procedure place_cursor(where: PGtkTextIter); cdecl; inline;
    function register_deserialize_format(mime_type: Pgchar; function_: TGtkTextBufferDeserializeFunc; user_data: gpointer; user_data_destroy: TGDestroyNotify): TGdkAtom; cdecl; inline;
    function register_deserialize_tagset(tagset_name: Pgchar): TGdkAtom; cdecl; inline;
    function register_serialize_format(mime_type: Pgchar; function_: TGtkTextBufferSerializeFunc; user_data: gpointer; user_data_destroy: TGDestroyNotify): TGdkAtom; cdecl; inline;
    function register_serialize_tagset(tagset_name: Pgchar): TGdkAtom; cdecl; inline;
    procedure remove_all_tags(start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    procedure remove_selection_clipboard(clipboard: PGtkClipboard); cdecl; inline;
    procedure remove_tag(tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    procedure remove_tag_by_name(name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl; inline;
    procedure select_range(ins: PGtkTextIter; bound: PGtkTextIter); cdecl; inline;
    function serialize(content_buffer: PGtkTextBuffer; format: TGdkAtom; start: PGtkTextIter; end_: PGtkTextIter; length: Pgsize): Pguint8; cdecl; inline;
    procedure set_modified(setting: gboolean); cdecl; inline;
    procedure set_text(text: Pgchar; len: gint); cdecl; inline;
    procedure unregister_deserialize_format(format: TGdkAtom); cdecl; inline;
    procedure unregister_serialize_format(format: TGdkAtom); cdecl; inline;
    property copy_target_list:  PGtkTargetList read get_copy_target_list ;
    //property cursor_position: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cursor_position ;
    property has_selection:  gboolean read get_has_selection ;
    property paste_target_list:  PGtkTargetList read get_paste_target_list ;
    property tag_table:  PGtkTextTagTable read get_tag_table  { property is writeable but setter not declared } ;
    //property text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text  { property is writeable but setter not declared } ;
  end;
  TGtkTargetEntry = object
    target: Pgchar;
    flags: guint;
    info: guint;
    function new(target: Pgchar; flags: guint; info: guint): PGtkTargetEntry; cdecl; inline; static;
    function copy: PGtkTargetEntry; cdecl; inline;
    procedure free; cdecl; inline;
  end;
  TGtkSelectionData = object
    function copy: PGtkSelectionData; cdecl; inline;
    procedure free; cdecl; inline;
    function get_data: Pguint8; cdecl; inline;
    function get_data_type: TGdkAtom; cdecl; inline;
    function get_data_with_length(length: Pgint): Pguint8; cdecl; inline;
    function get_display: PGdkDisplay; cdecl; inline;
    function get_format: gint; cdecl; inline;
    function get_length: gint; cdecl; inline;
    function get_pixbuf: PGdkPixbuf; cdecl; inline;
    function get_selection: TGdkAtom; cdecl; inline;
    function get_target: TGdkAtom; cdecl; inline;
    function get_targets(targets: PPGdkAtom; n_atoms: Pgint): gboolean; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    function get_uris: PPgchar; cdecl; inline;
    procedure set_(type_: TGdkAtom; format: gint; data: Pguint8; length: gint); cdecl; inline;
    function set_pixbuf(pixbuf: PGdkPixbuf): gboolean; cdecl; inline;
    function set_text(str: Pgchar; len: gint): gboolean; cdecl; inline;
    function set_uris(uris: PPgchar): gboolean; cdecl; inline;
    function targets_include_image(writable: gboolean): gboolean; cdecl; inline;
    function targets_include_rich_text(buffer: PGtkTextBuffer): gboolean; cdecl; inline;
    function targets_include_text: gboolean; cdecl; inline;
    function targets_include_uri: gboolean; cdecl; inline;
  end;

  PPGtkColorButtonPrivate = ^PGtkColorButtonPrivate;
  PGtkColorButtonPrivate = ^TGtkColorButtonPrivate;

  TGtkColorButtonPrivate = record
    Unknown: Pointer;
  end;



  PPGtkColorButton = ^PGtkColorButton;
  PGtkColorButton = ^TGtkColorButton;
  TGtkColorButton = object(TGtkButton)
    priv4: PGtkColorButtonPrivate;
    function new: PGtkColorButton; cdecl; inline; static;
    function new_with_color(color: PGdkColor): PGtkColorButton; cdecl; inline; static;
    function new_with_rgba(rgba: PGdkRGBA): PGtkColorButton; cdecl; inline; static;
    function get_alpha: guint16; cdecl; inline;
    procedure get_color(color: PGdkColor); cdecl; inline;
    procedure get_rgba(rgba: PGdkRGBA); cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_use_alpha: gboolean; cdecl; inline;
    procedure set_alpha(alpha: guint16); cdecl; inline;
    procedure set_color(color: PGdkColor); cdecl; inline;
    procedure set_rgba(rgba: PGdkRGBA); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_use_alpha(use_alpha: gboolean); cdecl; inline;
    property alpha:  guint16 read get_alpha  { property is writeable but setter not declared } ;
    //property color: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_color  { property is writeable but setter not declared } ;
    //property rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_rgba  { property is writeable but setter not declared } ;
    property title:  Pgchar read get_title  { property is writeable but setter not declared } ;
    property use_alpha:  gboolean read get_use_alpha  { property is writeable but setter not declared } ;
  end;

  PPGtkColorButtonClass = ^PGtkColorButtonClass;
  PGtkColorButtonClass = ^TGtkColorButtonClass;
  TGtkColorButtonClass = object
    parent_class: TGtkButtonClass;
    color_set: procedure(cp: PGtkColorButton); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;
  TGtkColorSelectionChangePaletteWithScreenFunc = procedure(screen: PGdkScreen; colors: PGdkColor; n_colors: gint); cdecl;

  PPGtkColorSelectionPrivate = ^PGtkColorSelectionPrivate;
  PGtkColorSelectionPrivate = ^TGtkColorSelectionPrivate;

  TGtkColorSelectionPrivate = record
    Unknown: Pointer;
  end;



  PPGtkColorSelection = ^PGtkColorSelection;
  PGtkColorSelection = ^TGtkColorSelection;

  PPGtkColorSelectionChangePaletteWithScreenFunc = ^PGtkColorSelectionChangePaletteWithScreenFunc;
  PGtkColorSelectionChangePaletteWithScreenFunc = ^TGtkColorSelectionChangePaletteWithScreenFunc;
  TGtkColorSelection = object(TGtkBox)
    private_data: PGtkColorSelectionPrivate;
    function new: PGtkColorSelection; cdecl; inline; static;
    function palette_from_string(str: Pgchar; colors: PPGdkColor; n_colors: Pgint): gboolean; cdecl; inline; static;
    function palette_to_string(colors: PGdkColor; n_colors: gint): Pgchar; cdecl; inline; static;
    function set_change_palette_with_screen_hook(func: TGtkColorSelectionChangePaletteWithScreenFunc): TGtkColorSelectionChangePaletteWithScreenFunc; cdecl; inline; static;
    function get_current_alpha: guint16; cdecl; inline;
    procedure get_current_color(color: PGdkColor); cdecl; inline;
    procedure get_current_rgba(rgba: PGdkRGBA); cdecl; inline;
    function get_has_opacity_control: gboolean; cdecl; inline;
    function get_has_palette: gboolean; cdecl; inline;
    function get_previous_alpha: guint16; cdecl; inline;
    procedure get_previous_color(color: PGdkColor); cdecl; inline;
    procedure get_previous_rgba(rgba: PGdkRGBA); cdecl; inline;
    function is_adjusting: gboolean; cdecl; inline;
    procedure set_current_alpha(alpha: guint16); cdecl; inline;
    procedure set_current_color(color: PGdkColor); cdecl; inline;
    procedure set_current_rgba(rgba: PGdkRGBA); cdecl; inline;
    procedure set_has_opacity_control(has_opacity: gboolean); cdecl; inline;
    procedure set_has_palette(has_palette: gboolean); cdecl; inline;
    procedure set_previous_alpha(alpha: guint16); cdecl; inline;
    procedure set_previous_color(color: PGdkColor); cdecl; inline;
    procedure set_previous_rgba(rgba: PGdkRGBA); cdecl; inline;
    property current_alpha:  guint16 read get_current_alpha  { property is writeable but setter not declared } ;
    //property current_color: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_current_color  { property is writeable but setter not declared } ;
    //property current_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_current_rgba  { property is writeable but setter not declared } ;
    property has_opacity_control:  gboolean read get_has_opacity_control  { property is writeable but setter not declared } ;
    property has_palette:  gboolean read get_has_palette  { property is writeable but setter not declared } ;
  end;
  TGtkColorSelectionChangePaletteFunc = procedure(colors: PGdkColor; n_colors: gint); cdecl;

  PPGtkColorSelectionClass = ^PGtkColorSelectionClass;
  PGtkColorSelectionClass = ^TGtkColorSelectionClass;
  TGtkColorSelectionClass = object
    parent_class: TGtkBoxClass;
    color_changed: procedure(color_selection: PGtkColorSelection); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkColorSelectionDialogPrivate = ^PGtkColorSelectionDialogPrivate;
  PGtkColorSelectionDialogPrivate = ^TGtkColorSelectionDialogPrivate;

  TGtkColorSelectionDialogPrivate = record
    Unknown: Pointer;
  end;



  PPGtkColorSelectionDialog = ^PGtkColorSelectionDialog;
  PGtkColorSelectionDialog = ^TGtkColorSelectionDialog;
  TGtkColorSelectionDialog = object(TGtkDialog)
    priv1: PGtkColorSelectionDialogPrivate;
    function new(title: Pgchar): PGtkColorSelectionDialog; cdecl; inline; static;
    function get_color_selection: PGtkWidget; cdecl; inline;
    //property cancel_button: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cancel_button ;
    property color_selection:  PGtkWidget read get_color_selection ;
    //property help_button: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_help_button ;
    //property ok_button: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_ok_button ;
  end;

  PPGtkColorSelectionDialogClass = ^PGtkColorSelectionDialogClass;
  PGtkColorSelectionDialogClass = ^TGtkColorSelectionDialogClass;
  TGtkColorSelectionDialogClass = object
    parent_class: TGtkDialogClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkComboBoxPrivate = record
    Unknown: Pointer;
  end;



  PPGtkScrollType = ^PGtkScrollType;
  PGtkScrollType = ^TGtkScrollType;

  PPGtkComboBoxTextPrivate = ^PGtkComboBoxTextPrivate;
  PGtkComboBoxTextPrivate = ^TGtkComboBoxTextPrivate;

  TGtkComboBoxTextPrivate = record
    Unknown: Pointer;
  end;



  PPGtkComboBoxText = ^PGtkComboBoxText;
  PGtkComboBoxText = ^TGtkComboBoxText;
  TGtkComboBoxText = object(TGtkComboBox)
    priv4: PGtkComboBoxTextPrivate;
    function new: PGtkComboBoxText; cdecl; inline; static;
    function new_with_entry: PGtkComboBoxText; cdecl; inline; static;
    procedure append(id: Pgchar; text: Pgchar); cdecl; inline;
    procedure append_text(text: Pgchar); cdecl; inline;
    function get_active_text: Pgchar; cdecl; inline;
    procedure insert(position: gint; id: Pgchar; text: Pgchar); cdecl; inline;
    procedure insert_text(position: gint; text: Pgchar); cdecl; inline;
    procedure prepend(id: Pgchar; text: Pgchar); cdecl; inline;
    procedure prepend_text(text: Pgchar); cdecl; inline;
    procedure remove(position: gint); cdecl; inline;
    procedure remove_all; cdecl; inline;
  end;

  PPGtkComboBoxTextClass = ^PGtkComboBoxTextClass;
  PGtkComboBoxTextClass = ^TGtkComboBoxTextClass;
  TGtkComboBoxTextClass = object
    parent_class: TGtkComboBoxClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkRegionFlags = ^PGtkRegionFlags;
  PGtkRegionFlags = ^TGtkRegionFlags;
  TGtkRegionFlags = packed object(TBitObject32)
  public
    property even: DWord index 1 read GetBit write SetBit;
    property odd: DWord index 2 read GetBit write SetBit;
    property first: DWord index 4 read GetBit write SetBit;
    property last: DWord index 8 read GetBit write SetBit;
    property sorted: DWord index 32 read GetBit write SetBit;
  end;

  TGtkWidgetPath = object
    function new: PGtkWidgetPath; cdecl; inline; static;
    function append_for_widget(widget: PGtkWidget): gint; cdecl; inline;
    function append_type(type_: TGType): gint; cdecl; inline;
    function append_with_siblings(siblings: PGtkWidgetPath; sibling_index: guint): gint; cdecl; inline;
    function copy: PGtkWidgetPath; cdecl; inline;
    procedure free; cdecl; inline;
    function get_object_type: TGType; cdecl; inline;
    function has_parent(type_: TGType): gboolean; cdecl; inline;
    function is_type(type_: TGType): gboolean; cdecl; inline;
    procedure iter_add_class(pos: gint; name: Pgchar); cdecl; inline;
    procedure iter_add_region(pos: gint; name: Pgchar; flags: TGtkRegionFlags); cdecl; inline;
    procedure iter_clear_classes(pos: gint); cdecl; inline;
    procedure iter_clear_regions(pos: gint); cdecl; inline;
    function iter_get_name(pos: gint): Pgchar; cdecl; inline;
    function iter_get_object_type(pos: gint): TGType; cdecl; inline;
    function iter_get_sibling_index(pos: gint): guint; cdecl; inline;
    function iter_get_siblings(pos: gint): PGtkWidgetPath; cdecl; inline;
    function iter_has_class(pos: gint; name: Pgchar): gboolean; cdecl; inline;
    function iter_has_name(pos: gint; name: Pgchar): gboolean; cdecl; inline;
    function iter_has_qclass(pos: gint; qname: TGQuark): gboolean; cdecl; inline;
    function iter_has_qname(pos: gint; qname: TGQuark): gboolean; cdecl; inline;
    function iter_has_qregion(pos: gint; qname: TGQuark; flags: PGtkRegionFlags): gboolean; cdecl; inline;
    function iter_has_region(pos: gint; name: Pgchar; flags: PGtkRegionFlags): gboolean; cdecl; inline;
    function iter_list_classes(pos: gint): PGSList; cdecl; inline;
    function iter_list_regions(pos: gint): PGSList; cdecl; inline;
    procedure iter_remove_class(pos: gint; name: Pgchar); cdecl; inline;
    procedure iter_remove_region(pos: gint; name: Pgchar); cdecl; inline;
    procedure iter_set_name(pos: gint; name: Pgchar); cdecl; inline;
    procedure iter_set_object_type(pos: gint; type_: TGType); cdecl; inline;
    function length: gint; cdecl; inline;
    procedure prepend_type(type_: TGType); cdecl; inline;
    function ref: PGtkWidgetPath; cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  TGtkContainerPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCornerType = ^PGtkCornerType;
  PGtkCornerType = ^TGtkCornerType;

  PPGtkStyleProvider = ^PGtkStyleProvider;
  PGtkStyleProvider = ^TGtkStyleProvider;

  PPGtkIconFactory = ^PGtkIconFactory;
  PGtkIconFactory = ^TGtkIconFactory;

  PPGtkStyleProperties = ^PGtkStyleProperties;
  PGtkStyleProperties = ^TGtkStyleProperties;
  TGtkStyleProvider = object
    function get_icon_factory(path: PGtkWidgetPath): PGtkIconFactory; cdecl; inline;
    function get_style(path: PGtkWidgetPath): PGtkStyleProperties; cdecl; inline;
    function get_style_property(path: PGtkWidgetPath; state: TGtkStateFlags; pspec: PGParamSpec; value: PGValue): gboolean; cdecl; inline;
  end;

  PPGtkCssProvider = ^PGtkCssProvider;
  PGtkCssProvider = ^TGtkCssProvider;

  PPGtkCssProviderPrivate = ^PGtkCssProviderPrivate;
  PGtkCssProviderPrivate = ^TGtkCssProviderPrivate;
  TGtkCssProvider = object(TGObject)
    priv: PGtkCssProviderPrivate;
    function new: PGtkCssProvider; cdecl; inline; static;
    function get_default: PGtkCssProvider; cdecl; inline; static;
    function get_named(name: Pgchar; variant: Pgchar): PGtkCssProvider; cdecl; inline; static;
    function load_from_data(data: Pgchar; length: gssize): gboolean; cdecl; inline;
    function load_from_file(file_: PGFile): gboolean; cdecl; inline;
    function load_from_path(path: Pgchar): gboolean; cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
  end;

  PPGtkCssSection = ^PGtkCssSection;
  PGtkCssSection = ^TGtkCssSection;

  PPGtkCssSectionType = ^PGtkCssSectionType;
  PGtkCssSectionType = ^TGtkCssSectionType;
  TGtkCssSection = object
    function get_end_line: guint; cdecl; inline;
    function get_end_position: guint; cdecl; inline;
    function get_file: PGFile; cdecl; inline;
    function get_parent: PGtkCssSection; cdecl; inline;
    function get_section_type: TGtkCssSectionType; cdecl; inline;
    function get_start_line: guint; cdecl; inline;
    function get_start_position: guint; cdecl; inline;
    function ref: PGtkCssSection; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  TGtkCssProviderPrivate = record
    Unknown: Pointer;
  end;



  PPGtkCssProviderClass = ^PGtkCssProviderClass;
  PGtkCssProviderClass = ^TGtkCssProviderClass;
  TGtkCssProviderClass = object
    parent_class: TGObjectClass;
    parsing_error: procedure(provider: PGtkCssProvider; section: PGtkCssSection; error: PGError); cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkCssProviderError = ^PGtkCssProviderError;
  PGtkCssProviderError = ^TGtkCssProviderError;
  TGtkDebugFlag = packed object(TBitObject32)
  public
    property misc: DWord index 1 read GetBit write SetBit;
    property plugsocket: DWord index 2 read GetBit write SetBit;
    property text: DWord index 4 read GetBit write SetBit;
    property tree: DWord index 8 read GetBit write SetBit;
    property updates: DWord index 16 read GetBit write SetBit;
    property keybindings: DWord index 32 read GetBit write SetBit;
    property multihead: DWord index 64 read GetBit write SetBit;
    property modules: DWord index 128 read GetBit write SetBit;
    property geometry: DWord index 256 read GetBit write SetBit;
    property icontheme: DWord index 512 read GetBit write SetBit;
    property printing: DWord index 1024 read GetBit write SetBit;
    property builder: DWord index 2048 read GetBit write SetBit;
    property size_request: DWord index 4096 read GetBit write SetBit;
  end;


  PPGtkDeleteType = ^PGtkDeleteType;
  PGtkDeleteType = ^TGtkDeleteType;

  TGtkDialogPrivate = record
    Unknown: Pointer;
  end;



  PPGtkDrawingArea = ^PGtkDrawingArea;
  PGtkDrawingArea = ^TGtkDrawingArea;
  TGtkDrawingArea = object(TGtkWidget)
    dummy: gpointer;
    function new: PGtkDrawingArea; cdecl; inline; static;
  end;

  PPGtkDrawingAreaClass = ^PGtkDrawingAreaClass;
  PGtkDrawingAreaClass = ^TGtkDrawingAreaClass;
  TGtkDrawingAreaClass = object
    parent_class: TGtkWidgetClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkEditable = ^PGtkEditable;
  PGtkEditable = ^TGtkEditable;
  TGtkEditable = object
    changed: procedure; cdecl;
    delete_text1: procedure(start_pos: gint; end_pos: gint); cdecl;
    insert_text1: procedure(new_text: gchar; new_text_length: gint; position: gint); cdecl;
    procedure copy_clipboard; cdecl; inline;
    procedure cut_clipboard; cdecl; inline;
    procedure delete_selection; cdecl; inline;
    procedure delete_text(start_pos: gint; end_pos: gint); cdecl; inline;
    function get_chars(start_pos: gint; end_pos: gint): Pgchar; cdecl; inline;
    function get_editable: gboolean; cdecl; inline;
    function get_position: gint; cdecl; inline;
    function get_selection_bounds(start_pos: Pgint; end_pos: Pgint): gboolean; cdecl; inline;
    procedure insert_text(new_text: Pgchar; new_text_length: gint; position: Pgint); cdecl; inline;
    procedure paste_clipboard; cdecl; inline;
    procedure select_region(start_pos: gint; end_pos: gint); cdecl; inline;
    procedure set_editable(is_editable: gboolean); cdecl; inline;
    procedure set_position(position: gint); cdecl; inline;
  end;

  PPGtkEditableInterface = ^PGtkEditableInterface;
  PGtkEditableInterface = ^TGtkEditableInterface;
  TGtkEditableInterface = object
    base_iface: TGTypeInterface;
    insert_text: procedure(editable: PGtkEditable; new_text: Pgchar; new_text_length: gint; position: Pgint); cdecl;
    delete_text: procedure(editable: PGtkEditable; start_pos: gint; end_pos: gint); cdecl;
    changed: procedure(editable: PGtkEditable); cdecl;
    do_insert_text: procedure(editable: PGtkEditable; new_text: Pgchar; new_text_length: gint; position: Pgint); cdecl;
    do_delete_text: procedure(editable: PGtkEditable; start_pos: gint; end_pos: gint); cdecl;
    get_chars: function(editable: PGtkEditable; start_pos: gint; end_pos: gint): Pgchar; cdecl;
    set_selection_bounds: procedure(editable: PGtkEditable; start_pos: gint; end_pos: gint); cdecl;
    get_selection_bounds: function(editable: PGtkEditable; start_pos: Pgint; end_pos: Pgint): gboolean; cdecl;
    set_position: procedure(editable: PGtkEditable; position: gint); cdecl;
    get_position: function(editable: PGtkEditable): gint; cdecl;
  end;

  PPGtkEntryBuffer = ^PGtkEntryBuffer;
  PGtkEntryBuffer = ^TGtkEntryBuffer;

  PPGtkEntryBufferPrivate = ^PGtkEntryBufferPrivate;
  PGtkEntryBufferPrivate = ^TGtkEntryBufferPrivate;
  TGtkEntryBuffer = object(TGObject)
    priv: PGtkEntryBufferPrivate;
    function new(initial_chars: Pgchar; n_initial_chars: gint): PGtkEntryBuffer; cdecl; inline; static;
    function delete_text(position: guint; n_chars: gint): guint; cdecl; inline;
    procedure emit_deleted_text(position: guint; n_chars: guint); cdecl; inline;
    procedure emit_inserted_text(position: guint; chars: Pgchar; n_chars: guint); cdecl; inline;
    function get_bytes: gsize; cdecl; inline;
    function get_length: guint; cdecl; inline;
    function get_max_length: gint; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    function insert_text(position: guint; chars: Pgchar; n_chars: gint): guint; cdecl; inline;
    procedure set_max_length(max_length: gint); cdecl; inline;
    procedure set_text(chars: Pgchar; n_chars: gint); cdecl; inline;
    property length:  guint read get_length ;
    property max_length:  gint read get_max_length  { property is writeable but setter not declared } ;
    property text:  Pgchar read get_text  { property is writeable but setter not declared } ;
  end;

  PPGtkEntryCompletion = ^PGtkEntryCompletion;
  PGtkEntryCompletion = ^TGtkEntryCompletion;

  PPGtkEntryCompletionMatchFunc = ^PGtkEntryCompletionMatchFunc;
  PGtkEntryCompletionMatchFunc = ^TGtkEntryCompletionMatchFunc;
  TGtkEntryCompletionMatchFunc = function(completion: PGtkEntryCompletion; key: Pgchar; iter: PGtkTreeIter; user_data: gpointer): gboolean; cdecl;

  PPGtkEntryCompletionPrivate = ^PGtkEntryCompletionPrivate;
  PGtkEntryCompletionPrivate = ^TGtkEntryCompletionPrivate;
  TGtkEntryCompletion = object(TGObject)
    priv: PGtkEntryCompletionPrivate;
    function new: PGtkEntryCompletion; cdecl; inline; static;
    function new_with_area(area: PGtkCellArea): PGtkEntryCompletion; cdecl; inline; static;
    procedure complete; cdecl; inline;
    procedure delete_action(index_: gint); cdecl; inline;
    function get_completion_prefix: Pgchar; cdecl; inline;
    function get_entry: PGtkWidget; cdecl; inline;
    function get_inline_completion: gboolean; cdecl; inline;
    function get_inline_selection: gboolean; cdecl; inline;
    function get_minimum_key_length: gint; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function get_popup_completion: gboolean; cdecl; inline;
    function get_popup_set_width: gboolean; cdecl; inline;
    function get_popup_single_match: gboolean; cdecl; inline;
    function get_text_column: gint; cdecl; inline;
    procedure insert_action_markup(index_: gint; markup: Pgchar); cdecl; inline;
    procedure insert_action_text(index_: gint; text: Pgchar); cdecl; inline;
    procedure insert_prefix; cdecl; inline;
    procedure set_inline_completion(inline_completion: gboolean); cdecl; inline;
    procedure set_inline_selection(inline_selection: gboolean); cdecl; inline;
    procedure set_match_func(func: TGtkEntryCompletionMatchFunc; func_data: gpointer; func_notify: TGDestroyNotify); cdecl; inline;
    procedure set_minimum_key_length(length: gint); cdecl; inline;
    procedure set_model(model: PGtkTreeModel); cdecl; inline;
    procedure set_popup_completion(popup_completion: gboolean); cdecl; inline;
    procedure set_popup_set_width(popup_set_width: gboolean); cdecl; inline;
    procedure set_popup_single_match(popup_single_match: gboolean); cdecl; inline;
    procedure set_text_column(column: gint); cdecl; inline;
    //property cell_area: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_area  { property is writeable but setter not declared } ;
    property inline_completion:  gboolean read get_inline_completion  { property is writeable but setter not declared } ;
    property inline_selection:  gboolean read get_inline_selection  { property is writeable but setter not declared } ;
    property minimum_key_length:  gint read get_minimum_key_length  { property is writeable but setter not declared } ;
    property model:  PGtkTreeModel read get_model  { property is writeable but setter not declared } ;
    property popup_completion:  gboolean read get_popup_completion  { property is writeable but setter not declared } ;
    property popup_set_width:  gboolean read get_popup_set_width  { property is writeable but setter not declared } ;
    property popup_single_match:  gboolean read get_popup_single_match  { property is writeable but setter not declared } ;
    property text_column:  gint read get_text_column  { property is writeable but setter not declared } ;
  end;

  PPGtkEntryIconPosition = ^PGtkEntryIconPosition;
  PGtkEntryIconPosition = ^TGtkEntryIconPosition;

  PPGtkImageType = ^PGtkImageType;
  PGtkImageType = ^TGtkImageType;
  TGtkTargetList = object
    function new(targets: PGtkTargetEntry; ntargets: guint): PGtkTargetList; cdecl; inline; static;
    procedure add(target: TGdkAtom; flags: guint; info: guint); cdecl; inline;
    procedure add_image_targets(info: guint; writable: gboolean); cdecl; inline;
    procedure add_rich_text_targets(info: guint; deserializable: gboolean; buffer: PGtkTextBuffer); cdecl; inline;
    procedure add_table(targets: PGtkTargetEntry; ntargets: guint); cdecl; inline;
    procedure add_text_targets(info: guint); cdecl; inline;
    procedure add_uri_targets(info: guint); cdecl; inline;
    function find(target: TGdkAtom; info: Pguint): gboolean; cdecl; inline;
    function ref: PGtkTargetList; cdecl; inline;
    procedure remove(target: TGdkAtom); cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGtkEntryPrivate = ^PGtkEntryPrivate;
  PGtkEntryPrivate = ^TGtkEntryPrivate;

  TGtkEntryPrivate = record
    Unknown: Pointer;
  end;



  PPGtkEntry = ^PGtkEntry;
  PGtkEntry = ^TGtkEntry;
  TGtkEntry = object(TGtkWidget)
    priv1: PGtkEntryPrivate;
    function new: PGtkEntry; cdecl; inline; static;
    function new_with_buffer(buffer: PGtkEntryBuffer): PGtkEntry; cdecl; inline; static;
    function get_activates_default: gboolean; cdecl; inline;
    function get_alignment: gfloat; cdecl; inline;
    function get_buffer: PGtkEntryBuffer; cdecl; inline;
    function get_completion: PGtkEntryCompletion; cdecl; inline;
    function get_current_icon_drag_source: gint; cdecl; inline;
    function get_cursor_hadjustment: PGtkAdjustment; cdecl; inline;
    function get_has_frame: gboolean; cdecl; inline;
    function get_icon_activatable(icon_pos: TGtkEntryIconPosition): gboolean; cdecl; inline;
    procedure get_icon_area(icon_pos: TGtkEntryIconPosition; icon_area: PGdkRectangle); cdecl; inline;
    function get_icon_at_pos(x: gint; y: gint): gint; cdecl; inline;
    function get_icon_gicon(icon_pos: TGtkEntryIconPosition): PGIcon; cdecl; inline;
    function get_icon_name(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; inline;
    function get_icon_pixbuf(icon_pos: TGtkEntryIconPosition): PGdkPixbuf; cdecl; inline;
    function get_icon_sensitive(icon_pos: TGtkEntryIconPosition): gboolean; cdecl; inline;
    function get_icon_stock(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; inline;
    function get_icon_storage_type(icon_pos: TGtkEntryIconPosition): TGtkImageType; cdecl; inline;
    function get_icon_tooltip_markup(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; inline;
    function get_icon_tooltip_text(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; inline;
    function get_inner_border: PGtkBorder; cdecl; inline;
    function get_invisible_char: gunichar; cdecl; inline;
    function get_layout: PPangoLayout; cdecl; inline;
    procedure get_layout_offsets(x: Pgint; y: Pgint); cdecl; inline;
    function get_max_length: gint; cdecl; inline;
    function get_overwrite_mode: gboolean; cdecl; inline;
    function get_placeholder_text: Pgchar; cdecl; inline;
    function get_progress_fraction: gdouble; cdecl; inline;
    function get_progress_pulse_step: gdouble; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    procedure get_text_area(text_area: PGdkRectangle); cdecl; inline;
    function get_text_length: guint16; cdecl; inline;
    function get_visibility: gboolean; cdecl; inline;
    function get_width_chars: gint; cdecl; inline;
    function im_context_filter_keypress(event: PGdkEventKey): gboolean; cdecl; inline;
    function layout_index_to_text_index(layout_index: gint): gint; cdecl; inline;
    procedure progress_pulse; cdecl; inline;
    procedure reset_im_context; cdecl; inline;
    procedure set_activates_default(setting: gboolean); cdecl; inline;
    procedure set_alignment(xalign: gfloat); cdecl; inline;
    procedure set_buffer(buffer: PGtkEntryBuffer); cdecl; inline;
    procedure set_completion(completion: PGtkEntryCompletion); cdecl; inline;
    procedure set_cursor_hadjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure set_has_frame(setting: gboolean); cdecl; inline;
    procedure set_icon_activatable(icon_pos: TGtkEntryIconPosition; activatable: gboolean); cdecl; inline;
    procedure set_icon_drag_source(icon_pos: TGtkEntryIconPosition; target_list: PGtkTargetList; actions: TGdkDragAction); cdecl; inline;
    procedure set_icon_from_gicon(icon_pos: TGtkEntryIconPosition; icon: PGIcon); cdecl; inline;
    procedure set_icon_from_icon_name(icon_pos: TGtkEntryIconPosition; icon_name: Pgchar); cdecl; inline;
    procedure set_icon_from_pixbuf(icon_pos: TGtkEntryIconPosition; pixbuf: PGdkPixbuf); cdecl; inline;
    procedure set_icon_from_stock(icon_pos: TGtkEntryIconPosition; stock_id: Pgchar); cdecl; inline;
    procedure set_icon_sensitive(icon_pos: TGtkEntryIconPosition; sensitive: gboolean); cdecl; inline;
    procedure set_icon_tooltip_markup(icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl; inline;
    procedure set_icon_tooltip_text(icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl; inline;
    procedure set_inner_border(border: PGtkBorder); cdecl; inline;
    procedure set_invisible_char(ch: gunichar); cdecl; inline;
    procedure set_max_length(max: gint); cdecl; inline;
    procedure set_overwrite_mode(overwrite: gboolean); cdecl; inline;
    procedure set_placeholder_text(text: Pgchar); cdecl; inline;
    procedure set_progress_fraction(fraction: gdouble); cdecl; inline;
    procedure set_progress_pulse_step(fraction: gdouble); cdecl; inline;
    procedure set_text(text: Pgchar); cdecl; inline;
    procedure set_visibility(visible: gboolean); cdecl; inline;
    procedure set_width_chars(n_chars: gint); cdecl; inline;
    function text_index_to_layout_index(text_index: gint): gint; cdecl; inline;
    procedure unset_invisible_char; cdecl; inline;
    property activates_default:  gboolean read get_activates_default  { property is writeable but setter not declared } ;
    property buffer:  PGtkEntryBuffer read get_buffer  { property is writeable but setter not declared } ;
    //property caps_lock_warning: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_caps_lock_warning  { property is writeable but setter not declared } ;
    property completion:  PGtkEntryCompletion read get_completion  { property is writeable but setter not declared } ;
    //property cursor_position: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cursor_position ;
    //property editable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editable  { property is writeable but setter not declared } ;
    property has_frame:  gboolean read get_has_frame  { property is writeable but setter not declared } ;
    //property im_module: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_im_module  { property is writeable but setter not declared } ;
    property inner_border:  PGtkBorder read get_inner_border  { property is writeable but setter not declared } ;
    property invisible_char:  gunichar read get_invisible_char  { property is writeable but setter not declared } ;
    //property invisible_char_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_invisible_char_set  { property is writeable but setter not declared } ;
    property max_length:  gint read get_max_length  { property is writeable but setter not declared } ;
    property overwrite_mode:  gboolean read get_overwrite_mode  { property is writeable but setter not declared } ;
    property placeholder_text:  Pgchar read get_placeholder_text  { property is writeable but setter not declared } ;
    //property primary_icon_activatable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_activatable  { property is writeable but setter not declared } ;
    //property primary_icon_gicon: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_gicon  { property is writeable but setter not declared } ;
    //property primary_icon_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_name  { property is writeable but setter not declared } ;
    //property primary_icon_pixbuf: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_pixbuf  { property is writeable but setter not declared } ;
    //property primary_icon_sensitive: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_sensitive  { property is writeable but setter not declared } ;
    //property primary_icon_stock: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_stock  { property is writeable but setter not declared } ;
    //property primary_icon_storage_type: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_storage_type ;
    //property primary_icon_tooltip_markup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_tooltip_markup  { property is writeable but setter not declared } ;
    //property primary_icon_tooltip_text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_primary_icon_tooltip_text  { property is writeable but setter not declared } ;
    property progress_fraction:  gdouble read get_progress_fraction  { property is writeable but setter not declared } ;
    property progress_pulse_step:  gdouble read get_progress_pulse_step  { property is writeable but setter not declared } ;
    //property scroll_offset: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scroll_offset ;
    //property secondary_icon_activatable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_activatable  { property is writeable but setter not declared } ;
    //property secondary_icon_gicon: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_gicon  { property is writeable but setter not declared } ;
    //property secondary_icon_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_name  { property is writeable but setter not declared } ;
    //property secondary_icon_pixbuf: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_pixbuf  { property is writeable but setter not declared } ;
    //property secondary_icon_sensitive: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_sensitive  { property is writeable but setter not declared } ;
    //property secondary_icon_stock: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_stock  { property is writeable but setter not declared } ;
    //property secondary_icon_storage_type: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_storage_type ;
    //property secondary_icon_tooltip_markup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_tooltip_markup  { property is writeable but setter not declared } ;
    //property secondary_icon_tooltip_text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_icon_tooltip_text  { property is writeable but setter not declared } ;
    //property selection_bound: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_selection_bound ;
    //property shadow_type: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_shadow_type  { property is writeable but setter not declared } ;
    property text:  Pgchar read get_text  { property is writeable but setter not declared } ;
    property text_length:  guint16 read get_text_length ;
    //property truncate_multiline: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_truncate_multiline  { property is writeable but setter not declared } ;
    property visibility:  gboolean read get_visibility  { property is writeable but setter not declared } ;
    property width_chars:  gint read get_width_chars  { property is writeable but setter not declared } ;
    //property xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xalign  { property is writeable but setter not declared } ;
  end;

  TGtkEntryBufferPrivate = record
    Unknown: Pointer;
  end;



  PPGtkEntryBufferClass = ^PGtkEntryBufferClass;
  PGtkEntryBufferClass = ^TGtkEntryBufferClass;
  TGtkEntryBufferClass = object
    parent_class: TGObjectClass;
    inserted_text: procedure(buffer: PGtkEntryBuffer; position: guint; chars: Pgchar; n_chars: guint); cdecl;
    deleted_text: procedure(buffer: PGtkEntryBuffer; position: guint; n_chars: guint); cdecl;
    get_text: function(buffer: PGtkEntryBuffer; n_bytes: Pgsize): Pgchar; cdecl;
    get_length: function(buffer: PGtkEntryBuffer): guint; cdecl;
    insert_text: function(buffer: PGtkEntryBuffer; position: guint; chars: Pgchar; n_chars: guint): guint; cdecl;
    delete_text: function(buffer: PGtkEntryBuffer; position: guint; n_chars: guint): guint; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkEntryClass = ^PGtkEntryClass;
  PGtkEntryClass = ^TGtkEntryClass;
  TGtkEntryClass = object
    parent_class: TGtkWidgetClass;
    populate_popup: procedure(entry: PGtkEntry; menu: PGtkMenu); cdecl;
    activate: procedure(entry: PGtkEntry); cdecl;
    move_cursor: procedure(entry: PGtkEntry; step: TGtkMovementStep; count: gint; extend_selection: gboolean); cdecl;
    insert_at_cursor: procedure(entry: PGtkEntry; str: Pgchar); cdecl;
    delete_from_cursor: procedure(entry: PGtkEntry; type_: TGtkDeleteType; count: gint); cdecl;
    backspace: procedure(entry: PGtkEntry); cdecl;
    cut_clipboard: procedure(entry: PGtkEntry); cdecl;
    copy_clipboard: procedure(entry: PGtkEntry); cdecl;
    paste_clipboard: procedure(entry: PGtkEntry); cdecl;
    toggle_overwrite: procedure(entry: PGtkEntry); cdecl;
    get_text_area_size: procedure(entry: PGtkEntry; x: Pgint; y: Pgint; width: Pgint; height: Pgint); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  TGtkEntryCompletionPrivate = record
    Unknown: Pointer;
  end;



  PPGtkEntryCompletionClass = ^PGtkEntryCompletionClass;
  PGtkEntryCompletionClass = ^TGtkEntryCompletionClass;
  TGtkEntryCompletionClass = object
    parent_class: TGObjectClass;
    match_selected: function(completion: PGtkEntryCompletion; model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
    action_activated: procedure(completion: PGtkEntryCompletion; index_: gint); cdecl;
    insert_prefix: function(completion: PGtkEntryCompletion; prefix: Pgchar): gboolean; cdecl;
    cursor_on_match: function(completion: PGtkEntryCompletion; model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
    _gtk_reserved0: procedure; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
  end;

  PPGtkEventBoxPrivate = ^PGtkEventBoxPrivate;
  PGtkEventBoxPrivate = ^TGtkEventBoxPrivate;

  TGtkEventBoxPrivate = record
    Unknown: Pointer;
  end;



  PPGtkEventBox = ^PGtkEventBox;
  PGtkEventBox = ^TGtkEventBox;
  TGtkEventBox = object(TGtkBin)
    priv3: PGtkEventBoxPrivate;
    function new: PGtkEventBox; cdecl; inline; static;
    function get_above_child: gboolean; cdecl; inline;
    function get_visible_window: gboolean; cdecl; inline;
    procedure set_above_child(above_child: gboolean); cdecl; inline;
    procedure set_visible_window(visible_window: gboolean); cdecl; inline;
    property above_child:  gboolean read get_above_child  { property is writeable but setter not declared } ;
    property visible_window:  gboolean read get_visible_window  { property is writeable but setter not declared } ;
  end;

  PPGtkEventBoxClass = ^PGtkEventBoxClass;
  PGtkEventBoxClass = ^TGtkEventBoxClass;
  TGtkEventBoxClass = object
    parent_class: TGtkBinClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkExpanderPrivate = ^PGtkExpanderPrivate;
  PGtkExpanderPrivate = ^TGtkExpanderPrivate;

  TGtkExpanderPrivate = record
    Unknown: Pointer;
  end;



  PPGtkExpander = ^PGtkExpander;
  PGtkExpander = ^TGtkExpander;
  TGtkExpander = object(TGtkBin)
    priv3: PGtkExpanderPrivate;
    function new(label_: Pgchar): PGtkExpander; cdecl; inline; static;
    function new_with_mnemonic(label_: Pgchar): PGtkExpander; cdecl; inline; static;
    function get_expanded: gboolean; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_label_fill: gboolean; cdecl; inline;
    function get_label_widget: PGtkWidget; cdecl; inline;
    function get_resize_toplevel: gboolean; cdecl; inline;
    function get_spacing: gint; cdecl; inline;
    function get_use_markup: gboolean; cdecl; inline;
    function get_use_underline: gboolean; cdecl; inline;
    procedure set_expanded(expanded: gboolean); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_label_fill(label_fill: gboolean); cdecl; inline;
    procedure set_label_widget(label_widget: PGtkWidget); cdecl; inline;
    procedure set_resize_toplevel(resize_toplevel: gboolean); cdecl; inline;
    procedure set_spacing(spacing: gint); cdecl; inline;
    procedure set_use_markup(use_markup: gboolean); cdecl; inline;
    procedure set_use_underline(use_underline: gboolean); cdecl; inline;
    property expanded:  gboolean read get_expanded  { property is writeable but setter not declared } ;
    property label_:  Pgchar read get_label  { property is writeable but setter not declared } ;
    property label_fill:  gboolean read get_label_fill  { property is writeable but setter not declared } ;
    property label_widget:  PGtkWidget read get_label_widget  { property is writeable but setter not declared } ;
    property resize_toplevel:  gboolean read get_resize_toplevel  { property is writeable but setter not declared } ;
    property spacing:  gint read get_spacing  { property is writeable but setter not declared } ;
    property use_markup:  gboolean read get_use_markup  { property is writeable but setter not declared } ;
    property use_underline:  gboolean read get_use_underline  { property is writeable but setter not declared } ;
  end;

  PPGtkExpanderClass = ^PGtkExpanderClass;
  PGtkExpanderClass = ^TGtkExpanderClass;
  TGtkExpanderClass = object
    parent_class: TGtkBinClass;
    activate: procedure(expander: PGtkExpander); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkExpanderStyle = ^PGtkExpanderStyle;
  PGtkExpanderStyle = ^TGtkExpanderStyle;

  PPGtkFileFilter = ^PGtkFileFilter;
  PGtkFileFilter = ^TGtkFileFilter;

  PPGtkFileFilterFlags = ^PGtkFileFilterFlags;
  PGtkFileFilterFlags = ^TGtkFileFilterFlags;
  TGtkFileFilterFlags = packed object(TBitObject32)
  public
    property filename: DWord index 1 read GetBit write SetBit;
    property uri: DWord index 2 read GetBit write SetBit;
    property display_name: DWord index 4 read GetBit write SetBit;
    property mime_type: DWord index 8 read GetBit write SetBit;
  end;


  PPGtkFileFilterFunc = ^PGtkFileFilterFunc;
  PGtkFileFilterFunc = ^TGtkFileFilterFunc;

  PPGtkFileFilterInfo = ^PGtkFileFilterInfo;
  PGtkFileFilterInfo = ^TGtkFileFilterInfo;
  TGtkFileFilterFunc = function(filter_info: PGtkFileFilterInfo; data: gpointer): gboolean; cdecl;
  TGtkFileFilter = object(TGInitiallyUnowned)
    function new: PGtkFileFilter; cdecl; inline; static;
    procedure add_custom(needed: TGtkFileFilterFlags; func: TGtkFileFilterFunc; data: gpointer; notify: TGDestroyNotify); cdecl; inline;
    procedure add_mime_type(mime_type: Pgchar); cdecl; inline;
    procedure add_pattern(pattern: Pgchar); cdecl; inline;
    procedure add_pixbuf_formats; cdecl; inline;
    function filter(filter_info: PGtkFileFilterInfo): gboolean; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_needed: TGtkFileFilterFlags; cdecl; inline;
    procedure set_name(name: Pgchar); cdecl; inline;
  end;

  { char* }
  Tchar = record
    { opaque type }
    Unknown: Pointer;
  end;


  PPGtkFileChooserAction = ^PGtkFileChooserAction;
  PGtkFileChooserAction = ^TGtkFileChooserAction;

  PPGtkFileChooserConfirmation = ^PGtkFileChooserConfirmation;
  PGtkFileChooserConfirmation = ^TGtkFileChooserConfirmation;

  PPGtkFileChooser = ^PGtkFileChooser;
  PGtkFileChooser = ^TGtkFileChooser;

  Pchar = ^Tchar;
  TGtkFileChooser = object
    confirm_overwrite: function: TGtkFileChooserConfirmation; cdecl;
    current_folder_changed: procedure; cdecl;
    file_activated: procedure; cdecl;
    selection_changed: procedure; cdecl;
    update_preview: procedure; cdecl;
    procedure add_filter(filter: PGtkFileFilter); cdecl; inline;
    function add_shortcut_folder(folder: Pchar): gboolean; cdecl; inline;
    function add_shortcut_folder_uri(uri: Pgchar): gboolean; cdecl; inline;
    function get_action: TGtkFileChooserAction; cdecl; inline;
    function get_create_folders: gboolean; cdecl; inline;
    function get_current_folder: Pgchar; cdecl; inline;
    function get_current_folder_file: PGFile; cdecl; inline;
    function get_current_folder_uri: Pgchar; cdecl; inline;
    function get_do_overwrite_confirmation: gboolean; cdecl; inline;
    function get_extra_widget: PGtkWidget; cdecl; inline;
    function get_file: PGFile; cdecl; inline;
    function get_filename: Pgchar; cdecl; inline;
    function get_filenames: PGSList; cdecl; inline;
    function get_files: PGSList; cdecl; inline;
    function get_filter: PGtkFileFilter; cdecl; inline;
    function get_local_only: gboolean; cdecl; inline;
    function get_preview_file: PGFile; cdecl; inline;
    function get_preview_filename: Pchar; cdecl; inline;
    function get_preview_uri: Pgchar; cdecl; inline;
    function get_preview_widget: PGtkWidget; cdecl; inline;
    function get_preview_widget_active: gboolean; cdecl; inline;
    function get_select_multiple: gboolean; cdecl; inline;
    function get_show_hidden: gboolean; cdecl; inline;
    function get_uri: Pgchar; cdecl; inline;
    function get_uris: PGSList; cdecl; inline;
    function get_use_preview_label: gboolean; cdecl; inline;
    function list_filters: PGSList; cdecl; inline;
    function list_shortcut_folder_uris: PGSList; cdecl; inline;
    function list_shortcut_folders: PGSList; cdecl; inline;
    procedure remove_filter(filter: PGtkFileFilter); cdecl; inline;
    function remove_shortcut_folder(folder: Pchar): gboolean; cdecl; inline;
    function remove_shortcut_folder_uri(uri: Pgchar): gboolean; cdecl; inline;
    procedure select_all; cdecl; inline;
    function select_file(file_: PGFile): gboolean; cdecl; inline;
    function select_filename(filename: Pchar): gboolean; cdecl; inline;
    function select_uri(uri: Pgchar): gboolean; cdecl; inline;
    procedure set_action(action: TGtkFileChooserAction); cdecl; inline;
    procedure set_create_folders(create_folders: gboolean); cdecl; inline;
    function set_current_folder(filename: Pgchar): gboolean; cdecl; inline;
    function set_current_folder_file(file_: PGFile): gboolean; cdecl; inline;
    function set_current_folder_uri(uri: Pgchar): gboolean; cdecl; inline;
    procedure set_current_name(name: Pgchar); cdecl; inline;
    procedure set_do_overwrite_confirmation(do_overwrite_confirmation: gboolean); cdecl; inline;
    procedure set_extra_widget(extra_widget: PGtkWidget); cdecl; inline;
    function set_file(file_: PGFile): gboolean; cdecl; inline;
    function set_filename(filename: Pchar): gboolean; cdecl; inline;
    procedure set_filter(filter: PGtkFileFilter); cdecl; inline;
    procedure set_local_only(local_only: gboolean); cdecl; inline;
    procedure set_preview_widget(preview_widget: PGtkWidget); cdecl; inline;
    procedure set_preview_widget_active(active: gboolean); cdecl; inline;
    procedure set_select_multiple(select_multiple: gboolean); cdecl; inline;
    procedure set_show_hidden(show_hidden: gboolean); cdecl; inline;
    function set_uri(uri: Pgchar): gboolean; cdecl; inline;
    procedure set_use_preview_label(use_label: gboolean); cdecl; inline;
    procedure unselect_all; cdecl; inline;
    procedure unselect_file(file_: PGFile); cdecl; inline;
    procedure unselect_filename(filename: Pchar); cdecl; inline;
    procedure unselect_uri(uri: Pgchar); cdecl; inline;
    property action:  TGtkFileChooserAction read get_action  { property is writeable but setter not declared } ;
    property create_folders:  gboolean read get_create_folders  { property is writeable but setter not declared } ;
    property do_overwrite_confirmation:  gboolean read get_do_overwrite_confirmation  { property is writeable but setter not declared } ;
    property extra_widget:  PGtkWidget read get_extra_widget  { property is writeable but setter not declared } ;
    property filter:  PGtkFileFilter read get_filter  { property is writeable but setter not declared } ;
    property local_only:  gboolean read get_local_only  { property is writeable but setter not declared } ;
    property preview_widget:  PGtkWidget read get_preview_widget  { property is writeable but setter not declared } ;
    property preview_widget_active:  gboolean read get_preview_widget_active  { property is writeable but setter not declared } ;
    property select_multiple:  gboolean read get_select_multiple  { property is writeable but setter not declared } ;
    property show_hidden:  gboolean read get_show_hidden  { property is writeable but setter not declared } ;
    property use_preview_label:  gboolean read get_use_preview_label  { property is writeable but setter not declared } ;
  end;

  PPGtkFileChooserButtonPrivate = ^PGtkFileChooserButtonPrivate;
  PGtkFileChooserButtonPrivate = ^TGtkFileChooserButtonPrivate;

  TGtkFileChooserButtonPrivate = record
    Unknown: Pointer;
  end;



  PPGtkFileChooserButton = ^PGtkFileChooserButton;
  PGtkFileChooserButton = ^TGtkFileChooserButton;
  TGtkFileChooserButton = object(TGtkBox)
    priv3: PGtkFileChooserButtonPrivate;
    function new(title: Pgchar; action: TGtkFileChooserAction): PGtkFileChooserButton; cdecl; inline; static;
    function new_with_dialog(dialog: PGtkWidget): PGtkFileChooserButton; cdecl; inline; static;
    function get_focus_on_click: gboolean; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_width_chars: gint; cdecl; inline;
    procedure set_focus_on_click(focus_on_click: gboolean); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_width_chars(n_chars: gint); cdecl; inline;
    //property dialog: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_dialog  { property is writeable but setter not declared } ;
    property focus_on_click:  gboolean read get_focus_on_click  { property is writeable but setter not declared } ;
    property title:  Pgchar read get_title  { property is writeable but setter not declared } ;
    property width_chars:  gint read get_width_chars  { property is writeable but setter not declared } ;
  end;

  PPGtkFileChooserButtonClass = ^PGtkFileChooserButtonClass;
  PGtkFileChooserButtonClass = ^TGtkFileChooserButtonClass;
  TGtkFileChooserButtonClass = object
    parent_class: TGtkBoxClass;
    file_set: procedure(fc: PGtkFileChooserButton); cdecl;
    __gtk_reserved1: Pgpointer;
    __gtk_reserved2: Pgpointer;
    __gtk_reserved3: Pgpointer;
    __gtk_reserved4: Pgpointer;
  end;

  PPGtkFileChooserDialogPrivate = ^PGtkFileChooserDialogPrivate;
  PGtkFileChooserDialogPrivate = ^TGtkFileChooserDialogPrivate;

  TGtkFileChooserDialogPrivate = record
    Unknown: Pointer;
  end;



  PPGtkFileChooserDialog = ^PGtkFileChooserDialog;
  PGtkFileChooserDialog = ^TGtkFileChooserDialog;
  TGtkFileChooserDialog = object(TGtkDialog)
    priv1: PGtkFileChooserDialogPrivate;
    //function new(title: Pgchar; parent: PAtkWindow; action: TGtkFileChooserAction; first_button_text: Pgchar; args: array of const): PGtkFileChooserDialog; cdecl; inline; static;
  end;

  PPGtkFileChooserDialogClass = ^PGtkFileChooserDialogClass;
  PGtkFileChooserDialogClass = ^TGtkFileChooserDialogClass;
  TGtkFileChooserDialogClass = object
    parent_class: TGtkDialogClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkFileChooserError = ^PGtkFileChooserError;
  PGtkFileChooserError = ^TGtkFileChooserError;

  PPGtkFileChooserWidgetPrivate = ^PGtkFileChooserWidgetPrivate;
  PGtkFileChooserWidgetPrivate = ^TGtkFileChooserWidgetPrivate;

  TGtkFileChooserWidgetPrivate = record
    Unknown: Pointer;
  end;



  PPGtkFileChooserWidget = ^PGtkFileChooserWidget;
  PGtkFileChooserWidget = ^TGtkFileChooserWidget;
  TGtkFileChooserWidget = object(TGtkBox)
    priv3: PGtkFileChooserWidgetPrivate;
    function new(action: TGtkFileChooserAction): PGtkFileChooserWidget; cdecl; inline; static;
  end;

  PPGtkFileChooserWidgetClass = ^PGtkFileChooserWidgetClass;
  PGtkFileChooserWidgetClass = ^TGtkFileChooserWidgetClass;
  TGtkFileChooserWidgetClass = object
    parent_class: TGtkBoxClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkFileFilterInfo = record
    contains: TGtkFileFilterFlags;
    filename: Pgchar;
    uri: Pgchar;
    display_name: Pgchar;
    mime_type: Pgchar;
  end;



  PPGtkFixedPrivate = ^PGtkFixedPrivate;
  PGtkFixedPrivate = ^TGtkFixedPrivate;

  TGtkFixedPrivate = record
    Unknown: Pointer;
  end;



  PPGtkFixed = ^PGtkFixed;
  PGtkFixed = ^TGtkFixed;
  TGtkFixed = object(TGtkContainer)
    priv2: PGtkFixedPrivate;
    function new: PGtkFixed; cdecl; inline; static;
    procedure move(widget: PGtkWidget; x: gint; y: gint); cdecl; inline;
    procedure put(widget: PGtkWidget; x: gint; y: gint); cdecl; inline;
  end;

  PPGtkFixedChild = ^PGtkFixedChild;
  PGtkFixedChild = ^TGtkFixedChild;

  TGtkFixedChild = record
    widget: PGtkWidget;
    x: gint;
    y: gint;
  end;



  PPGtkFixedClass = ^PGtkFixedClass;
  PGtkFixedClass = ^TGtkFixedClass;
  TGtkFixedClass = object
    parent_class: TGtkContainerClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkFontButtonPrivate = ^PGtkFontButtonPrivate;
  PGtkFontButtonPrivate = ^TGtkFontButtonPrivate;

  TGtkFontButtonPrivate = record
    Unknown: Pointer;
  end;



  PPGtkFontButton = ^PGtkFontButton;
  PGtkFontButton = ^TGtkFontButton;
  TGtkFontButton = object(TGtkButton)
    priv4: PGtkFontButtonPrivate;
    function new: PGtkFontButton; cdecl; inline; static;
    function new_with_font(fontname: Pgchar): PGtkFontButton; cdecl; inline; static;
    function get_font_name: Pgchar; cdecl; inline;
    function get_show_size: gboolean; cdecl; inline;
    function get_show_style: gboolean; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_use_font: gboolean; cdecl; inline;
    function get_use_size: gboolean; cdecl; inline;
    function set_font_name(fontname: Pgchar): gboolean; cdecl; inline;
    procedure set_show_size(show_size: gboolean); cdecl; inline;
    procedure set_show_style(show_style: gboolean); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_use_font(use_font: gboolean); cdecl; inline;
    procedure set_use_size(use_size: gboolean); cdecl; inline;
    property font_name:  Pgchar read get_font_name  { property is writeable but setter not declared } ;
    property show_size:  gboolean read get_show_size  { property is writeable but setter not declared } ;
    property show_style:  gboolean read get_show_style  { property is writeable but setter not declared } ;
    property title:  Pgchar read get_title  { property is writeable but setter not declared } ;
    property use_font:  gboolean read get_use_font  { property is writeable but setter not declared } ;
    property use_size:  gboolean read get_use_size  { property is writeable but setter not declared } ;
  end;

  PPGtkFontButtonClass = ^PGtkFontButtonClass;
  PGtkFontButtonClass = ^TGtkFontButtonClass;
  TGtkFontButtonClass = object
    parent_class: TGtkButtonClass;
    font_set: procedure(gfp: PGtkFontButton); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;
  TGtkFontFilterFunc = function(family: PPangoFontFamily; face: PPangoFontFace; data: gpointer): gboolean; cdecl;

  PPGtkFontChooserPrivate = ^PGtkFontChooserPrivate;
  PGtkFontChooserPrivate = ^TGtkFontChooserPrivate;

  TGtkFontChooserPrivate = record
    Unknown: Pointer;
  end;



  PPGtkFontChooser = ^PGtkFontChooser;
  PGtkFontChooser = ^TGtkFontChooser;

  PPGtkFontFilterFunc = ^PGtkFontFilterFunc;
  PGtkFontFilterFunc = ^TGtkFontFilterFunc;
  TGtkFontChooser = object(TGtkBox)
    priv3: PGtkFontChooserPrivate;
    function new: PGtkFontChooser; cdecl; inline; static;
    function get_face: PPangoFontFace; cdecl; inline;
    function get_family: PPangoFontFamily; cdecl; inline;
    function get_font_name: Pgchar; cdecl; inline;
    function get_preview_text: Pgchar; cdecl; inline;
    function get_show_preview_entry: gboolean; cdecl; inline;
    function get_size: gint; cdecl; inline;
    procedure set_filter_func(filter: TGtkFontFilterFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    function set_font_name(fontname: Pgchar): gboolean; cdecl; inline;
    procedure set_preview_text(text: Pgchar); cdecl; inline;
    procedure set_show_preview_entry(show_preview_entry: gboolean); cdecl; inline;
    property font_name:  Pgchar read get_font_name  { property is writeable but setter not declared } ;
    property preview_text:  Pgchar read get_preview_text  { property is writeable but setter not declared } ;
    property show_preview_entry:  gboolean read get_show_preview_entry  { property is writeable but setter not declared } ;
  end;

  PPGtkFontChooserClass = ^PGtkFontChooserClass;
  PGtkFontChooserClass = ^TGtkFontChooserClass;
  TGtkFontChooserClass = object
    parent_class: TGtkBoxClass;
    font_activated: procedure(chooser: PGtkFontChooser; fontname: Pgchar); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkFontChooserDialogPrivate = ^PGtkFontChooserDialogPrivate;
  PGtkFontChooserDialogPrivate = ^TGtkFontChooserDialogPrivate;

  TGtkFontChooserDialogPrivate = record
    Unknown: Pointer;
  end;



  PPGtkFontChooserDialog = ^PGtkFontChooserDialog;
  PGtkFontChooserDialog = ^TGtkFontChooserDialog;
  TGtkFontChooserDialog = object(TGtkDialog)
    priv1: PGtkFontChooserDialogPrivate;
    function new(title: Pgchar; window: PAtkWindow): PGtkFontChooserDialog; cdecl; inline; static;
    function get_font_chooser: PGtkWidget; cdecl; inline;
    function get_font_name: Pgchar; cdecl; inline;
    function get_preview_text: Pgchar; cdecl; inline;
    function set_font_name(fontname: Pgchar): gboolean; cdecl; inline;
    procedure set_preview_text(text: Pgchar); cdecl; inline;
  end;

  PPGtkFontChooserDialogClass = ^PGtkFontChooserDialogClass;
  PGtkFontChooserDialogClass = ^TGtkFontChooserDialogClass;
  TGtkFontChooserDialogClass = object
    parent_class: TGtkDialogClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkFontSelectionPrivate = ^PGtkFontSelectionPrivate;
  PGtkFontSelectionPrivate = ^TGtkFontSelectionPrivate;

  TGtkFontSelectionPrivate = record
    Unknown: Pointer;
  end;



  PPGtkFontSelection = ^PGtkFontSelection;
  PGtkFontSelection = ^TGtkFontSelection;
  TGtkFontSelection = object(TGtkBox)
    priv3: PGtkFontSelectionPrivate;
    function new: PGtkFontSelection; cdecl; inline; static;
    
    
    
    
    
    
    
    
    
    
    
    
    //property font_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_font_name  { property is writeable but setter not declared } ;
    //property preview_text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_preview_text  { property is writeable but setter not declared } ;
  end;

  PPGtkFontSelectionClass = ^PGtkFontSelectionClass;
  PGtkFontSelectionClass = ^TGtkFontSelectionClass;
  TGtkFontSelectionClass = object
    parent_class: TGtkBoxClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkFontSelectionDialogPrivate = ^PGtkFontSelectionDialogPrivate;
  PGtkFontSelectionDialogPrivate = ^TGtkFontSelectionDialogPrivate;

  TGtkFontSelectionDialogPrivate = record
    Unknown: Pointer;
  end;



  PPGtkFontSelectionDialog = ^PGtkFontSelectionDialog;
  PGtkFontSelectionDialog = ^TGtkFontSelectionDialog;
  TGtkFontSelectionDialog = object(TGtkDialog)
    priv1: PGtkFontSelectionDialogPrivate;
    
    
    
    
    
    
    
    
  end;

  PPGtkFontSelectionDialogClass = ^PGtkFontSelectionDialogClass;
  PGtkFontSelectionDialogClass = ^TGtkFontSelectionDialogClass;
  TGtkFontSelectionDialogClass = object
    parent_class: TGtkDialogClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkFramePrivate = record
    Unknown: Pointer;
  end;



  PPGtkGradient = ^PGtkGradient;
  PGtkGradient = ^TGtkGradient;

  PPGtkSymbolicColor = ^PGtkSymbolicColor;
  PGtkSymbolicColor = ^TGtkSymbolicColor;
  TGtkGradient = object
    function new_linear(x0: gdouble; y0: gdouble; x1: gdouble; y1: gdouble): PGtkGradient; cdecl; inline; static;
    function new_radial(x0: gdouble; y0: gdouble; radius0: gdouble; x1: gdouble; y1: gdouble; radius1: gdouble): PGtkGradient; cdecl; inline; static;
    procedure add_color_stop(offset: gdouble; color: PGtkSymbolicColor); cdecl; inline;
    function ref: PGtkGradient; cdecl; inline;
    function resolve(props: PGtkStyleProperties; resolved_gradient: PPcairo_pattern_t): gboolean; cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
    procedure unref; cdecl; inline;
  end;
  TGtkSymbolicColor = object
    function new_literal(color: PGdkRGBA): PGtkSymbolicColor; cdecl; inline; static;
    function new_name(name: Pgchar): PGtkSymbolicColor; cdecl; inline; static;
    function new_alpha(factor: gdouble): PGtkSymbolicColor; cdecl; inline;
    function new_mix(color2: PGtkSymbolicColor; factor: gdouble): PGtkSymbolicColor; cdecl; inline;
    function new_shade(factor: gdouble): PGtkSymbolicColor; cdecl; inline;
    function ref: PGtkSymbolicColor; cdecl; inline;
    function resolve(props: PGtkStyleProperties; resolved_color: PGdkRGBA): gboolean; cdecl; inline;
    function to_string: Pgchar; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGtkStylePropertyParser = ^PGtkStylePropertyParser;
  PGtkStylePropertyParser = ^TGtkStylePropertyParser;
  TGtkStylePropertyParser = function(string_: Pgchar; value: PGValue): gboolean; cdecl;
  TGtkStyleProperties = object(TGObject)
    priv: gpointer;
    function new: PGtkStyleProperties; cdecl; inline; static;
    function lookup_property(property_name: Pgchar; parse_func: PGtkStylePropertyParser; pspec: PPGParamSpec): gboolean; cdecl; inline; static;
    procedure register_property(parse_func: TGtkStylePropertyParser; pspec: PGParamSpec); cdecl; inline; static;
    procedure clear; cdecl; inline;
    //procedure get(state: TGtkStateFlags; args: array of const); cdecl; inline;
    function get_property(property_: Pgchar; state: TGtkStateFlags; value: PGValue): gboolean; cdecl; inline;
    //procedure get_valist(state: TGtkStateFlags; args: Tva_list); cdecl; inline;
    function lookup_color(name: Pgchar): PGtkSymbolicColor; cdecl; inline;
    procedure map_color(name: Pgchar; color: PGtkSymbolicColor); cdecl; inline;
    procedure merge(props_to_merge: PGtkStyleProperties; replace: gboolean); cdecl; inline;
    //procedure set_(state: TGtkStateFlags; args: array of const); cdecl; inline;
    procedure set_property(property_: Pgchar; state: TGtkStateFlags; value: PGValue); cdecl; inline;
    //procedure set_valist(state: TGtkStateFlags; args: Tva_list); cdecl; inline;
    procedure unset_property(property_: Pgchar; state: TGtkStateFlags); cdecl; inline;
  end;

  PPGtkGridPrivate = ^PGtkGridPrivate;
  PGtkGridPrivate = ^TGtkGridPrivate;

  TGtkGridPrivate = record
    Unknown: Pointer;
  end;



  PPGtkGrid = ^PGtkGrid;
  PGtkGrid = ^TGtkGrid;
  TGtkGrid = object(TGtkContainer)
    priv2: PGtkGridPrivate;
    function new: PGtkGrid; cdecl; inline; static;
    procedure attach(child: PGtkWidget; left: gint; top: gint; width: gint; height: gint); cdecl; inline;
    procedure attach_next_to(child: PGtkWidget; sibling: PGtkWidget; side: TGtkPositionType; width: gint; height: gint); cdecl; inline;
    function get_child_at(left: gint; top: gint): PGtkWidget; cdecl; inline;
    function get_column_homogeneous: gboolean; cdecl; inline;
    function get_column_spacing: guint; cdecl; inline;
    function get_row_homogeneous: gboolean; cdecl; inline;
    function get_row_spacing: guint; cdecl; inline;
    procedure insert_column(position: gint); cdecl; inline;
    procedure insert_next_to(sibling: PGtkWidget; side: TGtkPositionType); cdecl; inline;
    procedure insert_row(position: gint); cdecl; inline;
    procedure set_column_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_column_spacing(spacing: guint); cdecl; inline;
    procedure set_row_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_row_spacing(spacing: guint); cdecl; inline;
    property column_homogeneous:  gboolean read get_column_homogeneous  { property is writeable but setter not declared } ;
    property column_spacing:  guint read get_column_spacing  { property is writeable but setter not declared } ;
    property row_homogeneous:  gboolean read get_row_homogeneous  { property is writeable but setter not declared } ;
    property row_spacing:  guint read get_row_spacing  { property is writeable but setter not declared } ;
  end;

  PPGtkGridClass = ^PGtkGridClass;
  PGtkGridClass = ^TGtkGridClass;
  TGtkGridClass = object
    parent_class: TGtkContainerClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkHBox = ^PGtkHBox;
  PGtkHBox = ^TGtkHBox;
  TGtkHBox = object(TGtkBox)
    
  end;

  PPGtkHBoxClass = ^PGtkHBoxClass;
  PGtkHBoxClass = ^TGtkHBoxClass;
  TGtkHBoxClass = object
    parent_class: TGtkBoxClass;
  end;

  PPGtkHButtonBox = ^PGtkHButtonBox;
  PGtkHButtonBox = ^TGtkHButtonBox;
  TGtkHButtonBox = object(TGtkButtonBox)
    
  end;

  PPGtkHButtonBoxClass = ^PGtkHButtonBoxClass;
  PGtkHButtonBoxClass = ^TGtkHButtonBoxClass;
  TGtkHButtonBoxClass = object
    parent_class: TGtkButtonBoxClass;
  end;

  PPGtkPaned = ^PGtkPaned;
  PGtkPaned = ^TGtkPaned;

  PPGtkPanedPrivate = ^PGtkPanedPrivate;
  PGtkPanedPrivate = ^TGtkPanedPrivate;
  TGtkPaned = object(TGtkContainer)
    priv2: PGtkPanedPrivate;
    function new(orientation: TGtkOrientation): PGtkPaned; cdecl; inline; static;
    procedure add1(child: PGtkWidget); cdecl; inline;
    procedure add2(child: PGtkWidget); cdecl; inline;
    function get_child1: PGtkWidget; cdecl; inline;
    function get_child2: PGtkWidget; cdecl; inline;
    function get_handle_window: PGdkWindow; cdecl; inline;
    function get_position: gint; cdecl; inline;
    procedure pack1(child: PGtkWidget; resize: gboolean; shrink: gboolean); cdecl; inline;
    procedure pack2(child: PGtkWidget; resize: gboolean; shrink: gboolean); cdecl; inline;
    procedure set_position(position: gint); cdecl; inline;
    //property max_position: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_max_position ;
    //property min_position: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_min_position ;
    property position:  gint read get_position  { property is writeable but setter not declared } ;
    //property position_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_position_set  { property is writeable but setter not declared } ;
  end;

  PPGtkHPaned = ^PGtkHPaned;
  PGtkHPaned = ^TGtkHPaned;
  TGtkHPaned = object(TGtkPaned)
    
  end;

  PPGtkPanedClass = ^PGtkPanedClass;
  PGtkPanedClass = ^TGtkPanedClass;
  TGtkPanedClass = object
    parent_class: TGtkContainerClass;
    cycle_child_focus: function(paned: PGtkPaned; reverse: gboolean): gboolean; cdecl;
    toggle_handle_focus: function(paned: PGtkPaned): gboolean; cdecl;
    move_handle: function(paned: PGtkPaned; scroll: TGtkScrollType): gboolean; cdecl;
    cycle_handle_focus: function(paned: PGtkPaned; reverse: gboolean): gboolean; cdecl;
    accept_position: function(paned: PGtkPaned): gboolean; cdecl;
    cancel_position: function(paned: PGtkPaned): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkHPanedClass = ^PGtkHPanedClass;
  PGtkHPanedClass = ^TGtkHPanedClass;
  TGtkHPanedClass = object
    parent_class: TGtkPanedClass;
  end;

  PPGtkHSVPrivate = ^PGtkHSVPrivate;
  PGtkHSVPrivate = ^TGtkHSVPrivate;

  TGtkHSVPrivate = record
    Unknown: Pointer;
  end;



  PPGtkHSV = ^PGtkHSV;
  PGtkHSV = ^TGtkHSV;
  TGtkHSV = object(TGtkWidget)
    priv1: PGtkHSVPrivate;
    function new: PGtkHSV; cdecl; inline; static;
    procedure to_rgb(h: gdouble; s: gdouble; v: gdouble; r: Pgdouble; g: Pgdouble; b: Pgdouble); cdecl; inline; static;
    procedure get_color(h: Pgdouble; s: Pgdouble; v: Pgdouble); cdecl; inline;
    procedure get_metrics(size: Pgint; ring_width: Pgint); cdecl; inline;
    function is_adjusting: gboolean; cdecl; inline;
    procedure set_color(h: gdouble; s: gdouble; v: gdouble); cdecl; inline;
    procedure set_metrics(size: gint; ring_width: gint); cdecl; inline;
  end;

  PPGtkHSVClass = ^PGtkHSVClass;
  PGtkHSVClass = ^TGtkHSVClass;
  TGtkHSVClass = object
    parent_class: TGtkWidgetClass;
    changed: procedure(hsv: PGtkHSV); cdecl;
    move: procedure(hsv: PGtkHSV; type_: TGtkDirectionType); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkScale = ^PGtkScale;
  PGtkScale = ^TGtkScale;

  PPGtkRange = ^PGtkRange;
  PGtkRange = ^TGtkRange;

  PPGtkRangePrivate = ^PGtkRangePrivate;
  PGtkRangePrivate = ^TGtkRangePrivate;
  TGtkRange = object(TGtkWidget)
    priv1: PGtkRangePrivate;
    function get_adjustment: PGtkAdjustment; cdecl; inline;
    function get_fill_level: gdouble; cdecl; inline;
    function get_flippable: gboolean; cdecl; inline;
    function get_inverted: gboolean; cdecl; inline;
    function get_lower_stepper_sensitivity: TGtkSensitivityType; cdecl; inline;
    function get_min_slider_size: gint; cdecl; inline;
    procedure get_range_rect(range_rect: PGdkRectangle); cdecl; inline;
    function get_restrict_to_fill_level: gboolean; cdecl; inline;
    function get_round_digits: gint; cdecl; inline;
    function get_show_fill_level: gboolean; cdecl; inline;
    procedure get_slider_range(slider_start: Pgint; slider_end: Pgint); cdecl; inline;
    function get_slider_size_fixed: gboolean; cdecl; inline;
    function get_upper_stepper_sensitivity: TGtkSensitivityType; cdecl; inline;
    function get_value: gdouble; cdecl; inline;
    procedure set_adjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure set_fill_level(fill_level: gdouble); cdecl; inline;
    procedure set_flippable(flippable: gboolean); cdecl; inline;
    procedure set_increments(step: gdouble; page: gdouble); cdecl; inline;
    procedure set_inverted(setting: gboolean); cdecl; inline;
    procedure set_lower_stepper_sensitivity(sensitivity: TGtkSensitivityType); cdecl; inline;
    procedure set_min_slider_size(min_size: gint); cdecl; inline;
    procedure set_range(min: gdouble; max: gdouble); cdecl; inline;
    procedure set_restrict_to_fill_level(restrict_to_fill_level: gboolean); cdecl; inline;
    procedure set_round_digits(round_digits: gint); cdecl; inline;
    procedure set_show_fill_level(show_fill_level: gboolean); cdecl; inline;
    procedure set_slider_size_fixed(size_fixed: gboolean); cdecl; inline;
    procedure set_upper_stepper_sensitivity(sensitivity: TGtkSensitivityType); cdecl; inline;
    procedure set_value(value: gdouble); cdecl; inline;
    property adjustment:  PGtkAdjustment read get_adjustment  { property is writeable but setter not declared } ;
    property fill_level:  gdouble read get_fill_level  { property is writeable but setter not declared } ;
    property inverted:  gboolean read get_inverted  { property is writeable but setter not declared } ;
    property lower_stepper_sensitivity:  TGtkSensitivityType read get_lower_stepper_sensitivity  { property is writeable but setter not declared } ;
    property restrict_to_fill_level:  gboolean read get_restrict_to_fill_level  { property is writeable but setter not declared } ;
    property round_digits:  gint read get_round_digits  { property is writeable but setter not declared } ;
    property show_fill_level:  gboolean read get_show_fill_level  { property is writeable but setter not declared } ;
    property upper_stepper_sensitivity:  TGtkSensitivityType read get_upper_stepper_sensitivity  { property is writeable but setter not declared } ;
  end;

  PPGtkScalePrivate = ^PGtkScalePrivate;
  PGtkScalePrivate = ^TGtkScalePrivate;
  TGtkScale = object(TGtkRange)
    priv2: PGtkScalePrivate;
    function new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScale; cdecl; inline; static;
    function new_with_range(orientation: TGtkOrientation; min: gdouble; max: gdouble; step: gdouble): PGtkScale; cdecl; inline; static;
    procedure add_mark(value: gdouble; position: TGtkPositionType; markup: Pgchar); cdecl; inline;
    procedure clear_marks; cdecl; inline;
    function get_digits: gint; cdecl; inline;
    function get_draw_value: gboolean; cdecl; inline;
    function get_layout: PPangoLayout; cdecl; inline;
    procedure get_layout_offsets(x: Pgint; y: Pgint); cdecl; inline;
    function get_value_pos: TGtkPositionType; cdecl; inline;
    procedure set_digits(digits: gint); cdecl; inline;
    procedure set_draw_value(draw_value: gboolean); cdecl; inline;
    procedure set_value_pos(pos: TGtkPositionType); cdecl; inline;
    property digits:  gint read get_digits  { property is writeable but setter not declared } ;
    property draw_value:  gboolean read get_draw_value  { property is writeable but setter not declared } ;
    property value_pos:  TGtkPositionType read get_value_pos  { property is writeable but setter not declared } ;
  end;

  PPGtkHScale = ^PGtkHScale;
  PGtkHScale = ^TGtkHScale;
  TGtkHScale = object(TGtkScale)
    
    
  end;

  PPGtkScaleClass = ^PGtkScaleClass;
  PGtkScaleClass = ^TGtkScaleClass;

  PPGtkRangeClass = ^PGtkRangeClass;
  PGtkRangeClass = ^TGtkRangeClass;
  TGtkRangeClass = object
    parent_class: TGtkWidgetClass;
    slider_detail: Pgchar;
    stepper_detail: Pgchar;
    value_changed: procedure(range: PGtkRange); cdecl;
    adjust_bounds: procedure(range: PGtkRange; new_value: gdouble); cdecl;
    move_slider: procedure(range: PGtkRange; scroll: TGtkScrollType); cdecl;
    get_range_border: procedure(range: PGtkRange; border_: PGtkBorder); cdecl;
    change_value: function(range: PGtkRange; scroll: TGtkScrollType; new_value: gdouble): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;
  TGtkScaleClass = object
    parent_class: TGtkRangeClass;
    format_value: function(scale: PGtkScale; value: gdouble): Pgchar; cdecl;
    draw_value: procedure(scale: PGtkScale); cdecl;
    get_layout_offsets: procedure(scale: PGtkScale; x: Pgint; y: Pgint); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkHScaleClass = ^PGtkHScaleClass;
  PGtkHScaleClass = ^TGtkHScaleClass;
  TGtkHScaleClass = object
    parent_class: TGtkScaleClass;
  end;

  PPGtkScrollbar = ^PGtkScrollbar;
  PGtkScrollbar = ^TGtkScrollbar;
  TGtkScrollbar = object(TGtkRange)
    function new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScrollbar; cdecl; inline; static;
  end;

  PPGtkHScrollbar = ^PGtkHScrollbar;
  PGtkHScrollbar = ^TGtkHScrollbar;
  TGtkHScrollbar = object(TGtkScrollbar)
    
  end;

  PPGtkScrollbarClass = ^PGtkScrollbarClass;
  PGtkScrollbarClass = ^TGtkScrollbarClass;
  TGtkScrollbarClass = object
    parent_class: TGtkRangeClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkHScrollbarClass = ^PGtkHScrollbarClass;
  PGtkHScrollbarClass = ^TGtkHScrollbarClass;
  TGtkHScrollbarClass = object
    parent_class: TGtkScrollbarClass;
  end;

  PPGtkSeparator = ^PGtkSeparator;
  PGtkSeparator = ^TGtkSeparator;

  PPGtkSeparatorPrivate = ^PGtkSeparatorPrivate;
  PGtkSeparatorPrivate = ^TGtkSeparatorPrivate;
  TGtkSeparator = object(TGtkWidget)
    priv1: PGtkSeparatorPrivate;
    function new(orientation: TGtkOrientation): PGtkSeparator; cdecl; inline; static;
  end;

  PPGtkHSeparator = ^PGtkHSeparator;
  PGtkHSeparator = ^TGtkHSeparator;
  TGtkHSeparator = object(TGtkSeparator)
    
  end;

  PPGtkSeparatorClass = ^PGtkSeparatorClass;
  PGtkSeparatorClass = ^TGtkSeparatorClass;
  TGtkSeparatorClass = object
    parent_class: TGtkWidgetClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkHSeparatorClass = ^PGtkHSeparatorClass;
  PGtkHSeparatorClass = ^TGtkHSeparatorClass;
  TGtkHSeparatorClass = object
    parent_class: TGtkSeparatorClass;
  end;

  PPGtkHandleBoxPrivate = ^PGtkHandleBoxPrivate;
  PGtkHandleBoxPrivate = ^TGtkHandleBoxPrivate;

  TGtkHandleBoxPrivate = record
    Unknown: Pointer;
  end;



  PPGtkHandleBox = ^PGtkHandleBox;
  PGtkHandleBox = ^TGtkHandleBox;
  TGtkHandleBox = object(TGtkBin)
    priv3: PGtkHandleBoxPrivate;
    function new: PGtkHandleBox; cdecl; inline; static;
    function get_child_detached: gboolean; cdecl; inline;
    function get_handle_position: TGtkPositionType; cdecl; inline;
    function get_shadow_type: TGtkShadowType; cdecl; inline;
    function get_snap_edge: TGtkPositionType; cdecl; inline;
    procedure set_handle_position(position: TGtkPositionType); cdecl; inline;
    procedure set_shadow_type(type_: TGtkShadowType); cdecl; inline;
    procedure set_snap_edge(edge: TGtkPositionType); cdecl; inline;
    property child_detached:  gboolean read get_child_detached ;
    property handle_position:  TGtkPositionType read get_handle_position  { property is writeable but setter not declared } ;
    property shadow_type:  TGtkShadowType read get_shadow_type  { property is writeable but setter not declared } ;
    property snap_edge:  TGtkPositionType read get_snap_edge  { property is writeable but setter not declared } ;
    //property snap_edge_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_snap_edge_set  { property is writeable but setter not declared } ;
  end;

  PPGtkHandleBoxClass = ^PGtkHandleBoxClass;
  PGtkHandleBoxClass = ^TGtkHandleBoxClass;
  TGtkHandleBoxClass = object
    parent_class: TGtkBinClass;
    child_attached: procedure(handle_box: PGtkHandleBox; child: PGtkWidget); cdecl;
    child_detached: procedure(handle_box: PGtkHandleBox; child: PGtkWidget); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkIMContext = ^PGtkIMContext;
  PGtkIMContext = ^TGtkIMContext;
  TGtkIMContext = object(TGObject)
    function delete_surrounding(offset: gint; n_chars: gint): gboolean; cdecl; inline;
    function filter_keypress(event: PGdkEventKey): gboolean; cdecl; inline;
    procedure focus_in; cdecl; inline;
    procedure focus_out; cdecl; inline;
    procedure get_preedit_string(str: PPgchar; attrs: PPPangoAttrList; cursor_pos: Pgint); cdecl; inline;
    function get_surrounding(text: PPgchar; cursor_index: Pgint): gboolean; cdecl; inline;
    procedure reset; cdecl; inline;
    procedure set_client_window(window: PGdkWindow); cdecl; inline;
    procedure set_cursor_location(area: PGdkRectangle); cdecl; inline;
    procedure set_surrounding(text: Pgchar; len: gint; cursor_index: gint); cdecl; inline;
    procedure set_use_preedit(use_preedit: gboolean); cdecl; inline;
  end;

  PPGtkIMContextClass = ^PGtkIMContextClass;
  PGtkIMContextClass = ^TGtkIMContextClass;
  TGtkIMContextClass = object
    parent_class: TGObjectClass;
    preedit_start: procedure(context: PGtkIMContext); cdecl;
    preedit_end: procedure(context: PGtkIMContext); cdecl;
    preedit_changed: procedure(context: PGtkIMContext); cdecl;
    commit: procedure(context: PGtkIMContext; str: Pgchar); cdecl;
    retrieve_surrounding: function(context: PGtkIMContext): gboolean; cdecl;
    delete_surrounding: function(context: PGtkIMContext; offset: gint; n_chars: gint): gboolean; cdecl;
    set_client_window: procedure(context: PGtkIMContext; window: PGdkWindow); cdecl;
    get_preedit_string: procedure(context: PGtkIMContext; str: PPgchar; attrs: PPPangoAttrList; cursor_pos: Pgint); cdecl;
    filter_keypress: function(context: PGtkIMContext; event: PGdkEventKey): gboolean; cdecl;
    focus_in: procedure(context: PGtkIMContext); cdecl;
    focus_out: procedure(context: PGtkIMContext); cdecl;
    reset: procedure(context: PGtkIMContext); cdecl;
    set_cursor_location: procedure(context: PGtkIMContext; area: PGdkRectangle); cdecl;
    set_use_preedit: procedure(context: PGtkIMContext; use_preedit: gboolean); cdecl;
    set_surrounding: procedure(context: PGtkIMContext; text: Pgchar; len: gint; cursor_index: gint); cdecl;
    get_surrounding: function(context: PGtkIMContext; text: PPgchar; cursor_index: Pgint): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
  end;

  PPGtkIMContextInfo = ^PGtkIMContextInfo;
  PGtkIMContextInfo = ^TGtkIMContextInfo;

  TGtkIMContextInfo = record
    context_id: Pgchar;
    context_name: Pgchar;
    domain: Pgchar;
    domain_dirname: Pgchar;
    default_locales: Pgchar;
  end;



  PPGtkIMContextSimplePrivate = ^PGtkIMContextSimplePrivate;
  PGtkIMContextSimplePrivate = ^TGtkIMContextSimplePrivate;

  TGtkIMContextSimplePrivate = record
    Unknown: Pointer;
  end;



  PPGtkIMContextSimple = ^PGtkIMContextSimple;
  PGtkIMContextSimple = ^TGtkIMContextSimple;
  TGtkIMContextSimple = object(TGtkIMContext)
    priv: PGtkIMContextSimplePrivate;
    function new: PGtkIMContextSimple; cdecl; inline; static;
    procedure add_table(data: Pguint16; max_seq_len: gint; n_seqs: gint); cdecl; inline;
  end;

  PPGtkIMContextSimpleClass = ^PGtkIMContextSimpleClass;
  PGtkIMContextSimpleClass = ^TGtkIMContextSimpleClass;
  TGtkIMContextSimpleClass = object
    parent_class: TGtkIMContextClass;
  end;

  PPGtkIMMulticontextPrivate = ^PGtkIMMulticontextPrivate;
  PGtkIMMulticontextPrivate = ^TGtkIMMulticontextPrivate;

  TGtkIMMulticontextPrivate = record
    Unknown: Pointer;
  end;



  PPGtkIMMulticontext = ^PGtkIMMulticontext;
  PGtkIMMulticontext = ^TGtkIMMulticontext;
  TGtkIMMulticontext = object(TGtkIMContext)
    priv: PGtkIMMulticontextPrivate;
    function new: PGtkIMMulticontext; cdecl; inline; static;
    procedure append_menuitems(menushell: PGtkMenuShell); cdecl; inline;
    function get_context_id: Pgchar; cdecl; inline;
    procedure set_context_id(context_id: Pgchar); cdecl; inline;
  end;

  PPGtkIMMulticontextClass = ^PGtkIMMulticontextClass;
  PGtkIMMulticontextClass = ^TGtkIMMulticontextClass;
  TGtkIMMulticontextClass = object
    parent_class: TGtkIMContextClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkIMPreeditStyle = ^PGtkIMPreeditStyle;
  PGtkIMPreeditStyle = ^TGtkIMPreeditStyle;

  PPGtkIMStatusStyle = ^PGtkIMStatusStyle;
  PGtkIMStatusStyle = ^TGtkIMStatusStyle;

  PPGtkIconSet = ^PGtkIconSet;
  PGtkIconSet = ^TGtkIconSet;

  PPGtkIconFactoryPrivate = ^PGtkIconFactoryPrivate;
  PGtkIconFactoryPrivate = ^TGtkIconFactoryPrivate;
  TGtkIconFactory = object(TGObject)
    priv: PGtkIconFactoryPrivate;
    function new: PGtkIconFactory; cdecl; inline; static;
    function lookup_default(stock_id: Pgchar): PGtkIconSet; cdecl; inline; static;
    procedure add(stock_id: Pgchar; icon_set: PGtkIconSet); cdecl; inline;
    procedure add_default; cdecl; inline;
    function lookup(stock_id: Pgchar): PGtkIconSet; cdecl; inline;
    procedure remove_default; cdecl; inline;
  end;

  PPGtkIconSource = ^PGtkIconSource;
  PGtkIconSource = ^TGtkIconSource;
  TGtkIconSet = object
    function new: PGtkIconSet; cdecl; inline; static;
    function new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkIconSet; cdecl; inline; static;
    procedure add_source(source: PGtkIconSource); cdecl; inline;
    function copy: PGtkIconSet; cdecl; inline;
    procedure get_sizes(sizes: PPgint; n_sizes: Pgint); cdecl; inline;
    function ref: PGtkIconSet; cdecl; inline;
    
    function render_icon_pixbuf(context: PGtkStyleContext; size: gint): PGdkPixbuf; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  TGtkIconFactoryPrivate = record
    Unknown: Pointer;
  end;



  PPGtkIconFactoryClass = ^PGtkIconFactoryClass;
  PGtkIconFactoryClass = ^TGtkIconFactoryClass;
  TGtkIconFactoryClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkIconInfo = ^PGtkIconInfo;
  PGtkIconInfo = ^TGtkIconInfo;

  PPGtkIconTheme = ^PGtkIconTheme;
  PGtkIconTheme = ^TGtkIconTheme;
  TGtkIconInfo = object
    function new_for_pixbuf(icon_theme: PGtkIconTheme; pixbuf: PGdkPixbuf): PGtkIconInfo; cdecl; inline; static;
    function copy: PGtkIconInfo; cdecl; inline;
    procedure free; cdecl; inline;
    function get_attach_points(points: PPGdkPoint; n_points: Pgint): gboolean; cdecl; inline;
    function get_base_size: gint; cdecl; inline;
    function get_builtin_pixbuf: PGdkPixbuf; cdecl; inline;
    function get_display_name: Pgchar; cdecl; inline;
    function get_embedded_rect(rectangle: PGdkRectangle): gboolean; cdecl; inline;
    function get_filename: Pgchar; cdecl; inline;
    function load_icon: PGdkPixbuf; cdecl; inline;
    function load_symbolic(fg: PGdkRGBA; success_color: PGdkRGBA; warning_color: PGdkRGBA; error_color: PGdkRGBA; was_symbolic: Pgboolean): PGdkPixbuf; cdecl; inline;
    function load_symbolic_for_context(context: PGtkStyleContext; was_symbolic: Pgboolean): PGdkPixbuf; cdecl; inline;
    
    procedure set_raw_coordinates(raw_coordinates: gboolean); cdecl; inline;
  end;

  PPGtkIconLookupFlags = ^PGtkIconLookupFlags;
  PGtkIconLookupFlags = ^TGtkIconLookupFlags;
  TGtkIconLookupFlags = packed object(TBitObject32)
  public
    property no_svg: DWord index 1 read GetBit write SetBit;
    property force_svg: DWord index 2 read GetBit write SetBit;
    property use_builtin: DWord index 4 read GetBit write SetBit;
    property generic_fallback: DWord index 8 read GetBit write SetBit;
    property force_size: DWord index 16 read GetBit write SetBit;
  end;


  PPGtkIconThemePrivate = ^PGtkIconThemePrivate;
  PGtkIconThemePrivate = ^TGtkIconThemePrivate;
  TGtkIconTheme = object(TGObject)
    priv: PGtkIconThemePrivate;
    function new: PGtkIconTheme; cdecl; inline; static;
    procedure add_builtin_icon(icon_name: Pgchar; size: gint; pixbuf: PGdkPixbuf); cdecl; inline; static;
    function get_default: PGtkIconTheme; cdecl; inline; static;
    function get_for_screen(screen: PGdkScreen): PGtkIconTheme; cdecl; inline; static;
    procedure append_search_path(path: Pgchar); cdecl; inline;
    function choose_icon(icon_names: Pgchar; size: gint; flags: TGtkIconLookupFlags): PGtkIconInfo; cdecl; inline;
    function get_example_icon_name: Pgchar; cdecl; inline;
    function get_icon_sizes(icon_name: Pgchar): Pgint; cdecl; inline;
    procedure get_search_path(path: PPgchar; n_elements: Pgint); cdecl; inline;
    function has_icon(icon_name: Pgchar): gboolean; cdecl; inline;
    function list_contexts: PGList; cdecl; inline;
    function list_icons(context: Pgchar): PGList; cdecl; inline;
    function load_icon(icon_name: Pgchar; size: gint; flags: TGtkIconLookupFlags): PGdkPixbuf; cdecl; inline;
    function lookup_by_gicon(icon: PGIcon; size: gint; flags: TGtkIconLookupFlags): PGtkIconInfo; cdecl; inline;
    function lookup_icon(icon_name: Pgchar; size: gint; flags: TGtkIconLookupFlags): PGtkIconInfo; cdecl; inline;
    procedure prepend_search_path(path: Pgchar); cdecl; inline;
    function rescan_if_needed: gboolean; cdecl; inline;
    procedure set_custom_theme(theme_name: Pgchar); cdecl; inline;
    procedure set_screen(screen: PGdkScreen); cdecl; inline;
    procedure set_search_path(path: Pgchar; n_elements: gint); cdecl; inline;
  end;

  PPGtkJunctionSides = ^PGtkJunctionSides;
  PGtkJunctionSides = ^TGtkJunctionSides;
  TGtkJunctionSides = packed object(TBitObject32)
  public
    property none: DWord index 0 read GetBit write SetBit;
    property corner_topleft: DWord index 1 read GetBit write SetBit;
    property corner_topright: DWord index 2 read GetBit write SetBit;
    property corner_bottomleft: DWord index 4 read GetBit write SetBit;
    property corner_bottomright: DWord index 8 read GetBit write SetBit;
    property top: DWord index 3 read GetBit write SetBit;
    property bottom: DWord index 12 read GetBit write SetBit;
    property left: DWord index 5 read GetBit write SetBit;
    property right: DWord index 10 read GetBit write SetBit;
  end;


  PPGtkStyleContextPrivate = ^PGtkStyleContextPrivate;
  PGtkStyleContextPrivate = ^TGtkStyleContextPrivate;
  TGtkStyleContext = object(TGObject)
    priv: PGtkStyleContextPrivate;
    function new: PGtkStyleContext; cdecl; inline; static;
    procedure add_provider_for_screen(screen: PGdkScreen; provider: PGtkStyleProvider; priority: guint); cdecl; inline; static;
    procedure remove_provider_for_screen(screen: PGdkScreen; provider: PGtkStyleProvider); cdecl; inline; static;
    procedure reset_widgets(screen: PGdkScreen); cdecl; inline; static;
    procedure add_class(class_name: Pgchar); cdecl; inline;
    procedure add_provider(provider: PGtkStyleProvider; priority: guint); cdecl; inline;
    procedure add_region(region_name: Pgchar; flags: TGtkRegionFlags); cdecl; inline;
    procedure cancel_animations(region_id: gpointer); cdecl; inline;
    //procedure get(state: TGtkStateFlags; args: array of const); cdecl; inline;
    procedure get_background_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl; inline;
    procedure get_border(state: TGtkStateFlags; border: PGtkBorder); cdecl; inline;
    procedure get_border_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl; inline;
    procedure get_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl; inline;
    function get_direction: TGtkTextDirection; cdecl; inline;
    function get_font(state: TGtkStateFlags): PPangoFontDescription; cdecl; inline;
    function get_junction_sides: TGtkJunctionSides; cdecl; inline;
    procedure get_margin(state: TGtkStateFlags; margin: PGtkBorder); cdecl; inline;
    procedure get_padding(state: TGtkStateFlags; padding: PGtkBorder); cdecl; inline;
    function get_path: PGtkWidgetPath; cdecl; inline;
    procedure get_property(property_: Pgchar; state: TGtkStateFlags; value: PGValue); cdecl; inline;
    function get_screen: PGdkScreen; cdecl; inline;
    function get_state: TGtkStateFlags; cdecl; inline;
    //procedure get_style(args: array of const); cdecl; inline;
    procedure get_style_property(property_name: Pgchar; value: PGValue); cdecl; inline;
    //procedure get_style_valist(args: Tva_list); cdecl; inline;
    //procedure get_valist(state: TGtkStateFlags; args: Tva_list); cdecl; inline;
    function has_class(class_name: Pgchar): gboolean; cdecl; inline;
    function has_region(region_name: Pgchar; flags_return: PGtkRegionFlags): gboolean; cdecl; inline;
    procedure invalidate; cdecl; inline;
    function list_classes: PGList; cdecl; inline;
    function list_regions: PGList; cdecl; inline;
    function lookup_color(color_name: Pgchar; color: PGdkRGBA): gboolean; cdecl; inline;
    function lookup_icon_set(stock_id: Pgchar): PGtkIconSet; cdecl; inline;
    procedure notify_state_change(window: PGdkWindow; region_id: gpointer; state: TGtkStateType; state_value: gboolean); cdecl; inline;
    procedure pop_animatable_region; cdecl; inline;
    procedure push_animatable_region(region_id: gpointer); cdecl; inline;
    procedure remove_class(class_name: Pgchar); cdecl; inline;
    procedure remove_provider(provider: PGtkStyleProvider); cdecl; inline;
    procedure remove_region(region_name: Pgchar); cdecl; inline;
    procedure restore; cdecl; inline;
    procedure save; cdecl; inline;
    procedure scroll_animations(window: PGdkWindow; dx: gint; dy: gint); cdecl; inline;
    procedure set_background(window: PGdkWindow); cdecl; inline;
    procedure set_direction(direction: TGtkTextDirection); cdecl; inline;
    procedure set_junction_sides(sides: TGtkJunctionSides); cdecl; inline;
    procedure set_path(path: PGtkWidgetPath); cdecl; inline;
    procedure set_screen(screen: PGdkScreen); cdecl; inline;
    procedure set_state(flags: TGtkStateFlags); cdecl; inline;
    function state_is_running(state: TGtkStateType; progress: Pgdouble): gboolean; cdecl; inline;
    property direction:  TGtkTextDirection read get_direction  { property is writeable but setter not declared } ;
    property screen:  PGdkScreen read get_screen  { property is writeable but setter not declared } ;
  end;
  TGtkIconSource = object
    function new: PGtkIconSource; cdecl; inline; static;
    function copy: PGtkIconSource; cdecl; inline;
    procedure free; cdecl; inline;
    function get_direction: TGtkTextDirection; cdecl; inline;
    function get_direction_wildcarded: gboolean; cdecl; inline;
    function get_filename: Pgchar; cdecl; inline;
    function get_icon_name: Pgchar; cdecl; inline;
    function get_pixbuf: PGdkPixbuf; cdecl; inline;
    function get_size: gint; cdecl; inline;
    function get_size_wildcarded: gboolean; cdecl; inline;
    function get_state: TAtkStateType; cdecl; inline;
    function get_state_wildcarded: gboolean; cdecl; inline;
    procedure set_direction(direction: TGtkTextDirection); cdecl; inline;
    procedure set_direction_wildcarded(setting: gboolean); cdecl; inline;
    procedure set_filename(filename: Pgchar); cdecl; inline;
    procedure set_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_pixbuf(pixbuf: PGdkPixbuf); cdecl; inline;
    procedure set_size(size: gint); cdecl; inline;
    procedure set_size_wildcarded(setting: gboolean); cdecl; inline;
    procedure set_state(state: TAtkStateType); cdecl; inline;
    procedure set_state_wildcarded(setting: gboolean); cdecl; inline;
  end;

  TGtkIconThemePrivate = record
    Unknown: Pointer;
  end;



  PPGtkIconThemeClass = ^PGtkIconThemeClass;
  PGtkIconThemeClass = ^TGtkIconThemeClass;
  TGtkIconThemeClass = object
    parent_class: TGObjectClass;
    changed: procedure(icon_theme: PGtkIconTheme); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkIconThemeError = ^PGtkIconThemeError;
  PGtkIconThemeError = ^TGtkIconThemeError;

  PPGtkScrollable = ^PGtkScrollable;
  PGtkScrollable = ^TGtkScrollable;

  PPGtkScrollablePolicy = ^PGtkScrollablePolicy;
  PGtkScrollablePolicy = ^TGtkScrollablePolicy;
  TGtkScrollable = object
    function get_hadjustment: PGtkAdjustment; cdecl; inline;
    function get_hscroll_policy: TGtkScrollablePolicy; cdecl; inline;
    function get_vadjustment: PGtkAdjustment; cdecl; inline;
    function get_vscroll_policy: TGtkScrollablePolicy; cdecl; inline;
    procedure set_hadjustment(hadjustment: PGtkAdjustment); cdecl; inline;
    procedure set_hscroll_policy(policy: TGtkScrollablePolicy); cdecl; inline;
    procedure set_vadjustment(vadjustment: PGtkAdjustment); cdecl; inline;
    procedure set_vscroll_policy(policy: TGtkScrollablePolicy); cdecl; inline;
    property hadjustment:  PGtkAdjustment read get_hadjustment  { property is writeable but setter not declared } ;
    property hscroll_policy:  TGtkScrollablePolicy read get_hscroll_policy  { property is writeable but setter not declared } ;
    property vadjustment:  PGtkAdjustment read get_vadjustment  { property is writeable but setter not declared } ;
    property vscroll_policy:  TGtkScrollablePolicy read get_vscroll_policy  { property is writeable but setter not declared } ;
  end;

  PPGtkIconViewDropPosition = ^PGtkIconViewDropPosition;
  PGtkIconViewDropPosition = ^TGtkIconViewDropPosition;

  PPGtkSelectionMode = ^PGtkSelectionMode;
  PGtkSelectionMode = ^TGtkSelectionMode;

  PPGtkIconView = ^PGtkIconView;
  PGtkIconView = ^TGtkIconView;
  TGtkIconViewForeachFunc = procedure(icon_view: PGtkIconView; path: PGtkTreePath; data: gpointer); cdecl;
  TGtkTooltip = object(TGObject)
    procedure trigger_tooltip_query(display: PGdkDisplay); cdecl; inline; static;
    procedure set_custom(custom_widget: PGtkWidget); cdecl; inline;
    procedure set_icon(pixbuf: PGdkPixbuf); cdecl; inline;
    procedure set_icon_from_gicon(gicon: PGIcon; size: gint); cdecl; inline;
    procedure set_icon_from_icon_name(icon_name: Pgchar; size: gint); cdecl; inline;
    procedure set_icon_from_stock(stock_id: Pgchar; size: gint); cdecl; inline;
    procedure set_markup(markup: Pgchar); cdecl; inline;
    procedure set_text(text: Pgchar); cdecl; inline;
    procedure set_tip_area(rect: PGdkRectangle); cdecl; inline;
  end;

  PPGtkIconViewPrivate = ^PGtkIconViewPrivate;
  PGtkIconViewPrivate = ^TGtkIconViewPrivate;

  TGtkIconViewPrivate = record
    Unknown: Pointer;
  end;



  PPGtkIconViewForeachFunc = ^PGtkIconViewForeachFunc;
  PGtkIconViewForeachFunc = ^TGtkIconViewForeachFunc;
  TGtkIconView = object(TGtkContainer)
    priv2: PGtkIconViewPrivate;
    function new: PGtkIconView; cdecl; inline; static;
    function new_with_area(area: PGtkCellArea): PGtkIconView; cdecl; inline; static;
    function new_with_model(model: PGtkTreeModel): PGtkIconView; cdecl; inline; static;
    procedure convert_widget_to_bin_window_coords(wx: gint; wy: gint; bx: Pgint; by: Pgint); cdecl; inline;
    function create_drag_icon(path: PGtkTreePath): Pcairo_surface_t; cdecl; inline;
    procedure enable_model_drag_dest(targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; inline;
    procedure enable_model_drag_source(start_button_mask: TGdkModifierType; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; inline;
    function get_column_spacing: gint; cdecl; inline;
    function get_columns: gint; cdecl; inline;
    function get_cursor(path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl; inline;
    function get_dest_item_at_pos(drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkIconViewDropPosition): gboolean; cdecl; inline;
    procedure get_drag_dest_item(path: PPGtkTreePath; pos: PGtkIconViewDropPosition); cdecl; inline;
    function get_item_at_pos(x: gint; y: gint; path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl; inline;
    function get_item_column(path: PGtkTreePath): gint; cdecl; inline;
    function get_item_orientation: TGtkOrientation; cdecl; inline;
    function get_item_padding: gint; cdecl; inline;
    function get_item_row(path: PGtkTreePath): gint; cdecl; inline;
    function get_item_width: gint; cdecl; inline;
    function get_margin: gint; cdecl; inline;
    function get_markup_column: gint; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function get_path_at_pos(x: gint; y: gint): PGtkTreePath; cdecl; inline;
    function get_pixbuf_column: gint; cdecl; inline;
    function get_reorderable: gboolean; cdecl; inline;
    function get_row_spacing: gint; cdecl; inline;
    function get_selected_items: PGList; cdecl; inline;
    function get_selection_mode: TGtkSelectionMode; cdecl; inline;
    function get_spacing: gint; cdecl; inline;
    function get_text_column: gint; cdecl; inline;
    function get_tooltip_column: gint; cdecl; inline;
    function get_tooltip_context(x: Pgint; y: Pgint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl; inline;
    function get_visible_range(start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl; inline;
    procedure item_activated(path: PGtkTreePath); cdecl; inline;
    function path_is_selected(path: PGtkTreePath): gboolean; cdecl; inline;
    procedure scroll_to_path(path: PGtkTreePath; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl; inline;
    procedure select_all; cdecl; inline;
    procedure select_path(path: PGtkTreePath); cdecl; inline;
    procedure selected_foreach(func: TGtkIconViewForeachFunc; data: gpointer); cdecl; inline;
    procedure set_column_spacing(column_spacing: gint); cdecl; inline;
    procedure set_columns(columns: gint); cdecl; inline;
    procedure set_cursor(path: PGtkTreePath; cell: PGtkCellRenderer; start_editing: gboolean); cdecl; inline;
    procedure set_drag_dest_item(path: PGtkTreePath; pos: TGtkIconViewDropPosition); cdecl; inline;
    procedure set_item_orientation(orientation: TGtkOrientation); cdecl; inline;
    procedure set_item_padding(item_padding: gint); cdecl; inline;
    procedure set_item_width(item_width: gint); cdecl; inline;
    procedure set_margin(margin: gint); cdecl; inline;
    procedure set_markup_column(column: gint); cdecl; inline;
    procedure set_model(model: PGtkTreeModel); cdecl; inline;
    procedure set_pixbuf_column(column: gint); cdecl; inline;
    procedure set_reorderable(reorderable: gboolean); cdecl; inline;
    procedure set_row_spacing(row_spacing: gint); cdecl; inline;
    procedure set_selection_mode(mode: TGtkSelectionMode); cdecl; inline;
    procedure set_spacing(spacing: gint); cdecl; inline;
    procedure set_text_column(column: gint); cdecl; inline;
    procedure set_tooltip_cell(tooltip: PGtkTooltip; path: PGtkTreePath; cell: PGtkCellRenderer); cdecl; inline;
    procedure set_tooltip_column(column: gint); cdecl; inline;
    procedure set_tooltip_item(tooltip: PGtkTooltip; path: PGtkTreePath); cdecl; inline;
    procedure unselect_all; cdecl; inline;
    procedure unselect_path(path: PGtkTreePath); cdecl; inline;
    procedure unset_model_drag_dest; cdecl; inline;
    procedure unset_model_drag_source; cdecl; inline;
    //property cell_area: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_area  { property is writeable but setter not declared } ;
    property column_spacing:  gint read get_column_spacing  { property is writeable but setter not declared } ;
    property columns:  gint read get_columns  { property is writeable but setter not declared } ;
    property item_orientation:  TGtkOrientation read get_item_orientation  { property is writeable but setter not declared } ;
    property item_padding:  gint read get_item_padding  { property is writeable but setter not declared } ;
    property item_width:  gint read get_item_width  { property is writeable but setter not declared } ;
    property margin1:  gint read get_margin  { property is writeable but setter not declared } ;
    property markup_column:  gint read get_markup_column  { property is writeable but setter not declared } ;
    property model:  PGtkTreeModel read get_model  { property is writeable but setter not declared } ;
    property pixbuf_column:  gint read get_pixbuf_column  { property is writeable but setter not declared } ;
    property reorderable:  gboolean read get_reorderable  { property is writeable but setter not declared } ;
    property row_spacing:  gint read get_row_spacing  { property is writeable but setter not declared } ;
    property selection_mode:  TGtkSelectionMode read get_selection_mode  { property is writeable but setter not declared } ;
    property spacing:  gint read get_spacing  { property is writeable but setter not declared } ;
    property text_column:  gint read get_text_column  { property is writeable but setter not declared } ;
    property tooltip_column:  gint read get_tooltip_column  { property is writeable but setter not declared } ;
  end;

  PPGtkIconViewClass = ^PGtkIconViewClass;
  PGtkIconViewClass = ^TGtkIconViewClass;
  TGtkIconViewClass = object
    parent_class: TGtkContainerClass;
    item_activated: procedure(icon_view: PGtkIconView; path: PGtkTreePath); cdecl;
    selection_changed: procedure(icon_view: PGtkIconView); cdecl;
    select_all: procedure(icon_view: PGtkIconView); cdecl;
    unselect_all: procedure(icon_view: PGtkIconView); cdecl;
    select_cursor_item: procedure(icon_view: PGtkIconView); cdecl;
    toggle_cursor_item: procedure(icon_view: PGtkIconView); cdecl;
    move_cursor: function(icon_view: PGtkIconView; step: TGtkMovementStep; count: gint): gboolean; cdecl;
    activate_cursor_item: function(icon_view: PGtkIconView): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkImagePrivate = ^PGtkImagePrivate;
  PGtkImagePrivate = ^TGtkImagePrivate;

  TGtkImagePrivate = record
    Unknown: Pointer;
  end;



  PPGtkImage = ^PGtkImage;
  PGtkImage = ^TGtkImage;
  TGtkImage = object
    misc: TAtkMisc;
    priv: PGtkImagePrivate;
    function new: PGtkImage; cdecl; inline; static;
    function new_from_animation(animation: PGdkPixbufAnimation): PGtkImage; cdecl; inline; static;
    function new_from_file(filename: Pgchar): PGtkImage; cdecl; inline; static;
    function new_from_gicon(icon: PGIcon; size: gint): PGtkImage; cdecl; inline; static;
    function new_from_icon_name(icon_name: Pgchar; size: gint): PGtkImage; cdecl; inline; static;
    function new_from_icon_set(icon_set: PGtkIconSet; size: gint): PGtkImage; cdecl; inline; static;
    function new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkImage; cdecl; inline; static;
    function new_from_stock(stock_id: Pgchar; size: gint): PGtkImage; cdecl; inline; static;
    procedure clear; cdecl; inline;
    function get_animation: PGdkPixbufAnimation; cdecl; inline;
    procedure get_gicon(gicon: PPGIcon; size: Pgint); cdecl; inline;
    procedure get_icon_name(icon_name: PPgchar; size: Pgint); cdecl; inline;
    procedure get_icon_set(icon_set: PPGtkIconSet; size: Pgint); cdecl; inline;
    function get_pixbuf: PGdkPixbuf; cdecl; inline;
    function get_pixel_size: gint; cdecl; inline;
    procedure get_stock(stock_id: PPgchar; size: Pgint); cdecl; inline;
    function get_storage_type: TGtkImageType; cdecl; inline;
    procedure set_from_animation(animation: PGdkPixbufAnimation); cdecl; inline;
    procedure set_from_file(filename: Pgchar); cdecl; inline;
    procedure set_from_gicon(icon: PGIcon; size: gint); cdecl; inline;
    procedure set_from_icon_name(icon_name: Pgchar; size: gint); cdecl; inline;
    procedure set_from_icon_set(icon_set: PGtkIconSet; size: gint); cdecl; inline;
    procedure set_from_pixbuf(pixbuf: PGdkPixbuf); cdecl; inline;
    procedure set_from_stock(stock_id: Pgchar; size: gint); cdecl; inline;
    procedure set_pixel_size(pixel_size: gint); cdecl; inline;
    //property file_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_file  { property is writeable but setter not declared } ;
    //property gicon: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gicon  { property is writeable but setter not declared } ;
    //property icon_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icon_name  { property is writeable but setter not declared } ;
    //property icon_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icon_set  { property is writeable but setter not declared } ;
    //property icon_size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icon_size  { property is writeable but setter not declared } ;
    property pixbuf:  PGdkPixbuf read get_pixbuf  { property is writeable but setter not declared } ;
    //property pixbuf_animation: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixbuf_animation  { property is writeable but setter not declared } ;
    property pixel_size:  gint read get_pixel_size  { property is writeable but setter not declared } ;
    //property stock: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stock  { property is writeable but setter not declared } ;
    property storage_type:  TGtkImageType read get_storage_type ;
    //property use_fallback: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_use_fallback  { property is writeable but setter not declared } ;
  end;

  PPGtkImageClass = ^PGtkImageClass;
  PGtkImageClass = ^TGtkImageClass;
  TGtkImageClass = object
    parent_class: TAtkMiscClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkImageMenuItemPrivate = ^PGtkImageMenuItemPrivate;
  PGtkImageMenuItemPrivate = ^TGtkImageMenuItemPrivate;

  TGtkImageMenuItemPrivate = record
    Unknown: Pointer;
  end;



  PPGtkImageMenuItem = ^PGtkImageMenuItem;
  PGtkImageMenuItem = ^TGtkImageMenuItem;
  TGtkImageMenuItem = object(TGtkMenuItem)
    priv4: PGtkImageMenuItemPrivate;
    function new: PGtkImageMenuItem; cdecl; inline; static;
    function new_from_stock(stock_id: Pgchar; accel_group: PGtkAccelGroup): PGtkImageMenuItem; cdecl; inline; static;
    function new_with_label(label_: Pgchar): PGtkImageMenuItem; cdecl; inline; static;
    function new_with_mnemonic(label_: Pgchar): PGtkImageMenuItem; cdecl; inline; static;
    function get_always_show_image: gboolean; cdecl; inline;
    function get_image: PGtkWidget; cdecl; inline;
    function get_use_stock: gboolean; cdecl; inline;
    procedure set_accel_group(accel_group: PGtkAccelGroup); cdecl; inline;
    procedure set_always_show_image(always_show: gboolean); cdecl; inline;
    procedure set_image(image: PGtkWidget); cdecl; inline;
    procedure set_use_stock(use_stock: gboolean); cdecl; inline;
    //property accel_group: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accel_group  { property is writeable but setter not declared } ;
    property always_show_image:  gboolean read get_always_show_image  { property is writeable but setter not declared } ;
    property image:  PGtkWidget read get_image  { property is writeable but setter not declared } ;
    property use_stock:  gboolean read get_use_stock  { property is writeable but setter not declared } ;
  end;

  PPGtkImageMenuItemClass = ^PGtkImageMenuItemClass;
  PGtkImageMenuItemClass = ^TGtkImageMenuItemClass;
  TGtkImageMenuItemClass = object
    parent_class: TGtkMenuItemClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkMessageType = ^PGtkMessageType;
  PGtkMessageType = ^TGtkMessageType;

  PPGtkInfoBarPrivate = ^PGtkInfoBarPrivate;
  PGtkInfoBarPrivate = ^TGtkInfoBarPrivate;

  TGtkInfoBarPrivate = record
    Unknown: Pointer;
  end;



  PPGtkInfoBar = ^PGtkInfoBar;
  PGtkInfoBar = ^TGtkInfoBar;
  TGtkInfoBar = object(TGtkBox)
    priv3: PGtkInfoBarPrivate;
    function new: PGtkInfoBar; cdecl; inline; static;
    //function new_with_buttons(first_button_text: Pgchar; args: array of const): PGtkInfoBar; cdecl; inline; static;
    procedure add_action_widget(child: PGtkWidget; response_id: gint); cdecl; inline;
    function add_button(button_text: Pgchar; response_id: gint): PGtkWidget; cdecl; inline;
    //procedure add_buttons(first_button_text: Pgchar; args: array of const); cdecl; inline;
    function get_action_area: PGtkWidget; cdecl; inline;
    function get_content_area: PGtkWidget; cdecl; inline;
    function get_message_type: TGtkMessageType; cdecl; inline;
    procedure response(response_id: gint); cdecl; inline;
    procedure set_default_response(response_id: gint); cdecl; inline;
    procedure set_message_type(message_type: TGtkMessageType); cdecl; inline;
    procedure set_response_sensitive(response_id: gint; setting: gboolean); cdecl; inline;
    property message_type:  TGtkMessageType read get_message_type  { property is writeable but setter not declared } ;
  end;

  PPGtkInfoBarClass = ^PGtkInfoBarClass;
  PGtkInfoBarClass = ^TGtkInfoBarClass;
  TGtkInfoBarClass = object
    parent_class: TGtkBoxClass;
    response: procedure(info_bar: PGtkInfoBar; response_id: gint); cdecl;
    close: procedure(info_bar: PGtkInfoBar); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkInvisiblePrivate = ^PGtkInvisiblePrivate;
  PGtkInvisiblePrivate = ^TGtkInvisiblePrivate;

  TGtkInvisiblePrivate = record
    Unknown: Pointer;
  end;



  PPGtkInvisible = ^PGtkInvisible;
  PGtkInvisible = ^TGtkInvisible;
  TGtkInvisible = object(TGtkWidget)
    priv1: PGtkInvisiblePrivate;
    function new: PGtkInvisible; cdecl; inline; static;
    function new_for_screen(screen: PGdkScreen): PGtkInvisible; cdecl; inline; static;
    function get_screen: PGdkScreen; cdecl; inline;
    procedure set_screen(screen: PGdkScreen); cdecl; inline;
    property screen:  PGdkScreen read get_screen  { property is writeable but setter not declared } ;
  end;

  PPGtkInvisibleClass = ^PGtkInvisibleClass;
  PGtkInvisibleClass = ^TGtkInvisibleClass;
  TGtkInvisibleClass = object
    parent_class: TGtkWidgetClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;
  TGtkKeySnoopFunc = function(grab_widget: PGtkWidget; event: PGdkEventKey; func_data: gpointer): gint; cdecl;

  TGtkLabelPrivate = record
    Unknown: Pointer;
  end;



  PPGtkLabelSelectionInfo = ^PGtkLabelSelectionInfo;
  PGtkLabelSelectionInfo = ^TGtkLabelSelectionInfo;

  TGtkLabelSelectionInfo = record
    Unknown: Pointer;
  end;



  PPGtkLayoutPrivate = ^PGtkLayoutPrivate;
  PGtkLayoutPrivate = ^TGtkLayoutPrivate;

  TGtkLayoutPrivate = record
    Unknown: Pointer;
  end;



  PPGtkLayout = ^PGtkLayout;
  PGtkLayout = ^TGtkLayout;
  TGtkLayout = object(TGtkContainer)
    priv2: PGtkLayoutPrivate;
    function new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkLayout; cdecl; inline; static;
    function get_bin_window: PGdkWindow; cdecl; inline;
    
    procedure get_size(width: Pguint; height: Pguint); cdecl; inline;
    
    procedure move(child_widget: PGtkWidget; x: gint; y: gint); cdecl; inline;
    procedure put(child_widget: PGtkWidget; x: gint; y: gint); cdecl; inline;
    
    procedure set_size(width: guint; height: guint); cdecl; inline;
    
    //property height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_height  { property is writeable but setter not declared } ;
    //property width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_width  { property is writeable but setter not declared } ;
  end;

  PPGtkLayoutClass = ^PGtkLayoutClass;
  PGtkLayoutClass = ^TGtkLayoutClass;
  TGtkLayoutClass = object
    parent_class: TGtkContainerClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkLinkButtonPrivate = ^PGtkLinkButtonPrivate;
  PGtkLinkButtonPrivate = ^TGtkLinkButtonPrivate;

  TGtkLinkButtonPrivate = record
    Unknown: Pointer;
  end;



  PPGtkLinkButton = ^PGtkLinkButton;
  PGtkLinkButton = ^TGtkLinkButton;
  TGtkLinkButton = object(TGtkButton)
    priv4: PGtkLinkButtonPrivate;
    function new(uri: Pgchar): PGtkLinkButton; cdecl; inline; static;
    function new_with_label(uri: Pgchar; label_: Pgchar): PGtkLinkButton; cdecl; inline; static;
    function get_uri: Pgchar; cdecl; inline;
    function get_visited: gboolean; cdecl; inline;
    procedure set_uri(uri: Pgchar); cdecl; inline;
    procedure set_visited(visited: gboolean); cdecl; inline;
    property uri:  Pgchar read get_uri  { property is writeable but setter not declared } ;
    property visited:  gboolean read get_visited  { property is writeable but setter not declared } ;
  end;

  PPGtkLinkButtonClass = ^PGtkLinkButtonClass;
  PGtkLinkButtonClass = ^TGtkLinkButtonClass;
  TGtkLinkButtonClass = object
    parent_class: TGtkButtonClass;
    activate_link: function(button: PGtkLinkButton): gboolean; cdecl;
    _gtk_padding1: procedure; cdecl;
    _gtk_padding2: procedure; cdecl;
    _gtk_padding3: procedure; cdecl;
    _gtk_padding4: procedure; cdecl;
  end;

  PPGtkTreeDragDest = ^PGtkTreeDragDest;
  PGtkTreeDragDest = ^TGtkTreeDragDest;
  TGtkTreeDragDest = object
    function drag_data_received(dest: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl; inline;
    function row_drop_possible(dest_path: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl; inline;
  end;

  PPGtkTreeDragSource = ^PGtkTreeDragSource;
  PGtkTreeDragSource = ^TGtkTreeDragSource;
  TGtkTreeDragSource = object
    function drag_data_delete(path: PGtkTreePath): gboolean; cdecl; inline;
    function drag_data_get(path: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl; inline;
    function row_draggable(path: PGtkTreePath): gboolean; cdecl; inline;
  end;

  PPGtkTreeSortable = ^PGtkTreeSortable;
  PGtkTreeSortable = ^TGtkTreeSortable;

  PPGtkSortType = ^PGtkSortType;
  PGtkSortType = ^TGtkSortType;

  PPGtkTreeIterCompareFunc = ^PGtkTreeIterCompareFunc;
  PGtkTreeIterCompareFunc = ^TGtkTreeIterCompareFunc;
  TGtkTreeIterCompareFunc = function(model: PGtkTreeModel; a: PGtkTreeIter; b: PGtkTreeIter; user_data: gpointer): gint; cdecl;
  TGtkTreeSortable = object
    sort_column_changed1: procedure; cdecl;
    function get_sort_column_id(sort_column_id: Pgint; order: PGtkSortType): gboolean; cdecl; inline;
    function has_default_sort_func: gboolean; cdecl; inline;
    procedure set_default_sort_func(sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_sort_column_id(sort_column_id: gint; order: TGtkSortType); cdecl; inline;
    procedure set_sort_func(sort_column_id: gint; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure sort_column_changed; cdecl; inline;
  end;

  PPGtkListStore = ^PGtkListStore;
  PGtkListStore = ^TGtkListStore;

  PPGtkListStorePrivate = ^PGtkListStorePrivate;
  PGtkListStorePrivate = ^TGtkListStorePrivate;
  TGtkListStore = object(TGObject)
    priv: PGtkListStorePrivate;
    //function new(n_columns: gint; args: array of const): PGtkListStore; cdecl; inline; static;
    function newv(n_columns: gint; types: PGType): PGtkListStore; cdecl; inline; static;
    procedure append(iter: PGtkTreeIter); cdecl; inline;
    procedure clear; cdecl; inline;
    procedure insert(iter: PGtkTreeIter; position: gint); cdecl; inline;
    procedure insert_after(iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; inline;
    procedure insert_before(iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; inline;
    //procedure insert_with_values(iter: PGtkTreeIter; position: gint; args: array of const); cdecl; inline;
    procedure insert_with_valuesv(iter: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl; inline;
    function iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure move_after(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; inline;
    procedure move_before(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; inline;
    procedure prepend(iter: PGtkTreeIter); cdecl; inline;
    function remove(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure reorder(new_order: Pgint); cdecl; inline;
    //procedure set_(iter: PGtkTreeIter; args: array of const); cdecl; inline;
    procedure set_column_types(n_columns: gint; types: PGType); cdecl; inline;
    //procedure set_valist(iter: PGtkTreeIter; var_args: Tva_list); cdecl; inline;
    procedure set_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; inline;
    procedure set_valuesv(iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl; inline;
    procedure swap(a: PGtkTreeIter; b: PGtkTreeIter); cdecl; inline;
  end;

  TGtkListStorePrivate = record
    Unknown: Pointer;
  end;



  PPGtkListStoreClass = ^PGtkListStoreClass;
  PGtkListStoreClass = ^TGtkListStoreClass;
  TGtkListStoreClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkLockButtonPrivate = ^PGtkLockButtonPrivate;
  PGtkLockButtonPrivate = ^TGtkLockButtonPrivate;

  TGtkLockButtonPrivate = record
    Unknown: Pointer;
  end;



  PPGtkLockButton = ^PGtkLockButton;
  PGtkLockButton = ^TGtkLockButton;
  TGtkLockButton = object(TGtkButton)
    priv4: PGtkLockButtonPrivate;
    function new(permission: PGPermission): PGtkLockButton; cdecl; inline; static;
    function get_permission: PGPermission; cdecl; inline;
    procedure set_permission(permission: PGPermission); cdecl; inline;
    property permission:  PGPermission read get_permission  { property is writeable but setter not declared } ;
    //property text_lock: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_lock  { property is writeable but setter not declared } ;
    //property text_unlock: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text_unlock  { property is writeable but setter not declared } ;
    //property tooltip_lock: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tooltip_lock  { property is writeable but setter not declared } ;
    //property tooltip_not_authorized: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tooltip_not_authorized  { property is writeable but setter not declared } ;
    //property tooltip_unlock: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tooltip_unlock  { property is writeable but setter not declared } ;
  end;

  PPGtkLockButtonClass = ^PGtkLockButtonClass;
  PGtkLockButtonClass = ^TGtkLockButtonClass;
  TGtkLockButtonClass = object
    parent_class: TGtkButtonClass;
    reserved0: procedure; cdecl;
    reserved1: procedure; cdecl;
    reserved2: procedure; cdecl;
    reserved3: procedure; cdecl;
    reserved4: procedure; cdecl;
    reserved5: procedure; cdecl;
    reserved6: procedure; cdecl;
    reserved7: procedure; cdecl;
  end;

  TGtkMenuPrivate = record
    Unknown: Pointer;
  end;



  PPGtkPackDirection = ^PGtkPackDirection;
  PGtkPackDirection = ^TGtkPackDirection;

  PPGtkMenuBarPrivate = ^PGtkMenuBarPrivate;
  PGtkMenuBarPrivate = ^TGtkMenuBarPrivate;

  TGtkMenuBarPrivate = record
    Unknown: Pointer;
  end;



  PPGtkMenuBar = ^PGtkMenuBar;
  PGtkMenuBar = ^TGtkMenuBar;
  TGtkMenuBar = object(TGtkMenuShell)
    priv3: PGtkMenuBarPrivate;
    function new: PGtkMenuBar; cdecl; inline; static;
    function get_child_pack_direction: TGtkPackDirection; cdecl; inline;
    function get_pack_direction: TGtkPackDirection; cdecl; inline;
    procedure set_child_pack_direction(child_pack_dir: TGtkPackDirection); cdecl; inline;
    procedure set_pack_direction(pack_dir: TGtkPackDirection); cdecl; inline;
    property child_pack_direction:  TGtkPackDirection read get_child_pack_direction  { property is writeable but setter not declared } ;
    property pack_direction:  TGtkPackDirection read get_pack_direction  { property is writeable but setter not declared } ;
  end;

  PPGtkMenuShellClass = ^PGtkMenuShellClass;
  PGtkMenuShellClass = ^TGtkMenuShellClass;

  PPGtkMenuDirectionType = ^PGtkMenuDirectionType;
  PGtkMenuDirectionType = ^TGtkMenuDirectionType;
  TGtkMenuShellClass = object
    parent_class: TGtkContainerClass;
    submenu_placement: guint1 { changed from guint to accomodate 1 bitsize requirement };
    deactivate: procedure(menu_shell: PGtkMenuShell); cdecl;
    selection_done: procedure(menu_shell: PGtkMenuShell); cdecl;
    move_current: procedure(menu_shell: PGtkMenuShell; direction: TGtkMenuDirectionType); cdecl;
    activate_current: procedure(menu_shell: PGtkMenuShell; force_hide: gboolean); cdecl;
    cancel: procedure(menu_shell: PGtkMenuShell); cdecl;
    select_item: procedure(menu_shell: PGtkMenuShell; menu_item: PGtkWidget); cdecl;
    insert: procedure(menu_shell: PGtkMenuShell; child: PGtkWidget; position: gint); cdecl;
    get_popup_delay: function(menu_shell: PGtkMenuShell): gint; cdecl;
    move_selected: function(menu_shell: PGtkMenuShell; distance: gint): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkMenuBarClass = ^PGtkMenuBarClass;
  PGtkMenuBarClass = ^TGtkMenuBarClass;
  TGtkMenuBarClass = object
    parent_class: TGtkMenuShellClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkMenuClass = ^PGtkMenuClass;
  PGtkMenuClass = ^TGtkMenuClass;
  TGtkMenuClass = object
    parent_class: TGtkMenuShellClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkMenuItemPrivate = record
    Unknown: Pointer;
  end;



  TGtkMenuShellPrivate = record
    Unknown: Pointer;
  end;



  PPGtkToolItem = ^PGtkToolItem;
  PGtkToolItem = ^TGtkToolItem;

  PPGtkSizeGroup = ^PGtkSizeGroup;
  PGtkSizeGroup = ^TGtkSizeGroup;

  PPGtkToolbarStyle = ^PGtkToolbarStyle;
  PGtkToolbarStyle = ^TGtkToolbarStyle;

  PPGtkToolItemPrivate = ^PGtkToolItemPrivate;
  PGtkToolItemPrivate = ^TGtkToolItemPrivate;
  TGtkToolItem = object(TGtkBin)
    priv3: PGtkToolItemPrivate;
    function new: PGtkToolItem; cdecl; inline; static;
    function get_ellipsize_mode: TPangoEllipsizeMode; cdecl; inline;
    function get_expand: gboolean; cdecl; inline;
    function get_homogeneous: gboolean; cdecl; inline;
    function get_icon_size: gint; cdecl; inline;
    function get_is_important: gboolean; cdecl; inline;
    function get_orientation: TGtkOrientation; cdecl; inline;
    function get_proxy_menu_item(menu_item_id: Pgchar): PGtkWidget; cdecl; inline;
    function get_relief_style: TGtkReliefStyle; cdecl; inline;
    function get_text_alignment: gfloat; cdecl; inline;
    function get_text_orientation: TGtkOrientation; cdecl; inline;
    function get_text_size_group: PGtkSizeGroup; cdecl; inline;
    function get_toolbar_style: TGtkToolbarStyle; cdecl; inline;
    function get_use_drag_window: gboolean; cdecl; inline;
    function get_visible_horizontal: gboolean; cdecl; inline;
    function get_visible_vertical: gboolean; cdecl; inline;
    procedure rebuild_menu; cdecl; inline;
    function retrieve_proxy_menu_item: PGtkWidget; cdecl; inline;
    procedure set_expand(expand: gboolean); cdecl; inline;
    procedure set_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_is_important(is_important: gboolean); cdecl; inline;
    procedure set_proxy_menu_item(menu_item_id: Pgchar; menu_item: PGtkWidget); cdecl; inline;
    procedure set_tooltip_markup(markup: Pgchar); cdecl; inline;
    procedure set_tooltip_text(text: Pgchar); cdecl; inline;
    procedure set_use_drag_window(use_drag_window: gboolean); cdecl; inline;
    procedure set_visible_horizontal(visible_horizontal: gboolean); cdecl; inline;
    procedure set_visible_vertical(visible_vertical: gboolean); cdecl; inline;
    procedure toolbar_reconfigured; cdecl; inline;
    property is_important:  gboolean read get_is_important  { property is writeable but setter not declared } ;
    property visible_horizontal:  gboolean read get_visible_horizontal  { property is writeable but setter not declared } ;
    property visible_vertical:  gboolean read get_visible_vertical  { property is writeable but setter not declared } ;
  end;

  PPGtkToolButton = ^PGtkToolButton;
  PGtkToolButton = ^TGtkToolButton;

  PPGtkToolButtonPrivate = ^PGtkToolButtonPrivate;
  PGtkToolButtonPrivate = ^TGtkToolButtonPrivate;
  TGtkToolButton = object(TGtkToolItem)
    priv4: PGtkToolButtonPrivate;
    function new(icon_widget: PGtkWidget; label_: Pgchar): PGtkToolButton; cdecl; inline; static;
    function new_from_stock(stock_id: Pgchar): PGtkToolButton; cdecl; inline; static;
    function get_icon_name: Pgchar; cdecl; inline;
    function get_icon_widget: PGtkWidget; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_label_widget: PGtkWidget; cdecl; inline;
    function get_stock_id: Pgchar; cdecl; inline;
    function get_use_underline: gboolean; cdecl; inline;
    procedure set_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_icon_widget(icon_widget: PGtkWidget); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_label_widget(label_widget: PGtkWidget); cdecl; inline;
    procedure set_stock_id(stock_id: Pgchar); cdecl; inline;
    procedure set_use_underline(use_underline: gboolean); cdecl; inline;
    property icon_name:  Pgchar read get_icon_name  { property is writeable but setter not declared } ;
    property icon_widget:  PGtkWidget read get_icon_widget  { property is writeable but setter not declared } ;
    property label_:  Pgchar read get_label  { property is writeable but setter not declared } ;
    property label_widget:  PGtkWidget read get_label_widget  { property is writeable but setter not declared } ;
    property stock_id:  Pgchar read get_stock_id  { property is writeable but setter not declared } ;
    property use_underline:  gboolean read get_use_underline  { property is writeable but setter not declared } ;
  end;

  PPGtkMenuToolButtonPrivate = ^PGtkMenuToolButtonPrivate;
  PGtkMenuToolButtonPrivate = ^TGtkMenuToolButtonPrivate;

  TGtkMenuToolButtonPrivate = record
    Unknown: Pointer;
  end;



  PPGtkMenuToolButton = ^PGtkMenuToolButton;
  PGtkMenuToolButton = ^TGtkMenuToolButton;
  TGtkMenuToolButton = object(TGtkToolButton)
    priv5: PGtkMenuToolButtonPrivate;
    function new(icon_widget: PGtkWidget; label_: Pgchar): PGtkMenuToolButton; cdecl; inline; static;
    function new_from_stock(stock_id: Pgchar): PGtkMenuToolButton; cdecl; inline; static;
    function get_menu: PGtkWidget; cdecl; inline;
    procedure set_arrow_tooltip_markup(markup: Pgchar); cdecl; inline;
    procedure set_arrow_tooltip_text(text: Pgchar); cdecl; inline;
    procedure set_menu(menu: PGtkWidget); cdecl; inline;
    property menu:  PGtkWidget read get_menu  { property is writeable but setter not declared } ;
  end;

  PPGtkToolButtonClass = ^PGtkToolButtonClass;
  PGtkToolButtonClass = ^TGtkToolButtonClass;

  PPGtkToolItemClass = ^PGtkToolItemClass;
  PGtkToolItemClass = ^TGtkToolItemClass;
  TGtkToolItemClass = object
    parent_class: TGtkBinClass;
    create_menu_proxy: function(tool_item: PGtkToolItem): gboolean; cdecl;
    toolbar_reconfigured: procedure(tool_item: PGtkToolItem); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;
  TGtkToolButtonClass = object
    parent_class: TGtkToolItemClass;
    button_type: TGType;
    clicked: procedure(tool_item: PGtkToolButton); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkMenuToolButtonClass = ^PGtkMenuToolButtonClass;
  PGtkMenuToolButtonClass = ^TGtkMenuToolButtonClass;
  TGtkMenuToolButtonClass = object
    parent_class: TGtkToolButtonClass;
    show_menu: procedure(button: PGtkMenuToolButton); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkMessageDialogPrivate = ^PGtkMessageDialogPrivate;
  PGtkMessageDialogPrivate = ^TGtkMessageDialogPrivate;

  TGtkMessageDialogPrivate = record
    Unknown: Pointer;
  end;



  PPGtkMessageDialog = ^PGtkMessageDialog;
  PGtkMessageDialog = ^TGtkMessageDialog;
  TGtkMessageDialog = object(TGtkDialog)
    priv1: PGtkMessageDialogPrivate;
    //function new(parent: PAtkWindow; flags: TGtkDialogFlags; type_: TGtkMessageType; buttons: TGtkButtonsType; message_format: Pgchar; args: array of const): PGtkMessageDialog; cdecl; inline; static;
    //function new_with_markup(parent: PAtkWindow; flags: TGtkDialogFlags; type_: TGtkMessageType; buttons: TGtkButtonsType; message_format: Pgchar; args: array of const): PGtkMessageDialog; cdecl; inline; static;
    //procedure format_secondary_markup(message_format: Pgchar; args: array of const); cdecl; inline;
    //procedure format_secondary_text(message_format: Pgchar; args: array of const); cdecl; inline;
    function get_image: PGtkWidget; cdecl; inline;
    function get_message_area: PGtkWidget; cdecl; inline;
    procedure set_image(image: PGtkWidget); cdecl; inline;
    procedure set_markup(str: Pgchar); cdecl; inline;
    //property buttons: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_buttons  { property is writeable but setter not declared } ;
    property image:  PGtkWidget read get_image  { property is writeable but setter not declared } ;
    property message_area:  PGtkWidget read get_message_area ;
    //property message_type: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_message_type  { property is writeable but setter not declared } ;
    //property secondary_text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_text  { property is writeable but setter not declared } ;
    //property secondary_use_markup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_secondary_use_markup  { property is writeable but setter not declared } ;
    //property text: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_text  { property is writeable but setter not declared } ;
    //property use_markup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_use_markup  { property is writeable but setter not declared } ;
  end;

  PPGtkMessageDialogClass = ^PGtkMessageDialogClass;
  PGtkMessageDialogClass = ^TGtkMessageDialogClass;
  TGtkMessageDialogClass = object
    parent_class: TGtkDialogClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkMiscPrivate = ^PGtkMiscPrivate;
  PGtkMiscPrivate = ^TGtkMiscPrivate;

  TGtkMiscPrivate = record
    Unknown: Pointer;
  end;



  PPGtkMisc = ^PGtkMisc;
  PGtkMisc = ^TGtkMisc;
  TGtkMisc = object(TGtkWidget)
    priv1: PGtkMiscPrivate;
    procedure get_alignment(xalign: Pgfloat; yalign: Pgfloat); cdecl; inline;
    procedure get_padding(xpad: Pgint; ypad: Pgint); cdecl; inline;
    procedure set_alignment(xalign: gfloat; yalign: gfloat); cdecl; inline;
    procedure set_padding(xpad: gint; ypad: gint); cdecl; inline;
    //property xalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xalign  { property is writeable but setter not declared } ;
    //property xpad: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_xpad  { property is writeable but setter not declared } ;
    //property yalign: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_yalign  { property is writeable but setter not declared } ;
    //property ypad: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_ypad  { property is writeable but setter not declared } ;
  end;

  PPGtkMiscClass = ^PGtkMiscClass;
  PGtkMiscClass = ^TGtkMiscClass;
  TGtkMiscClass = object
    parent_class: TGtkWidgetClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;
  TGtkModuleDisplayInitFunc = procedure(display: PGdkDisplay); cdecl;
  TGtkModuleInitFunc = procedure(argc: Pgint; argv: PPPgchar); cdecl;

  PPGtkMountOperation = ^PGtkMountOperation;
  PGtkMountOperation = ^TGtkMountOperation;
  TGtkMountOperation = object(TGMountOperation)
    priv1: PGMountOperationPrivate;
    function new(parent: PAtkWindow): PGtkMountOperation; cdecl; inline; static;
    function get_parent: PAtkWindow; cdecl; inline;
    function get_screen: PGdkScreen; cdecl; inline;
    function is_showing: gboolean; cdecl; inline;
    procedure set_parent(parent: PAtkWindow); cdecl; inline;
    procedure set_screen(screen: PGdkScreen); cdecl; inline;
    //property is_showing1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_showing ;
    property parent:  PAtkWindow read get_parent  { property is writeable but setter not declared } ;
    property screen:  PGdkScreen read get_screen  { property is writeable but setter not declared } ;
  end;

  PPGtkMountOperationClass = ^PGtkMountOperationClass;
  PGtkMountOperationClass = ^TGtkMountOperationClass;
  TGtkMountOperationClass = object
    parent_class: TGMountOperationClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkMountOperationPrivate = ^PGtkMountOperationPrivate;
  PGtkMountOperationPrivate = ^TGtkMountOperationPrivate;

  TGtkMountOperationPrivate = record
    Unknown: Pointer;
  end;



  PPGtkNotebook = ^PGtkNotebook;
  PGtkNotebook = ^TGtkNotebook;

  PPGtkNotebookPrivate = ^PGtkNotebookPrivate;
  PGtkNotebookPrivate = ^TGtkNotebookPrivate;
  TGtkNotebook = object(TGtkContainer)
    priv2: PGtkNotebookPrivate;
    function new: PGtkNotebook; cdecl; inline; static;
    function append_page(child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl; inline;
    function append_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl; inline;
    function get_action_widget(pack_type: TGtkPackType): PGtkWidget; cdecl; inline;
    function get_current_page: gint; cdecl; inline;
    function get_group_name: Pgchar; cdecl; inline;
    function get_menu_label(child: PGtkWidget): PGtkWidget; cdecl; inline;
    function get_menu_label_text(child: PGtkWidget): Pgchar; cdecl; inline;
    function get_n_pages: gint; cdecl; inline;
    function get_nth_page(page_num: gint): PGtkWidget; cdecl; inline;
    function get_scrollable: gboolean; cdecl; inline;
    function get_show_border: gboolean; cdecl; inline;
    function get_show_tabs: gboolean; cdecl; inline;
    function get_tab_detachable(child: PGtkWidget): gboolean; cdecl; inline;
    function get_tab_hborder: guint16; cdecl; inline;
    function get_tab_label(child: PGtkWidget): PGtkWidget; cdecl; inline;
    function get_tab_label_text(child: PGtkWidget): Pgchar; cdecl; inline;
    function get_tab_pos: TGtkPositionType; cdecl; inline;
    function get_tab_reorderable(child: PGtkWidget): gboolean; cdecl; inline;
    function get_tab_vborder: guint16; cdecl; inline;
    function insert_page(child: PGtkWidget; tab_label: PGtkWidget; position: gint): gint; cdecl; inline;
    function insert_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget; position: gint): gint; cdecl; inline;
    procedure next_page; cdecl; inline;
    function page_num(child: PGtkWidget): gint; cdecl; inline;
    procedure popup_disable; cdecl; inline;
    procedure popup_enable; cdecl; inline;
    function prepend_page(child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl; inline;
    function prepend_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl; inline;
    procedure prev_page; cdecl; inline;
    procedure remove_page(page_num: gint); cdecl; inline;
    procedure reorder_child(child: PGtkWidget; position: gint); cdecl; inline;
    procedure set_action_widget(widget: PGtkWidget; pack_type: TGtkPackType); cdecl; inline;
    procedure set_current_page(page_num: gint); cdecl; inline;
    procedure set_group_name(group_name: Pgchar); cdecl; inline;
    procedure set_menu_label(child: PGtkWidget; menu_label: PGtkWidget); cdecl; inline;
    procedure set_menu_label_text(child: PGtkWidget; menu_text: Pgchar); cdecl; inline;
    procedure set_scrollable(scrollable: gboolean); cdecl; inline;
    procedure set_show_border(show_border: gboolean); cdecl; inline;
    procedure set_show_tabs(show_tabs: gboolean); cdecl; inline;
    procedure set_tab_detachable(child: PGtkWidget; detachable: gboolean); cdecl; inline;
    procedure set_tab_label(child: PGtkWidget; tab_label: PGtkWidget); cdecl; inline;
    procedure set_tab_label_text(child: PGtkWidget; tab_text: Pgchar); cdecl; inline;
    procedure set_tab_pos(pos: TGtkPositionType); cdecl; inline;
    procedure set_tab_reorderable(child: PGtkWidget; reorderable: gboolean); cdecl; inline;
    //property enable_popup: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_popup  { property is writeable but setter not declared } ;
    property group_name:  Pgchar read get_group_name  { property is writeable but setter not declared } ;
    //property page: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_page  { property is writeable but setter not declared } ;
    property scrollable:  gboolean read get_scrollable  { property is writeable but setter not declared } ;
    property show_border:  gboolean read get_show_border  { property is writeable but setter not declared } ;
    property show_tabs:  gboolean read get_show_tabs  { property is writeable but setter not declared } ;
    property tab_pos:  TGtkPositionType read get_tab_pos  { property is writeable but setter not declared } ;
  end;

  PPGtkNotebookTab = ^PGtkNotebookTab;
  PGtkNotebookTab = ^TGtkNotebookTab;

  TGtkNotebookPrivate = record
    Unknown: Pointer;
  end;



  PPGtkNotebookClass = ^PGtkNotebookClass;
  PGtkNotebookClass = ^TGtkNotebookClass;
  TGtkNotebookClass = object
    parent_class: TGtkContainerClass;
    switch_page: procedure(notebook: PGtkNotebook; page: PGtkWidget; page_num: guint); cdecl;
    select_page: function(notebook: PGtkNotebook; move_focus: gboolean): gboolean; cdecl;
    focus_tab: function(notebook: PGtkNotebook; type_: TGtkNotebookTab): gboolean; cdecl;
    change_current_page: function(notebook: PGtkNotebook; offset: gint): gboolean; cdecl;
    move_focus_out: procedure(notebook: PGtkNotebook; direction: TGtkDirectionType); cdecl;
    reorder_tab: function(notebook: PGtkNotebook; direction: TGtkDirectionType; move_to_last: gboolean): gboolean; cdecl;
    insert_page: function(notebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget; position: gint): gint; cdecl;
    create_window: function(notebook: PGtkNotebook; page: PGtkWidget; x: gint; y: gint): PGtkNotebook; cdecl;
    page_reordered: procedure(notebook: PGtkNotebook; child: PGtkWidget; page_num: guint); cdecl;
    page_removed: procedure(notebook: PGtkNotebook; child: PGtkWidget; page_num: guint); cdecl;
    page_added: procedure(notebook: PGtkNotebook; child: PGtkWidget; page_num: guint); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkNumberUpLayout = ^PGtkNumberUpLayout;
  PGtkNumberUpLayout = ^TGtkNumberUpLayout;

  PPGtkNumerableIconPrivate = ^PGtkNumerableIconPrivate;
  PGtkNumerableIconPrivate = ^TGtkNumerableIconPrivate;

  TGtkNumerableIconPrivate = record
    Unknown: Pointer;
  end;



  PPGtkNumerableIcon = ^PGtkNumerableIcon;
  PGtkNumerableIcon = ^TGtkNumerableIcon;
  TGtkNumerableIcon = object(TGEmblemedIcon)
    priv1: PGtkNumerableIconPrivate;
    function new(base_icon: PGIcon): PGIcon; cdecl; inline; static;
    function new_with_style_context(base_icon: PGIcon; context: PGtkStyleContext): PGIcon; cdecl; inline; static;
    function get_background_gicon: PGIcon; cdecl; inline;
    function get_background_icon_name: Pgchar; cdecl; inline;
    function get_count: gint; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_style_context: PGtkStyleContext; cdecl; inline;
    procedure set_background_gicon(icon: PGIcon); cdecl; inline;
    procedure set_background_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_count(count: gint); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_style_context(style: PGtkStyleContext); cdecl; inline;
    //property background_icon: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_icon  { property is writeable but setter not declared } ;
    property background_icon_name:  Pgchar read get_background_icon_name  { property is writeable but setter not declared } ;
    property count:  gint read get_count  { property is writeable but setter not declared } ;
    property label_:  Pgchar read get_label  { property is writeable but setter not declared } ;
    property style_context:  PGtkStyleContext read get_style_context  { property is writeable but setter not declared } ;
  end;

  PPGtkNumerableIconClass = ^PGtkNumerableIconClass;
  PGtkNumerableIconClass = ^TGtkNumerableIconClass;
  TGtkNumerableIconClass = object
    parent_class: TGEmblemedIconClass;
    padding: array [0..15] of gpointer;
  end;

  PPGtkOffscreenWindow = ^PGtkOffscreenWindow;
  PGtkOffscreenWindow = ^TGtkOffscreenWindow;
  TGtkOffscreenWindow = object
    parent_object: TAtkWindow;
    function new: PGtkOffscreenWindow; cdecl; inline; static;
    function get_pixbuf: PGdkPixbuf; cdecl; inline;
    function get_surface: Pcairo_surface_t; cdecl; inline;
  end;

  PPGtkOffscreenWindowClass = ^PGtkOffscreenWindowClass;
  PGtkOffscreenWindowClass = ^TGtkOffscreenWindowClass;
  TGtkOffscreenWindowClass = object
    parent_class: TGdkWindowClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkOrientableIface = ^PGtkOrientableIface;
  PGtkOrientableIface = ^TGtkOrientableIface;
  TGtkOrientableIface = object
    base_iface: TGTypeInterface;
  end;

  PPGtkOverlayPrivate = ^PGtkOverlayPrivate;
  PGtkOverlayPrivate = ^TGtkOverlayPrivate;

  TGtkOverlayPrivate = record
    Unknown: Pointer;
  end;



  PPGtkOverlay = ^PGtkOverlay;
  PGtkOverlay = ^TGtkOverlay;
  TGtkOverlay = object(TGtkBin)
    priv3: PGtkOverlayPrivate;
    function new: PGtkOverlay; cdecl; inline; static;
    procedure add_overlay(widget: PGtkWidget); cdecl; inline;
  end;

  PPGtkOverlayClass = ^PGtkOverlayClass;
  PGtkOverlayClass = ^TGtkOverlayClass;
  TGtkOverlayClass = object
    parent_class: TGtkBinClass;
    get_child_position: function(overlay: PGtkOverlay; widget: PGtkWidget; allocation: PGtkAllocation): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkPageOrientation = ^PGtkPageOrientation;
  PGtkPageOrientation = ^TGtkPageOrientation;

  PPGtkPageRange = ^PGtkPageRange;
  PGtkPageRange = ^TGtkPageRange;

  TGtkPageRange = record
    start: gint;
    end_: gint;
  end;



  PPGtkPageSet = ^PGtkPageSet;
  PGtkPageSet = ^TGtkPageSet;

  PPGtkPageSetup = ^PGtkPageSetup;
  PGtkPageSetup = ^TGtkPageSetup;

  PPGtkUnit = ^PGtkUnit;
  PGtkUnit = ^TGtkUnit;

  PPGtkPaperSize = ^PGtkPaperSize;
  PGtkPaperSize = ^TGtkPaperSize;
  TGtkPageSetup = object(TGObject)
    function new: PGtkPageSetup; cdecl; inline; static;
    function new_from_file(file_name: Pgchar): PGtkPageSetup; cdecl; inline; static;
    function new_from_key_file(key_file: PGKeyFile; group_name: Pgchar): PGtkPageSetup; cdecl; inline; static;
    function copy: PGtkPageSetup; cdecl; inline;
    function get_bottom_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_left_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_orientation: TGtkPageOrientation; cdecl; inline;
    function get_page_height(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_page_width(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_paper_height(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_paper_size: PGtkPaperSize; cdecl; inline;
    function get_paper_width(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_right_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_top_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function load_file(file_name: Pchar): gboolean; cdecl; inline;
    function load_key_file(key_file: PGKeyFile; group_name: Pgchar): gboolean; cdecl; inline;
    procedure set_bottom_margin(margin: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_left_margin(margin: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_orientation(orientation: TGtkPageOrientation); cdecl; inline;
    procedure set_paper_size(size: PGtkPaperSize); cdecl; inline;
    procedure set_paper_size_and_default_margins(size: PGtkPaperSize); cdecl; inline;
    procedure set_right_margin(margin: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_top_margin(margin: gdouble; unit_: TGtkUnit); cdecl; inline;
    function to_file(file_name: Pchar): gboolean; cdecl; inline;
    procedure to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl; inline;
  end;
  TGtkPaperSize = object
    function new(name: Pgchar): PGtkPaperSize; cdecl; inline; static;
    function new_custom(name: Pgchar; display_name: Pgchar; width: gdouble; height: gdouble; unit_: TGtkUnit): PGtkPaperSize; cdecl; inline; static;
    function new_from_key_file(key_file: PGKeyFile; group_name: Pgchar): PGtkPaperSize; cdecl; inline; static;
    function new_from_ppd(ppd_name: Pgchar; ppd_display_name: Pgchar; width: gdouble; height: gdouble): PGtkPaperSize; cdecl; inline; static;
    function copy: PGtkPaperSize; cdecl; inline;
    procedure free; cdecl; inline;
    function get_default_bottom_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_default_left_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_default_right_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_default_top_margin(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_display_name: Pgchar; cdecl; inline;
    function get_height(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_ppd_name: Pgchar; cdecl; inline;
    function get_width(unit_: TGtkUnit): gdouble; cdecl; inline;
    function is_custom: gboolean; cdecl; inline;
    function is_equal(size2: PGtkPaperSize): gboolean; cdecl; inline;
    procedure set_size(width: gdouble; height: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl; inline;
    function get_default: Pgchar; cdecl; inline; static;
    function get_paper_sizes(include_custom: gboolean): PGList; cdecl; inline; static;
  end;
  TGtkPageSetupDoneFunc = procedure(page_setup: PGtkPageSetup; data: gpointer); cdecl;

  TGtkPanedPrivate = record
    Unknown: Pointer;
  end;



  PPGtkPlugPrivate = ^PGtkPlugPrivate;
  PGtkPlugPrivate = ^TGtkPlugPrivate;

  TGtkPlugPrivate = record
    Unknown: Pointer;
  end;



  PPGtkPlug = ^PGtkPlug;
  PGtkPlug = ^TGtkPlug;
  TGtkPlug = object
    window: TAtkWindow;
    priv: PGtkPlugPrivate;
    function new(socket_id: TWindow): PGtkPlug; cdecl; inline; static;
    function new_for_display(display: PGdkDisplay; socket_id: TWindow): PGtkPlug; cdecl; inline; static;
    procedure construct(socket_id: TWindow); cdecl; inline;
    procedure construct_for_display(display: PGdkDisplay; socket_id: TWindow); cdecl; inline;
    function get_embedded: gboolean; cdecl; inline;
    function get_id: TWindow; cdecl; inline;
    function get_socket_window: PGdkWindow; cdecl; inline;
    property embedded:  gboolean read get_embedded ;
    property socket_window:  PGdkWindow read get_socket_window ;
  end;

  PPGtkPlugClass = ^PGtkPlugClass;
  PGtkPlugClass = ^TGtkPlugClass;
  TGtkPlugClass = object
    parent_class: TGdkWindowClass;
    embedded: procedure(plug: PGtkPlug); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkPolicyType = ^PGtkPolicyType;
  PGtkPolicyType = ^TGtkPolicyType;

  PPGtkPrintContext = ^PGtkPrintContext;
  PGtkPrintContext = ^TGtkPrintContext;
  TGtkPrintContext = object(TGObject)
    function create_pango_context: PPangoContext; cdecl; inline;
    function create_pango_layout: PPangoLayout; cdecl; inline;
    function get_cairo_context: Pcairo_t; cdecl; inline;
    function get_dpi_x: gdouble; cdecl; inline;
    function get_dpi_y: gdouble; cdecl; inline;
    function get_hard_margins(top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl; inline;
    function get_height: gdouble; cdecl; inline;
    function get_page_setup: PGtkPageSetup; cdecl; inline;
    function get_pango_fontmap: PPangoFontMap; cdecl; inline;
    function get_width: gdouble; cdecl; inline;
    procedure set_cairo_context(cr: Pcairo_t; dpi_x: gdouble; dpi_y: gdouble); cdecl; inline;
  end;

  PPGtkPrintDuplex = ^PGtkPrintDuplex;
  PGtkPrintDuplex = ^TGtkPrintDuplex;

  PPGtkPrintError = ^PGtkPrintError;
  PGtkPrintError = ^TGtkPrintError;

  PPGtkPrintOperationPreview = ^PGtkPrintOperationPreview;
  PGtkPrintOperationPreview = ^TGtkPrintOperationPreview;
  TGtkPrintOperationPreview = object
    got_page_size: procedure(context: TGtkPrintContext; page_setup: TGtkPageSetup); cdecl;
    ready: procedure(context: TGtkPrintContext); cdecl;
    procedure end_preview; cdecl; inline;
    function is_selected(page_nr: gint): gboolean; cdecl; inline;
    procedure render_page(page_nr: gint); cdecl; inline;
  end;

  PPGtkPrintOperation = ^PGtkPrintOperation;
  PGtkPrintOperation = ^TGtkPrintOperation;

  PPGtkPrintSettings = ^PGtkPrintSettings;
  PGtkPrintSettings = ^TGtkPrintSettings;

  PPGtkPrintStatus = ^PGtkPrintStatus;
  PGtkPrintStatus = ^TGtkPrintStatus;

  PPGtkPrintOperationResult = ^PGtkPrintOperationResult;
  PGtkPrintOperationResult = ^TGtkPrintOperationResult;

  PPGtkPrintOperationAction = ^PGtkPrintOperationAction;
  PGtkPrintOperationAction = ^TGtkPrintOperationAction;

  PPGtkPrintOperationPrivate = ^PGtkPrintOperationPrivate;
  PGtkPrintOperationPrivate = ^TGtkPrintOperationPrivate;
  TGtkPrintOperation = object(TGObject)
    priv: PGtkPrintOperationPrivate;
    function new: PGtkPrintOperation; cdecl; inline; static;
    procedure cancel; cdecl; inline;
    procedure draw_page_finish; cdecl; inline;
    function get_default_page_setup: PGtkPageSetup; cdecl; inline;
    function get_embed_page_setup: gboolean; cdecl; inline;
    procedure get_error; cdecl; inline;
    function get_has_selection: gboolean; cdecl; inline;
    function get_n_pages_to_print: gint; cdecl; inline;
    function get_print_settings: PGtkPrintSettings; cdecl; inline;
    function get_status: TGtkPrintStatus; cdecl; inline;
    function get_status_string: Pgchar; cdecl; inline;
    function get_support_selection: gboolean; cdecl; inline;
    function is_finished: gboolean; cdecl; inline;
    function run(action: TGtkPrintOperationAction; parent: PAtkWindow): TGtkPrintOperationResult; cdecl; inline;
    procedure set_allow_async(allow_async: gboolean); cdecl; inline;
    procedure set_current_page(current_page: gint); cdecl; inline;
    procedure set_custom_tab_label(label_: Pgchar); cdecl; inline;
    procedure set_default_page_setup(default_page_setup: PGtkPageSetup); cdecl; inline;
    procedure set_defer_drawing; cdecl; inline;
    procedure set_embed_page_setup(embed: gboolean); cdecl; inline;
    procedure set_export_filename(filename: Pgchar); cdecl; inline;
    procedure set_has_selection(has_selection: gboolean); cdecl; inline;
    procedure set_job_name(job_name: Pgchar); cdecl; inline;
    procedure set_n_pages(n_pages: gint); cdecl; inline;
    procedure set_print_settings(print_settings: PGtkPrintSettings); cdecl; inline;
    procedure set_show_progress(show_progress: gboolean); cdecl; inline;
    procedure set_support_selection(support_selection: gboolean); cdecl; inline;
    procedure set_track_print_status(track_status: gboolean); cdecl; inline;
    procedure set_unit(unit_: TGtkUnit); cdecl; inline;
    procedure set_use_full_page(full_page: gboolean); cdecl; inline;
    //property allow_async: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_allow_async  { property is writeable but setter not declared } ;
    //property current_page: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_current_page  { property is writeable but setter not declared } ;
    //property custom_tab_label: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_custom_tab_label  { property is writeable but setter not declared } ;
    property default_page_setup:  PGtkPageSetup read get_default_page_setup  { property is writeable but setter not declared } ;
    property embed_page_setup:  gboolean read get_embed_page_setup  { property is writeable but setter not declared } ;
    //property export_filename: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_export_filename  { property is writeable but setter not declared } ;
    property has_selection:  gboolean read get_has_selection  { property is writeable but setter not declared } ;
    //property job_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_job_name  { property is writeable but setter not declared } ;
    //property n_pages: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_n_pages  { property is writeable but setter not declared } ;
    property n_pages_to_print:  gint read get_n_pages_to_print ;
    property print_settings:  PGtkPrintSettings read get_print_settings  { property is writeable but setter not declared } ;
    //property show_progress: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_show_progress  { property is writeable but setter not declared } ;
    property status:  TGtkPrintStatus read get_status ;
    property status_string:  Pgchar read get_status_string ;
    property support_selection:  gboolean read get_support_selection  { property is writeable but setter not declared } ;
    //property track_print_status: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_track_print_status  { property is writeable but setter not declared } ;
    //property unit_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_unit  { property is writeable but setter not declared } ;
    //property use_full_page: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_use_full_page  { property is writeable but setter not declared } ;
  end;

  PPGtkPrintSettingsFunc = ^PGtkPrintSettingsFunc;
  PGtkPrintSettingsFunc = ^TGtkPrintSettingsFunc;
  TGtkPrintSettingsFunc = procedure(key: Pgchar; value: Pgchar; user_data: gpointer); cdecl;

  PPGtkPrintPages = ^PGtkPrintPages;
  PGtkPrintPages = ^TGtkPrintPages;

  PPGtkPrintQuality = ^PGtkPrintQuality;
  PGtkPrintQuality = ^TGtkPrintQuality;
  TGtkPrintSettings = object(TGObject)
    function new: PGtkPrintSettings; cdecl; inline; static;
    function new_from_file(file_name: Pgchar): PGtkPrintSettings; cdecl; inline; static;
    function new_from_key_file(key_file: PGKeyFile; group_name: Pgchar): PGtkPrintSettings; cdecl; inline; static;
    function copy: PGtkPrintSettings; cdecl; inline;
    procedure foreach(func: TGtkPrintSettingsFunc; user_data: gpointer); cdecl; inline;
    function get(key: Pgchar): Pgchar; cdecl; inline;
    function get_bool(key: Pgchar): gboolean; cdecl; inline;
    function get_collate: gboolean; cdecl; inline;
    function get_default_source: Pgchar; cdecl; inline;
    function get_dither: Pgchar; cdecl; inline;
    function get_double(key: Pgchar): gdouble; cdecl; inline;
    function get_double_with_default(key: Pgchar; def: gdouble): gdouble; cdecl; inline;
    function get_duplex: TGtkPrintDuplex; cdecl; inline;
    function get_finishings: Pgchar; cdecl; inline;
    function get_int(key: Pgchar): gint; cdecl; inline;
    function get_int_with_default(key: Pgchar; def: gint): gint; cdecl; inline;
    function get_length(key: Pgchar; unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_media_type: Pgchar; cdecl; inline;
    function get_n_copies: gint; cdecl; inline;
    function get_number_up: gint; cdecl; inline;
    function get_number_up_layout: TGtkNumberUpLayout; cdecl; inline;
    function get_orientation: TGtkPageOrientation; cdecl; inline;
    function get_output_bin: Pgchar; cdecl; inline;
    function get_page_ranges(num_ranges: Pgint): PGtkPageRange; cdecl; inline;
    function get_page_set: TGtkPageSet; cdecl; inline;
    function get_paper_height(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_paper_size: PGtkPaperSize; cdecl; inline;
    function get_paper_width(unit_: TGtkUnit): gdouble; cdecl; inline;
    function get_print_pages: TGtkPrintPages; cdecl; inline;
    function get_printer: Pgchar; cdecl; inline;
    function get_printer_lpi: gdouble; cdecl; inline;
    function get_quality: TGtkPrintQuality; cdecl; inline;
    function get_resolution: gint; cdecl; inline;
    function get_resolution_x: gint; cdecl; inline;
    function get_resolution_y: gint; cdecl; inline;
    function get_reverse: gboolean; cdecl; inline;
    function get_scale: gdouble; cdecl; inline;
    function get_use_color: gboolean; cdecl; inline;
    function has_key(key: Pgchar): gboolean; cdecl; inline;
    function load_file(file_name: Pgchar): gboolean; cdecl; inline;
    function load_key_file(key_file: PGKeyFile; group_name: Pgchar): gboolean; cdecl; inline;
    procedure set_(key: Pgchar; value: Pgchar); cdecl; inline;
    procedure set_bool(key: Pgchar; value: gboolean); cdecl; inline;
    procedure set_collate(collate: gboolean); cdecl; inline;
    procedure set_default_source(default_source: Pgchar); cdecl; inline;
    procedure set_dither(dither: Pgchar); cdecl; inline;
    procedure set_double(key: Pgchar; value: gdouble); cdecl; inline;
    procedure set_duplex(duplex: TGtkPrintDuplex); cdecl; inline;
    procedure set_finishings(finishings: Pgchar); cdecl; inline;
    procedure set_int(key: Pgchar; value: gint); cdecl; inline;
    procedure set_length(key: Pgchar; value: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_media_type(media_type: Pgchar); cdecl; inline;
    procedure set_n_copies(num_copies: gint); cdecl; inline;
    procedure set_number_up(number_up: gint); cdecl; inline;
    procedure set_number_up_layout(number_up_layout: TGtkNumberUpLayout); cdecl; inline;
    procedure set_orientation(orientation: TGtkPageOrientation); cdecl; inline;
    procedure set_output_bin(output_bin: Pgchar); cdecl; inline;
    procedure set_page_ranges(page_ranges: PGtkPageRange; num_ranges: gint); cdecl; inline;
    procedure set_page_set(page_set: TGtkPageSet); cdecl; inline;
    procedure set_paper_height(height: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_paper_size(paper_size: PGtkPaperSize); cdecl; inline;
    procedure set_paper_width(width: gdouble; unit_: TGtkUnit); cdecl; inline;
    procedure set_print_pages(pages: TGtkPrintPages); cdecl; inline;
    procedure set_printer(printer: Pgchar); cdecl; inline;
    procedure set_printer_lpi(lpi: gdouble); cdecl; inline;
    procedure set_quality(quality: TGtkPrintQuality); cdecl; inline;
    procedure set_resolution(resolution: gint); cdecl; inline;
    procedure set_resolution_xy(resolution_x: gint; resolution_y: gint); cdecl; inline;
    procedure set_reverse(reverse: gboolean); cdecl; inline;
    procedure set_scale(scale: gdouble); cdecl; inline;
    procedure set_use_color(use_color: gboolean); cdecl; inline;
    function to_file(file_name: Pgchar): gboolean; cdecl; inline;
    procedure to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl; inline;
    procedure unset(key: Pgchar); cdecl; inline;
  end;

  TGtkPrintOperationPrivate = record
    Unknown: Pointer;
  end;



  PPGtkPrintOperationClass = ^PGtkPrintOperationClass;
  PGtkPrintOperationClass = ^TGtkPrintOperationClass;
  TGtkPrintOperationClass = object
    parent_class: TGObjectClass;
    done: procedure(operation: PGtkPrintOperation; result_: TGtkPrintOperationResult); cdecl;
    begin_print: procedure(operation: PGtkPrintOperation; context: PGtkPrintContext); cdecl;
    paginate: function(operation: PGtkPrintOperation; context: PGtkPrintContext): gboolean; cdecl;
    request_page_setup: procedure(operation: PGtkPrintOperation; context: PGtkPrintContext; page_nr: gint; setup: PGtkPageSetup); cdecl;
    draw_page: procedure(operation: PGtkPrintOperation; context: PGtkPrintContext; page_nr: gint); cdecl;
    end_print: procedure(operation: PGtkPrintOperation; context: PGtkPrintContext); cdecl;
    status_changed: procedure(operation: PGtkPrintOperation); cdecl;
    create_custom_widget: function(operation: PGtkPrintOperation): PGtkWidget; cdecl;
    custom_widget_apply: procedure(operation: PGtkPrintOperation; widget: PGtkWidget); cdecl;
    preview: function(operation: PGtkPrintOperation; preview: PGtkPrintOperationPreview; context: PGtkPrintContext; parent: PAtkWindow): gboolean; cdecl;
    update_custom_widget: procedure(operation: PGtkPrintOperation; widget: PGtkWidget; setup: PGtkPageSetup; settings: PGtkPrintSettings); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkPrintOperationPreviewIface = ^PGtkPrintOperationPreviewIface;
  PGtkPrintOperationPreviewIface = ^TGtkPrintOperationPreviewIface;
  TGtkPrintOperationPreviewIface = object
    g_iface: TGTypeInterface;
    ready: procedure(preview: PGtkPrintOperationPreview; context: PGtkPrintContext); cdecl;
    got_page_size: procedure(preview: PGtkPrintOperationPreview; context: PGtkPrintContext; page_setup: PGtkPageSetup); cdecl;
    render_page: procedure(preview: PGtkPrintOperationPreview; page_nr: gint); cdecl;
    is_selected: function(preview: PGtkPrintOperationPreview; page_nr: gint): gboolean; cdecl;
    end_preview: procedure(preview: PGtkPrintOperationPreview); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkProgressBarPrivate = ^PGtkProgressBarPrivate;
  PGtkProgressBarPrivate = ^TGtkProgressBarPrivate;

  TGtkProgressBarPrivate = record
    Unknown: Pointer;
  end;



  PPGtkProgressBar = ^PGtkProgressBar;
  PGtkProgressBar = ^TGtkProgressBar;
  TGtkProgressBar = object(TGtkWidget)
    priv1: PGtkProgressBarPrivate;
    function new: PGtkProgressBar; cdecl; inline; static;
    function get_ellipsize: TPangoEllipsizeMode; cdecl; inline;
    function get_fraction: gdouble; cdecl; inline;
    function get_inverted: gboolean; cdecl; inline;
    function get_pulse_step: gdouble; cdecl; inline;
    function get_show_text: gboolean; cdecl; inline;
    function get_text: Pgchar; cdecl; inline;
    procedure pulse; cdecl; inline;
    procedure set_ellipsize(mode: TPangoEllipsizeMode); cdecl; inline;
    procedure set_fraction(fraction: gdouble); cdecl; inline;
    procedure set_inverted(inverted: gboolean); cdecl; inline;
    procedure set_pulse_step(fraction: gdouble); cdecl; inline;
    procedure set_show_text(show_text: gboolean); cdecl; inline;
    procedure set_text(text: Pgchar); cdecl; inline;
    property ellipsize:  TPangoEllipsizeMode read get_ellipsize  { property is writeable but setter not declared } ;
    property fraction:  gdouble read get_fraction  { property is writeable but setter not declared } ;
    property inverted:  gboolean read get_inverted  { property is writeable but setter not declared } ;
    property pulse_step:  gdouble read get_pulse_step  { property is writeable but setter not declared } ;
    property show_text:  gboolean read get_show_text  { property is writeable but setter not declared } ;
    property text:  Pgchar read get_text  { property is writeable but setter not declared } ;
  end;

  PPGtkProgressBarClass = ^PGtkProgressBarClass;
  PGtkProgressBarClass = ^TGtkProgressBarClass;
  TGtkProgressBarClass = object
    parent_class: TGtkWidgetClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkRadioAction = ^PGtkRadioAction;
  PGtkRadioAction = ^TGtkRadioAction;

  PPGtkToggleAction = ^PGtkToggleAction;
  PGtkToggleAction = ^TGtkToggleAction;

  PPGtkToggleActionPrivate = ^PGtkToggleActionPrivate;
  PGtkToggleActionPrivate = ^TGtkToggleActionPrivate;
  TGtkToggleAction = object(TGtkAction)
    private_data1: PGtkToggleActionPrivate;
    function new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar): PGtkToggleAction; cdecl; inline; static;
    function get_active: gboolean; cdecl; inline;
    function get_draw_as_radio: gboolean; cdecl; inline;
    procedure set_active(is_active: gboolean); cdecl; inline;
    procedure set_draw_as_radio(draw_as_radio: gboolean); cdecl; inline;
    procedure toggled; cdecl; inline;
    property active:  gboolean read get_active  { property is writeable but setter not declared } ;
    property draw_as_radio:  gboolean read get_draw_as_radio  { property is writeable but setter not declared } ;
  end;

  PPGtkRadioActionPrivate = ^PGtkRadioActionPrivate;
  PGtkRadioActionPrivate = ^TGtkRadioActionPrivate;
  TGtkRadioAction = object(TGtkToggleAction)
    private_data2: PGtkRadioActionPrivate;
    function new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar; value: gint): PGtkRadioAction; cdecl; inline; static;
    function get_current_value: gint; cdecl; inline;
    function get_group: PGSList; cdecl; inline;
    procedure join_group(group_source: PGtkRadioAction); cdecl; inline;
    procedure set_current_value(current_value: gint); cdecl; inline;
    procedure set_group(group: PGSList); cdecl; inline;
    property current_value:  gint read get_current_value  { property is writeable but setter not declared } ;
    property group:  PGSList read get_group  { property is writeable but setter not declared } ;
    //property value: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_value  { property is writeable but setter not declared } ;
  end;

  TGtkRadioActionPrivate = record
    Unknown: Pointer;
  end;



  PPGtkToggleActionClass = ^PGtkToggleActionClass;
  PGtkToggleActionClass = ^TGtkToggleActionClass;
  TGtkToggleActionClass = object
    parent_class: TGtkActionClass;
    toggled: procedure(action: PGtkToggleAction); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkRadioActionClass = ^PGtkRadioActionClass;
  PGtkRadioActionClass = ^TGtkRadioActionClass;
  TGtkRadioActionClass = object
    parent_class: TGtkToggleActionClass;
    changed: procedure(action: PGtkRadioAction; current: PGtkRadioAction); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkRadioButton = ^PGtkRadioButton;
  PGtkRadioButton = ^TGtkRadioButton;

  PPGtkRadioButtonPrivate = ^PGtkRadioButtonPrivate;
  PGtkRadioButtonPrivate = ^TGtkRadioButtonPrivate;
  TGtkRadioButton = object(TGtkCheckButton)
    priv5: PGtkRadioButtonPrivate;
    function new(group: PGSList): PGtkRadioButton; cdecl; inline; static;
    function new_with_label(group: PGSList; label_: Pgchar): PGtkRadioButton; cdecl; inline; static;
    function new_with_label_from_widget(radio_group_member: PGtkRadioButton; label_: Pgchar): PGtkRadioButton; cdecl; inline; static;
    function new_with_mnemonic(group: PGSList; label_: Pgchar): PGtkRadioButton; cdecl; inline; static;
    function new_with_mnemonic_from_widget(radio_group_member: PGtkRadioButton; label_: Pgchar): PGtkRadioButton; cdecl; inline; static;
    function get_group: PGSList; cdecl; inline;
    procedure join_group(group_source: PGtkRadioButton); cdecl; inline;
    function new_from_widget: PGtkWidget; cdecl; inline;
    procedure set_group(group: PGSList); cdecl; inline;
    property group:  PGSList read get_group  { property is writeable but setter not declared } ;
  end;

  TGtkRadioButtonPrivate = record
    Unknown: Pointer;
  end;



  PPGtkRadioButtonClass = ^PGtkRadioButtonClass;
  PGtkRadioButtonClass = ^TGtkRadioButtonClass;
  TGtkRadioButtonClass = object
    parent_class: TGtkCheckButtonClass;
    group_changed: procedure(radio_button: PGtkRadioButton); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkRadioMenuItem = ^PGtkRadioMenuItem;
  PGtkRadioMenuItem = ^TGtkRadioMenuItem;

  PPGtkRadioMenuItemPrivate = ^PGtkRadioMenuItemPrivate;
  PGtkRadioMenuItemPrivate = ^TGtkRadioMenuItemPrivate;
  TGtkRadioMenuItem = object(TGtkCheckMenuItem)
    priv5: PGtkRadioMenuItemPrivate;
    function new(group: PGSList): PGtkRadioMenuItem; cdecl; inline; static;
    function new_with_label(group: PGSList; label_: Pgchar): PGtkRadioMenuItem; cdecl; inline; static;
    function new_with_mnemonic(group: PGSList; label_: Pgchar): PGtkRadioMenuItem; cdecl; inline; static;
    function get_group: PGSList; cdecl; inline;
    function new_from_widget: PGtkWidget; cdecl; inline;
    function new_with_label_from_widget(label_: Pgchar): PGtkWidget; cdecl; inline;
    function new_with_mnemonic_from_widget(label_: Pgchar): PGtkWidget; cdecl; inline;
    procedure set_group(group: PGSList); cdecl; inline;
    property group:  PGSList read get_group  { property is writeable but setter not declared } ;
  end;

  TGtkRadioMenuItemPrivate = record
    Unknown: Pointer;
  end;



  PPGtkRadioMenuItemClass = ^PGtkRadioMenuItemClass;
  PGtkRadioMenuItemClass = ^TGtkRadioMenuItemClass;
  TGtkRadioMenuItemClass = object
    parent_class: TGtkCheckMenuItemClass;
    group_changed: procedure(radio_menu_item: PGtkRadioMenuItem); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkRadioToolButton = ^PGtkRadioToolButton;
  PGtkRadioToolButton = ^TGtkRadioToolButton;

  PPGtkToggleToolButton = ^PGtkToggleToolButton;
  PGtkToggleToolButton = ^TGtkToggleToolButton;

  PPGtkToggleToolButtonPrivate = ^PGtkToggleToolButtonPrivate;
  PGtkToggleToolButtonPrivate = ^TGtkToggleToolButtonPrivate;
  TGtkToggleToolButton = object(TGtkToolButton)
    priv5: PGtkToggleToolButtonPrivate;
    function new: PGtkToggleToolButton; cdecl; inline; static;
    function new_from_stock(stock_id: Pgchar): PGtkToggleToolButton; cdecl; inline; static;
    function get_active: gboolean; cdecl; inline;
    procedure set_active(is_active: gboolean); cdecl; inline;
    property active:  gboolean read get_active  { property is writeable but setter not declared } ;
  end;
  TGtkRadioToolButton = object(TGtkToggleToolButton)
    function new(group: PGSList): PGtkRadioToolButton; cdecl; inline; static;
    function new_from_stock(group: PGSList; stock_id: Pgchar): PGtkRadioToolButton; cdecl; inline; static;
    function get_group: PGSList; cdecl; inline;
    function new_from_widget: PGtkToolItem; cdecl; inline;
    function new_with_stock_from_widget(stock_id: Pgchar): PGtkToolItem; cdecl; inline;
    procedure set_group(group: PGSList); cdecl; inline;
    property group:  PGSList read get_group  { property is writeable but setter not declared } ;
  end;

  PPGtkToggleToolButtonClass = ^PGtkToggleToolButtonClass;
  PGtkToggleToolButtonClass = ^TGtkToggleToolButtonClass;
  TGtkToggleToolButtonClass = object
    parent_class: TGtkToolButtonClass;
    toggled: procedure(button: PGtkToggleToolButton); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkRadioToolButtonClass = ^PGtkRadioToolButtonClass;
  PGtkRadioToolButtonClass = ^TGtkRadioToolButtonClass;
  TGtkRadioToolButtonClass = object
    parent_class: TGtkToggleToolButtonClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkRangePrivate = record
    Unknown: Pointer;
  end;



  PPGtkRcContext = ^PGtkRcContext;
  PGtkRcContext = ^TGtkRcContext;

  TGtkRcContext = record
    Unknown: Pointer;
  end;


  TGtkRcFlags = packed object(TBitObject32)
  public
    property fg: DWord index 1 read GetBit write SetBit;
    property bg: DWord index 2 read GetBit write SetBit;
    property text: DWord index 4 read GetBit write SetBit;
    property base: DWord index 8 read GetBit write SetBit;
  end;


  PPGtkRcProperty = ^PGtkRcProperty;
  PGtkRcProperty = ^TGtkRcProperty;
  TGtkRcProperty = object
    type_name: TGQuark;
    property_name: TGQuark;
    origin: Pgchar;
    value: TGValue;
    function parse_border(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl; inline; static;
    function parse_color(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl; inline; static;
    function parse_enum(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl; inline; static;
    function parse_flags(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl; inline; static;
    function parse_requisition(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl; inline; static;
  end;

  PPGtkRcFlags = ^PGtkRcFlags;
  PGtkRcFlags = ^TGtkRcFlags;
  TGtkRcStyle = object(TGObject)
    name: Pgchar;
    bg_pixmap_name: array [0..4] of Pgchar;
    font_desc: PPangoFontDescription;
    color_flags: array [0..4] of TGtkRcFlags;
    fg: array [0..4] of TGdkColor;
    bg: array [0..4] of TGdkColor;
    text: array [0..4] of TGdkColor;
    base: array [0..4] of TGdkColor;
    xthickness: gint;
    ythickness: gint;
    rc_properties: gpointer;
    rc_style_lists: PGSList;
    icon_factories: PGSList;
    engine_specified: guint1 { changed from guint to accomodate 1 bitsize requirement };
    
    
  end;

  PPGtkRcStyleClass = ^PGtkRcStyleClass;
  PGtkRcStyleClass = ^TGtkRcStyleClass;
  TGtkRcStyleClass = object
    parent_class: TGObjectClass;
    create_rc_style: function(rc_style: PGtkRcStyle): PGtkRcStyle; cdecl;
    parse: function(rc_style: PGtkRcStyle; settings: PGSettings; scanner: PGScanner): guint; cdecl;
    merge: procedure(dest: PGtkRcStyle; src: PGtkRcStyle); cdecl;
    create_style: function(rc_style: PGtkRcStyle): PPangoStyle; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkRcTokenType = ^PGtkRcTokenType;
  PGtkRcTokenType = ^TGtkRcTokenType;

  PPGtkRecentChooser = ^PGtkRecentChooser;
  PGtkRecentChooser = ^TGtkRecentChooser;

  PPGtkRecentFilter = ^PGtkRecentFilter;
  PGtkRecentFilter = ^TGtkRecentFilter;

  PPGtkRecentInfo = ^PGtkRecentInfo;
  PGtkRecentInfo = ^TGtkRecentInfo;

  PPGtkRecentSortType = ^PGtkRecentSortType;
  PGtkRecentSortType = ^TGtkRecentSortType;

  PPGtkRecentSortFunc = ^PGtkRecentSortFunc;
  PGtkRecentSortFunc = ^TGtkRecentSortFunc;
  TGtkRecentSortFunc = function(a: PGtkRecentInfo; b: PGtkRecentInfo; user_data: gpointer): gint; cdecl;
  TGtkRecentChooser = object
    item_activated: procedure; cdecl;
    selection_changed: procedure; cdecl;
    procedure add_filter(filter: PGtkRecentFilter); cdecl; inline;
    function get_current_item: PGtkRecentInfo; cdecl; inline;
    function get_current_uri: Pgchar; cdecl; inline;
    function get_filter: PGtkRecentFilter; cdecl; inline;
    function get_items: PGList; cdecl; inline;
    function get_limit: gint; cdecl; inline;
    function get_local_only: gboolean; cdecl; inline;
    function get_select_multiple: gboolean; cdecl; inline;
    function get_show_icons: gboolean; cdecl; inline;
    function get_show_not_found: gboolean; cdecl; inline;
    function get_show_private: gboolean; cdecl; inline;
    function get_show_tips: gboolean; cdecl; inline;
    function get_sort_type: TGtkRecentSortType; cdecl; inline;
    function get_uris(length: Pgsize): PPgchar; cdecl; inline;
    function list_filters: PGSList; cdecl; inline;
    procedure remove_filter(filter: PGtkRecentFilter); cdecl; inline;
    procedure select_all; cdecl; inline;
    function select_uri(uri: Pgchar): gboolean; cdecl; inline;
    function set_current_uri(uri: Pgchar): gboolean; cdecl; inline;
    procedure set_filter(filter: PGtkRecentFilter); cdecl; inline;
    procedure set_limit(limit: gint); cdecl; inline;
    procedure set_local_only(local_only: gboolean); cdecl; inline;
    procedure set_select_multiple(select_multiple: gboolean); cdecl; inline;
    procedure set_show_icons(show_icons: gboolean); cdecl; inline;
    procedure set_show_not_found(show_not_found: gboolean); cdecl; inline;
    procedure set_show_private(show_private: gboolean); cdecl; inline;
    procedure set_show_tips(show_tips: gboolean); cdecl; inline;
    procedure set_sort_func(sort_func: TGtkRecentSortFunc; sort_data: gpointer; data_destroy: TGDestroyNotify); cdecl; inline;
    procedure set_sort_type(sort_type: TGtkRecentSortType); cdecl; inline;
    procedure unselect_all; cdecl; inline;
    procedure unselect_uri(uri: Pgchar); cdecl; inline;
    property filter:  PGtkRecentFilter read get_filter  { property is writeable but setter not declared } ;
    property limit:  gint read get_limit  { property is writeable but setter not declared } ;
    property local_only:  gboolean read get_local_only  { property is writeable but setter not declared } ;
    //property recent_manager: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_recent_manager  { property is writeable but setter not declared } ;
    property select_multiple:  gboolean read get_select_multiple  { property is writeable but setter not declared } ;
    property show_icons:  gboolean read get_show_icons  { property is writeable but setter not declared } ;
    property show_not_found:  gboolean read get_show_not_found  { property is writeable but setter not declared } ;
    property show_private:  gboolean read get_show_private  { property is writeable but setter not declared } ;
    property show_tips:  gboolean read get_show_tips  { property is writeable but setter not declared } ;
    property sort_type:  TGtkRecentSortType read get_sort_type  { property is writeable but setter not declared } ;
  end;

  PPGtkRecentManager = ^PGtkRecentManager;
  PGtkRecentManager = ^TGtkRecentManager;

  PPGtkRecentData = ^PGtkRecentData;
  PGtkRecentData = ^TGtkRecentData;

  PPGtkRecentManagerPrivate = ^PGtkRecentManagerPrivate;
  PGtkRecentManagerPrivate = ^TGtkRecentManagerPrivate;
  TGtkRecentManager = object(TGObject)
    priv: PGtkRecentManagerPrivate;
    function new: PGtkRecentManager; cdecl; inline; static;
    function get_default: PGtkRecentManager; cdecl; inline; static;
    function add_full(uri: Pgchar; recent_data: PGtkRecentData): gboolean; cdecl; inline;
    function add_item(uri: Pgchar): gboolean; cdecl; inline;
    function get_items: PGList; cdecl; inline;
    function has_item(uri: Pgchar): gboolean; cdecl; inline;
    function lookup_item(uri: Pgchar): PGtkRecentInfo; cdecl; inline;
    function move_item(uri: Pgchar; new_uri: Pgchar): gboolean; cdecl; inline;
    function purge_items: gint; cdecl; inline;
    function remove_item(uri: Pgchar): gboolean; cdecl; inline;
    //property filename: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_filename  { property is writeable but setter not declared } ;
    //property size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size ;
  end;

  PPGtkRecentActionPrivate = ^PGtkRecentActionPrivate;
  PGtkRecentActionPrivate = ^TGtkRecentActionPrivate;

  TGtkRecentActionPrivate = record
    Unknown: Pointer;
  end;



  PPGtkRecentAction = ^PGtkRecentAction;
  PGtkRecentAction = ^TGtkRecentAction;
  TGtkRecentAction = object(TGtkAction)
    priv: PGtkRecentActionPrivate;
    function new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar): PGtkRecentAction; cdecl; inline; static;
    function new_for_manager(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar; manager: PGtkRecentManager): PGtkRecentAction; cdecl; inline; static;
    function get_show_numbers: gboolean; cdecl; inline;
    procedure set_show_numbers(show_numbers: gboolean); cdecl; inline;
    property show_numbers:  gboolean read get_show_numbers  { property is writeable but setter not declared } ;
  end;

  PPGtkRecentActionClass = ^PGtkRecentActionClass;
  PGtkRecentActionClass = ^TGtkRecentActionClass;
  TGtkRecentActionClass = object
    parent_class: TGtkActionClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkRecentFilterFlags = ^PGtkRecentFilterFlags;
  PGtkRecentFilterFlags = ^TGtkRecentFilterFlags;
  TGtkRecentFilterFlags = packed object(TBitObject32)
  public
    property uri: DWord index 1 read GetBit write SetBit;
    property display_name: DWord index 2 read GetBit write SetBit;
    property mime_type: DWord index 4 read GetBit write SetBit;
    property application: DWord index 8 read GetBit write SetBit;
    property group: DWord index 16 read GetBit write SetBit;
    property age: DWord index 32 read GetBit write SetBit;
  end;


  PPGtkRecentFilterFunc = ^PGtkRecentFilterFunc;
  PGtkRecentFilterFunc = ^TGtkRecentFilterFunc;

  PPGtkRecentFilterInfo = ^PGtkRecentFilterInfo;
  PGtkRecentFilterInfo = ^TGtkRecentFilterInfo;
  TGtkRecentFilterFunc = function(filter_info: PGtkRecentFilterInfo; user_data: gpointer): gboolean; cdecl;
  TGtkRecentFilter = object(TGInitiallyUnowned)
    function new: PGtkRecentFilter; cdecl; inline; static;
    procedure add_age(days: gint); cdecl; inline;
    procedure add_application(application: Pgchar); cdecl; inline;
    procedure add_custom(needed: TGtkRecentFilterFlags; func: TGtkRecentFilterFunc; data: gpointer; data_destroy: TGDestroyNotify); cdecl; inline;
    procedure add_group(group: Pgchar); cdecl; inline;
    procedure add_mime_type(mime_type: Pgchar); cdecl; inline;
    procedure add_pattern(pattern: Pgchar); cdecl; inline;
    procedure add_pixbuf_formats; cdecl; inline;
    function filter(filter_info: PGtkRecentFilterInfo): gboolean; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_needed: TGtkRecentFilterFlags; cdecl; inline;
    procedure set_name(name: Pgchar); cdecl; inline;
  end;
  TGtkRecentInfo = object
    function create_app_info(app_name: Pgchar): PGAppInfo; cdecl; inline;
    function exists: gboolean; cdecl; inline;
    function get_added: glong; cdecl; inline;
    function get_age: gint; cdecl; inline;
    function get_application_info(app_name: Pgchar; app_exec: PPgchar; count: Pguint; time_: Pglong): gboolean; cdecl; inline;
    function get_applications(length: Pgsize): PPgchar; cdecl; inline;
    function get_description: Pgchar; cdecl; inline;
    function get_display_name: Pgchar; cdecl; inline;
    function get_gicon: PGIcon; cdecl; inline;
    function get_groups(length: Pgsize): PPgchar; cdecl; inline;
    function get_icon(size: gint): PGdkPixbuf; cdecl; inline;
    function get_mime_type: Pgchar; cdecl; inline;
    function get_modified: glong; cdecl; inline;
    function get_private_hint: gboolean; cdecl; inline;
    function get_short_name: Pgchar; cdecl; inline;
    function get_uri: Pgchar; cdecl; inline;
    function get_uri_display: Pgchar; cdecl; inline;
    function get_visited: glong; cdecl; inline;
    function has_application(app_name: Pgchar): gboolean; cdecl; inline;
    function has_group(group_name: Pgchar): gboolean; cdecl; inline;
    function is_local: gboolean; cdecl; inline;
    function last_application: Pgchar; cdecl; inline;
    function match(info_b: PGtkRecentInfo): gboolean; cdecl; inline;
    function ref: PGtkRecentInfo; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGtkRecentChooserDialogPrivate = ^PGtkRecentChooserDialogPrivate;
  PGtkRecentChooserDialogPrivate = ^TGtkRecentChooserDialogPrivate;

  TGtkRecentChooserDialogPrivate = record
    Unknown: Pointer;
  end;



  PPGtkRecentChooserDialog = ^PGtkRecentChooserDialog;
  PGtkRecentChooserDialog = ^TGtkRecentChooserDialog;
  TGtkRecentChooserDialog = object(TGtkDialog)
    priv1: PGtkRecentChooserDialogPrivate;
    //function new(title: Pgchar; parent: PAtkWindow; first_button_text: Pgchar; args: array of const): PGtkRecentChooserDialog; cdecl; inline; static;
    //function new_for_manager(title: Pgchar; parent: PAtkWindow; manager: PGtkRecentManager; first_button_text: Pgchar; args: array of const): PGtkRecentChooserDialog; cdecl; inline; static;
  end;

  PPGtkRecentChooserDialogClass = ^PGtkRecentChooserDialogClass;
  PGtkRecentChooserDialogClass = ^TGtkRecentChooserDialogClass;
  TGtkRecentChooserDialogClass = object
    parent_class: TGtkDialogClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkRecentChooserError = ^PGtkRecentChooserError;
  PGtkRecentChooserError = ^TGtkRecentChooserError;

  PPGtkRecentChooserIface = ^PGtkRecentChooserIface;
  PGtkRecentChooserIface = ^TGtkRecentChooserIface;
  TGtkRecentChooserIface = object
    base_iface: TGTypeInterface;
    set_current_uri: function(chooser: PGtkRecentChooser; uri: Pgchar): gboolean; cdecl;
    get_current_uri: function(chooser: PGtkRecentChooser): Pgchar; cdecl;
    select_uri: function(chooser: PGtkRecentChooser; uri: Pgchar): gboolean; cdecl;
    unselect_uri: procedure(chooser: PGtkRecentChooser; uri: Pgchar); cdecl;
    select_all: procedure(chooser: PGtkRecentChooser); cdecl;
    unselect_all: procedure(chooser: PGtkRecentChooser); cdecl;
    get_items: function(chooser: PGtkRecentChooser): PGList; cdecl;
    get_recent_manager: function(chooser: PGtkRecentChooser): PGtkRecentManager; cdecl;
    add_filter: procedure(chooser: PGtkRecentChooser; filter: PGtkRecentFilter); cdecl;
    remove_filter: procedure(chooser: PGtkRecentChooser; filter: PGtkRecentFilter); cdecl;
    list_filters: function(chooser: PGtkRecentChooser): PGSList; cdecl;
    set_sort_func: procedure(chooser: PGtkRecentChooser; sort_func: TGtkRecentSortFunc; sort_data: gpointer; data_destroy: TGDestroyNotify); cdecl;
    item_activated: procedure(chooser: PGtkRecentChooser); cdecl;
    selection_changed: procedure(chooser: PGtkRecentChooser); cdecl;
  end;

  PPGtkRecentChooserMenuPrivate = ^PGtkRecentChooserMenuPrivate;
  PGtkRecentChooserMenuPrivate = ^TGtkRecentChooserMenuPrivate;

  TGtkRecentChooserMenuPrivate = record
    Unknown: Pointer;
  end;



  PPGtkRecentChooserMenu = ^PGtkRecentChooserMenu;
  PGtkRecentChooserMenu = ^TGtkRecentChooserMenu;
  TGtkRecentChooserMenu = object(TGtkMenu)
    priv4: PGtkRecentChooserMenuPrivate;
    function new: PGtkRecentChooserMenu; cdecl; inline; static;
    function new_for_manager(manager: PGtkRecentManager): PGtkRecentChooserMenu; cdecl; inline; static;
    function get_show_numbers: gboolean; cdecl; inline;
    procedure set_show_numbers(show_numbers: gboolean); cdecl; inline;
    property show_numbers:  gboolean read get_show_numbers  { property is writeable but setter not declared } ;
  end;

  PPGtkRecentChooserMenuClass = ^PGtkRecentChooserMenuClass;
  PGtkRecentChooserMenuClass = ^TGtkRecentChooserMenuClass;
  TGtkRecentChooserMenuClass = object
    parent_class: TGtkMenuClass;
    gtk_recent1: procedure; cdecl;
    gtk_recent2: procedure; cdecl;
    gtk_recent3: procedure; cdecl;
    gtk_recent4: procedure; cdecl;
  end;

  PPGtkRecentChooserWidgetPrivate = ^PGtkRecentChooserWidgetPrivate;
  PGtkRecentChooserWidgetPrivate = ^TGtkRecentChooserWidgetPrivate;

  TGtkRecentChooserWidgetPrivate = record
    Unknown: Pointer;
  end;



  PPGtkRecentChooserWidget = ^PGtkRecentChooserWidget;
  PGtkRecentChooserWidget = ^TGtkRecentChooserWidget;
  TGtkRecentChooserWidget = object(TGtkBox)
    priv3: PGtkRecentChooserWidgetPrivate;
    function new: PGtkRecentChooserWidget; cdecl; inline; static;
    function new_for_manager(manager: PGtkRecentManager): PGtkRecentChooserWidget; cdecl; inline; static;
  end;

  PPGtkRecentChooserWidgetClass = ^PGtkRecentChooserWidgetClass;
  PGtkRecentChooserWidgetClass = ^TGtkRecentChooserWidgetClass;
  TGtkRecentChooserWidgetClass = object
    parent_class: TGtkBoxClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkRecentData = record
    display_name: Pgchar;
    description: Pgchar;
    mime_type: Pgchar;
    app_name: Pgchar;
    app_exec: Pgchar;
    groups: PPgchar;
    is_private: gboolean;
  end;



  TGtkRecentFilterInfo = record
    contains: TGtkRecentFilterFlags;
    uri: Pgchar;
    display_name: Pgchar;
    mime_type: Pgchar;
    applications: PPgchar;
    groups: PPgchar;
    age: gint;
  end;



  TGtkRecentManagerPrivate = record
    Unknown: Pointer;
  end;



  PPGtkRecentManagerClass = ^PGtkRecentManagerClass;
  PGtkRecentManagerClass = ^TGtkRecentManagerClass;
  TGtkRecentManagerClass = object
    parent_class: TGObjectClass;
    changed: procedure(manager: PGtkRecentManager); cdecl;
    _gtk_recent1: procedure; cdecl;
    _gtk_recent2: procedure; cdecl;
    _gtk_recent3: procedure; cdecl;
    _gtk_recent4: procedure; cdecl;
  end;

  PPGtkRecentManagerError = ^PGtkRecentManagerError;
  PGtkRecentManagerError = ^TGtkRecentManagerError;

  PPGtkRequestedSize = ^PGtkRequestedSize;
  PGtkRequestedSize = ^TGtkRequestedSize;

  TGtkRequestedSize = record
    data: gpointer;
    minimum_size: gint;
    natural_size: gint;
  end;



  PPGtkResponseType = ^PGtkResponseType;
  PGtkResponseType = ^TGtkResponseType;

  TGtkScalePrivate = record
    Unknown: Pointer;
  end;



  PPGtkScaleButtonPrivate = ^PGtkScaleButtonPrivate;
  PGtkScaleButtonPrivate = ^TGtkScaleButtonPrivate;

  TGtkScaleButtonPrivate = record
    Unknown: Pointer;
  end;



  PPGtkScaleButton = ^PGtkScaleButton;
  PGtkScaleButton = ^TGtkScaleButton;
  TGtkScaleButton = object(TGtkButton)
    priv4: PGtkScaleButtonPrivate;
    function new(size: gint; min: gdouble; max: gdouble; step: gdouble; icons: PPgchar): PGtkScaleButton; cdecl; inline; static;
    function get_adjustment: PGtkAdjustment; cdecl; inline;
    function get_minus_button: PGtkWidget; cdecl; inline;
    function get_plus_button: PGtkWidget; cdecl; inline;
    function get_popup: PGtkWidget; cdecl; inline;
    function get_value: gdouble; cdecl; inline;
    procedure set_adjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure set_icons(icons: PPgchar); cdecl; inline;
    procedure set_value(value: gdouble); cdecl; inline;
    property adjustment:  PGtkAdjustment read get_adjustment  { property is writeable but setter not declared } ;
    //property icons: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icons  { property is writeable but setter not declared } ;
    //property size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size  { property is writeable but setter not declared } ;
    property value:  gdouble read get_value  { property is writeable but setter not declared } ;
  end;

  PPGtkScaleButtonClass = ^PGtkScaleButtonClass;
  PGtkScaleButtonClass = ^TGtkScaleButtonClass;
  TGtkScaleButtonClass = object
    parent_class: TGtkButtonClass;
    value_changed: procedure(button: PGtkScaleButton; value: gdouble); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkScrollStep = ^PGtkScrollStep;
  PGtkScrollStep = ^TGtkScrollStep;

  PPGtkScrollableInterface = ^PGtkScrollableInterface;
  PGtkScrollableInterface = ^TGtkScrollableInterface;
  TGtkScrollableInterface = object
    base_iface: TGTypeInterface;
  end;

  PPGtkScrolledWindowPrivate = ^PGtkScrolledWindowPrivate;
  PGtkScrolledWindowPrivate = ^TGtkScrolledWindowPrivate;

  TGtkScrolledWindowPrivate = record
    Unknown: Pointer;
  end;



  PPGtkScrolledWindow = ^PGtkScrolledWindow;
  PGtkScrolledWindow = ^TGtkScrolledWindow;
  TGtkScrolledWindow = object(TGtkBin)
    priv3: PGtkScrolledWindowPrivate;
    function new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkScrolledWindow; cdecl; inline; static;
    procedure add_with_viewport(child: PGtkWidget); cdecl; inline;
    function get_hadjustment: PGtkAdjustment; cdecl; inline;
    function get_hscrollbar: PGtkWidget; cdecl; inline;
    function get_min_content_height: gint; cdecl; inline;
    function get_min_content_width: gint; cdecl; inline;
    function get_placement: TGtkCornerType; cdecl; inline;
    procedure get_policy(hscrollbar_policy: PGtkPolicyType; vscrollbar_policy: PGtkPolicyType); cdecl; inline;
    function get_shadow_type: TGtkShadowType; cdecl; inline;
    function get_vadjustment: PGtkAdjustment; cdecl; inline;
    function get_vscrollbar: PGtkWidget; cdecl; inline;
    procedure set_hadjustment(hadjustment: PGtkAdjustment); cdecl; inline;
    procedure set_min_content_height(height: gint); cdecl; inline;
    procedure set_min_content_width(width: gint); cdecl; inline;
    procedure set_placement(window_placement: TGtkCornerType); cdecl; inline;
    procedure set_policy(hscrollbar_policy: TGtkPolicyType; vscrollbar_policy: TGtkPolicyType); cdecl; inline;
    procedure set_shadow_type(type_: TGtkShadowType); cdecl; inline;
    procedure set_vadjustment(vadjustment: PGtkAdjustment); cdecl; inline;
    procedure unset_placement; cdecl; inline;
    property hadjustment:  PGtkAdjustment read get_hadjustment  { property is writeable but setter not declared } ;
    //property hscrollbar_policy: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_hscrollbar_policy  { property is writeable but setter not declared } ;
    property min_content_height:  gint read get_min_content_height  { property is writeable but setter not declared } ;
    property min_content_width:  gint read get_min_content_width  { property is writeable but setter not declared } ;
    property shadow_type:  TGtkShadowType read get_shadow_type  { property is writeable but setter not declared } ;
    property vadjustment:  PGtkAdjustment read get_vadjustment  { property is writeable but setter not declared } ;
    //property vscrollbar_policy: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_vscrollbar_policy  { property is writeable but setter not declared } ;
    //property window_placement: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_window_placement  { property is writeable but setter not declared } ;
    //property window_placement_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_window_placement_set  { property is writeable but setter not declared } ;
  end;

  PPGtkScrolledWindowClass = ^PGtkScrolledWindowClass;
  PGtkScrolledWindowClass = ^TGtkScrolledWindowClass;
  TGtkScrolledWindowClass = object
    parent_class: TGtkBinClass;
    scrollbar_spacing: gint;
    scroll_child: function(scrolled_window: PGtkScrolledWindow; scroll: TGtkScrollType; horizontal: gboolean): gboolean; cdecl;
    move_focus_out: procedure(scrolled_window: PGtkScrolledWindow; direction: TGtkDirectionType); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkSeparatorPrivate = record
    Unknown: Pointer;
  end;



  PPGtkSeparatorMenuItem = ^PGtkSeparatorMenuItem;
  PGtkSeparatorMenuItem = ^TGtkSeparatorMenuItem;
  TGtkSeparatorMenuItem = object(TGtkMenuItem)
    function new: PGtkSeparatorMenuItem; cdecl; inline; static;
  end;

  PPGtkSeparatorMenuItemClass = ^PGtkSeparatorMenuItemClass;
  PGtkSeparatorMenuItemClass = ^TGtkSeparatorMenuItemClass;
  TGtkSeparatorMenuItemClass = object
    parent_class: TGtkMenuItemClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkSeparatorToolItemPrivate = ^PGtkSeparatorToolItemPrivate;
  PGtkSeparatorToolItemPrivate = ^TGtkSeparatorToolItemPrivate;

  TGtkSeparatorToolItemPrivate = record
    Unknown: Pointer;
  end;



  PPGtkSeparatorToolItem = ^PGtkSeparatorToolItem;
  PGtkSeparatorToolItem = ^TGtkSeparatorToolItem;
  TGtkSeparatorToolItem = object(TGtkToolItem)
    priv4: PGtkSeparatorToolItemPrivate;
    function new: PGtkSeparatorToolItem; cdecl; inline; static;
    function get_draw: gboolean; cdecl; inline;
    procedure set_draw(draw: gboolean); cdecl; inline;
    property draw:  gboolean read get_draw  { property is writeable but setter not declared } ;
  end;

  PPGtkSeparatorToolItemClass = ^PGtkSeparatorToolItemClass;
  PGtkSeparatorToolItemClass = ^TGtkSeparatorToolItemClass;
  TGtkSeparatorToolItemClass = object
    parent_class: TGtkToolItemClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkSettingsValue = ^PGtkSettingsValue;
  PGtkSettingsValue = ^TGtkSettingsValue;

  TGtkSettingsValue = record
    origin: Pgchar;
    value: TGValue;
  end;


  TGtkSettings = object(TGObject)
    priv: PGSettingsPrivate;
    function get_default: PGSettings; cdecl; inline; static;
    function get_for_screen(screen: PGdkScreen): PGSettings; cdecl; inline; static;
    procedure install_property(pspec: PGParamSpec); cdecl; inline; static;
    procedure install_property_parser(pspec: PGParamSpec; parser: TGtkRcPropertyParser); cdecl; inline; static;
    procedure set_double_property(name: Pgchar; v_double: gdouble; origin: Pgchar); cdecl; inline;
    procedure set_long_property(name: Pgchar; v_long: glong; origin: Pgchar); cdecl; inline;
    procedure set_property_value(name: Pgchar; svalue: PGtkSettingsValue); cdecl; inline;
    procedure set_string_property(name: Pgchar; v_string: Pgchar; origin: Pgchar); cdecl; inline;
    //property color_hash: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_color_hash ;
    //property gtk_alternative_button_order: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_alternative_button_order  { property is writeable but setter not declared } ;
    //property gtk_alternative_sort_arrows: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_alternative_sort_arrows  { property is writeable but setter not declared } ;
    //property gtk_application_prefer_dark_theme: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_application_prefer_dark_theme  { property is writeable but setter not declared } ;
    //property gtk_auto_mnemonics: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_auto_mnemonics  { property is writeable but setter not declared } ;
    //property gtk_button_images: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_button_images  { property is writeable but setter not declared } ;
    //property gtk_can_change_accels: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_can_change_accels  { property is writeable but setter not declared } ;
    //property gtk_color_palette: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_color_palette  { property is writeable but setter not declared } ;
    //property gtk_color_scheme: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_color_scheme  { property is writeable but setter not declared } ;
    //property gtk_cursor_blink: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_cursor_blink  { property is writeable but setter not declared } ;
    //property gtk_cursor_blink_time: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_cursor_blink_time  { property is writeable but setter not declared } ;
    //property gtk_cursor_blink_timeout: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_cursor_blink_timeout  { property is writeable but setter not declared } ;
    //property gtk_cursor_theme_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_cursor_theme_name  { property is writeable but setter not declared } ;
    //property gtk_cursor_theme_size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_cursor_theme_size  { property is writeable but setter not declared } ;
    //property gtk_dnd_drag_threshold: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_dnd_drag_threshold  { property is writeable but setter not declared } ;
    //property gtk_double_click_distance: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_double_click_distance  { property is writeable but setter not declared } ;
    //property gtk_double_click_time: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_double_click_time  { property is writeable but setter not declared } ;
    //property gtk_enable_accels: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_enable_accels  { property is writeable but setter not declared } ;
    //property gtk_enable_animations: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_enable_animations  { property is writeable but setter not declared } ;
    //property gtk_enable_event_sounds: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_enable_event_sounds  { property is writeable but setter not declared } ;
    //property gtk_enable_input_feedback_sounds: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_enable_input_feedback_sounds  { property is writeable but setter not declared } ;
    //property gtk_enable_mnemonics: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_enable_mnemonics  { property is writeable but setter not declared } ;
    //property gtk_enable_tooltips: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_enable_tooltips  { property is writeable but setter not declared } ;
    //property gtk_entry_password_hint_timeout: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_entry_password_hint_timeout  { property is writeable but setter not declared } ;
    //property gtk_entry_select_on_focus: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_entry_select_on_focus  { property is writeable but setter not declared } ;
    //property gtk_error_bell: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_error_bell  { property is writeable but setter not declared } ;
    //property gtk_fallback_icon_theme: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_fallback_icon_theme  { property is writeable but setter not declared } ;
    //property gtk_file_chooser_backend: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_file_chooser_backend  { property is writeable but setter not declared } ;
    //property gtk_font_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_font_name  { property is writeable but setter not declared } ;
    //property gtk_fontconfig_timestamp: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_fontconfig_timestamp  { property is writeable but setter not declared } ;
    //property gtk_icon_sizes: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_icon_sizes  { property is writeable but setter not declared } ;
    //property gtk_icon_theme_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_icon_theme_name  { property is writeable but setter not declared } ;
    //property gtk_im_module: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_im_module  { property is writeable but setter not declared } ;
    //property gtk_im_preedit_style: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_im_preedit_style  { property is writeable but setter not declared } ;
    //property gtk_im_status_style: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_im_status_style  { property is writeable but setter not declared } ;
    //property gtk_key_theme_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_key_theme_name  { property is writeable but setter not declared } ;
    //property gtk_keynav_cursor_only: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_keynav_cursor_only  { property is writeable but setter not declared } ;
    //property gtk_keynav_wrap_around: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_keynav_wrap_around  { property is writeable but setter not declared } ;
    //property gtk_label_select_on_focus: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_label_select_on_focus  { property is writeable but setter not declared } ;
    //property gtk_menu_bar_accel: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_menu_bar_accel  { property is writeable but setter not declared } ;
    //property gtk_menu_bar_popup_delay: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_menu_bar_popup_delay  { property is writeable but setter not declared } ;
    //property gtk_menu_images: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_menu_images  { property is writeable but setter not declared } ;
    //property gtk_menu_popdown_delay: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_menu_popdown_delay  { property is writeable but setter not declared } ;
    //property gtk_menu_popup_delay: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_menu_popup_delay  { property is writeable but setter not declared } ;
    //property gtk_modules: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_modules  { property is writeable but setter not declared } ;
    //property gtk_print_backends: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_print_backends  { property is writeable but setter not declared } ;
    //property gtk_print_preview_command: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_print_preview_command  { property is writeable but setter not declared } ;
    //property gtk_recent_files_limit: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_recent_files_limit  { property is writeable but setter not declared } ;
    //property gtk_recent_files_max_age: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_recent_files_max_age  { property is writeable but setter not declared } ;
    //property gtk_scrolled_window_placement: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_scrolled_window_placement  { property is writeable but setter not declared } ;
    //property gtk_show_input_method_menu: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_show_input_method_menu  { property is writeable but setter not declared } ;
    //property gtk_show_unicode_menu: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_show_unicode_menu  { property is writeable but setter not declared } ;
    //property gtk_sound_theme_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_sound_theme_name  { property is writeable but setter not declared } ;
    //property gtk_split_cursor: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_split_cursor  { property is writeable but setter not declared } ;
    //property gtk_theme_name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_theme_name  { property is writeable but setter not declared } ;
    //property gtk_timeout_expand: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_timeout_expand  { property is writeable but setter not declared } ;
    //property gtk_timeout_initial: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_timeout_initial  { property is writeable but setter not declared } ;
    //property gtk_timeout_repeat: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_timeout_repeat  { property is writeable but setter not declared } ;
    //property gtk_toolbar_icon_size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_toolbar_icon_size  { property is writeable but setter not declared } ;
    //property gtk_toolbar_style: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_toolbar_style  { property is writeable but setter not declared } ;
    //property gtk_tooltip_browse_mode_timeout: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_tooltip_browse_mode_timeout  { property is writeable but setter not declared } ;
    //property gtk_tooltip_browse_timeout: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_tooltip_browse_timeout  { property is writeable but setter not declared } ;
    //property gtk_tooltip_timeout: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_tooltip_timeout  { property is writeable but setter not declared } ;
    //property gtk_touchscreen_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_touchscreen_mode  { property is writeable but setter not declared } ;
    //property gtk_visible_focus: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_visible_focus  { property is writeable but setter not declared } ;
    //property gtk_xft_antialias: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_xft_antialias  { property is writeable but setter not declared } ;
    //property gtk_xft_dpi: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_xft_dpi  { property is writeable but setter not declared } ;
    //property gtk_xft_hinting: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_xft_hinting  { property is writeable but setter not declared } ;
    //property gtk_xft_hintstyle: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_xft_hintstyle  { property is writeable but setter not declared } ;
    //property gtk_xft_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_gtk_xft_rgba  { property is writeable but setter not declared } ;
  end;

  PPGtkSettingsClass = ^PGtkSettingsClass;
  PGtkSettingsClass = ^TGtkSettingsClass;
  TGtkSettingsClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkSettingsPrivate = ^PGtkSettingsPrivate;
  PGtkSettingsPrivate = ^TGtkSettingsPrivate;

  TGtkSettingsPrivate = record
    Unknown: Pointer;
  end;



  PPGtkSizeGroupMode = ^PGtkSizeGroupMode;
  PGtkSizeGroupMode = ^TGtkSizeGroupMode;

  PPGtkSizeGroupPrivate = ^PGtkSizeGroupPrivate;
  PGtkSizeGroupPrivate = ^TGtkSizeGroupPrivate;
  TGtkSizeGroup = object(TGObject)
    priv: PGtkSizeGroupPrivate;
    function new(mode: TGtkSizeGroupMode): PGtkSizeGroup; cdecl; inline; static;
    procedure add_widget(widget: PGtkWidget); cdecl; inline;
    function get_ignore_hidden: gboolean; cdecl; inline;
    function get_mode: TGtkSizeGroupMode; cdecl; inline;
    function get_widgets: PGSList; cdecl; inline;
    procedure remove_widget(widget: PGtkWidget); cdecl; inline;
    procedure set_ignore_hidden(ignore_hidden: gboolean); cdecl; inline;
    procedure set_mode(mode: TGtkSizeGroupMode); cdecl; inline;
    property ignore_hidden:  gboolean read get_ignore_hidden  { property is writeable but setter not declared } ;
    property mode:  TGtkSizeGroupMode read get_mode  { property is writeable but setter not declared } ;
  end;

  TGtkSizeGroupPrivate = record
    Unknown: Pointer;
  end;



  PPGtkSizeGroupClass = ^PGtkSizeGroupClass;
  PGtkSizeGroupClass = ^TGtkSizeGroupClass;
  TGtkSizeGroupClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkSocket = ^PGtkSocket;
  PGtkSocket = ^TGtkSocket;
  TGtkSocket = object(TGtkContainer)
    priv2: PGSocketPrivate;
    function new: PGtkSocket; cdecl; inline; static;
    procedure add_id(window: TWindow); cdecl; inline;
    function get_id: TWindow; cdecl; inline;
    function get_plug_window: PGdkWindow; cdecl; inline;
  end;

  PPGtkSocketClass = ^PGtkSocketClass;
  PGtkSocketClass = ^TGtkSocketClass;
  TGtkSocketClass = object
    parent_class: TGtkContainerClass;
    plug_added: procedure(socket_: PGtkSocket); cdecl;
    plug_removed: function(socket_: PGtkSocket): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkSocketPrivate = ^PGtkSocketPrivate;
  PGtkSocketPrivate = ^TGtkSocketPrivate;

  TGtkSocketPrivate = record
    Unknown: Pointer;
  end;



  PPGtkSpinButtonUpdatePolicy = ^PGtkSpinButtonUpdatePolicy;
  PGtkSpinButtonUpdatePolicy = ^TGtkSpinButtonUpdatePolicy;

  PPGtkSpinType = ^PGtkSpinType;
  PGtkSpinType = ^TGtkSpinType;

  PPGtkSpinButtonPrivate = ^PGtkSpinButtonPrivate;
  PGtkSpinButtonPrivate = ^TGtkSpinButtonPrivate;

  TGtkSpinButtonPrivate = record
    Unknown: Pointer;
  end;



  PPGtkSpinButton = ^PGtkSpinButton;
  PGtkSpinButton = ^TGtkSpinButton;
  TGtkSpinButton = object(TGtkEntry)
    priv2: PGtkSpinButtonPrivate;
    function new(adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint): PGtkSpinButton; cdecl; inline; static;
    function new_with_range(min: gdouble; max: gdouble; step: gdouble): PGtkSpinButton; cdecl; inline; static;
    procedure configure(adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint); cdecl; inline;
    function get_adjustment: PGtkAdjustment; cdecl; inline;
    function get_digits: guint; cdecl; inline;
    procedure get_increments(step: Pgdouble; page: Pgdouble); cdecl; inline;
    function get_numeric: gboolean; cdecl; inline;
    procedure get_range(min: Pgdouble; max: Pgdouble); cdecl; inline;
    function get_snap_to_ticks: gboolean; cdecl; inline;
    function get_update_policy: TGtkSpinButtonUpdatePolicy; cdecl; inline;
    function get_value: gdouble; cdecl; inline;
    function get_value_as_int: gint; cdecl; inline;
    function get_wrap: gboolean; cdecl; inline;
    procedure set_adjustment(adjustment: PGtkAdjustment); cdecl; inline;
    procedure set_digits(digits: guint); cdecl; inline;
    procedure set_increments(step: gdouble; page: gdouble); cdecl; inline;
    procedure set_numeric(numeric: gboolean); cdecl; inline;
    procedure set_range(min: gdouble; max: gdouble); cdecl; inline;
    procedure set_snap_to_ticks(snap_to_ticks: gboolean); cdecl; inline;
    procedure set_update_policy(policy: TGtkSpinButtonUpdatePolicy); cdecl; inline;
    procedure set_value(value: gdouble); cdecl; inline;
    procedure set_wrap(wrap: gboolean); cdecl; inline;
    procedure spin(direction: TGtkSpinType; increment: gdouble); cdecl; inline;
    procedure update; cdecl; inline;
    property adjustment:  PGtkAdjustment read get_adjustment  { property is writeable but setter not declared } ;
    //property climb_rate: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_climb_rate  { property is writeable but setter not declared } ;
    property digits:  guint read get_digits  { property is writeable but setter not declared } ;
    property numeric:  gboolean read get_numeric  { property is writeable but setter not declared } ;
    property snap_to_ticks:  gboolean read get_snap_to_ticks  { property is writeable but setter not declared } ;
    property update_policy:  TGtkSpinButtonUpdatePolicy read get_update_policy  { property is writeable but setter not declared } ;
    property value:  gdouble read get_value  { property is writeable but setter not declared } ;
    property wrap:  gboolean read get_wrap  { property is writeable but setter not declared } ;
  end;

  PPGtkSpinButtonClass = ^PGtkSpinButtonClass;
  PGtkSpinButtonClass = ^TGtkSpinButtonClass;
  TGtkSpinButtonClass = object
    parent_class: TGtkEntryClass;
    input: function(spin_button: PGtkSpinButton; new_value: Pgdouble): gint; cdecl;
    output: function(spin_button: PGtkSpinButton): gint; cdecl;
    value_changed: procedure(spin_button: PGtkSpinButton); cdecl;
    change_value: procedure(spin_button: PGtkSpinButton; scroll: TGtkScrollType); cdecl;
    wrapped: procedure(spin_button: PGtkSpinButton); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkSpinnerPrivate = ^PGtkSpinnerPrivate;
  PGtkSpinnerPrivate = ^TGtkSpinnerPrivate;

  TGtkSpinnerPrivate = record
    Unknown: Pointer;
  end;



  PPGtkSpinner = ^PGtkSpinner;
  PGtkSpinner = ^TGtkSpinner;
  TGtkSpinner = object(TGtkWidget)
    priv1: PGtkSpinnerPrivate;
    function new: PGtkSpinner; cdecl; inline; static;
    procedure start; cdecl; inline;
    procedure stop; cdecl; inline;
    //property active: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_active  { property is writeable but setter not declared } ;
  end;

  PPGtkSpinnerClass = ^PGtkSpinnerClass;
  PGtkSpinnerClass = ^TGtkSpinnerClass;
  TGtkSpinnerClass = object
    parent_class: TGtkWidgetClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkStatusIcon = ^PGtkStatusIcon;
  PGtkStatusIcon = ^TGtkStatusIcon;

  PPGtkStatusIconPrivate = ^PGtkStatusIconPrivate;
  PGtkStatusIconPrivate = ^TGtkStatusIconPrivate;
  TGtkStatusIcon = object(TGObject)
    priv: PGtkStatusIconPrivate;
    function new: PGtkStatusIcon; cdecl; inline; static;
    function new_from_file(filename: Pgchar): PGtkStatusIcon; cdecl; inline; static;
    function new_from_gicon(icon: PGIcon): PGtkStatusIcon; cdecl; inline; static;
    function new_from_icon_name(icon_name: Pgchar): PGtkStatusIcon; cdecl; inline; static;
    function new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkStatusIcon; cdecl; inline; static;
    function new_from_stock(stock_id: Pgchar): PGtkStatusIcon; cdecl; inline; static;
    procedure position_menu(menu: PGtkMenu; x: Pgint; y: Pgint; push_in: Pgboolean; user_data: TGtkStatusIcon); cdecl; inline; static;
    function get_geometry(screen: PPGdkScreen; area: PGdkRectangle; orientation: PGtkOrientation): gboolean; cdecl; inline;
    function get_gicon: PGIcon; cdecl; inline;
    function get_has_tooltip: gboolean; cdecl; inline;
    function get_icon_name: Pgchar; cdecl; inline;
    function get_pixbuf: PGdkPixbuf; cdecl; inline;
    function get_screen: PGdkScreen; cdecl; inline;
    function get_size: gint; cdecl; inline;
    function get_stock: Pgchar; cdecl; inline;
    function get_storage_type: TGtkImageType; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_tooltip_markup: Pgchar; cdecl; inline;
    function get_tooltip_text: Pgchar; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    function get_x11_window_id: guint32; cdecl; inline;
    function is_embedded: gboolean; cdecl; inline;
    procedure set_from_file(filename: Pgchar); cdecl; inline;
    procedure set_from_gicon(icon: PGIcon); cdecl; inline;
    procedure set_from_icon_name(icon_name: Pgchar); cdecl; inline;
    procedure set_from_pixbuf(pixbuf: PGdkPixbuf); cdecl; inline;
    procedure set_from_stock(stock_id: Pgchar); cdecl; inline;
    procedure set_has_tooltip(has_tooltip: gboolean); cdecl; inline;
    procedure set_name(name: Pgchar); cdecl; inline;
    procedure set_screen(screen: PGdkScreen); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_tooltip_markup(markup: Pgchar); cdecl; inline;
    procedure set_tooltip_text(text: Pgchar); cdecl; inline;
    procedure set_visible(visible: gboolean); cdecl; inline;
    //property embedded: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_embedded ;
    //property file_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_file  { property is writeable but setter not declared } ;
    property gicon:  PGIcon read get_gicon  { property is writeable but setter not declared } ;
    property has_tooltip:  gboolean read get_has_tooltip  { property is writeable but setter not declared } ;
    property icon_name:  Pgchar read get_icon_name  { property is writeable but setter not declared } ;
    //property orientation: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_orientation ;
    property pixbuf:  PGdkPixbuf read get_pixbuf  { property is writeable but setter not declared } ;
    property screen:  PGdkScreen read get_screen  { property is writeable but setter not declared } ;
    property size:  gint read get_size ;
    property stock:  Pgchar read get_stock  { property is writeable but setter not declared } ;
    property storage_type:  TGtkImageType read get_storage_type ;
    property title:  Pgchar read get_title  { property is writeable but setter not declared } ;
    property tooltip_markup:  Pgchar read get_tooltip_markup  { property is writeable but setter not declared } ;
    property tooltip_text:  Pgchar read get_tooltip_text  { property is writeable but setter not declared } ;
    property visible:  gboolean read get_visible  { property is writeable but setter not declared } ;
  end;

  TGtkStatusIconPrivate = record
    Unknown: Pointer;
  end;



  PPGtkStatusIconClass = ^PGtkStatusIconClass;
  PGtkStatusIconClass = ^TGtkStatusIconClass;
  TGtkStatusIconClass = object
    parent_class: TGObjectClass;
    activate: procedure(status_icon: PGtkStatusIcon); cdecl;
    popup_menu: procedure(status_icon: PGtkStatusIcon; button: guint; activate_time: guint32); cdecl;
    size_changed: function(status_icon: PGtkStatusIcon; size: gint): gboolean; cdecl;
    button_press_event: function(status_icon: PGtkStatusIcon; event: PGdkEventButton): gboolean; cdecl;
    button_release_event: function(status_icon: PGtkStatusIcon; event: PGdkEventButton): gboolean; cdecl;
    scroll_event: function(status_icon: PGtkStatusIcon; event: PGdkEventScroll): gboolean; cdecl;
    query_tooltip: function(status_icon: PGtkStatusIcon; x: gint; y: gint; keyboard_mode: gboolean; tooltip: PGtkTooltip): gboolean; cdecl;
    __gtk_reserved1: Pgpointer;
    __gtk_reserved2: Pgpointer;
    __gtk_reserved3: Pgpointer;
    __gtk_reserved4: Pgpointer;
  end;

  PPGtkStatusbarPrivate = ^PGtkStatusbarPrivate;
  PGtkStatusbarPrivate = ^TGtkStatusbarPrivate;

  TGtkStatusbarPrivate = record
    Unknown: Pointer;
  end;



  PPGtkStatusbar = ^PGtkStatusbar;
  PGtkStatusbar = ^TGtkStatusbar;
  TGtkStatusbar = object(TGtkBox)
    priv3: PGtkStatusbarPrivate;
    function new: PGtkStatusbar; cdecl; inline; static;
    function get_context_id(context_description: Pgchar): guint; cdecl; inline;
    function get_message_area: PGtkWidget; cdecl; inline;
    procedure pop(context_id: guint); cdecl; inline;
    function push(context_id: guint; text: Pgchar): guint; cdecl; inline;
    procedure remove(context_id: guint; message_id: guint); cdecl; inline;
    procedure remove_all(context_id: guint); cdecl; inline;
  end;

  PPGtkStatusbarClass = ^PGtkStatusbarClass;
  PGtkStatusbarClass = ^TGtkStatusbarClass;
  TGtkStatusbarClass = object
    parent_class: TGtkBoxClass;
    reserved: gpointer;
    text_pushed: procedure(statusbar: PGtkStatusbar; context_id: guint; text: Pgchar); cdecl;
    text_popped: procedure(statusbar: PGtkStatusbar; context_id: guint; text: Pgchar); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkStockItem = ^PGtkStockItem;
  PGtkStockItem = ^TGtkStockItem;
  TGtkStockItem = object
    stock_id: Pgchar;
    label_: Pgchar;
    modifier: TGdkModifierType;
    keyval: guint;
    translation_domain: Pgchar;
    function copy: PGtkStockItem; cdecl; inline;
    procedure free; cdecl; inline;
  end;
  TGtkStyle = object(TGObject)
    fg: array [0..4] of TGdkColor;
    bg: array [0..4] of TGdkColor;
    light: array [0..4] of TGdkColor;
    dark: array [0..4] of TGdkColor;
    mid: array [0..4] of TGdkColor;
    text: array [0..4] of TGdkColor;
    base: array [0..4] of TGdkColor;
    text_aa: array [0..4] of TGdkColor;
    black: TGdkColor;
    white: TGdkColor;
    font_desc: PPangoFontDescription;
    xthickness: gint;
    ythickness: gint;
    background: array [0..4] of Pcairo_pattern_t;
    attach_count: gint;
    visual: PGdkVisual;
    private_font_desc: PPangoFontDescription;
    rc_style: PGtkRcStyle;
    styles: PGSList;
    property_cache: gpointer;
    icon_factories: PGSList;
    
    procedure apply_default_background(cr: Pcairo_t; window: PGdkWindow; state_type: TGtkStateType; x: gint; y: gint; width: gint; height: gint); cdecl; inline;
    function attach(window: PGdkWindow): PPangoStyle; cdecl; inline;
    function copy: PPangoStyle; cdecl; inline;
    procedure detach; cdecl; inline;
    //procedure get(widget_type: TGType; first_property_name: Pgchar; args: array of const); cdecl; inline;
    procedure get_style_property(widget_type: TGType; property_name: Pgchar; value: PGValue); cdecl; inline;
    //procedure get_valist(widget_type: TGType; first_property_name: Pgchar; var_args: Tva_list); cdecl; inline;
    function has_context: gboolean; cdecl; inline;
    function lookup_color(color_name: Pgchar; color: PGdkColor): gboolean; cdecl; inline;
    function lookup_icon_set(stock_id: Pgchar): PGtkIconSet; cdecl; inline;
    function render_icon(source: PGtkIconSource; direction: TGtkTextDirection; state: TGtkStateType; size: gint; widget: PGtkWidget; detail: Pgchar): PGdkPixbuf; cdecl; inline;
    procedure set_background(window: PGdkWindow; state_type: TGtkStateType); cdecl; inline;
    //property context: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_context  { property is writeable but setter not declared } ;
  end;

  PPGtkStyleClass = ^PGtkStyleClass;
  PGtkStyleClass = ^TGtkStyleClass;
  TGtkStyleClass = object
    parent_class: TGObjectClass;
    realize: procedure(style: PGtkStyle); cdecl;
    unrealize: procedure(style: PGtkStyle); cdecl;
    copy: procedure(style: PGtkStyle; src: PGtkStyle); cdecl;
    clone: function(style: PGtkStyle): PGtkStyle; cdecl;
    init_from_rc: procedure(style: PGtkStyle; rc_style: PGtkRcStyle); cdecl;
    set_background: procedure(style: PGtkStyle; window: PGdkWindow; state_type: TGtkStateType); cdecl;
    render_icon: function(style: PGtkStyle; source: PGtkIconSource; direction: TGtkTextDirection; state: TGtkStateType; size: gint; widget: PGtkWidget; detail: Pgchar): PGdkPixbuf; cdecl;
    draw_hline: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; x1: gint; x2: gint; y: gint); cdecl;
    draw_vline: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; y1_: gint; y2_: gint; x: gint); cdecl;
    draw_shadow: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl;
    draw_arrow: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; arrow_type: TGtkArrowType; fill: gboolean; x: gint; y: gint; width: gint; height: gint); cdecl;
    draw_diamond: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl;
    draw_box: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl;
    draw_flat_box: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl;
    draw_check: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl;
    draw_option: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl;
    draw_tab: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl;
    draw_shadow_gap: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint; gap_side: TGtkPositionType; gap_x: gint; gap_width: gint); cdecl;
    draw_box_gap: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint; gap_side: TGtkPositionType; gap_x: gint; gap_width: gint); cdecl;
    draw_extension: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint; gap_side: TGtkPositionType); cdecl;
    draw_focus: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl;
    draw_slider: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint; orientation: TGtkOrientation); cdecl;
    draw_handle: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint; orientation: TGtkOrientation); cdecl;
    draw_expander: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; expander_style: TGtkExpanderStyle); cdecl;
    draw_layout: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; use_text: gboolean; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; layout: PPangoLayout); cdecl;
    draw_resize_grip: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; edge: TGdkWindowEdge; x: gint; y: gint; width: gint; height: gint); cdecl;
    draw_spinner: procedure(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; step: guint; x: gint; y: gint; width: gint; height: gint); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
    _gtk_reserved9: procedure; cdecl;
    _gtk_reserved10: procedure; cdecl;
    _gtk_reserved11: procedure; cdecl;
  end;

  TGtkStyleContextPrivate = record
    Unknown: Pointer;
  end;



  PPGtkStyleContextClass = ^PGtkStyleContextClass;
  PGtkStyleContextClass = ^TGtkStyleContextClass;
  TGtkStyleContextClass = object
    parent_class: TGObjectClass;
    changed: procedure(context: PGtkStyleContext); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkStylePropertiesClass = ^PGtkStylePropertiesClass;
  PGtkStylePropertiesClass = ^TGtkStylePropertiesClass;
  TGtkStylePropertiesClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkStyleProviderIface = ^PGtkStyleProviderIface;
  PGtkStyleProviderIface = ^TGtkStyleProviderIface;
  TGtkStyleProviderIface = object
    g_iface: TGTypeInterface;
    get_style: function(provider: PGtkStyleProvider; path: PGtkWidgetPath): PGtkStyleProperties; cdecl;
    get_style_property: function(provider: PGtkStyleProvider; path: PGtkWidgetPath; state: TGtkStateFlags; pspec: PGParamSpec; value: PGValue): gboolean; cdecl;
    get_icon_factory: function(provider: PGtkStyleProvider; path: PGtkWidgetPath): PGtkIconFactory; cdecl;
  end;

  PPGtkSwitchPrivate = ^PGtkSwitchPrivate;
  PGtkSwitchPrivate = ^TGtkSwitchPrivate;

  TGtkSwitchPrivate = record
    Unknown: Pointer;
  end;



  PPGtkSwitch = ^PGtkSwitch;
  PGtkSwitch = ^TGtkSwitch;
  TGtkSwitch = object(TGtkWidget)
    priv1: PGtkSwitchPrivate;
    function new: PGtkSwitch; cdecl; inline; static;
    function get_active: gboolean; cdecl; inline;
    procedure set_active(is_active: gboolean); cdecl; inline;
    property active:  gboolean read get_active  { property is writeable but setter not declared } ;
  end;

  PPGtkSwitchClass = ^PGtkSwitchClass;
  PGtkSwitchClass = ^TGtkSwitchClass;
  TGtkSwitchClass = object
    parent_class: TGtkWidgetClass;
    activate: procedure(sw: PGtkSwitch); cdecl;
    _switch_padding_1: procedure; cdecl;
    _switch_padding_2: procedure; cdecl;
    _switch_padding_3: procedure; cdecl;
    _switch_padding_4: procedure; cdecl;
    _switch_padding_5: procedure; cdecl;
    _switch_padding_6: procedure; cdecl;
  end;

  PPGtkTablePrivate = ^PGtkTablePrivate;
  PGtkTablePrivate = ^TGtkTablePrivate;

  TGtkTablePrivate = record
    Unknown: Pointer;
  end;



  PPGtkTable = ^PGtkTable;
  PGtkTable = ^TGtkTable;

  PPGtkAttachOptions = ^PGtkAttachOptions;
  PGtkAttachOptions = ^TGtkAttachOptions;
  TGtkTable = object(TGtkContainer)
    priv2: PGtkTablePrivate;
    function new(rows: guint; columns: guint; homogeneous: gboolean): PGtkTable; cdecl; inline; static;
    procedure attach(child: PGtkWidget; left_attach: guint; right_attach: guint; top_attach: guint; bottom_attach: guint; xoptions: TGtkAttachOptions; yoptions: TGtkAttachOptions; xpadding: guint; ypadding: guint); cdecl; inline;
    procedure attach_defaults(widget: PGtkWidget; left_attach: guint; right_attach: guint; top_attach: guint; bottom_attach: guint); cdecl; inline;
    function get_col_spacing(column: guint): guint; cdecl; inline;
    function get_default_col_spacing: guint; cdecl; inline;
    function get_default_row_spacing: guint; cdecl; inline;
    function get_homogeneous: gboolean; cdecl; inline;
    function get_row_spacing(row: guint): guint; cdecl; inline;
    procedure get_size(rows: Pguint; columns: Pguint); cdecl; inline;
    procedure resize(rows: guint; columns: guint); cdecl; inline;
    procedure set_col_spacing(column: guint; spacing: guint); cdecl; inline;
    procedure set_col_spacings(spacing: guint); cdecl; inline;
    procedure set_homogeneous(homogeneous: gboolean); cdecl; inline;
    procedure set_row_spacing(row: guint; spacing: guint); cdecl; inline;
    procedure set_row_spacings(spacing: guint); cdecl; inline;
    //property column_spacing: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_column_spacing  { property is writeable but setter not declared } ;
    property homogeneous:  gboolean read get_homogeneous  { property is writeable but setter not declared } ;
    //property n_columns: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_n_columns  { property is writeable but setter not declared } ;
    //property n_rows: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_n_rows  { property is writeable but setter not declared } ;
    //property row_spacing: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_row_spacing  { property is writeable but setter not declared } ;
  end;

  PPGtkTableChild = ^PGtkTableChild;
  PGtkTableChild = ^TGtkTableChild;

  TGtkTableChild = record
    widget: PGtkWidget;
    left_attach: guint16;
    right_attach: guint16;
    top_attach: guint16;
    bottom_attach: guint16;
    xpadding: guint16;
    ypadding: guint16;
    xexpand: guint1 { changed from guint to accomodate 1 bitsize requirement };
    yexpand: guint1 { changed from guint to accomodate 1 bitsize requirement };
    xshrink: guint1 { changed from guint to accomodate 1 bitsize requirement };
    yshrink: guint1 { changed from guint to accomodate 1 bitsize requirement };
    xfill: guint1 { changed from guint to accomodate 1 bitsize requirement };
    yfill: guint1 { changed from guint to accomodate 1 bitsize requirement };
  end;



  PPGtkTableClass = ^PGtkTableClass;
  PGtkTableClass = ^TGtkTableClass;
  TGtkTableClass = object
    parent_class: TGtkContainerClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkTableRowCol = ^PGtkTableRowCol;
  PGtkTableRowCol = ^TGtkTableRowCol;

  TGtkTableRowCol = record
    requisition: guint16;
    allocation: guint16;
    spacing: guint16;
    need_expand: guint1 { changed from guint to accomodate 1 bitsize requirement };
    need_shrink: guint1 { changed from guint to accomodate 1 bitsize requirement };
    expand: guint1 { changed from guint to accomodate 1 bitsize requirement };
    shrink: guint1 { changed from guint to accomodate 1 bitsize requirement };
    empty: guint1 { changed from guint to accomodate 1 bitsize requirement };
  end;


  TGtkTargetFlags = packed object(TBitObject32)
  public
    property same_app: DWord index 1 read GetBit write SetBit;
    property same_widget: DWord index 2 read GetBit write SetBit;
    property other_app: DWord index 4 read GetBit write SetBit;
    property other_widget: DWord index 8 read GetBit write SetBit;
  end;


  PPGtkTearoffMenuItemPrivate = ^PGtkTearoffMenuItemPrivate;
  PGtkTearoffMenuItemPrivate = ^TGtkTearoffMenuItemPrivate;

  TGtkTearoffMenuItemPrivate = record
    Unknown: Pointer;
  end;



  PPGtkTearoffMenuItem = ^PGtkTearoffMenuItem;
  PGtkTearoffMenuItem = ^TGtkTearoffMenuItem;
  TGtkTearoffMenuItem = object(TGtkMenuItem)
    priv4: PGtkTearoffMenuItemPrivate;
    function new: PGtkTearoffMenuItem; cdecl; inline; static;
  end;

  PPGtkTearoffMenuItemClass = ^PGtkTearoffMenuItemClass;
  PGtkTearoffMenuItemClass = ^TGtkTearoffMenuItemClass;
  TGtkTearoffMenuItemClass = object
    parent_class: TGtkMenuItemClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkTextAppearance = ^PGtkTextAppearance;
  PGtkTextAppearance = ^TGtkTextAppearance;

  TGtkTextAppearance = record
    bg_color: TGdkColor;
    fg_color: TGdkColor;
    rise: gint;
    underline: guint4 { changed from guint to accomodate 4 bitsize requirement };
    strikethrough: guint1 { changed from guint to accomodate 1 bitsize requirement };
    draw_bg: guint1 { changed from guint to accomodate 1 bitsize requirement };
    inside_selection: guint1 { changed from guint to accomodate 1 bitsize requirement };
    is_text: guint1 { changed from guint to accomodate 1 bitsize requirement };
    rgba: array [0..1] of PGdkRGBA;
  end;



  PPGtkTextAttributes = ^PGtkTextAttributes;
  PGtkTextAttributes = ^TGtkTextAttributes;
  TGtkTextAttributes = object
    refcount: guint;
    appearance: TGtkTextAppearance;
    justification: TGtkJustification;
    direction: TGtkTextDirection;
    font: PPangoFontDescription;
    font_scale: gdouble;
    left_margin: gint;
    right_margin: gint;
    indent: gint;
    pixels_above_lines: gint;
    pixels_below_lines: gint;
    pixels_inside_wrap: gint;
    tabs: PPangoTabArray;
    wrap_mode: TPangoWrapMode;
    language: PPangoLanguage;
    pg_bg_color: PGdkColor;
    invisible: guint1 { changed from guint to accomodate 1 bitsize requirement };
    bg_full_height: guint1 { changed from guint to accomodate 1 bitsize requirement };
    editable: guint1 { changed from guint to accomodate 1 bitsize requirement };
    pg_bg_rgba: PGdkRGBA;
    padding: array [0..2] of guint;
    function new: PGtkTextAttributes; cdecl; inline; static;
    function copy: PGtkTextAttributes; cdecl; inline;
    procedure copy_values(dest: PGtkTextAttributes); cdecl; inline;
    function ref: PGtkTextAttributes; cdecl; inline;
    procedure unref; cdecl; inline;
  end;

  PPGtkTextBTree = ^PGtkTextBTree;
  PGtkTextBTree = ^TGtkTextBTree;

  TGtkTextBTree = record
    Unknown: Pointer;
  end;



  PPGtkTextTagTableForeach = ^PGtkTextTagTableForeach;
  PGtkTextTagTableForeach = ^TGtkTextTagTableForeach;
  TGtkTextTagTableForeach = procedure(tag: PGtkTextTag; data: gpointer); cdecl;

  PPGtkTextTagTablePrivate = ^PGtkTextTagTablePrivate;
  PGtkTextTagTablePrivate = ^TGtkTextTagTablePrivate;
  TGtkTextTagTable = object(TGObject)
    priv: PGtkTextTagTablePrivate;
    function new: PGtkTextTagTable; cdecl; inline; static;
    procedure add(tag: PGtkTextTag); cdecl; inline;
    procedure foreach(func: TGtkTextTagTableForeach; data: gpointer); cdecl; inline;
    function get_size: gint; cdecl; inline;
    function lookup(name: Pgchar): PGtkTextTag; cdecl; inline;
    procedure remove(tag: PGtkTextTag); cdecl; inline;
  end;

  PPGtkTextTagPrivate = ^PGtkTextTagPrivate;
  PGtkTextTagPrivate = ^TGtkTextTagPrivate;
  TGtkTextTag = object(TGObject)
    priv: PGtkTextTagPrivate;
    function new(name: Pgchar): PGtkTextTag; cdecl; inline; static;
    function event(event_object: PGObject; event: PGdkEvent; iter: PGtkTextIter): gboolean; cdecl; inline;
    function get_priority: gint; cdecl; inline;
    procedure set_priority(priority: gint); cdecl; inline;
    //property accumulative_margin: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_accumulative_margin  { property is writeable but setter not declared } ;
    //property background: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background  { property is writeable but setter not declared } ;
    //property background_full_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_full_height  { property is writeable but setter not declared } ;
    //property background_full_height_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_full_height_set  { property is writeable but setter not declared } ;
    //property background_gdk: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_gdk  { property is writeable but setter not declared } ;
    //property background_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_rgba  { property is writeable but setter not declared } ;
    //property background_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_background_set  { property is writeable but setter not declared } ;
    //property direction: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_direction  { property is writeable but setter not declared } ;
    //property editable: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editable  { property is writeable but setter not declared } ;
    //property editable_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_editable_set  { property is writeable but setter not declared } ;
    //property family: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_family  { property is writeable but setter not declared } ;
    //property family_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_family_set  { property is writeable but setter not declared } ;
    //property font: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_font  { property is writeable but setter not declared } ;
    //property font_desc: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_font_desc  { property is writeable but setter not declared } ;
    //property foreground: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground  { property is writeable but setter not declared } ;
    //property foreground_gdk: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground_gdk  { property is writeable but setter not declared } ;
    //property foreground_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground_rgba  { property is writeable but setter not declared } ;
    //property foreground_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_foreground_set  { property is writeable but setter not declared } ;
    //property indent: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_indent  { property is writeable but setter not declared } ;
    //property indent_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_indent_set  { property is writeable but setter not declared } ;
    //property invisible: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_invisible  { property is writeable but setter not declared } ;
    //property invisible_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_invisible_set  { property is writeable but setter not declared } ;
    //property justification: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_justification  { property is writeable but setter not declared } ;
    //property justification_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_justification_set  { property is writeable but setter not declared } ;
    //property language: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_language  { property is writeable but setter not declared } ;
    //property language_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_language_set  { property is writeable but setter not declared } ;
    //property left_margin: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_left_margin  { property is writeable but setter not declared } ;
    //property left_margin_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_left_margin_set  { property is writeable but setter not declared } ;
    //property name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_name  { property is writeable but setter not declared } ;
    //property paragraph_background: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_paragraph_background  { property is writeable but setter not declared } ;
    //property paragraph_background_gdk: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_paragraph_background_gdk  { property is writeable but setter not declared } ;
    //property paragraph_background_rgba: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_paragraph_background_rgba  { property is writeable but setter not declared } ;
    //property paragraph_background_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_paragraph_background_set  { property is writeable but setter not declared } ;
    //property pixels_above_lines: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_above_lines  { property is writeable but setter not declared } ;
    //property pixels_above_lines_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_above_lines_set  { property is writeable but setter not declared } ;
    //property pixels_below_lines: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_below_lines  { property is writeable but setter not declared } ;
    //property pixels_below_lines_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_below_lines_set  { property is writeable but setter not declared } ;
    //property pixels_inside_wrap: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_inside_wrap  { property is writeable but setter not declared } ;
    //property pixels_inside_wrap_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_pixels_inside_wrap_set  { property is writeable but setter not declared } ;
    //property right_margin: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_right_margin  { property is writeable but setter not declared } ;
    //property right_margin_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_right_margin_set  { property is writeable but setter not declared } ;
    //property rise: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_rise  { property is writeable but setter not declared } ;
    //property rise_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_rise_set  { property is writeable but setter not declared } ;
    //property scale: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scale  { property is writeable but setter not declared } ;
    //property scale_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_scale_set  { property is writeable but setter not declared } ;
    //property size: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size  { property is writeable but setter not declared } ;
    //property size_points: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size_points  { property is writeable but setter not declared } ;
    //property size_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_size_set  { property is writeable but setter not declared } ;
    //property stretch: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stretch  { property is writeable but setter not declared } ;
    //property stretch_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_stretch_set  { property is writeable but setter not declared } ;
    //property strikethrough: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_strikethrough  { property is writeable but setter not declared } ;
    //property strikethrough_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_strikethrough_set  { property is writeable but setter not declared } ;
    //property style: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_style  { property is writeable but setter not declared } ;
    //property style_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_style_set  { property is writeable but setter not declared } ;
    //property tabs: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tabs  { property is writeable but setter not declared } ;
    //property tabs_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_tabs_set  { property is writeable but setter not declared } ;
    //property underline: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_underline  { property is writeable but setter not declared } ;
    //property underline_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_underline_set  { property is writeable but setter not declared } ;
    //property variant: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_variant  { property is writeable but setter not declared } ;
    //property variant_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_variant_set  { property is writeable but setter not declared } ;
    //property weight: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_weight  { property is writeable but setter not declared } ;
    //property weight_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_weight_set  { property is writeable but setter not declared } ;
    //property wrap_mode: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_wrap_mode  { property is writeable but setter not declared } ;
    //property wrap_mode_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_wrap_mode_set  { property is writeable but setter not declared } ;
  end;

  PPGtkTextCharPredicate = ^PGtkTextCharPredicate;
  PGtkTextCharPredicate = ^TGtkTextCharPredicate;
  TGtkTextCharPredicate = function(ch: gunichar; user_data: gpointer): gboolean; cdecl;

  PPGtkTextSearchFlags = ^PGtkTextSearchFlags;
  PGtkTextSearchFlags = ^TGtkTextSearchFlags;
  TGtkTextSearchFlags = packed object(TBitObject32)
  public
    property visible_only: DWord index 1 read GetBit write SetBit;
    property text_only: DWord index 2 read GetBit write SetBit;
    property case_insensitive: DWord index 4 read GetBit write SetBit;
  end;

  TGtkTextIter = object
    dummy1: gpointer;
    dummy2: gpointer;
    dummy3: gint;
    dummy4: gint;
    dummy5: gint;
    dummy6: gint;
    dummy7: gint;
    dummy8: gint;
    dummy9: gpointer;
    dummy10: gpointer;
    dummy11: gint;
    dummy12: gint;
    dummy13: gint;
    dummy14: gpointer;
    procedure assign(other: PGtkTextIter); cdecl; inline;
    function backward_char: gboolean; cdecl; inline;
    function backward_chars(count: gint): gboolean; cdecl; inline;
    function backward_cursor_position: gboolean; cdecl; inline;
    function backward_cursor_positions(count: gint): gboolean; cdecl; inline;
    function backward_find_char(pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl; inline;
    function backward_line: gboolean; cdecl; inline;
    function backward_lines(count: gint): gboolean; cdecl; inline;
    function backward_search(str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl; inline;
    function backward_sentence_start: gboolean; cdecl; inline;
    function backward_sentence_starts(count: gint): gboolean; cdecl; inline;
    function backward_to_tag_toggle(tag: PGtkTextTag): gboolean; cdecl; inline;
    function backward_visible_cursor_position: gboolean; cdecl; inline;
    function backward_visible_cursor_positions(count: gint): gboolean; cdecl; inline;
    function backward_visible_line: gboolean; cdecl; inline;
    function backward_visible_lines(count: gint): gboolean; cdecl; inline;
    function backward_visible_word_start: gboolean; cdecl; inline;
    function backward_visible_word_starts(count: gint): gboolean; cdecl; inline;
    function backward_word_start: gboolean; cdecl; inline;
    function backward_word_starts(count: gint): gboolean; cdecl; inline;
    function begins_tag(tag: PGtkTextTag): gboolean; cdecl; inline;
    function can_insert(default_editability: gboolean): gboolean; cdecl; inline;
    function compare(rhs: PGtkTextIter): gint; cdecl; inline;
    function copy: PGtkTextIter; cdecl; inline;
    function editable(default_setting: gboolean): gboolean; cdecl; inline;
    function ends_line: gboolean; cdecl; inline;
    function ends_sentence: gboolean; cdecl; inline;
    function ends_tag(tag: PGtkTextTag): gboolean; cdecl; inline;
    function ends_word: gboolean; cdecl; inline;
    function equal(rhs: PGtkTextIter): gboolean; cdecl; inline;
    function forward_char: gboolean; cdecl; inline;
    function forward_chars(count: gint): gboolean; cdecl; inline;
    function forward_cursor_position: gboolean; cdecl; inline;
    function forward_cursor_positions(count: gint): gboolean; cdecl; inline;
    function forward_find_char(pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl; inline;
    function forward_line: gboolean; cdecl; inline;
    function forward_lines(count: gint): gboolean; cdecl; inline;
    function forward_search(str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl; inline;
    function forward_sentence_end: gboolean; cdecl; inline;
    function forward_sentence_ends(count: gint): gboolean; cdecl; inline;
    procedure forward_to_end; cdecl; inline;
    function forward_to_line_end: gboolean; cdecl; inline;
    function forward_to_tag_toggle(tag: PGtkTextTag): gboolean; cdecl; inline;
    function forward_visible_cursor_position: gboolean; cdecl; inline;
    function forward_visible_cursor_positions(count: gint): gboolean; cdecl; inline;
    function forward_visible_line: gboolean; cdecl; inline;
    function forward_visible_lines(count: gint): gboolean; cdecl; inline;
    function forward_visible_word_end: gboolean; cdecl; inline;
    function forward_visible_word_ends(count: gint): gboolean; cdecl; inline;
    function forward_word_end: gboolean; cdecl; inline;
    function forward_word_ends(count: gint): gboolean; cdecl; inline;
    procedure free; cdecl; inline;
    function get_attributes(values: PGtkTextAttributes): gboolean; cdecl; inline;
    function get_buffer: PGtkTextBuffer; cdecl; inline;
    function get_bytes_in_line: gint; cdecl; inline;
    function get_char: gunichar; cdecl; inline;
    function get_chars_in_line: gint; cdecl; inline;
    function get_child_anchor: PGtkTextChildAnchor; cdecl; inline;
    function get_language: PPangoLanguage; cdecl; inline;
    function get_line: gint; cdecl; inline;
    function get_line_index: gint; cdecl; inline;
    function get_line_offset: gint; cdecl; inline;
    function get_marks: PGSList; cdecl; inline;
    function get_offset: gint; cdecl; inline;
    function get_pixbuf: PGdkPixbuf; cdecl; inline;
    function get_slice(end_: PGtkTextIter): Pgchar; cdecl; inline;
    function get_tags: PGSList; cdecl; inline;
    function get_text(end_: PGtkTextIter): Pgchar; cdecl; inline;
    function get_toggled_tags(toggled_on: gboolean): PGSList; cdecl; inline;
    function get_visible_line_index: gint; cdecl; inline;
    function get_visible_line_offset: gint; cdecl; inline;
    function get_visible_slice(end_: PGtkTextIter): Pgchar; cdecl; inline;
    function get_visible_text(end_: PGtkTextIter): Pgchar; cdecl; inline;
    function has_tag(tag: PGtkTextTag): gboolean; cdecl; inline;
    function in_range(start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl; inline;
    function inside_sentence: gboolean; cdecl; inline;
    function inside_word: gboolean; cdecl; inline;
    function is_cursor_position: gboolean; cdecl; inline;
    function is_end: gboolean; cdecl; inline;
    function is_start: gboolean; cdecl; inline;
    procedure order(second: PGtkTextIter); cdecl; inline;
    procedure set_line(line_number: gint); cdecl; inline;
    procedure set_line_index(byte_on_line: gint); cdecl; inline;
    procedure set_line_offset(char_on_line: gint); cdecl; inline;
    procedure set_offset(char_offset: gint); cdecl; inline;
    procedure set_visible_line_index(byte_on_line: gint); cdecl; inline;
    procedure set_visible_line_offset(char_on_line: gint); cdecl; inline;
    function starts_line: gboolean; cdecl; inline;
    function starts_sentence: gboolean; cdecl; inline;
    function starts_word: gboolean; cdecl; inline;
    function toggles_tag(tag: PGtkTextTag): gboolean; cdecl; inline;
  end;
  TGtkTextChildAnchor = object(TGObject)
    segment: gpointer;
    function new: PGtkTextChildAnchor; cdecl; inline; static;
    function get_deleted: gboolean; cdecl; inline;
    function get_widgets: PGList; cdecl; inline;
  end;
  TGtkTextMark = object(TGObject)
    segment: gpointer;
    function new(name: Pgchar; left_gravity: gboolean): PGtkTextMark; cdecl; inline; static;
    function get_buffer: PGtkTextBuffer; cdecl; inline;
    function get_deleted: gboolean; cdecl; inline;
    function get_left_gravity: gboolean; cdecl; inline;
    function get_name: Pgchar; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    procedure set_visible(setting: gboolean); cdecl; inline;
    property left_gravity:  gboolean read get_left_gravity  { property is writeable but setter not declared } ;
    property name:  Pgchar read get_name  { property is writeable but setter not declared } ;
  end;

  TGtkTextBufferPrivate = record
    Unknown: Pointer;
  end;



  PPGtkTextBufferClass = ^PGtkTextBufferClass;
  PGtkTextBufferClass = ^TGtkTextBufferClass;
  TGtkTextBufferClass = object
    parent_class: TGObjectClass;
    insert_text: procedure(buffer: PGtkTextBuffer; pos: PGtkTextIter; new_text: Pgchar; new_text_length: gint); cdecl;
    insert_pixbuf: procedure(buffer: PGtkTextBuffer; iter: PGtkTextIter; pixbuf: PGdkPixbuf); cdecl;
    insert_child_anchor: procedure(buffer: PGtkTextBuffer; iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl;
    delete_range: procedure(buffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
    changed: procedure(buffer: PGtkTextBuffer); cdecl;
    modified_changed: procedure(buffer: PGtkTextBuffer); cdecl;
    mark_set: procedure(buffer: PGtkTextBuffer; location: PGtkTextIter; mark: PGtkTextMark); cdecl;
    mark_deleted: procedure(buffer: PGtkTextBuffer; mark: PGtkTextMark); cdecl;
    apply_tag: procedure(buffer: PGtkTextBuffer; tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
    remove_tag: procedure(buffer: PGtkTextBuffer; tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
    begin_user_action: procedure(buffer: PGtkTextBuffer); cdecl;
    end_user_action: procedure(buffer: PGtkTextBuffer); cdecl;
    paste_done: procedure(buffer: PGtkTextBuffer; clipboard: PGtkClipboard); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkTextBufferTargetInfo = ^PGtkTextBufferTargetInfo;
  PGtkTextBufferTargetInfo = ^TGtkTextBufferTargetInfo;

  PPGtkTextChildAnchorClass = ^PGtkTextChildAnchorClass;
  PGtkTextChildAnchorClass = ^TGtkTextChildAnchorClass;
  TGtkTextChildAnchorClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkTextMarkClass = ^PGtkTextMarkClass;
  PGtkTextMarkClass = ^TGtkTextMarkClass;
  TGtkTextMarkClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkTextTagPrivate = record
    Unknown: Pointer;
  end;



  PPGtkTextTagClass = ^PGtkTextTagClass;
  PGtkTextTagClass = ^TGtkTextTagClass;
  TGtkTextTagClass = object
    parent_class: TGObjectClass;
    event: function(tag: PGtkTextTag; event_object: PGObject; event: PGdkEvent; iter: PGtkTextIter): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkTextTagTablePrivate = record
    Unknown: Pointer;
  end;



  PPGtkTextTagTableClass = ^PGtkTextTagTableClass;
  PGtkTextTagTableClass = ^TGtkTextTagTableClass;
  TGtkTextTagTableClass = object
    parent_class: TGObjectClass;
    tag_changed: procedure(table: PGtkTextTagTable; tag: PGtkTextTag; size_changed: gboolean); cdecl;
    tag_added: procedure(table: PGtkTextTagTable; tag: PGtkTextTag); cdecl;
    tag_removed: procedure(table: PGtkTextTagTable; tag: PGtkTextTag); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkTextWindowType = ^PGtkTextWindowType;
  PGtkTextWindowType = ^TGtkTextWindowType;

  PPGtkTextViewPrivate = ^PGtkTextViewPrivate;
  PGtkTextViewPrivate = ^TGtkTextViewPrivate;

  TGtkTextViewPrivate = record
    Unknown: Pointer;
  end;



  PPGtkTextView = ^PGtkTextView;
  PGtkTextView = ^TGtkTextView;
  TGtkTextView = object(TGtkContainer)
    priv2: PGtkTextViewPrivate;
    function new: PGtkTextView; cdecl; inline; static;
    function new_with_buffer(buffer: PGtkTextBuffer): PGtkTextView; cdecl; inline; static;
    procedure add_child_at_anchor(child: PGtkWidget; anchor: PGtkTextChildAnchor); cdecl; inline;
    procedure add_child_in_window(child: PGtkWidget; which_window: TGtkTextWindowType; xpos: gint; ypos: gint); cdecl; inline;
    function backward_display_line(iter: PGtkTextIter): gboolean; cdecl; inline;
    function backward_display_line_start(iter: PGtkTextIter): gboolean; cdecl; inline;
    procedure buffer_to_window_coords(win: TGtkTextWindowType; buffer_x: gint; buffer_y: gint; window_x: Pgint; window_y: Pgint); cdecl; inline;
    function forward_display_line(iter: PGtkTextIter): gboolean; cdecl; inline;
    function forward_display_line_end(iter: PGtkTextIter): gboolean; cdecl; inline;
    function get_accepts_tab: gboolean; cdecl; inline;
    function get_border_window_size(type_: TGtkTextWindowType): gint; cdecl; inline;
    function get_buffer: PGtkTextBuffer; cdecl; inline;
    procedure get_cursor_locations(iter: PGtkTextIter; strong: PGdkRectangle; weak: PGdkRectangle); cdecl; inline;
    function get_cursor_visible: gboolean; cdecl; inline;
    function get_default_attributes: PGtkTextAttributes; cdecl; inline;
    function get_editable: gboolean; cdecl; inline;
    
    function get_indent: gint; cdecl; inline;
    procedure get_iter_at_location(iter: PGtkTextIter; x: gint; y: gint); cdecl; inline;
    procedure get_iter_at_position(iter: PGtkTextIter; trailing: Pgint; x: gint; y: gint); cdecl; inline;
    procedure get_iter_location(iter: PGtkTextIter; location: PGdkRectangle); cdecl; inline;
    function get_justification: TGtkJustification; cdecl; inline;
    function get_left_margin: gint; cdecl; inline;
    procedure get_line_at_y(target_iter: PGtkTextIter; y: gint; line_top: Pgint); cdecl; inline;
    procedure get_line_yrange(iter: PGtkTextIter; y: Pgint; height: Pgint); cdecl; inline;
    function get_overwrite: gboolean; cdecl; inline;
    function get_pixels_above_lines: gint; cdecl; inline;
    function get_pixels_below_lines: gint; cdecl; inline;
    function get_pixels_inside_wrap: gint; cdecl; inline;
    function get_right_margin: gint; cdecl; inline;
    function get_tabs: PPangoTabArray; cdecl; inline;
    
    procedure get_visible_rect(visible_rect: PGdkRectangle); cdecl; inline;
    function get_window(win: TGtkTextWindowType): PGdkWindow; cdecl; inline;
    function get_window_type(window: PGdkWindow): TGtkTextWindowType; cdecl; inline;
    function get_wrap_mode: TPangoWrapMode; cdecl; inline;
    function im_context_filter_keypress(event: PGdkEventKey): gboolean; cdecl; inline;
    procedure move_child(child: PGtkWidget; xpos: gint; ypos: gint); cdecl; inline;
    function move_mark_onscreen(mark: PGtkTextMark): gboolean; cdecl; inline;
    function move_visually(iter: PGtkTextIter; count: gint): gboolean; cdecl; inline;
    function place_cursor_onscreen: gboolean; cdecl; inline;
    procedure reset_im_context; cdecl; inline;
    procedure scroll_mark_onscreen(mark: PGtkTextMark); cdecl; inline;
    function scroll_to_iter(iter: PGtkTextIter; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble): gboolean; cdecl; inline;
    procedure scroll_to_mark(mark: PGtkTextMark; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble); cdecl; inline;
    procedure set_accepts_tab(accepts_tab: gboolean); cdecl; inline;
    procedure set_border_window_size(type_: TGtkTextWindowType; size: gint); cdecl; inline;
    procedure set_buffer(buffer: PGtkTextBuffer); cdecl; inline;
    procedure set_cursor_visible(setting: gboolean); cdecl; inline;
    procedure set_editable(setting: gboolean); cdecl; inline;
    procedure set_indent(indent: gint); cdecl; inline;
    procedure set_justification(justification: TGtkJustification); cdecl; inline;
    procedure set_left_margin(left_margin: gint); cdecl; inline;
    procedure set_overwrite(overwrite: gboolean); cdecl; inline;
    procedure set_pixels_above_lines(pixels_above_lines: gint); cdecl; inline;
    procedure set_pixels_below_lines(pixels_below_lines: gint); cdecl; inline;
    procedure set_pixels_inside_wrap(pixels_inside_wrap: gint); cdecl; inline;
    procedure set_right_margin(right_margin: gint); cdecl; inline;
    procedure set_tabs(tabs: PPangoTabArray); cdecl; inline;
    procedure set_wrap_mode(wrap_mode: TPangoWrapMode); cdecl; inline;
    function starts_display_line(iter: PGtkTextIter): gboolean; cdecl; inline;
    procedure window_to_buffer_coords(win: TGtkTextWindowType; window_x: gint; window_y: gint; buffer_x: Pgint; buffer_y: Pgint); cdecl; inline;
    property accepts_tab:  gboolean read get_accepts_tab  { property is writeable but setter not declared } ;
    property buffer:  PGtkTextBuffer read get_buffer  { property is writeable but setter not declared } ;
    property cursor_visible:  gboolean read get_cursor_visible  { property is writeable but setter not declared } ;
    property editable:  gboolean read get_editable  { property is writeable but setter not declared } ;
    //property im_module: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_im_module  { property is writeable but setter not declared } ;
    property indent:  gint read get_indent  { property is writeable but setter not declared } ;
    property justification:  TGtkJustification read get_justification  { property is writeable but setter not declared } ;
    property left_margin:  gint read get_left_margin  { property is writeable but setter not declared } ;
    property overwrite:  gboolean read get_overwrite  { property is writeable but setter not declared } ;
    property pixels_above_lines:  gint read get_pixels_above_lines  { property is writeable but setter not declared } ;
    property pixels_below_lines:  gint read get_pixels_below_lines  { property is writeable but setter not declared } ;
    property pixels_inside_wrap:  gint read get_pixels_inside_wrap  { property is writeable but setter not declared } ;
    property right_margin:  gint read get_right_margin  { property is writeable but setter not declared } ;
    property tabs:  PPangoTabArray read get_tabs  { property is writeable but setter not declared } ;
    property wrap_mode:  TPangoWrapMode read get_wrap_mode  { property is writeable but setter not declared } ;
  end;

  PPGtkTextViewClass = ^PGtkTextViewClass;
  PGtkTextViewClass = ^TGtkTextViewClass;
  TGtkTextViewClass = object
    parent_class: TGtkContainerClass;
    populate_popup: procedure(text_view: PGtkTextView; menu: PGtkMenu); cdecl;
    move_cursor: procedure(text_view: PGtkTextView; step: TGtkMovementStep; count: gint; extend_selection: gboolean); cdecl;
    set_anchor: procedure(text_view: PGtkTextView); cdecl;
    insert_at_cursor: procedure(text_view: PGtkTextView; str: Pgchar); cdecl;
    delete_from_cursor: procedure(text_view: PGtkTextView; type_: TGtkDeleteType; count: gint); cdecl;
    backspace: procedure(text_view: PGtkTextView); cdecl;
    cut_clipboard: procedure(text_view: PGtkTextView); cdecl;
    copy_clipboard: procedure(text_view: PGtkTextView); cdecl;
    paste_clipboard: procedure(text_view: PGtkTextView); cdecl;
    toggle_overwrite: procedure(text_view: PGtkTextView); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  PPGtkThemeEngine = ^PGtkThemeEngine;
  PGtkThemeEngine = ^TGtkThemeEngine;

  TGtkThemeEngine = record
    Unknown: Pointer;
  end;



  PPGtkThemingEngine = ^PGtkThemingEngine;
  PGtkThemingEngine = ^TGtkThemingEngine;

  PPGtkThemingEnginePrivate = ^PGtkThemingEnginePrivate;
  PGtkThemingEnginePrivate = ^TGtkThemingEnginePrivate;
  TGtkThemingEngine = object(TGObject)
    priv: PGtkThemingEnginePrivate;
    function load(name: Pgchar): PGtkThemingEngine; cdecl; inline; static;
    procedure register_property(name_space: Pgchar; parse_func: TGtkStylePropertyParser; pspec: PGParamSpec); cdecl; inline; static;
    //procedure get(state: TGtkStateFlags; args: array of const); cdecl; inline;
    procedure get_background_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl; inline;
    procedure get_border(state: TGtkStateFlags; border: PGtkBorder); cdecl; inline;
    procedure get_border_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl; inline;
    procedure get_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl; inline;
    function get_direction: TGtkTextDirection; cdecl; inline;
    function get_font(state: TGtkStateFlags): PPangoFontDescription; cdecl; inline;
    function get_junction_sides: TGtkJunctionSides; cdecl; inline;
    procedure get_margin(state: TGtkStateFlags; margin: PGtkBorder); cdecl; inline;
    procedure get_padding(state: TGtkStateFlags; padding: PGtkBorder); cdecl; inline;
    function get_path: PGtkWidgetPath; cdecl; inline;
    procedure get_property(property_: Pgchar; state: TGtkStateFlags; value: PGValue); cdecl; inline;
    function get_screen: PGdkScreen; cdecl; inline;
    function get_state: TGtkStateFlags; cdecl; inline;
    //procedure get_style(args: array of const); cdecl; inline;
    procedure get_style_property(property_name: Pgchar; value: PGValue); cdecl; inline;
    //procedure get_style_valist(args: Tva_list); cdecl; inline;
    //procedure get_valist(state: TGtkStateFlags; args: Tva_list); cdecl; inline;
    function has_class(style_class: Pgchar): gboolean; cdecl; inline;
    function has_region(style_region: Pgchar; flags: PGtkRegionFlags): gboolean; cdecl; inline;
    function lookup_color(color_name: Pgchar; color: PGdkRGBA): gboolean; cdecl; inline;
    function state_is_running(state: TGtkStateType; progress: Pgdouble): gboolean; cdecl; inline;
    //property name: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_name  { property is writeable but setter not declared } ;
  end;

  TGtkThemingEnginePrivate = record
    Unknown: Pointer;
  end;



  PPGtkThemingEngineClass = ^PGtkThemingEngineClass;
  PGtkThemingEngineClass = ^TGtkThemingEngineClass;
  TGtkThemingEngineClass = object
    parent_class: TGObjectClass;
    render_line: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x0: gdouble; y0: gdouble; x1: gdouble; y1: gdouble); cdecl;
    render_background: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl;
    render_frame: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl;
    render_frame_gap: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble; gap_side: TGtkPositionType; xy0_gap: gdouble; xy1_gap: gdouble); cdecl;
    render_extension: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble; gap_side: TGtkPositionType); cdecl;
    render_check: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl;
    render_option: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl;
    render_arrow: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; angle: gdouble; x: gdouble; y: gdouble; size: gdouble); cdecl;
    render_expander: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl;
    render_focus: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl;
    render_layout: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; layout: PPangoLayout); cdecl;
    render_slider: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble; orientation: TGtkOrientation); cdecl;
    render_handle: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl;
    render_activity: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl;
    render_icon_pixbuf: function(engine: PGtkThemingEngine; source: PGtkIconSource; size: TGtkIconSize): PGdkPixbuf; cdecl;
    render_icon: procedure(engine: PGtkThemingEngine; cr: Pcairo_t; pixbuf: PGdkPixbuf; x: gdouble; y: gdouble); cdecl;
    padding: array [0..14] of gpointer;
  end;

  TGtkToggleActionPrivate = record
    Unknown: Pointer;
  end;



  TGtkToggleButtonPrivate = record
    Unknown: Pointer;
  end;



  TGtkToggleToolButtonPrivate = record
    Unknown: Pointer;
  end;



  TGtkToolButtonPrivate = record
    Unknown: Pointer;
  end;



  TGtkToolItemPrivate = record
    Unknown: Pointer;
  end;



  PPGtkToolShell = ^PGtkToolShell;
  PGtkToolShell = ^TGtkToolShell;
  TGtkToolShell = object
    function get_ellipsize_mode: TPangoEllipsizeMode; cdecl; inline;
    function get_icon_size: gint; cdecl; inline;
    function get_orientation: TGtkOrientation; cdecl; inline;
    function get_relief_style: TGtkReliefStyle; cdecl; inline;
    function get_style: TGtkToolbarStyle; cdecl; inline;
    function get_text_alignment: gfloat; cdecl; inline;
    function get_text_orientation: TGtkOrientation; cdecl; inline;
    function get_text_size_group: PGtkSizeGroup; cdecl; inline;
    procedure rebuild_menu; cdecl; inline;
  end;

  PPGtkToolItemGroupPrivate = ^PGtkToolItemGroupPrivate;
  PGtkToolItemGroupPrivate = ^TGtkToolItemGroupPrivate;

  TGtkToolItemGroupPrivate = record
    Unknown: Pointer;
  end;



  PPGtkToolItemGroup = ^PGtkToolItemGroup;
  PGtkToolItemGroup = ^TGtkToolItemGroup;
  TGtkToolItemGroup = object(TGtkContainer)
    priv2: PGtkToolItemGroupPrivate;
    function new(label_: Pgchar): PGtkToolItemGroup; cdecl; inline; static;
    function get_collapsed: gboolean; cdecl; inline;
    function get_drop_item(x: gint; y: gint): PGtkToolItem; cdecl; inline;
    function get_ellipsize: TPangoEllipsizeMode; cdecl; inline;
    function get_header_relief: TGtkReliefStyle; cdecl; inline;
    function get_item_position(item: PGtkToolItem): gint; cdecl; inline;
    function get_label: Pgchar; cdecl; inline;
    function get_label_widget: PGtkWidget; cdecl; inline;
    function get_n_items: guint; cdecl; inline;
    function get_nth_item(index: guint): PGtkToolItem; cdecl; inline;
    procedure insert(item: PGtkToolItem; position: gint); cdecl; inline;
    procedure set_collapsed(collapsed: gboolean); cdecl; inline;
    procedure set_ellipsize(ellipsize: TPangoEllipsizeMode); cdecl; inline;
    procedure set_header_relief(style: TGtkReliefStyle); cdecl; inline;
    procedure set_item_position(item: PGtkToolItem; position: gint); cdecl; inline;
    procedure set_label(label_: Pgchar); cdecl; inline;
    procedure set_label_widget(label_widget: PGtkWidget); cdecl; inline;
    property collapsed:  gboolean read get_collapsed  { property is writeable but setter not declared } ;
    property ellipsize:  TPangoEllipsizeMode read get_ellipsize  { property is writeable but setter not declared } ;
    property header_relief:  TGtkReliefStyle read get_header_relief  { property is writeable but setter not declared } ;
    property label_:  Pgchar read get_label  { property is writeable but setter not declared } ;
    property label_widget:  PGtkWidget read get_label_widget  { property is writeable but setter not declared } ;
  end;

  PPGtkToolItemGroupClass = ^PGtkToolItemGroupClass;
  PGtkToolItemGroupClass = ^TGtkToolItemGroupClass;
  TGtkToolItemGroupClass = object
    parent_class: TGtkContainerClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;
  TGtkToolPaletteDragTargets = packed object(TBitObject32)
  public
    property items: DWord index 1 read GetBit write SetBit;
    property groups: DWord index 2 read GetBit write SetBit;
  end;


  PPGtkToolPalettePrivate = ^PGtkToolPalettePrivate;
  PGtkToolPalettePrivate = ^TGtkToolPalettePrivate;

  TGtkToolPalettePrivate = record
    Unknown: Pointer;
  end;



  PPGtkToolPalette = ^PGtkToolPalette;
  PGtkToolPalette = ^TGtkToolPalette;

  PPGtkToolPaletteDragTargets = ^PGtkToolPaletteDragTargets;
  PGtkToolPaletteDragTargets = ^TGtkToolPaletteDragTargets;
  TGtkToolPalette = object(TGtkContainer)
    priv2: PGtkToolPalettePrivate;
    function new: PGtkToolPalette; cdecl; inline; static;
    function get_drag_target_group: PGtkTargetEntry; cdecl; inline; static;
    function get_drag_target_item: PGtkTargetEntry; cdecl; inline; static;
    procedure add_drag_dest(widget: PGtkWidget; flags: TGtkDestDefaults; targets: TGtkToolPaletteDragTargets; actions: TGdkDragAction); cdecl; inline;
    function get_drag_item(selection: PGtkSelectionData): PGtkWidget; cdecl; inline;
    function get_drop_group(x: gint; y: gint): PGtkToolItemGroup; cdecl; inline;
    function get_drop_item(x: gint; y: gint): PGtkToolItem; cdecl; inline;
    function get_exclusive(group: PGtkToolItemGroup): gboolean; cdecl; inline;
    function get_expand(group: PGtkToolItemGroup): gboolean; cdecl; inline;
    function get_group_position(group: PGtkToolItemGroup): gint; cdecl; inline;
    
    function get_icon_size: gint; cdecl; inline;
    function get_style: TGtkToolbarStyle; cdecl; inline;
    
    procedure set_drag_source(targets: TGtkToolPaletteDragTargets); cdecl; inline;
    procedure set_exclusive(group: PGtkToolItemGroup; exclusive: gboolean); cdecl; inline;
    procedure set_expand(group: PGtkToolItemGroup; expand: gboolean); cdecl; inline;
    procedure set_group_position(group: PGtkToolItemGroup; position: gint); cdecl; inline;
    procedure set_icon_size(icon_size: gint); cdecl; inline;
    procedure set_style(style: TGtkToolbarStyle); cdecl; inline;
    procedure unset_icon_size; cdecl; inline;
    procedure unset_style; cdecl; inline;
    property icon_size:  gint read get_icon_size  { property is writeable but setter not declared } ;
    //property icon_size_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icon_size_set  { property is writeable but setter not declared } ;
    //property toolbar_style: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_toolbar_style  { property is writeable but setter not declared } ;
  end;

  PPGtkToolPaletteClass = ^PGtkToolPaletteClass;
  PGtkToolPaletteClass = ^TGtkToolPaletteClass;
  TGtkToolPaletteClass = object
    parent_class: TGtkContainerClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkToolShellIface = ^PGtkToolShellIface;
  PGtkToolShellIface = ^TGtkToolShellIface;
  TGtkToolShellIface = object
    g_iface: TGTypeInterface;
    get_icon_size: function(shell: PGtkToolShell): TGtkIconSize; cdecl;
    get_orientation: function(shell: PGtkToolShell): TGtkOrientation; cdecl;
    get_style: function(shell: PGtkToolShell): TGtkToolbarStyle; cdecl;
    get_relief_style: function(shell: PGtkToolShell): TGtkReliefStyle; cdecl;
    rebuild_menu: procedure(shell: PGtkToolShell); cdecl;
    get_text_orientation: function(shell: PGtkToolShell): TGtkOrientation; cdecl;
    get_text_alignment: function(shell: PGtkToolShell): gfloat; cdecl;
    get_ellipsize_mode: function(shell: PGtkToolShell): TPangoEllipsizeMode; cdecl;
    get_text_size_group: function(shell: PGtkToolShell): PGtkSizeGroup; cdecl;
  end;

  PPGtkToolbarPrivate = ^PGtkToolbarPrivate;
  PGtkToolbarPrivate = ^TGtkToolbarPrivate;

  TGtkToolbarPrivate = record
    Unknown: Pointer;
  end;



  PPGtkToolbar = ^PGtkToolbar;
  PGtkToolbar = ^TGtkToolbar;
  TGtkToolbar = object(TGtkContainer)
    priv2: PGtkToolbarPrivate;
    function new: PGtkToolbar; cdecl; inline; static;
    function get_drop_index(x: gint; y: gint): gint; cdecl; inline;
    function get_icon_size: gint; cdecl; inline;
    function get_item_index(item: PGtkToolItem): gint; cdecl; inline;
    function get_n_items: gint; cdecl; inline;
    function get_nth_item(n: gint): PGtkToolItem; cdecl; inline;
    function get_relief_style: TGtkReliefStyle; cdecl; inline;
    function get_show_arrow: gboolean; cdecl; inline;
    function get_style: TGtkToolbarStyle; cdecl; inline;
    procedure insert(item: PGtkToolItem; pos: gint); cdecl; inline;
    procedure set_drop_highlight_item(tool_item: PGtkToolItem; index_: gint); cdecl; inline;
    procedure set_icon_size(icon_size: gint); cdecl; inline;
    procedure set_show_arrow(show_arrow: gboolean); cdecl; inline;
    procedure set_style(style: TGtkToolbarStyle); cdecl; inline;
    procedure unset_icon_size; cdecl; inline;
    procedure unset_style; cdecl; inline;
    property icon_size:  gint read get_icon_size  { property is writeable but setter not declared } ;
    //property icon_size_set: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_icon_size_set  { property is writeable but setter not declared } ;
    property show_arrow:  gboolean read get_show_arrow  { property is writeable but setter not declared } ;
    //property toolbar_style: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_toolbar_style  { property is writeable but setter not declared } ;
  end;

  PPGtkToolbarClass = ^PGtkToolbarClass;
  PGtkToolbarClass = ^TGtkToolbarClass;
  TGtkToolbarClass = object
    parent_class: TGtkContainerClass;
    orientation_changed: procedure(toolbar: PGtkToolbar; orientation: TGtkOrientation); cdecl;
    style_changed: procedure(toolbar: PGtkToolbar; style: TGtkToolbarStyle); cdecl;
    popup_context_menu: function(toolbar: PGtkToolbar; x: gint; y: gint; button_number: gint): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkToolbarSpaceStyle = ^PGtkToolbarSpaceStyle;
  PGtkToolbarSpaceStyle = ^TGtkToolbarSpaceStyle;
  TGtkTranslateFunc = function(path: Pgchar; func_data: gpointer): Pgchar; cdecl;

  PPGtkTreeViewColumn = ^PGtkTreeViewColumn;
  PGtkTreeViewColumn = ^TGtkTreeViewColumn;

  PPGtkTreeViewColumnSizing = ^PGtkTreeViewColumnSizing;
  PGtkTreeViewColumnSizing = ^TGtkTreeViewColumnSizing;

  PPGtkTreeCellDataFunc = ^PGtkTreeCellDataFunc;
  PGtkTreeCellDataFunc = ^TGtkTreeCellDataFunc;
  TGtkTreeCellDataFunc = procedure(tree_column: PGtkTreeViewColumn; cell: PGtkCellRenderer; tree_model: PGtkTreeModel; iter: PGtkTreeIter; data: gpointer); cdecl;

  PPGtkTreeViewColumnPrivate = ^PGtkTreeViewColumnPrivate;
  PGtkTreeViewColumnPrivate = ^TGtkTreeViewColumnPrivate;
  TGtkTreeViewColumn = object(TGInitiallyUnowned)
    priv: PGtkTreeViewColumnPrivate;
    function new: PGtkTreeViewColumn; cdecl; inline; static;
    function new_with_area(area: PGtkCellArea): PGtkTreeViewColumn; cdecl; inline; static;
    //function new_with_attributes(title: Pgchar; cell: PGtkCellRenderer; args: array of const): PGtkTreeViewColumn; cdecl; inline; static;
    procedure add_attribute(cell_renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; inline;
    function cell_get_position(cell_renderer: PGtkCellRenderer; x_offset: Pgint; width: Pgint): gboolean; cdecl; inline;
    procedure cell_get_size(cell_area: PGdkRectangle; x_offset: Pgint; y_offset: Pgint; width: Pgint; height: Pgint); cdecl; inline;
    function cell_is_visible: gboolean; cdecl; inline;
    procedure cell_set_cell_data(tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl; inline;
    procedure clear; cdecl; inline;
    procedure clear_attributes(cell_renderer: PGtkCellRenderer); cdecl; inline;
    procedure clicked; cdecl; inline;
    procedure focus_cell(cell: PGtkCellRenderer); cdecl; inline;
    function get_alignment: gfloat; cdecl; inline;
    function get_button: PGtkWidget; cdecl; inline;
    function get_clickable: gboolean; cdecl; inline;
    function get_expand: gboolean; cdecl; inline;
    function get_fixed_width: gint; cdecl; inline;
    function get_max_width: gint; cdecl; inline;
    function get_min_width: gint; cdecl; inline;
    function get_reorderable: gboolean; cdecl; inline;
    function get_resizable: gboolean; cdecl; inline;
    function get_sizing: TGtkTreeViewColumnSizing; cdecl; inline;
    function get_sort_column_id: gint; cdecl; inline;
    function get_sort_indicator: gboolean; cdecl; inline;
    function get_sort_order: TGtkSortType; cdecl; inline;
    function get_spacing: gint; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_tree_view: PGtkWidget; cdecl; inline;
    function get_visible: gboolean; cdecl; inline;
    function get_widget: PGtkWidget; cdecl; inline;
    function get_width: gint; cdecl; inline;
    function get_x_offset: gint; cdecl; inline;
    procedure pack_end(cell: PGtkCellRenderer; expand: gboolean); cdecl; inline;
    procedure pack_start(cell: PGtkCellRenderer; expand: gboolean); cdecl; inline;
    procedure queue_resize; cdecl; inline;
    procedure set_alignment(xalign: gfloat); cdecl; inline;
    //procedure set_attributes(cell_renderer: PGtkCellRenderer; args: array of const); cdecl; inline;
    procedure set_cell_data_func(cell_renderer: PGtkCellRenderer; func: TGtkTreeCellDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_clickable(clickable: gboolean); cdecl; inline;
    procedure set_expand(expand: gboolean); cdecl; inline;
    procedure set_fixed_width(fixed_width: gint); cdecl; inline;
    procedure set_max_width(max_width: gint); cdecl; inline;
    procedure set_min_width(min_width: gint); cdecl; inline;
    procedure set_reorderable(reorderable: gboolean); cdecl; inline;
    procedure set_resizable(resizable: gboolean); cdecl; inline;
    procedure set_sizing(type_: TGtkTreeViewColumnSizing); cdecl; inline;
    procedure set_sort_column_id(sort_column_id: gint); cdecl; inline;
    procedure set_sort_indicator(setting: gboolean); cdecl; inline;
    procedure set_sort_order(order: TGtkSortType); cdecl; inline;
    procedure set_spacing(spacing: gint); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_visible(visible: gboolean); cdecl; inline;
    procedure set_widget(widget: PGtkWidget); cdecl; inline;
    property alignment:  gfloat read get_alignment  { property is writeable but setter not declared } ;
    //property cell_area: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_cell_area  { property is writeable but setter not declared } ;
    property clickable:  gboolean read get_clickable  { property is writeable but setter not declared } ;
    property expand:  gboolean read get_expand  { property is writeable but setter not declared } ;
    property fixed_width:  gint read get_fixed_width  { property is writeable but setter not declared } ;
    property max_width:  gint read get_max_width  { property is writeable but setter not declared } ;
    property min_width:  gint read get_min_width  { property is writeable but setter not declared } ;
    property reorderable:  gboolean read get_reorderable  { property is writeable but setter not declared } ;
    property resizable:  gboolean read get_resizable  { property is writeable but setter not declared } ;
    property sizing:  TGtkTreeViewColumnSizing read get_sizing  { property is writeable but setter not declared } ;
    property sort_column_id:  gint read get_sort_column_id  { property is writeable but setter not declared } ;
    property sort_indicator:  gboolean read get_sort_indicator  { property is writeable but setter not declared } ;
    property sort_order:  TGtkSortType read get_sort_order  { property is writeable but setter not declared } ;
    property spacing:  gint read get_spacing  { property is writeable but setter not declared } ;
    property title:  Pgchar read get_title  { property is writeable but setter not declared } ;
    property visible:  gboolean read get_visible  { property is writeable but setter not declared } ;
    property widget:  PGtkWidget read get_widget  { property is writeable but setter not declared } ;
    property width:  gint read get_width ;
    property x_offset:  gint read get_x_offset ;
  end;

  PPGtkTreeView = ^PGtkTreeView;
  PGtkTreeView = ^TGtkTreeView;

  PPGtkTreeViewDropPosition = ^PGtkTreeViewDropPosition;
  PGtkTreeViewDropPosition = ^TGtkTreeViewDropPosition;

  PPGtkTreeViewGridLines = ^PGtkTreeViewGridLines;
  PGtkTreeViewGridLines = ^TGtkTreeViewGridLines;

  PPGtkTreeViewSearchEqualFunc = ^PGtkTreeViewSearchEqualFunc;
  PGtkTreeViewSearchEqualFunc = ^TGtkTreeViewSearchEqualFunc;
  TGtkTreeViewSearchEqualFunc = function(model: PGtkTreeModel; column: gint; key: Pgchar; iter: PGtkTreeIter; search_data: gpointer): gboolean; cdecl;

  PPGtkTreeViewSearchPositionFunc = ^PGtkTreeViewSearchPositionFunc;
  PGtkTreeViewSearchPositionFunc = ^TGtkTreeViewSearchPositionFunc;
  TGtkTreeViewSearchPositionFunc = procedure(tree_view: PGtkTreeView; search_dialog: PGtkWidget; user_data: gpointer); cdecl;

  PPGtkTreeSelection = ^PGtkTreeSelection;
  PGtkTreeSelection = ^TGtkTreeSelection;

  PPGtkTreeViewMappingFunc = ^PGtkTreeViewMappingFunc;
  PGtkTreeViewMappingFunc = ^TGtkTreeViewMappingFunc;
  TGtkTreeViewMappingFunc = procedure(tree_view: PGtkTreeView; path: PGtkTreePath; user_data: gpointer); cdecl;

  PPGtkTreeViewColumnDropFunc = ^PGtkTreeViewColumnDropFunc;
  PGtkTreeViewColumnDropFunc = ^TGtkTreeViewColumnDropFunc;
  TGtkTreeViewColumnDropFunc = function(tree_view: PGtkTreeView; column: PGtkTreeViewColumn; prev_column: PGtkTreeViewColumn; next_column: PGtkTreeViewColumn; data: gpointer): gboolean; cdecl;

  PPGtkTreeDestroyCountFunc = ^PGtkTreeDestroyCountFunc;
  PGtkTreeDestroyCountFunc = ^TGtkTreeDestroyCountFunc;
  TGtkTreeDestroyCountFunc = procedure(tree_view: PGtkTreeView; path: PGtkTreePath; children: gint; user_data: gpointer); cdecl;

  PPGtkTreeViewPrivate = ^PGtkTreeViewPrivate;
  PGtkTreeViewPrivate = ^TGtkTreeViewPrivate;
  TGtkTreeView = object(TGtkContainer)
    priv2: PGtkTreeViewPrivate;
    function new: PGtkTreeView; cdecl; inline; static;
    function new_with_model(model: PGtkTreeModel): PGtkTreeView; cdecl; inline; static;
    function append_column(column: PGtkTreeViewColumn): gint; cdecl; inline;
    procedure collapse_all; cdecl; inline;
    function collapse_row(path: PGtkTreePath): gboolean; cdecl; inline;
    procedure columns_autosize; cdecl; inline;
    procedure convert_bin_window_to_tree_coords(bx: gint; by: gint; tx: Pgint; ty: Pgint); cdecl; inline;
    procedure convert_bin_window_to_widget_coords(bx: gint; by: gint; wx: Pgint; wy: Pgint); cdecl; inline;
    procedure convert_tree_to_bin_window_coords(tx: gint; ty: gint; bx: Pgint; by: Pgint); cdecl; inline;
    procedure convert_tree_to_widget_coords(tx: gint; ty: gint; wx: Pgint; wy: Pgint); cdecl; inline;
    procedure convert_widget_to_bin_window_coords(wx: gint; wy: gint; bx: Pgint; by: Pgint); cdecl; inline;
    procedure convert_widget_to_tree_coords(wx: gint; wy: gint; tx: Pgint; ty: Pgint); cdecl; inline;
    function create_row_drag_icon(path: PGtkTreePath): Pcairo_surface_t; cdecl; inline;
    procedure enable_model_drag_dest(targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; inline;
    procedure enable_model_drag_source(start_button_mask: TGdkModifierType; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; inline;
    procedure expand_all; cdecl; inline;
    function expand_row(path: PGtkTreePath; open_all: gboolean): gboolean; cdecl; inline;
    procedure expand_to_path(path: PGtkTreePath); cdecl; inline;
    procedure get_background_area(path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl; inline;
    function get_bin_window: PGdkWindow; cdecl; inline;
    procedure get_cell_area(path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl; inline;
    function get_column(n: gint): PGtkTreeViewColumn; cdecl; inline;
    function get_columns: PGList; cdecl; inline;
    procedure get_cursor(path: PPGtkTreePath; focus_column: PPGtkTreeViewColumn); cdecl; inline;
    function get_dest_row_at_pos(drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkTreeViewDropPosition): gboolean; cdecl; inline;
    procedure get_drag_dest_row(path: PPGtkTreePath; pos: PGtkTreeViewDropPosition); cdecl; inline;
    function get_enable_search: gboolean; cdecl; inline;
    function get_enable_tree_lines: gboolean; cdecl; inline;
    function get_expander_column: PGtkTreeViewColumn; cdecl; inline;
    function get_fixed_height_mode: gboolean; cdecl; inline;
    function get_grid_lines: TGtkTreeViewGridLines; cdecl; inline;
    
    function get_headers_clickable: gboolean; cdecl; inline;
    function get_headers_visible: gboolean; cdecl; inline;
    function get_hover_expand: gboolean; cdecl; inline;
    function get_hover_selection: gboolean; cdecl; inline;
    function get_level_indentation: gint; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function get_path_at_pos(x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl; inline;
    function get_reorderable: gboolean; cdecl; inline;
    function get_row_separator_func: TGtkTreeViewRowSeparatorFunc; cdecl; inline;
    function get_rubber_banding: gboolean; cdecl; inline;
    function get_rules_hint: gboolean; cdecl; inline;
    function get_search_column: gint; cdecl; inline;
    function get_search_entry: PGtkEntry; cdecl; inline;
    function get_search_equal_func: TGtkTreeViewSearchEqualFunc; cdecl; inline;
    function get_search_position_func: TGtkTreeViewSearchPositionFunc; cdecl; inline;
    function get_selection: PGtkTreeSelection; cdecl; inline;
    function get_show_expanders: gboolean; cdecl; inline;
    function get_tooltip_column: gint; cdecl; inline;
    function get_tooltip_context(x: Pgint; y: Pgint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl; inline;
    
    function get_visible_range(start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl; inline;
    procedure get_visible_rect(visible_rect: PGdkRectangle); cdecl; inline;
    function insert_column(column: PGtkTreeViewColumn; position: gint): gint; cdecl; inline;
    //function insert_column_with_attributes(position: gint; title: Pgchar; cell: PGtkCellRenderer; args: array of const): gint; cdecl; inline;
    function insert_column_with_data_func(position: gint; title: Pgchar; cell: PGtkCellRenderer; func: TGtkTreeCellDataFunc; data: gpointer; dnotify: TGDestroyNotify): gint; cdecl; inline;
    function is_blank_at_pos(x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl; inline;
    function is_rubber_banding_active: gboolean; cdecl; inline;
    procedure map_expanded_rows(func: TGtkTreeViewMappingFunc; data: gpointer); cdecl; inline;
    procedure move_column_after(column: PGtkTreeViewColumn; base_column: PGtkTreeViewColumn); cdecl; inline;
    function remove_column(column: PGtkTreeViewColumn): gint; cdecl; inline;
    procedure row_activated(path: PGtkTreePath; column: PGtkTreeViewColumn); cdecl; inline;
    function row_expanded(path: PGtkTreePath): gboolean; cdecl; inline;
    procedure scroll_to_cell(path: PGtkTreePath; column: PGtkTreeViewColumn; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl; inline;
    procedure scroll_to_point(tree_x: gint; tree_y: gint); cdecl; inline;
    procedure set_column_drag_function(func: TGtkTreeViewColumnDropFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_cursor(path: PGtkTreePath; focus_column: PGtkTreeViewColumn; start_editing: gboolean); cdecl; inline;
    procedure set_cursor_on_cell(path: PGtkTreePath; focus_column: PGtkTreeViewColumn; focus_cell: PGtkCellRenderer; start_editing: gboolean); cdecl; inline;
    procedure set_destroy_count_func(func: TGtkTreeDestroyCountFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_drag_dest_row(path: PGtkTreePath; pos: TGtkTreeViewDropPosition); cdecl; inline;
    procedure set_enable_search(enable_search: gboolean); cdecl; inline;
    procedure set_enable_tree_lines(enabled: gboolean); cdecl; inline;
    procedure set_expander_column(column: PGtkTreeViewColumn); cdecl; inline;
    procedure set_fixed_height_mode(enable: gboolean); cdecl; inline;
    procedure set_grid_lines(grid_lines: TGtkTreeViewGridLines); cdecl; inline;
    
    procedure set_headers_clickable(setting: gboolean); cdecl; inline;
    procedure set_headers_visible(headers_visible: gboolean); cdecl; inline;
    procedure set_hover_expand(expand: gboolean); cdecl; inline;
    procedure set_hover_selection(hover: gboolean); cdecl; inline;
    procedure set_level_indentation(indentation: gint); cdecl; inline;
    procedure set_model(model: PGtkTreeModel); cdecl; inline;
    procedure set_reorderable(reorderable: gboolean); cdecl; inline;
    procedure set_row_separator_func(func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_rubber_banding(enable: gboolean); cdecl; inline;
    procedure set_rules_hint(setting: gboolean); cdecl; inline;
    procedure set_search_column(column: gint); cdecl; inline;
    procedure set_search_entry(entry: PGtkEntry); cdecl; inline;
    procedure set_search_equal_func(search_equal_func: TGtkTreeViewSearchEqualFunc; search_user_data: gpointer; search_destroy: TGDestroyNotify); cdecl; inline;
    procedure set_search_position_func(func: TGtkTreeViewSearchPositionFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_show_expanders(enabled: gboolean); cdecl; inline;
    procedure set_tooltip_cell(tooltip: PGtkTooltip; path: PGtkTreePath; column: PGtkTreeViewColumn; cell: PGtkCellRenderer); cdecl; inline;
    procedure set_tooltip_column(column: gint); cdecl; inline;
    procedure set_tooltip_row(tooltip: PGtkTooltip; path: PGtkTreePath); cdecl; inline;
    
    procedure unset_rows_drag_dest; cdecl; inline;
    procedure unset_rows_drag_source; cdecl; inline;
    //property enable_grid_lines: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_enable_grid_lines  { property is writeable but setter not declared } ;
    property enable_search:  gboolean read get_enable_search  { property is writeable but setter not declared } ;
    property enable_tree_lines:  gboolean read get_enable_tree_lines  { property is writeable but setter not declared } ;
    property expander_column:  PGtkTreeViewColumn read get_expander_column  { property is writeable but setter not declared } ;
    property fixed_height_mode:  gboolean read get_fixed_height_mode  { property is writeable but setter not declared } ;
    property headers_clickable:  gboolean read get_headers_clickable  { property is writeable but setter not declared } ;
    property headers_visible:  gboolean read get_headers_visible  { property is writeable but setter not declared } ;
    property hover_expand:  gboolean read get_hover_expand  { property is writeable but setter not declared } ;
    property hover_selection:  gboolean read get_hover_selection  { property is writeable but setter not declared } ;
    property level_indentation:  gint read get_level_indentation  { property is writeable but setter not declared } ;
    property model:  PGtkTreeModel read get_model  { property is writeable but setter not declared } ;
    property reorderable:  gboolean read get_reorderable  { property is writeable but setter not declared } ;
    property rubber_banding:  gboolean read get_rubber_banding  { property is writeable but setter not declared } ;
    property rules_hint:  gboolean read get_rules_hint  { property is writeable but setter not declared } ;
    property search_column:  gint read get_search_column  { property is writeable but setter not declared } ;
    property show_expanders:  gboolean read get_show_expanders  { property is writeable but setter not declared } ;
    property tooltip_column:  gint read get_tooltip_column  { property is writeable but setter not declared } ;
  end;

  PPGtkTreeDragDestIface = ^PGtkTreeDragDestIface;
  PGtkTreeDragDestIface = ^TGtkTreeDragDestIface;
  TGtkTreeDragDestIface = object
    g_iface: TGTypeInterface;
    drag_data_received: function(drag_dest: PGtkTreeDragDest; dest: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl;
    row_drop_possible: function(drag_dest: PGtkTreeDragDest; dest_path: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl;
  end;

  PPGtkTreeDragSourceIface = ^PGtkTreeDragSourceIface;
  PGtkTreeDragSourceIface = ^TGtkTreeDragSourceIface;
  TGtkTreeDragSourceIface = object
    g_iface: TGTypeInterface;
    row_draggable: function(drag_source: PGtkTreeDragSource; path: PGtkTreePath): gboolean; cdecl;
    drag_data_get: function(drag_source: PGtkTreeDragSource; path: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl;
    drag_data_delete: function(drag_source: PGtkTreeDragSource; path: PGtkTreePath): gboolean; cdecl;
  end;
  TGtkTreeModelFilterModifyFunc = procedure(model: PGtkTreeModel; iter: PGtkTreeIter; value: PGValue; column: gint; data: gpointer); cdecl;
  TGtkTreeModelFilterVisibleFunc = function(model: PGtkTreeModel; iter: PGtkTreeIter; data: gpointer): gboolean; cdecl;

  PPGtkTreeModelFilterPrivate = ^PGtkTreeModelFilterPrivate;
  PGtkTreeModelFilterPrivate = ^TGtkTreeModelFilterPrivate;

  TGtkTreeModelFilterPrivate = record
    Unknown: Pointer;
  end;



  PPGtkTreeModelFilter = ^PGtkTreeModelFilter;
  PGtkTreeModelFilter = ^TGtkTreeModelFilter;

  PPGtkTreeModelFilterModifyFunc = ^PGtkTreeModelFilterModifyFunc;
  PGtkTreeModelFilterModifyFunc = ^TGtkTreeModelFilterModifyFunc;

  PPGtkTreeModelFilterVisibleFunc = ^PGtkTreeModelFilterVisibleFunc;
  PGtkTreeModelFilterVisibleFunc = ^TGtkTreeModelFilterVisibleFunc;
  TGtkTreeModelFilter = object(TGObject)
    priv: PGtkTreeModelFilterPrivate;
    procedure clear_cache; cdecl; inline;
    function convert_child_iter_to_iter(filter_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl; inline;
    function convert_child_path_to_path(child_path: PGtkTreePath): PGtkTreePath; cdecl; inline;
    procedure convert_iter_to_child_iter(child_iter: PGtkTreeIter; filter_iter: PGtkTreeIter); cdecl; inline;
    function convert_path_to_child_path(filter_path: PGtkTreePath): PGtkTreePath; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    procedure refilter; cdecl; inline;
    procedure set_modify_func(n_columns: gint; types: PGType; func: TGtkTreeModelFilterModifyFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure set_visible_column(column: gint); cdecl; inline;
    procedure set_visible_func(func: TGtkTreeModelFilterVisibleFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    //property child_model: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_child_model  { property is writeable but setter not declared } ;
    //property virtual_root: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_virtual_root  { property is writeable but setter not declared } ;
  end;

  PPGtkTreeModelFilterClass = ^PGtkTreeModelFilterClass;
  PGtkTreeModelFilterClass = ^TGtkTreeModelFilterClass;
  TGtkTreeModelFilterClass = object
    parent_class: TGObjectClass;
    visible: function(self: PGtkTreeModelFilter; child_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
    modify: procedure(self: PGtkTreeModelFilter; child_model: PGtkTreeModel; iter: PGtkTreeIter; value: PGValue; column: gint); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkTreeModelIface = ^PGtkTreeModelIface;
  PGtkTreeModelIface = ^TGtkTreeModelIface;
  TGtkTreeModelIface = object
    g_iface: TGTypeInterface;
    row_changed: procedure(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
    row_inserted: procedure(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
    row_has_child_toggled: procedure(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
    row_deleted: procedure(tree_model: PGtkTreeModel; path: PGtkTreePath); cdecl;
    rows_reordered: procedure(tree_model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl;
    get_flags: function(tree_model: PGtkTreeModel): TGtkTreeModelFlags; cdecl;
    get_n_columns: function(tree_model: PGtkTreeModel): gint; cdecl;
    get_column_type: function(tree_model: PGtkTreeModel; index_: gint): TGType; cdecl;
    get_iter: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl;
    get_path: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter): PGtkTreePath; cdecl;
    get_value: procedure(tree_model: PGtkTreeModel; iter: PGtkTreeIter; column: gint; value: PGValue); cdecl;
    iter_next: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
    iter_previous: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
    iter_children: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter; parent: PGtkTreeIter): gboolean; cdecl;
    iter_has_child: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
    iter_n_children: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter): gint; cdecl;
    iter_nth_child: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter; parent: PGtkTreeIter; n: gint): gboolean; cdecl;
    iter_parent: function(tree_model: PGtkTreeModel; iter: PGtkTreeIter; child: PGtkTreeIter): gboolean; cdecl;
    ref_node: procedure(tree_model: PGtkTreeModel; iter: PGtkTreeIter); cdecl;
    unref_node: procedure(tree_model: PGtkTreeModel; iter: PGtkTreeIter); cdecl;
  end;

  PPGtkTreeModelSortPrivate = ^PGtkTreeModelSortPrivate;
  PGtkTreeModelSortPrivate = ^TGtkTreeModelSortPrivate;

  TGtkTreeModelSortPrivate = record
    Unknown: Pointer;
  end;



  PPGtkTreeModelSort = ^PGtkTreeModelSort;
  PGtkTreeModelSort = ^TGtkTreeModelSort;
  TGtkTreeModelSort = object(TGObject)
    priv: PGtkTreeModelSortPrivate;
    procedure clear_cache; cdecl; inline;
    function convert_child_iter_to_iter(sort_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl; inline;
    function convert_child_path_to_path(child_path: PGtkTreePath): PGtkTreePath; cdecl; inline;
    procedure convert_iter_to_child_iter(child_iter: PGtkTreeIter; sorted_iter: PGtkTreeIter); cdecl; inline;
    function convert_path_to_child_path(sorted_path: PGtkTreePath): PGtkTreePath; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure reset_default_sort_func; cdecl; inline;
    property model:  PGtkTreeModel read get_model  { property is writeable but setter not declared } ;
  end;

  PPGtkTreeModelSortClass = ^PGtkTreeModelSortClass;
  PGtkTreeModelSortClass = ^TGtkTreeModelSortClass;
  TGtkTreeModelSortClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkTreeRowReference = ^PGtkTreeRowReference;
  PGtkTreeRowReference = ^TGtkTreeRowReference;
  TGtkTreeRowReference = object
    function new(model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl; inline; static;
    function new_proxy(proxy: PGObject; model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl; inline; static;
    function copy: PGtkTreeRowReference; cdecl; inline;
    procedure free; cdecl; inline;
    function get_model: PGtkTreeModel; cdecl; inline;
    function get_path: PGtkTreePath; cdecl; inline;
    function valid: gboolean; cdecl; inline;
    procedure deleted(proxy: PGObject; path: PGtkTreePath); cdecl; inline; static;
    procedure inserted(proxy: PGObject; path: PGtkTreePath); cdecl; inline; static;
    procedure reordered(proxy: PGObject; path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl; inline; static;
  end;
  TGtkTreeSelectionFunc = function(selection: PGtkTreeSelection; model: PGtkTreeModel; path: PGtkTreePath; path_currently_selected: gboolean; data: gpointer): gboolean; cdecl;
  TGtkTreeSelectionForeachFunc = procedure(model: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter; data: gpointer); cdecl;

  PPGtkTreeSelectionPrivate = ^PGtkTreeSelectionPrivate;
  PGtkTreeSelectionPrivate = ^TGtkTreeSelectionPrivate;

  TGtkTreeSelectionPrivate = record
    Unknown: Pointer;
  end;



  PPGtkTreeSelectionFunc = ^PGtkTreeSelectionFunc;
  PGtkTreeSelectionFunc = ^TGtkTreeSelectionFunc;

  PPGtkTreeSelectionForeachFunc = ^PGtkTreeSelectionForeachFunc;
  PGtkTreeSelectionForeachFunc = ^TGtkTreeSelectionForeachFunc;
  TGtkTreeSelection = object(TGObject)
    priv: PGtkTreeSelectionPrivate;
    function count_selected_rows: gint; cdecl; inline;
    function get_mode: TGtkSelectionMode; cdecl; inline;
    function get_select_function: TGtkTreeSelectionFunc; cdecl; inline;
    function get_selected(model: PPGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; inline;
    function get_selected_rows(model: PPGtkTreeModel): PGList; cdecl; inline;
    function get_tree_view: PGtkTreeView; cdecl; inline;
    function get_user_data: gpointer; cdecl; inline;
    function iter_is_selected(iter: PGtkTreeIter): gboolean; cdecl; inline;
    function path_is_selected(path: PGtkTreePath): gboolean; cdecl; inline;
    procedure select_all; cdecl; inline;
    procedure select_iter(iter: PGtkTreeIter); cdecl; inline;
    procedure select_path(path: PGtkTreePath); cdecl; inline;
    procedure select_range(start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl; inline;
    procedure selected_foreach(func: TGtkTreeSelectionForeachFunc; data: gpointer); cdecl; inline;
    procedure set_mode(type_: TGtkSelectionMode); cdecl; inline;
    procedure set_select_function(func: TGtkTreeSelectionFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; inline;
    procedure unselect_all; cdecl; inline;
    procedure unselect_iter(iter: PGtkTreeIter); cdecl; inline;
    procedure unselect_path(path: PGtkTreePath); cdecl; inline;
    procedure unselect_range(start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl; inline;
    property mode:  TGtkSelectionMode read get_mode  { property is writeable but setter not declared } ;
  end;

  PPGtkTreeSelectionClass = ^PGtkTreeSelectionClass;
  PGtkTreeSelectionClass = ^TGtkTreeSelectionClass;
  TGtkTreeSelectionClass = object
    parent_class: TGObjectClass;
    changed: procedure(selection: PGtkTreeSelection); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkTreeSortableIface = ^PGtkTreeSortableIface;
  PGtkTreeSortableIface = ^TGtkTreeSortableIface;
  TGtkTreeSortableIface = object
    g_iface: TGTypeInterface;
    sort_column_changed: procedure(sortable: PGtkTreeSortable); cdecl;
    get_sort_column_id: function(sortable: PGtkTreeSortable; sort_column_id: Pgint; order: PGtkSortType): gboolean; cdecl;
    set_sort_column_id: procedure(sortable: PGtkTreeSortable; sort_column_id: gint; order: TGtkSortType); cdecl;
    set_sort_func: procedure(sortable: PGtkTreeSortable; sort_column_id: gint; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
    set_default_sort_func: procedure(sortable: PGtkTreeSortable; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
    has_default_sort_func: function(sortable: PGtkTreeSortable): gboolean; cdecl;
  end;

  PPGtkTreeStore = ^PGtkTreeStore;
  PGtkTreeStore = ^TGtkTreeStore;

  PPGtkTreeStorePrivate = ^PGtkTreeStorePrivate;
  PGtkTreeStorePrivate = ^TGtkTreeStorePrivate;
  TGtkTreeStore = object(TGObject)
    priv: PGtkTreeStorePrivate;
    //function new(n_columns: gint; args: array of const): PGtkTreeStore; cdecl; inline; static;
    function newv(n_columns: gint; types: PGType): PGtkTreeStore; cdecl; inline; static;
    procedure append(iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl; inline;
    procedure clear; cdecl; inline;
    procedure insert(iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint); cdecl; inline;
    procedure insert_after(iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; inline;
    procedure insert_before(iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; inline;
    //procedure insert_with_values(iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint; args: array of const); cdecl; inline;
    procedure insert_with_valuesv(iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl; inline;
    function is_ancestor(iter: PGtkTreeIter; descendant: PGtkTreeIter): gboolean; cdecl; inline;
    function iter_depth(iter: PGtkTreeIter): gint; cdecl; inline;
    function iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure move_after(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; inline;
    procedure move_before(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; inline;
    procedure prepend(iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl; inline;
    function remove(iter: PGtkTreeIter): gboolean; cdecl; inline;
    procedure reorder(parent: PGtkTreeIter; new_order: Pgint); cdecl; inline;
    //procedure set_(iter: PGtkTreeIter; args: array of const); cdecl; inline;
    procedure set_column_types(n_columns: gint; types: PGType); cdecl; inline;
    //procedure set_valist(iter: PGtkTreeIter; var_args: Tva_list); cdecl; inline;
    procedure set_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; inline;
    procedure set_valuesv(iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl; inline;
    procedure swap(a: PGtkTreeIter; b: PGtkTreeIter); cdecl; inline;
  end;

  TGtkTreeStorePrivate = record
    Unknown: Pointer;
  end;



  PPGtkTreeStoreClass = ^PGtkTreeStoreClass;
  PGtkTreeStoreClass = ^TGtkTreeStoreClass;
  TGtkTreeStoreClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkTreeViewPrivate = record
    Unknown: Pointer;
  end;



  PPGtkTreeViewClass = ^PGtkTreeViewClass;
  PGtkTreeViewClass = ^TGtkTreeViewClass;
  TGtkTreeViewClass = object
    parent_class: TGtkContainerClass;
    row_activated: procedure(tree_view: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn); cdecl;
    test_expand_row: function(tree_view: PGtkTreeView; iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl;
    test_collapse_row: function(tree_view: PGtkTreeView; iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl;
    row_expanded: procedure(tree_view: PGtkTreeView; iter: PGtkTreeIter; path: PGtkTreePath); cdecl;
    row_collapsed: procedure(tree_view: PGtkTreeView; iter: PGtkTreeIter; path: PGtkTreePath); cdecl;
    columns_changed: procedure(tree_view: PGtkTreeView); cdecl;
    cursor_changed: procedure(tree_view: PGtkTreeView); cdecl;
    move_cursor: function(tree_view: PGtkTreeView; step: TGtkMovementStep; count: gint): gboolean; cdecl;
    select_all: function(tree_view: PGtkTreeView): gboolean; cdecl;
    unselect_all: function(tree_view: PGtkTreeView): gboolean; cdecl;
    select_cursor_row: function(tree_view: PGtkTreeView; start_editing: gboolean): gboolean; cdecl;
    toggle_cursor_row: function(tree_view: PGtkTreeView): gboolean; cdecl;
    expand_collapse_cursor_row: function(tree_view: PGtkTreeView; logical: gboolean; expand: gboolean; open_all: gboolean): gboolean; cdecl;
    select_cursor_parent: function(tree_view: PGtkTreeView): gboolean; cdecl;
    start_interactive_search: function(tree_view: PGtkTreeView): gboolean; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
    _gtk_reserved5: procedure; cdecl;
    _gtk_reserved6: procedure; cdecl;
    _gtk_reserved7: procedure; cdecl;
    _gtk_reserved8: procedure; cdecl;
  end;

  TGtkTreeViewColumnPrivate = record
    Unknown: Pointer;
  end;



  PPGtkTreeViewColumnClass = ^PGtkTreeViewColumnClass;
  PGtkTreeViewColumnClass = ^TGtkTreeViewColumnClass;
  TGtkTreeViewColumnClass = object
    parent_class: TGInitiallyUnownedClass;
    clicked: procedure(tree_column: PGtkTreeViewColumn); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkUIManager = ^PGtkUIManager;
  PGtkUIManager = ^TGtkUIManager;

  PPGtkUIManagerItemType = ^PGtkUIManagerItemType;
  PGtkUIManagerItemType = ^TGtkUIManagerItemType;
  TGtkUIManagerItemType = packed object(TBitObject32)
  public
    property auto: DWord index 0 read GetBit write SetBit;
    property menubar: DWord index 1 read GetBit write SetBit;
    property menu: DWord index 2 read GetBit write SetBit;
    property toolbar: DWord index 4 read GetBit write SetBit;
    property placeholder: DWord index 8 read GetBit write SetBit;
    property popup: DWord index 16 read GetBit write SetBit;
    property menuitem: DWord index 32 read GetBit write SetBit;
    property toolitem: DWord index 64 read GetBit write SetBit;
    property separator: DWord index 128 read GetBit write SetBit;
    property accelerator: DWord index 256 read GetBit write SetBit;
    property popup_with_accels: DWord index 512 read GetBit write SetBit;
  end;


  PPGtkUIManagerPrivate = ^PGtkUIManagerPrivate;
  PGtkUIManagerPrivate = ^TGtkUIManagerPrivate;
  TGtkUIManager = object(TGObject)
    private_data: PGtkUIManagerPrivate;
    function new: PGtkUIManager; cdecl; inline; static;
    procedure add_ui(merge_id: guint; path: Pgchar; name: Pgchar; action: Pgchar; type_: TGtkUIManagerItemType; top: gboolean); cdecl; inline;
    function add_ui_from_file(filename: Pgchar): guint; cdecl; inline;
    function add_ui_from_string(buffer: Pgchar; length: gssize): guint; cdecl; inline;
    procedure ensure_update; cdecl; inline;
    function get_accel_group: PGtkAccelGroup; cdecl; inline;
    function get_action(path: Pgchar): PGtkAction; cdecl; inline;
    function get_action_groups: PGList; cdecl; inline;
    function get_add_tearoffs: gboolean; cdecl; inline;
    function get_toplevels(types: TGtkUIManagerItemType): PGSList; cdecl; inline;
    function get_ui: Pgchar; cdecl; inline;
    function get_widget(path: Pgchar): PGtkWidget; cdecl; inline;
    procedure insert_action_group(action_group: PGtkActionGroup; pos: gint); cdecl; inline;
    function new_merge_id: guint; cdecl; inline;
    procedure remove_action_group(action_group: PGtkActionGroup); cdecl; inline;
    procedure remove_ui(merge_id: guint); cdecl; inline;
    procedure set_add_tearoffs(add_tearoffs: gboolean); cdecl; inline;
    property add_tearoffs:  gboolean read get_add_tearoffs  { property is writeable but setter not declared } ;
    property ui:  Pgchar read get_ui ;
  end;

  TGtkUIManagerPrivate = record
    Unknown: Pointer;
  end;



  PPGtkUIManagerClass = ^PGtkUIManagerClass;
  PGtkUIManagerClass = ^TGtkUIManagerClass;
  TGtkUIManagerClass = object
    parent_class: TGObjectClass;
    add_widget: procedure(manager: PGtkUIManager; widget: PGtkWidget); cdecl;
    actions_changed: procedure(manager: PGtkUIManager); cdecl;
    connect_proxy: procedure(manager: PGtkUIManager; action: PGtkAction; proxy: PGtkWidget); cdecl;
    disconnect_proxy: procedure(manager: PGtkUIManager; action: PGtkAction; proxy: PGtkWidget); cdecl;
    pre_activate: procedure(manager: PGtkUIManager; action: PGtkAction); cdecl;
    post_activate: procedure(manager: PGtkUIManager; action: PGtkAction); cdecl;
    get_widget: function(manager: PGtkUIManager; path: Pgchar): PGtkWidget; cdecl;
    get_action: function(manager: PGtkUIManager; path: Pgchar): PGtkAction; cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkVBox = ^PGtkVBox;
  PGtkVBox = ^TGtkVBox;
  TGtkVBox = object(TGtkBox)
    
  end;

  PPGtkVBoxClass = ^PGtkVBoxClass;
  PGtkVBoxClass = ^TGtkVBoxClass;
  TGtkVBoxClass = object
    parent_class: TGtkBoxClass;
  end;

  PPGtkVButtonBox = ^PGtkVButtonBox;
  PGtkVButtonBox = ^TGtkVButtonBox;
  TGtkVButtonBox = object(TGtkButtonBox)
    
  end;

  PPGtkVButtonBoxClass = ^PGtkVButtonBoxClass;
  PGtkVButtonBoxClass = ^TGtkVButtonBoxClass;
  TGtkVButtonBoxClass = object
    parent_class: TGtkButtonBoxClass;
  end;

  PPGtkVPaned = ^PGtkVPaned;
  PGtkVPaned = ^TGtkVPaned;
  TGtkVPaned = object(TGtkPaned)
    
  end;

  PPGtkVPanedClass = ^PGtkVPanedClass;
  PGtkVPanedClass = ^TGtkVPanedClass;
  TGtkVPanedClass = object
    parent_class: TGtkPanedClass;
  end;

  PPGtkVScale = ^PGtkVScale;
  PGtkVScale = ^TGtkVScale;
  TGtkVScale = object(TGtkScale)
    
    
  end;

  PPGtkVScaleClass = ^PGtkVScaleClass;
  PGtkVScaleClass = ^TGtkVScaleClass;
  TGtkVScaleClass = object
    parent_class: TGtkScaleClass;
  end;

  PPGtkVScrollbar = ^PGtkVScrollbar;
  PGtkVScrollbar = ^TGtkVScrollbar;
  TGtkVScrollbar = object(TGtkScrollbar)
    
  end;

  PPGtkVScrollbarClass = ^PGtkVScrollbarClass;
  PGtkVScrollbarClass = ^TGtkVScrollbarClass;
  TGtkVScrollbarClass = object
    parent_class: TGtkScrollbarClass;
  end;

  PPGtkVSeparator = ^PGtkVSeparator;
  PGtkVSeparator = ^TGtkVSeparator;
  TGtkVSeparator = object(TGtkSeparator)
    
  end;

  PPGtkVSeparatorClass = ^PGtkVSeparatorClass;
  PGtkVSeparatorClass = ^TGtkVSeparatorClass;
  TGtkVSeparatorClass = object
    parent_class: TGtkSeparatorClass;
  end;

  PPGtkViewportPrivate = ^PGtkViewportPrivate;
  PGtkViewportPrivate = ^TGtkViewportPrivate;

  TGtkViewportPrivate = record
    Unknown: Pointer;
  end;



  PPGtkViewport = ^PGtkViewport;
  PGtkViewport = ^TGtkViewport;
  TGtkViewport = object(TGtkBin)
    priv3: PGtkViewportPrivate;
    function new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkViewport; cdecl; inline; static;
    function get_bin_window: PGdkWindow; cdecl; inline;
    
    function get_shadow_type: TGtkShadowType; cdecl; inline;
    
    function get_view_window: PGdkWindow; cdecl; inline;
    
    procedure set_shadow_type(type_: TGtkShadowType); cdecl; inline;
    
    property shadow_type:  TGtkShadowType read get_shadow_type  { property is writeable but setter not declared } ;
  end;

  PPGtkViewportClass = ^PGtkViewportClass;
  PGtkViewportClass = ^TGtkViewportClass;
  TGtkViewportClass = object
    parent_class: TGtkBinClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkVolumeButton = ^PGtkVolumeButton;
  PGtkVolumeButton = ^TGtkVolumeButton;
  TGtkVolumeButton = object(TGtkScaleButton)
    function new: PGtkVolumeButton; cdecl; inline; static;
    //property use_symbolic: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_use_symbolic  { property is writeable but setter not declared } ;
  end;

  PPGtkVolumeButtonClass = ^PGtkVolumeButtonClass;
  PGtkVolumeButtonClass = ^TGtkVolumeButtonClass;
  TGtkVolumeButtonClass = object
    parent_class: TGtkScaleButtonClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  TGtkWidgetPrivate = record
    Unknown: Pointer;
  end;



  PPGtkWidgetAuxInfo = ^PGtkWidgetAuxInfo;
  PGtkWidgetAuxInfo = ^TGtkWidgetAuxInfo;

  TGtkWidgetAuxInfo = record
    width: gint;
    height: gint;
    halign: guint4 { changed from guint to accomodate 4 bitsize requirement };
    valign: guint4 { changed from guint to accomodate 4 bitsize requirement };
    margin: TGtkBorder;
  end;



  TGtkWidgetClassPrivate = record
    Unknown: Pointer;
  end;



  PPGtkWindowGroup = ^PGtkWindowGroup;
  PGtkWindowGroup = ^TGtkWindowGroup;

  PPGtkWindow = ^PGtkWindow;
  PGtkWindow = ^TGtkWindow;

  PPGtkWindowGroupPrivate = ^PGtkWindowGroupPrivate;
  PGtkWindowGroupPrivate = ^TGtkWindowGroupPrivate;
  TGtkWindowGroup = object(TGObject)
    priv: PGtkWindowGroupPrivate;
    function new: PGtkWindowGroup; cdecl; inline; static;
    procedure add_window(window: PGtkWindow); cdecl; inline;
    function get_current_device_grab(device: PGdkDevice): PGtkWidget; cdecl; inline;
    function get_current_grab: PGtkWidget; cdecl; inline;
    function list_windows: PGList; cdecl; inline;
    procedure remove_window(window: PGtkWindow); cdecl; inline;
  end;

  PPGtkWindowPosition = ^PGtkWindowPosition;
  PGtkWindowPosition = ^TGtkWindowPosition;

  PPGtkWindowPrivate = ^PGtkWindowPrivate;
  PGtkWindowPrivate = ^TGtkWindowPrivate;

  TGtkWindowPrivate = record
    Unknown: Pointer;
  end;


  TGtkWindow = object(TGtkBin)
    priv3: PGtkWindowPrivate;
    function new(type_: TGdkWindowType): PGtkWindow; cdecl; inline; static;
    function get_default_icon_list: PGList; cdecl; inline; static;
    function get_default_icon_name: Pgchar; cdecl; inline; static;
    function list_toplevels: PGList; cdecl; inline; static;
    procedure set_auto_startup_notification(setting: gboolean); cdecl; inline; static;
    procedure set_default_icon(icon: PGdkPixbuf); cdecl; inline; static;
    function set_default_icon_from_file(filename: Pgchar): gboolean; cdecl; inline; static;
    procedure set_default_icon_list(list: PGList); cdecl; inline; static;
    procedure set_default_icon_name(name: Pgchar); cdecl; inline; static;
    function activate_default: gboolean; cdecl; inline;
    function activate_focus: gboolean; cdecl; inline;
    function activate_key(event: PGdkEventKey): gboolean; cdecl; inline;
    procedure add_accel_group(accel_group: PGtkAccelGroup); cdecl; inline;
    procedure add_mnemonic(keyval: guint; target: PGtkWidget); cdecl; inline;
    procedure begin_move_drag(button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; inline;
    procedure begin_resize_drag(edge: TGdkWindowEdge; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; inline;
    procedure deiconify; cdecl; inline;
    procedure fullscreen; cdecl; inline;
    function get_accept_focus: gboolean; cdecl; inline;
    function get_application: PGtkApplication; cdecl; inline;
    function get_decorated: gboolean; cdecl; inline;
    procedure get_default_size(width: Pgint; height: Pgint); cdecl; inline;
    function get_default_widget: PGtkWidget; cdecl; inline;
    function get_deletable: gboolean; cdecl; inline;
    function get_destroy_with_parent: gboolean; cdecl; inline;
    function get_focus: PGtkWidget; cdecl; inline;
    function get_focus_on_map: gboolean; cdecl; inline;
    function get_focus_visible: gboolean; cdecl; inline;
    function get_gravity: TGdkGravity; cdecl; inline;
    function get_group: PGtkWindowGroup; cdecl; inline;
    function get_has_resize_grip: gboolean; cdecl; inline;
    function get_icon: PGdkPixbuf; cdecl; inline;
    function get_icon_list: PGList; cdecl; inline;
    function get_icon_name: Pgchar; cdecl; inline;
    function get_mnemonic_modifier: TGdkModifierType; cdecl; inline;
    function get_mnemonics_visible: gboolean; cdecl; inline;
    function get_modal: gboolean; cdecl; inline;
    function get_opacity: gdouble; cdecl; inline;
    procedure get_position(root_x: Pgint; root_y: Pgint); cdecl; inline;
    function get_resizable: gboolean; cdecl; inline;
    function get_resize_grip_area(rect: PGdkRectangle): gboolean; cdecl; inline;
    function get_role: Pgchar; cdecl; inline;
    function get_screen: PGdkScreen; cdecl; inline;
    procedure get_size(width: Pgint; height: Pgint); cdecl; inline;
    function get_skip_pager_hint: gboolean; cdecl; inline;
    function get_skip_taskbar_hint: gboolean; cdecl; inline;
    function get_title: Pgchar; cdecl; inline;
    function get_transient_for: PAtkWindow; cdecl; inline;
    function get_type_hint: TGdkWindowTypeHint; cdecl; inline;
    function get_urgency_hint: gboolean; cdecl; inline;
    function get_window_type: TGdkWindowType; cdecl; inline;
    function has_group: gboolean; cdecl; inline;
    function has_toplevel_focus: gboolean; cdecl; inline;
    procedure iconify; cdecl; inline;
    function is_active: gboolean; cdecl; inline;
    procedure maximize; cdecl; inline;
    function mnemonic_activate(keyval: guint; modifier: TGdkModifierType): gboolean; cdecl; inline;
    procedure move(x: gint; y: gint); cdecl; inline;
    function parse_geometry(geometry: Pgchar): gboolean; cdecl; inline;
    procedure present; cdecl; inline;
    procedure present_with_time(timestamp: guint32); cdecl; inline;
    function propagate_key_event(event: PGdkEventKey): gboolean; cdecl; inline;
    procedure remove_accel_group(accel_group: PGtkAccelGroup); cdecl; inline;
    procedure remove_mnemonic(keyval: guint; target: PGtkWidget); cdecl; inline;
    procedure reshow_with_initial_size; cdecl; inline;
    procedure resize(width: gint; height: gint); cdecl; inline;
    function resize_grip_is_visible: gboolean; cdecl; inline;
    procedure resize_to_geometry(width: gint; height: gint); cdecl; inline;
    procedure set_accept_focus(setting: gboolean); cdecl; inline;
    procedure set_application(application: PGtkApplication); cdecl; inline;
    procedure set_decorated(setting: gboolean); cdecl; inline;
    procedure set_default(default_widget: PGtkWidget); cdecl; inline;
    procedure set_default_geometry(width: gint; height: gint); cdecl; inline;
    procedure set_default_size(width: gint; height: gint); cdecl; inline;
    procedure set_deletable(setting: gboolean); cdecl; inline;
    procedure set_destroy_with_parent(setting: gboolean); cdecl; inline;
    procedure set_focus(focus: PGtkWidget); cdecl; inline;
    procedure set_focus_on_map(setting: gboolean); cdecl; inline;
    procedure set_focus_visible(setting: gboolean); cdecl; inline;
    procedure set_geometry_hints(geometry_widget: PGtkWidget; geometry: PGdkGeometry; geom_mask: TGdkWindowHints); cdecl; inline;
    procedure set_gravity(gravity: TGdkGravity); cdecl; inline;
    procedure set_has_resize_grip(value: gboolean); cdecl; inline;
    procedure set_has_user_ref_count(setting: gboolean); cdecl; inline;
    procedure set_icon(icon: PGdkPixbuf); cdecl; inline;
    function set_icon_from_file(filename: Pgchar): gboolean; cdecl; inline;
    procedure set_icon_list(list: PGList); cdecl; inline;
    procedure set_icon_name(name: Pgchar); cdecl; inline;
    procedure set_keep_above(setting: gboolean); cdecl; inline;
    procedure set_keep_below(setting: gboolean); cdecl; inline;
    procedure set_mnemonic_modifier(modifier: TGdkModifierType); cdecl; inline;
    procedure set_mnemonics_visible(setting: gboolean); cdecl; inline;
    procedure set_modal(modal: gboolean); cdecl; inline;
    procedure set_opacity(opacity: gdouble); cdecl; inline;
    procedure set_position(position: TGtkWindowPosition); cdecl; inline;
    procedure set_resizable(resizable: gboolean); cdecl; inline;
    procedure set_role(role: Pgchar); cdecl; inline;
    procedure set_screen(screen: PGdkScreen); cdecl; inline;
    procedure set_skip_pager_hint(setting: gboolean); cdecl; inline;
    procedure set_skip_taskbar_hint(setting: gboolean); cdecl; inline;
    procedure set_startup_id(startup_id: Pgchar); cdecl; inline;
    procedure set_title(title: Pgchar); cdecl; inline;
    procedure set_transient_for(parent: PAtkWindow); cdecl; inline;
    procedure set_type_hint(hint: TGdkWindowTypeHint); cdecl; inline;
    procedure set_urgency_hint(setting: gboolean); cdecl; inline;
    procedure set_wmclass(wmclass_name: Pgchar; wmclass_class: Pgchar); cdecl; inline;
    procedure stick; cdecl; inline;
    procedure unfullscreen; cdecl; inline;
    procedure unmaximize; cdecl; inline;
    procedure unstick; cdecl; inline;
    property accept_focus:  gboolean read get_accept_focus  { property is writeable but setter not declared } ;
    property application:  PGtkApplication read get_application  { property is writeable but setter not declared } ;
    property decorated:  gboolean read get_decorated  { property is writeable but setter not declared } ;
    //property default_height: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_default_height  { property is writeable but setter not declared } ;
    //property default_width: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_default_width  { property is writeable but setter not declared } ;
    property deletable:  gboolean read get_deletable  { property is writeable but setter not declared } ;
    property destroy_with_parent:  gboolean read get_destroy_with_parent  { property is writeable but setter not declared } ;
    property focus_on_map:  gboolean read get_focus_on_map  { property is writeable but setter not declared } ;
    property focus_visible:  gboolean read get_focus_visible  { property is writeable but setter not declared } ;
    property gravity:  TGdkGravity read get_gravity  { property is writeable but setter not declared } ;
    property has_resize_grip:  gboolean read get_has_resize_grip  { property is writeable but setter not declared } ;
    //property has_toplevel_focus1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_has_toplevel_focus ;
    property icon:  PGdkPixbuf read get_icon  { property is writeable but setter not declared } ;
    property icon_name:  Pgchar read get_icon_name  { property is writeable but setter not declared } ;
    //property is_active1: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_is_active ;
    property mnemonics_visible:  gboolean read get_mnemonics_visible  { property is writeable but setter not declared } ;
    property modal:  gboolean read get_modal  { property is writeable but setter not declared } ;
    property opacity:  gdouble read get_opacity  { property is writeable but setter not declared } ;
    property resizable:  gboolean read get_resizable  { property is writeable but setter not declared } ;
    //property resize_grip_visible: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_resize_grip_visible ;
    property role:  Pgchar read get_role  { property is writeable but setter not declared } ;
    property screen:  PGdkScreen read get_screen  { property is writeable but setter not declared } ;
    property skip_pager_hint:  gboolean read get_skip_pager_hint  { property is writeable but setter not declared } ;
    property skip_taskbar_hint:  gboolean read get_skip_taskbar_hint  { property is writeable but setter not declared } ;
    //property startup_id: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_startup_id  { property is writeable but setter not declared } ;
    property title:  Pgchar read get_title  { property is writeable but setter not declared } ;
    property transient_for:  PAtkWindow read get_transient_for  { property is writeable but setter not declared } ;
    //property type_: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_type  { property is writeable but setter not declared } ;
    property type_hint:  TGdkWindowTypeHint read get_type_hint  { property is writeable but setter not declared } ;
    property urgency_hint:  gboolean read get_urgency_hint  { property is writeable but setter not declared } ;
    //property window_position: UNABLE_TO_FIND_TYPE_FOR_PROPERTY read get_window_position  { property is writeable but setter not declared } ;
  end;

  PPGtkWindowClass = ^PGtkWindowClass;
  PGtkWindowClass = ^TGtkWindowClass;
  TGtkWindowClass = object
    parent_class: TGtkBinClass;
    set_focus: procedure(window: PGtkWindow; focus: PGtkWidget); cdecl;
    activate_focus: procedure(window: PGtkWindow); cdecl;
    activate_default: procedure(window: PGtkWindow); cdecl;
    keys_changed: procedure(window: PGtkWindow); cdecl;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkWindowGeometryInfo = ^PGtkWindowGeometryInfo;
  PGtkWindowGeometryInfo = ^TGtkWindowGeometryInfo;

  TGtkWindowGeometryInfo = record
    Unknown: Pointer;
  end;



  TGtkWindowGroupPrivate = record
    Unknown: Pointer;
  end;



  PPGtkWindowGroupClass = ^PGtkWindowGroupClass;
  PGtkWindowGroupClass = ^TGtkWindowGroupClass;
  TGtkWindowGroupClass = object
    parent_class: TGObjectClass;
    _gtk_reserved1: procedure; cdecl;
    _gtk_reserved2: procedure; cdecl;
    _gtk_reserved3: procedure; cdecl;
    _gtk_reserved4: procedure; cdecl;
  end;

  PPGtkWindowType = ^PGtkWindowType;
  PGtkWindowType = ^TGtkWindowType;

  PPGtkWrapMode = ^PGtkWrapMode;
  PGtkWrapMode = ^TGtkWrapMode;

function gtk_about_dialog_get_artists(AAboutDialog: PGtkAboutDialog): PPgchar; cdecl; external;
function gtk_about_dialog_get_authors(AAboutDialog: PGtkAboutDialog): PPgchar; cdecl; external;
function gtk_about_dialog_get_comments(AAboutDialog: PGtkAboutDialog): Pgchar; cdecl; external;
function gtk_about_dialog_get_copyright(AAboutDialog: PGtkAboutDialog): Pgchar; cdecl; external;
function gtk_about_dialog_get_documenters(AAboutDialog: PGtkAboutDialog): PPgchar; cdecl; external;
function gtk_about_dialog_get_license(AAboutDialog: PGtkAboutDialog): Pgchar; cdecl; external;
function gtk_about_dialog_get_license_type(AAboutDialog: PGtkAboutDialog): TGtkLicense; cdecl; external;
function gtk_about_dialog_get_logo(AAboutDialog: PGtkAboutDialog): PGdkPixbuf; cdecl; external;
function gtk_about_dialog_get_logo_icon_name(AAboutDialog: PGtkAboutDialog): Pgchar; cdecl; external;
function gtk_about_dialog_get_program_name(AAboutDialog: PGtkAboutDialog): Pgchar; cdecl; external;
function gtk_about_dialog_get_translator_credits(AAboutDialog: PGtkAboutDialog): Pgchar; cdecl; external;
function gtk_about_dialog_get_type: TGType; cdecl; external;
function gtk_about_dialog_get_version(AAboutDialog: PGtkAboutDialog): Pgchar; cdecl; external;
function gtk_about_dialog_get_website(AAboutDialog: PGtkAboutDialog): Pgchar; cdecl; external;
function gtk_about_dialog_get_website_label(AAboutDialog: PGtkAboutDialog): Pgchar; cdecl; external;
function gtk_about_dialog_get_wrap_license(AAboutDialog: PGtkAboutDialog): gboolean; cdecl; external;
function gtk_about_dialog_new: PGtkAboutDialog; cdecl; external;
function gtk_accel_group_activate(AAccelGroup: PGtkAccelGroup; accel_quark: TGQuark; acceleratable: PGObject; accel_key: guint; accel_mods: TGdkModifierType): gboolean; cdecl; external;
function gtk_accel_group_disconnect(AAccelGroup: PGtkAccelGroup; closure: PGClosure): gboolean; cdecl; external;
function gtk_accel_group_disconnect_key(AAccelGroup: PGtkAccelGroup; accel_key: guint; accel_mods: TGdkModifierType): gboolean; cdecl; external;
function gtk_accel_group_find(AAccelGroup: PGtkAccelGroup; find_func: TGtkAccelGroupFindFunc; data: gpointer): PGtkAccelKey; cdecl; external;
function gtk_accel_group_from_accel_closure(closure: PGClosure): PGtkAccelGroup; cdecl; external;
function gtk_accel_group_get_is_locked(AAccelGroup: PGtkAccelGroup): gboolean; cdecl; external;
function gtk_accel_group_get_modifier_mask(AAccelGroup: PGtkAccelGroup): TGdkModifierType; cdecl; external;
function gtk_accel_group_get_type: TGType; cdecl; external;
function gtk_accel_group_new: PGtkAccelGroup; cdecl; external;
function gtk_accel_group_query(AAccelGroup: PGtkAccelGroup; accel_key: guint; accel_mods: TGdkModifierType; n_entries: Pguint): PGtkAccelGroupEntry; cdecl; external;
function gtk_accel_groups_activate(object_: PGObject; accel_key: guint; accel_mods: TGdkModifierType): gboolean; cdecl; external;
function gtk_accel_groups_from_object(object_: PGObject): PGSList; cdecl; external;
function gtk_accel_label_get_accel_widget(AAccelLabel: PGtkAccelLabel): PGtkWidget; cdecl; external;
function gtk_accel_label_get_accel_width(AAccelLabel: PGtkAccelLabel): guint; cdecl; external;
function gtk_accel_label_get_type: TGType; cdecl; external;
function gtk_accel_label_new(string_: Pgchar): PGtkAccelLabel; cdecl; external;
function gtk_accel_label_refetch(AAccelLabel: PGtkAccelLabel): gboolean; cdecl; external;
function gtk_accel_map_change_entry(accel_path: Pgchar; accel_key: guint; accel_mods: TGdkModifierType; replace: gboolean): gboolean; cdecl; external;
function gtk_accel_map_get: PGtkAccelMap; cdecl; external;
function gtk_accel_map_get_type: TGType; cdecl; external;
function gtk_accel_map_lookup_entry(accel_path: Pgchar; key: PGtkAccelKey): gboolean; cdecl; external;
function gtk_accelerator_get_default_mod_mask: TGdkModifierType; cdecl; external;
function gtk_accelerator_get_label(accelerator_key: guint; accelerator_mods: TGdkModifierType): Pgchar; cdecl; external;
function gtk_accelerator_name(accelerator_key: guint; accelerator_mods: TGdkModifierType): Pgchar; cdecl; external;
function gtk_accelerator_valid(keyval: guint; modifiers: TGdkModifierType): gboolean; cdecl; external;
function gtk_accessible_get_type: TGType; cdecl; external;
function gtk_accessible_get_widget(AAccessible: PGtkAccessible): PGtkWidget; cdecl; external;
function gtk_action_create_icon(AAction: PGtkAction; icon_size: gint): PGtkWidget; cdecl; external;
function gtk_action_create_menu(AAction: PGtkAction): PGtkWidget; cdecl; external;
function gtk_action_create_menu_item(AAction: PGtkAction): PGtkWidget; cdecl; external;
function gtk_action_create_tool_item(AAction: PGtkAction): PGtkWidget; cdecl; external;
function gtk_action_get_accel_closure(AAction: PGtkAction): PGClosure; cdecl; external;
function gtk_action_get_accel_path(AAction: PGtkAction): Pgchar; cdecl; external;
function gtk_action_get_always_show_image(AAction: PGtkAction): gboolean; cdecl; external;
function gtk_action_get_gicon(AAction: PGtkAction): PGIcon; cdecl; external;
function gtk_action_get_icon_name(AAction: PGtkAction): Pgchar; cdecl; external;
function gtk_action_get_is_important(AAction: PGtkAction): gboolean; cdecl; external;
function gtk_action_get_label(AAction: PGtkAction): Pgchar; cdecl; external;
function gtk_action_get_name(AAction: PGtkAction): Pgchar; cdecl; external;
function gtk_action_get_proxies(AAction: PGtkAction): PGSList; cdecl; external;
function gtk_action_get_sensitive(AAction: PGtkAction): gboolean; cdecl; external;
function gtk_action_get_short_label(AAction: PGtkAction): Pgchar; cdecl; external;
function gtk_action_get_stock_id(AAction: PGtkAction): Pgchar; cdecl; external;
function gtk_action_get_tooltip(AAction: PGtkAction): Pgchar; cdecl; external;
function gtk_action_get_type: TGType; cdecl; external;
function gtk_action_get_visible(AAction: PGtkAction): gboolean; cdecl; external;
function gtk_action_get_visible_horizontal(AAction: PGtkAction): gboolean; cdecl; external;
function gtk_action_get_visible_vertical(AAction: PGtkAction): gboolean; cdecl; external;
function gtk_action_group_get_action(AActionGroup: PGtkActionGroup; action_name: Pgchar): PGtkAction; cdecl; external;
function gtk_action_group_get_name(AActionGroup: PGtkActionGroup): Pgchar; cdecl; external;
function gtk_action_group_get_sensitive(AActionGroup: PGtkActionGroup): gboolean; cdecl; external;
function gtk_action_group_get_type: TGType; cdecl; external;
function gtk_action_group_get_visible(AActionGroup: PGtkActionGroup): gboolean; cdecl; external;
function gtk_action_group_list_actions(AActionGroup: PGtkActionGroup): PGList; cdecl; external;
function gtk_action_group_new(name: Pgchar): PGtkActionGroup; cdecl; external;
function gtk_action_group_translate_string(AActionGroup: PGtkActionGroup; string_: Pgchar): Pgchar; cdecl; external;
function gtk_action_is_sensitive(AAction: PGtkAction): gboolean; cdecl; external;
function gtk_action_is_visible(AAction: PGtkAction): gboolean; cdecl; external;
function gtk_action_new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar): PGtkAction; cdecl; external;
function gtk_activatable_get_related_action(AActivatable: PGtkActivatable): PGtkAction; cdecl; external;
function gtk_activatable_get_type: TGType; cdecl; external;
function gtk_activatable_get_use_action_appearance(AActivatable: PGtkActivatable): gboolean; cdecl; external;
function gtk_adjustment_get_lower(AAdjustment: PGtkAdjustment): gdouble; cdecl; external;
function gtk_adjustment_get_minimum_increment(AAdjustment: PGtkAdjustment): gdouble; cdecl; external;
function gtk_adjustment_get_page_increment(AAdjustment: PGtkAdjustment): gdouble; cdecl; external;
function gtk_adjustment_get_page_size(AAdjustment: PGtkAdjustment): gdouble; cdecl; external;
function gtk_adjustment_get_step_increment(AAdjustment: PGtkAdjustment): gdouble; cdecl; external;
function gtk_adjustment_get_type: TGType; cdecl; external;
function gtk_adjustment_get_upper(AAdjustment: PGtkAdjustment): gdouble; cdecl; external;
function gtk_adjustment_get_value(AAdjustment: PGtkAdjustment): gdouble; cdecl; external;
function gtk_adjustment_new(value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble): PGtkAdjustment; cdecl; external;
function gtk_alignment_get_type: TGType; cdecl; external;
function gtk_alignment_new(xalign: gfloat; yalign: gfloat; xscale: gfloat; yscale: gfloat): PGtkAlignment; cdecl; external;
function gtk_alternative_dialog_button_order(screen: PGdkScreen): gboolean; cdecl; external;
function gtk_app_chooser_button_get_heading(AAppChooserButton: PGtkAppChooserButton): Pgchar; cdecl; external;
function gtk_app_chooser_button_get_show_dialog_item(AAppChooserButton: PGtkAppChooserButton): gboolean; cdecl; external;
function gtk_app_chooser_button_get_type: TGType; cdecl; external;
function gtk_app_chooser_button_new(content_type: Pgchar): PGtkAppChooserButton; cdecl; external;
function gtk_app_chooser_dialog_get_heading(AAppChooserDialog: PGtkAppChooserDialog): Pgchar; cdecl; external;
function gtk_app_chooser_dialog_get_type: TGType; cdecl; external;
function gtk_app_chooser_dialog_get_widget(AAppChooserDialog: PGtkAppChooserDialog): PGtkWidget; cdecl; external;
function gtk_app_chooser_dialog_new(parent: PAtkWindow; flags: TGtkDialogFlags; file_: PGFile): PGtkAppChooserDialog; cdecl; external;
function gtk_app_chooser_dialog_new_for_content_type(parent: PAtkWindow; flags: TGtkDialogFlags; content_type: Pgchar): PGtkAppChooserDialog; cdecl; external;
function gtk_app_chooser_get_app_info(AAppChooser: PGtkAppChooser): PGAppInfo; cdecl; external;
function gtk_app_chooser_get_content_type(AAppChooser: PGtkAppChooser): Pgchar; cdecl; external;
function gtk_app_chooser_get_type: TGType; cdecl; external;
function gtk_app_chooser_widget_get_default_text(AAppChooserWidget: PGtkAppChooserWidget): Pgchar; cdecl; external;
function gtk_app_chooser_widget_get_show_all(AAppChooserWidget: PGtkAppChooserWidget): gboolean; cdecl; external;
function gtk_app_chooser_widget_get_show_default(AAppChooserWidget: PGtkAppChooserWidget): gboolean; cdecl; external;
function gtk_app_chooser_widget_get_show_fallback(AAppChooserWidget: PGtkAppChooserWidget): gboolean; cdecl; external;
function gtk_app_chooser_widget_get_show_other(AAppChooserWidget: PGtkAppChooserWidget): gboolean; cdecl; external;
function gtk_app_chooser_widget_get_show_recommended(AAppChooserWidget: PGtkAppChooserWidget): gboolean; cdecl; external;
function gtk_app_chooser_widget_get_type: TGType; cdecl; external;
function gtk_app_chooser_widget_new(content_type: Pgchar): PGtkAppChooserWidget; cdecl; external;
function gtk_application_get_type: TGType; cdecl; external;
function gtk_application_get_windows(AApplication: PGtkApplication): PGList; cdecl; external;
function gtk_application_new(application_id: Pgchar; flags: TGApplicationFlags): PGtkApplication; cdecl; external;
function gtk_arrow_get_type: TGType; cdecl; external;
function gtk_arrow_new(arrow_type: TGtkArrowType; shadow_type: TGtkShadowType): PGtkArrow; cdecl; external;
function gtk_aspect_frame_get_type: TGType; cdecl; external;
function gtk_aspect_frame_new(label_: Pgchar; xalign: gfloat; yalign: gfloat; ratio: gfloat; obey_child: gboolean): PGtkAspectFrame; cdecl; external;
function gtk_assistant_append_page(AAssistant: PGtkAssistant; page: PGtkWidget): gint; cdecl; external;
function gtk_assistant_get_current_page(AAssistant: PGtkAssistant): gint; cdecl; external;
function gtk_assistant_get_n_pages(AAssistant: PGtkAssistant): gint; cdecl; external;
function gtk_assistant_get_nth_page(AAssistant: PGtkAssistant; page_num: gint): PGtkWidget; cdecl; external;
function gtk_assistant_get_page_complete(AAssistant: PGtkAssistant; page: PGtkWidget): gboolean; cdecl; external;
function gtk_assistant_get_page_title(AAssistant: PGtkAssistant; page: PGtkWidget): Pgchar; cdecl; external;
function gtk_assistant_get_page_type(AAssistant: PGtkAssistant; page: PGtkWidget): TGtkAssistantPageType; cdecl; external;
function gtk_assistant_get_type: TGType; cdecl; external;
function gtk_assistant_insert_page(AAssistant: PGtkAssistant; page: PGtkWidget; position: gint): gint; cdecl; external;
function gtk_assistant_new: PGtkAssistant; cdecl; external;
function gtk_assistant_prepend_page(AAssistant: PGtkAssistant; page: PGtkWidget): gint; cdecl; external;
function gtk_bin_get_child(ABin: PGtkBin): PGtkWidget; cdecl; external;
function gtk_bin_get_type: TGType; cdecl; external;
function gtk_binding_entry_add_signal_from_string(binding_set: PGtkBindingSet; signal_desc: Pgchar): TGTokenType; cdecl; external;
function gtk_binding_set_activate(ABindingSet: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType; object_: PGObject): gboolean; cdecl; external;
function gtk_binding_set_by_class(object_class: gpointer): PGtkBindingSet; cdecl; external;
function gtk_binding_set_find(set_name: Pgchar): PGtkBindingSet; cdecl; external;
function gtk_binding_set_new(set_name: Pgchar): PGtkBindingSet; cdecl; external;
function gtk_bindings_activate(object_: PGObject; keyval: guint; modifiers: TGdkModifierType): gboolean; cdecl; external;
function gtk_bindings_activate_event(object_: PGObject; event: PGdkEventKey): gboolean; cdecl; external;
function gtk_border_copy(ABorder: PGtkBorder): PGtkBorder; cdecl; external;
function gtk_border_get_type: TGType; cdecl; external;
function gtk_border_new: PGtkBorder; cdecl; external;
function gtk_box_get_homogeneous(ABox: PGtkBox): gboolean; cdecl; external;
function gtk_box_get_spacing(ABox: PGtkBox): gint; cdecl; external;
function gtk_box_get_type: TGType; cdecl; external;
function gtk_box_new(orientation: TGtkOrientation; spacing: gint): PGtkBox; cdecl; external;
function gtk_buildable_construct_child(ABuildable: PGtkBuildable; builder: PGtkBuilder; name: Pgchar): PGObject; cdecl; external;
function gtk_buildable_custom_tag_start(ABuildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; tagname: Pgchar; parser: PGMarkupParser; data: Pgpointer): gboolean; cdecl; external;
function gtk_buildable_get_internal_child(ABuildable: PGtkBuildable; builder: PGtkBuilder; childname: Pgchar): PGObject; cdecl; external;
function gtk_buildable_get_name(ABuildable: PGtkBuildable): Pgchar; cdecl; external;
function gtk_buildable_get_type: TGType; cdecl; external;
function gtk_builder_add_from_file(ABuilder: PGtkBuilder; filename: Pgchar): guint; cdecl; external;
function gtk_builder_add_from_string(ABuilder: PGtkBuilder; buffer: Pgchar; length: gsize): guint; cdecl; external;
function gtk_builder_add_objects_from_file(ABuilder: PGtkBuilder; filename: Pgchar; object_ids: PPgchar): guint; cdecl; external;
function gtk_builder_add_objects_from_string(ABuilder: PGtkBuilder; buffer: Pgchar; length: gsize; object_ids: PPgchar): guint; cdecl; external;
function gtk_builder_error_quark: TGQuark; cdecl; external;
function gtk_builder_get_object(ABuilder: PGtkBuilder; name: Pgchar): PGObject; cdecl; external;
function gtk_builder_get_objects(ABuilder: PGtkBuilder): PGSList; cdecl; external;
function gtk_builder_get_translation_domain(ABuilder: PGtkBuilder): Pgchar; cdecl; external;
function gtk_builder_get_type: TGType; cdecl; external;
function gtk_builder_get_type_from_name(ABuilder: PGtkBuilder; type_name: Pgchar): TGType; cdecl; external;
function gtk_builder_new: PGtkBuilder; cdecl; external;
function gtk_builder_value_from_string(ABuilder: PGtkBuilder; pspec: PGParamSpec; string_: Pgchar; value: PGValue): gboolean; cdecl; external;
function gtk_builder_value_from_string_type(ABuilder: PGtkBuilder; type_: TGType; string_: Pgchar; value: PGValue): gboolean; cdecl; external;
function gtk_button_box_get_child_non_homogeneous(AButtonBox: PGtkButtonBox; child: PGtkWidget): gboolean; cdecl; external;
function gtk_button_box_get_child_secondary(AButtonBox: PGtkButtonBox; child: PGtkWidget): gboolean; cdecl; external;
function gtk_button_box_get_layout(AButtonBox: PGtkButtonBox): TGtkButtonBoxStyle; cdecl; external;
function gtk_button_box_get_type: TGType; cdecl; external;
function gtk_button_box_new(orientation: TGtkOrientation): PGtkButtonBox; cdecl; external;
function gtk_button_get_event_window(AButton: PGtkButton): PGdkWindow; cdecl; external;
function gtk_button_get_focus_on_click(AButton: PGtkButton): gboolean; cdecl; external;
function gtk_button_get_image(AButton: PGtkButton): PGtkWidget; cdecl; external;
function gtk_button_get_image_position(AButton: PGtkButton): TGtkPositionType; cdecl; external;
function gtk_button_get_label(AButton: PGtkButton): Pgchar; cdecl; external;
function gtk_button_get_relief(AButton: PGtkButton): TGtkReliefStyle; cdecl; external;
function gtk_button_get_type: TGType; cdecl; external;
function gtk_button_get_use_stock(AButton: PGtkButton): gboolean; cdecl; external;
function gtk_button_get_use_underline(AButton: PGtkButton): gboolean; cdecl; external;
function gtk_button_new: PGtkButton; cdecl; external;
function gtk_button_new_from_stock(stock_id: Pgchar): PGtkButton; cdecl; external;
function gtk_button_new_with_label(label_: Pgchar): PGtkButton; cdecl; external;
function gtk_button_new_with_mnemonic(label_: Pgchar): PGtkButton; cdecl; external;
function gtk_cairo_should_draw_window(cr: Pcairo_t; window: PGdkWindow): gboolean; cdecl; external;
function gtk_calendar_get_day_is_marked(ACalendar: PGtkCalendar; day: guint): gboolean; cdecl; external;
function gtk_calendar_get_detail_height_rows(ACalendar: PGtkCalendar): gint; cdecl; external;
function gtk_calendar_get_detail_width_chars(ACalendar: PGtkCalendar): gint; cdecl; external;
function gtk_calendar_get_display_options(ACalendar: PGtkCalendar): TGtkCalendarDisplayOptions; cdecl; external;
function gtk_calendar_get_type: TGType; cdecl; external;
function gtk_calendar_new: PGtkCalendar; cdecl; external;
function gtk_cell_area_activate(ACellArea: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; flags: TGtkCellRendererState; edit_only: gboolean): gboolean; cdecl; external;
function gtk_cell_area_activate_cell(ACellArea: PGtkCellArea; widget: PGtkWidget; renderer: PGtkCellRenderer; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl; external;
function gtk_cell_area_box_get_spacing(ACellAreaBox: PGtkCellAreaBox): gint; cdecl; external;
function gtk_cell_area_box_get_type: TGType; cdecl; external;
function gtk_cell_area_box_new: PGtkCellAreaBox; cdecl; external;
function gtk_cell_area_class_find_cell_property(ACellAreaClass: PGtkCellAreaClass; property_name: Pgchar): PGParamSpec; cdecl; external;
function gtk_cell_area_class_list_cell_properties(ACellAreaClass: PGtkCellAreaClass; n_properties: Pguint): PPGParamSpec; cdecl; external;
function gtk_cell_area_context_get_area(ACellAreaContext: PGtkCellAreaContext): PGtkCellArea; cdecl; external;
function gtk_cell_area_context_get_type: TGType; cdecl; external;
function gtk_cell_area_copy_context(ACellArea: PGtkCellArea; context: PGtkCellAreaContext): PGtkCellAreaContext; cdecl; external;
function gtk_cell_area_create_context(ACellArea: PGtkCellArea): PGtkCellAreaContext; cdecl; external;
function gtk_cell_area_event(ACellArea: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gint; cdecl; external;
function gtk_cell_area_focus(ACellArea: PGtkCellArea; direction: TGtkDirectionType): gboolean; cdecl; external;
function gtk_cell_area_get_cell_at_position(ACellArea: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; x: gint; y: gint; alloc_area: PGdkRectangle): PGtkCellRenderer; cdecl; external;
function gtk_cell_area_get_current_path_string(ACellArea: PGtkCellArea): Pgchar; cdecl; external;
function gtk_cell_area_get_edit_widget(ACellArea: PGtkCellArea): PGtkCellEditable; cdecl; external;
function gtk_cell_area_get_edited_cell(ACellArea: PGtkCellArea): PGtkCellRenderer; cdecl; external;
function gtk_cell_area_get_focus_cell(ACellArea: PGtkCellArea): PGtkCellRenderer; cdecl; external;
function gtk_cell_area_get_focus_from_sibling(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer): PGtkCellRenderer; cdecl; external;
function gtk_cell_area_get_focus_siblings(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer): PGList; cdecl; external;
function gtk_cell_area_get_request_mode(ACellArea: PGtkCellArea): TGtkSizeRequestMode; cdecl; external;
function gtk_cell_area_get_type: TGType; cdecl; external;
function gtk_cell_area_has_renderer(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer): gboolean; cdecl; external;
function gtk_cell_area_is_activatable(ACellArea: PGtkCellArea): gboolean; cdecl; external;
function gtk_cell_area_is_focus_sibling(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; sibling: PGtkCellRenderer): gboolean; cdecl; external;
function gtk_cell_editable_get_type: TGType; cdecl; external;
function gtk_cell_layout_get_area(ACellLayout: PGtkCellLayout): PGtkCellArea; cdecl; external;
function gtk_cell_layout_get_cells(ACellLayout: PGtkCellLayout): PGList; cdecl; external;
function gtk_cell_layout_get_type: TGType; cdecl; external;
function gtk_cell_renderer_accel_get_type: TGType; cdecl; external;
function gtk_cell_renderer_accel_new: PGtkCellRendererAccel; cdecl; external;
function gtk_cell_renderer_activate(ACellRenderer: PGtkCellRenderer; event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl; external;
function gtk_cell_renderer_combo_get_type: TGType; cdecl; external;
function gtk_cell_renderer_combo_new: PGtkCellRendererCombo; cdecl; external;
function gtk_cell_renderer_get_request_mode(ACellRenderer: PGtkCellRenderer): TGtkSizeRequestMode; cdecl; external;
function gtk_cell_renderer_get_sensitive(ACellRenderer: PGtkCellRenderer): gboolean; cdecl; external;
function gtk_cell_renderer_get_state(ACellRenderer: PGtkCellRenderer; widget: PGtkWidget; cell_state: TGtkCellRendererState): TGtkStateFlags; cdecl; external;
function gtk_cell_renderer_get_type: TGType; cdecl; external;
function gtk_cell_renderer_get_visible(ACellRenderer: PGtkCellRenderer): gboolean; cdecl; external;
function gtk_cell_renderer_is_activatable(ACellRenderer: PGtkCellRenderer): gboolean; cdecl; external;
function gtk_cell_renderer_pixbuf_get_type: TGType; cdecl; external;
function gtk_cell_renderer_pixbuf_new: PGtkCellRendererPixbuf; cdecl; external;
function gtk_cell_renderer_progress_get_type: TGType; cdecl; external;
function gtk_cell_renderer_progress_new: PGtkCellRendererProgress; cdecl; external;
function gtk_cell_renderer_spin_get_type: TGType; cdecl; external;
function gtk_cell_renderer_spin_new: PGtkCellRendererSpin; cdecl; external;
function gtk_cell_renderer_spinner_get_type: TGType; cdecl; external;
function gtk_cell_renderer_spinner_new: PGtkCellRendererSpinner; cdecl; external;
function gtk_cell_renderer_start_editing(ACellRenderer: PGtkCellRenderer; event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): PGtkCellEditable; cdecl; external;
function gtk_cell_renderer_text_get_type: TGType; cdecl; external;
function gtk_cell_renderer_text_new: PGtkCellRendererText; cdecl; external;
function gtk_cell_renderer_toggle_get_activatable(ACellRendererToggle: PGtkCellRendererToggle): gboolean; cdecl; external;
function gtk_cell_renderer_toggle_get_active(ACellRendererToggle: PGtkCellRendererToggle): gboolean; cdecl; external;
function gtk_cell_renderer_toggle_get_radio(ACellRendererToggle: PGtkCellRendererToggle): gboolean; cdecl; external;
function gtk_cell_renderer_toggle_get_type: TGType; cdecl; external;
function gtk_cell_renderer_toggle_new: PGtkCellRendererToggle; cdecl; external;
function gtk_cell_view_get_displayed_row(ACellView: PGtkCellView): PGtkTreePath; cdecl; external;
function gtk_cell_view_get_draw_sensitive(ACellView: PGtkCellView): gboolean; cdecl; external;
function gtk_cell_view_get_fit_model(ACellView: PGtkCellView): gboolean; cdecl; external;
function gtk_cell_view_get_model(ACellView: PGtkCellView): PGtkTreeModel; cdecl; external;
function gtk_cell_view_get_type: TGType; cdecl; external;
function gtk_cell_view_new: PGtkCellView; cdecl; external;
function gtk_cell_view_new_with_context(area: PGtkCellArea; context: PGtkCellAreaContext): PGtkCellView; cdecl; external;
function gtk_cell_view_new_with_markup(markup: Pgchar): PGtkCellView; cdecl; external;
function gtk_cell_view_new_with_pixbuf(pixbuf: PGdkPixbuf): PGtkCellView; cdecl; external;
function gtk_cell_view_new_with_text(text: Pgchar): PGtkCellView; cdecl; external;
function gtk_check_button_get_type: TGType; cdecl; external;
function gtk_check_button_new: PGtkCheckButton; cdecl; external;
function gtk_check_button_new_with_label(label_: Pgchar): PGtkCheckButton; cdecl; external;
function gtk_check_button_new_with_mnemonic(label_: Pgchar): PGtkCheckButton; cdecl; external;
function gtk_check_menu_item_get_active(ACheckMenuItem: PGtkCheckMenuItem): gboolean; cdecl; external;
function gtk_check_menu_item_get_draw_as_radio(ACheckMenuItem: PGtkCheckMenuItem): gboolean; cdecl; external;
function gtk_check_menu_item_get_inconsistent(ACheckMenuItem: PGtkCheckMenuItem): gboolean; cdecl; external;
function gtk_check_menu_item_get_type: TGType; cdecl; external;
function gtk_check_menu_item_new: PGtkCheckMenuItem; cdecl; external;
function gtk_check_menu_item_new_with_label(label_: Pgchar): PGtkCheckMenuItem; cdecl; external;
function gtk_check_menu_item_new_with_mnemonic(label_: Pgchar): PGtkCheckMenuItem; cdecl; external;
function gtk_check_version(required_major: guint; required_minor: guint; required_micro: guint): Pgchar; cdecl; external;
function gtk_clipboard_get(selection: TGdkAtom): PGtkClipboard; cdecl; external;
function gtk_clipboard_get_display(AClipboard: PGtkClipboard): PGdkDisplay; cdecl; external;
function gtk_clipboard_get_for_display(display: PGdkDisplay; selection: TGdkAtom): PGtkClipboard; cdecl; external;
function gtk_clipboard_get_owner(AClipboard: PGtkClipboard): PGObject; cdecl; external;
function gtk_clipboard_get_type: TGType; cdecl; external;
function gtk_clipboard_set_with_data(AClipboard: PGtkClipboard; targets: PGtkTargetEntry; n_targets: guint; get_func: TGtkClipboardGetFunc; clear_func: TGtkClipboardClearFunc; user_data: gpointer): gboolean; cdecl; external;
function gtk_clipboard_set_with_owner(AClipboard: PGtkClipboard; targets: PGtkTargetEntry; n_targets: guint; get_func: TGtkClipboardGetFunc; clear_func: TGtkClipboardClearFunc; owner: PGObject): gboolean; cdecl; external;
function gtk_clipboard_wait_for_contents(AClipboard: PGtkClipboard; target: TGdkAtom): PGtkSelectionData; cdecl; external;
function gtk_clipboard_wait_for_image(AClipboard: PGtkClipboard): PGdkPixbuf; cdecl; external;
function gtk_clipboard_wait_for_rich_text(AClipboard: PGtkClipboard; buffer: PGtkTextBuffer; format: PGdkAtom; length: Pgsize): Pguint8; cdecl; external;
function gtk_clipboard_wait_for_targets(AClipboard: PGtkClipboard; targets: PPGdkAtom; n_targets: Pgint): gboolean; cdecl; external;
function gtk_clipboard_wait_for_text(AClipboard: PGtkClipboard): Pgchar; cdecl; external;
function gtk_clipboard_wait_for_uris(AClipboard: PGtkClipboard): PPgchar; cdecl; external;
function gtk_clipboard_wait_is_image_available(AClipboard: PGtkClipboard): gboolean; cdecl; external;
function gtk_clipboard_wait_is_rich_text_available(AClipboard: PGtkClipboard; buffer: PGtkTextBuffer): gboolean; cdecl; external;
function gtk_clipboard_wait_is_target_available(AClipboard: PGtkClipboard; target: TGdkAtom): gboolean; cdecl; external;
function gtk_clipboard_wait_is_text_available(AClipboard: PGtkClipboard): gboolean; cdecl; external;
function gtk_clipboard_wait_is_uris_available(AClipboard: PGtkClipboard): gboolean; cdecl; external;
function gtk_color_button_get_alpha(AColorButton: PGtkColorButton): guint16; cdecl; external;
function gtk_color_button_get_title(AColorButton: PGtkColorButton): Pgchar; cdecl; external;
function gtk_color_button_get_type: TGType; cdecl; external;
function gtk_color_button_get_use_alpha(AColorButton: PGtkColorButton): gboolean; cdecl; external;
function gtk_color_button_new: PGtkColorButton; cdecl; external;
function gtk_color_button_new_with_color(color: PGdkColor): PGtkColorButton; cdecl; external;
function gtk_color_button_new_with_rgba(rgba: PGdkRGBA): PGtkColorButton; cdecl; external;
function gtk_color_selection_dialog_get_color_selection(AColorSelectionDialog: PGtkColorSelectionDialog): PGtkWidget; cdecl; external;
function gtk_color_selection_dialog_get_type: TGType; cdecl; external;
function gtk_color_selection_dialog_new(title: Pgchar): PGtkColorSelectionDialog; cdecl; external;
function gtk_color_selection_get_current_alpha(AColorSelection: PGtkColorSelection): guint16; cdecl; external;
function gtk_color_selection_get_has_opacity_control(AColorSelection: PGtkColorSelection): gboolean; cdecl; external;
function gtk_color_selection_get_has_palette(AColorSelection: PGtkColorSelection): gboolean; cdecl; external;
function gtk_color_selection_get_previous_alpha(AColorSelection: PGtkColorSelection): guint16; cdecl; external;
function gtk_color_selection_get_type: TGType; cdecl; external;
function gtk_color_selection_is_adjusting(AColorSelection: PGtkColorSelection): gboolean; cdecl; external;
function gtk_color_selection_new: PGtkColorSelection; cdecl; external;
function gtk_color_selection_palette_from_string(str: Pgchar; colors: PPGdkColor; n_colors: Pgint): gboolean; cdecl; external;
function gtk_color_selection_palette_to_string(colors: PGdkColor; n_colors: gint): Pgchar; cdecl; external;
function gtk_color_selection_set_change_palette_with_screen_hook(func: TGtkColorSelectionChangePaletteWithScreenFunc): TGtkColorSelectionChangePaletteWithScreenFunc; cdecl; external;
function gtk_combo_box_get_active(AComboBox: PGtkComboBox): gint; cdecl; external;
function gtk_combo_box_get_active_id(AComboBox: PGtkComboBox): Pgchar; cdecl; external;
function gtk_combo_box_get_active_iter(AComboBox: PGtkComboBox; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_combo_box_get_add_tearoffs(AComboBox: PGtkComboBox): gboolean; cdecl; external;
function gtk_combo_box_get_button_sensitivity(AComboBox: PGtkComboBox): TGtkSensitivityType; cdecl; external;
function gtk_combo_box_get_column_span_column(AComboBox: PGtkComboBox): gint; cdecl; external;
function gtk_combo_box_get_entry_text_column(AComboBox: PGtkComboBox): gint; cdecl; external;
function gtk_combo_box_get_focus_on_click(AComboBox: PGtkComboBox): gboolean; cdecl; external;
function gtk_combo_box_get_has_entry(AComboBox: PGtkComboBox): gboolean; cdecl; external;
function gtk_combo_box_get_id_column(AComboBox: PGtkComboBox): gint; cdecl; external;
function gtk_combo_box_get_model(AComboBox: PGtkComboBox): PGtkTreeModel; cdecl; external;
function gtk_combo_box_get_popup_accessible(AComboBox: PGtkComboBox): PAtkObject; cdecl; external;
function gtk_combo_box_get_popup_fixed_width(AComboBox: PGtkComboBox): gboolean; cdecl; external;
function gtk_combo_box_get_row_separator_func(AComboBox: PGtkComboBox): TGtkTreeViewRowSeparatorFunc; cdecl; external;
function gtk_combo_box_get_row_span_column(AComboBox: PGtkComboBox): gint; cdecl; external;
function gtk_combo_box_get_title(AComboBox: PGtkComboBox): Pgchar; cdecl; external;
function gtk_combo_box_get_type: TGType; cdecl; external;
function gtk_combo_box_get_wrap_width(AComboBox: PGtkComboBox): gint; cdecl; external;
function gtk_combo_box_new: PGtkComboBox; cdecl; external;
function gtk_combo_box_new_with_area(area: PGtkCellArea): PGtkComboBox; cdecl; external;
function gtk_combo_box_new_with_area_and_entry(area: PGtkCellArea): PGtkComboBox; cdecl; external;
function gtk_combo_box_new_with_entry: PGtkComboBox; cdecl; external;
function gtk_combo_box_new_with_model(model: PGtkTreeModel): PGtkComboBox; cdecl; external;
function gtk_combo_box_new_with_model_and_entry(model: PGtkTreeModel): PGtkComboBox; cdecl; external;
function gtk_combo_box_set_active_id(AComboBox: PGtkComboBox; active_id: Pgchar): gboolean; cdecl; external;
function gtk_combo_box_text_get_active_text(AComboBoxText: PGtkComboBoxText): Pgchar; cdecl; external;
function gtk_combo_box_text_get_type: TGType; cdecl; external;
function gtk_combo_box_text_new: PGtkComboBoxText; cdecl; external;
function gtk_combo_box_text_new_with_entry: PGtkComboBoxText; cdecl; external;
function gtk_container_child_type(AContainer: PGtkContainer): TGType; cdecl; external;
function gtk_container_class_find_child_property(AContainerClass: PGtkContainerClass; property_name: Pgchar): PGParamSpec; cdecl; external;
function gtk_container_class_list_child_properties(AContainerClass: PGtkContainerClass; n_properties: Pguint): PPGParamSpec; cdecl; external;
function gtk_container_get_border_width(AContainer: PGtkContainer): guint; cdecl; external;
function gtk_container_get_children(AContainer: PGtkContainer): PGList; cdecl; external;
function gtk_container_get_focus_chain(AContainer: PGtkContainer; focusable_widgets: PPGList): gboolean; cdecl; external;
function gtk_container_get_focus_child(AContainer: PGtkContainer): PGtkWidget; cdecl; external;
function gtk_container_get_focus_hadjustment(AContainer: PGtkContainer): PGtkAdjustment; cdecl; external;
function gtk_container_get_focus_vadjustment(AContainer: PGtkContainer): PGtkAdjustment; cdecl; external;
function gtk_container_get_path_for_child(AContainer: PGtkContainer; child: PGtkWidget): PGtkWidgetPath; cdecl; external;
function gtk_container_get_resize_mode(AContainer: PGtkContainer): TGtkResizeMode; cdecl; external;
function gtk_container_get_type: TGType; cdecl; external;
function gtk_css_provider_error_quark: TGQuark; cdecl; external;
function gtk_css_provider_get_default: PGtkCssProvider; cdecl; external;
function gtk_css_provider_get_named(name: Pgchar; variant: Pgchar): PGtkCssProvider; cdecl; external;
function gtk_css_provider_get_type: TGType; cdecl; external;
function gtk_css_provider_load_from_data(ACssProvider: PGtkCssProvider; data: Pgchar; length: gssize): gboolean; cdecl; external;
function gtk_css_provider_load_from_file(ACssProvider: PGtkCssProvider; file_: PGFile): gboolean; cdecl; external;
function gtk_css_provider_load_from_path(ACssProvider: PGtkCssProvider; path: Pgchar): gboolean; cdecl; external;
function gtk_css_provider_new: PGtkCssProvider; cdecl; external;
function gtk_css_provider_to_string(ACssProvider: PGtkCssProvider): Pgchar; cdecl; external;
function gtk_css_section_get_end_line(ACssSection: PGtkCssSection): guint; cdecl; external;
function gtk_css_section_get_end_position(ACssSection: PGtkCssSection): guint; cdecl; external;
function gtk_css_section_get_file(ACssSection: PGtkCssSection): PGFile; cdecl; external;
function gtk_css_section_get_parent(ACssSection: PGtkCssSection): PGtkCssSection; cdecl; external;
function gtk_css_section_get_section_type(ACssSection: PGtkCssSection): TGtkCssSectionType; cdecl; external;
function gtk_css_section_get_start_line(ACssSection: PGtkCssSection): guint; cdecl; external;
function gtk_css_section_get_start_position(ACssSection: PGtkCssSection): guint; cdecl; external;
function gtk_css_section_get_type: TGType; cdecl; external;
function gtk_css_section_ref(ACssSection: PGtkCssSection): PGtkCssSection; cdecl; external;
function gtk_dialog_add_button(ADialog: PGtkDialog; button_text: Pgchar; response_id: gint): PGtkWidget; cdecl; external;
function gtk_dialog_get_action_area(ADialog: PGtkDialog): PGtkWidget; cdecl; external;
function gtk_dialog_get_content_area(ADialog: PGtkDialog): PGtkWidget; cdecl; external;
function gtk_dialog_get_response_for_widget(ADialog: PGtkDialog; widget: PGtkWidget): gint; cdecl; external;
function gtk_dialog_get_type: TGType; cdecl; external;
function gtk_dialog_get_widget_for_response(ADialog: PGtkDialog; response_id: gint): PGtkWidget; cdecl; external;
function gtk_dialog_new: PGtkDialog; cdecl; external;
function gtk_dialog_new_with_buttons(title: Pgchar; parent: PAtkWindow; flags: TGtkDialogFlags; first_button_text: Pgchar; args: array of const): PGtkDialog; cdecl; external;
function gtk_dialog_run(ADialog: PGtkDialog): gint; cdecl; external;
function gtk_distribute_natural_allocation(extra_space: gint; n_requested_sizes: guint; sizes: PGtkRequestedSize): gint; cdecl; external;
function gtk_drag_begin(AWidget: PGtkWidget; targets: PGtkTargetList; actions: TGdkDragAction; button: gint; event: PGdkEvent): PGdkDragContext; cdecl; external;
function gtk_drag_check_threshold(AWidget: PGtkWidget; start_x: gint; start_y: gint; current_x: gint; current_y: gint): gboolean; cdecl; external;
function gtk_drag_dest_find_target(AWidget: PGtkWidget; context: PGdkDragContext; target_list: PGtkTargetList): TGdkAtom; cdecl; external;
function gtk_drag_dest_get_target_list(AWidget: PGtkWidget): PGtkTargetList; cdecl; external;
function gtk_drag_dest_get_track_motion(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_drag_get_source_widget(context: PGdkDragContext): PGtkWidget; cdecl; external;
function gtk_drag_source_get_target_list(AWidget: PGtkWidget): PGtkTargetList; cdecl; external;
function gtk_drawing_area_get_type: TGType; cdecl; external;
function gtk_drawing_area_new: PGtkDrawingArea; cdecl; external;
function gtk_editable_get_chars(AEditable: PGtkEditable; start_pos: gint; end_pos: gint): Pgchar; cdecl; external;
function gtk_editable_get_editable(AEditable: PGtkEditable): gboolean; cdecl; external;
function gtk_editable_get_position(AEditable: PGtkEditable): gint; cdecl; external;
function gtk_editable_get_selection_bounds(AEditable: PGtkEditable; start_pos: Pgint; end_pos: Pgint): gboolean; cdecl; external;
function gtk_editable_get_type: TGType; cdecl; external;
function gtk_entry_buffer_delete_text(AEntryBuffer: PGtkEntryBuffer; position: guint; n_chars: gint): guint; cdecl; external;
function gtk_entry_buffer_get_bytes(AEntryBuffer: PGtkEntryBuffer): gsize; cdecl; external;
function gtk_entry_buffer_get_length(AEntryBuffer: PGtkEntryBuffer): guint; cdecl; external;
function gtk_entry_buffer_get_max_length(AEntryBuffer: PGtkEntryBuffer): gint; cdecl; external;
function gtk_entry_buffer_get_text(AEntryBuffer: PGtkEntryBuffer): Pgchar; cdecl; external;
function gtk_entry_buffer_get_type: TGType; cdecl; external;
function gtk_entry_buffer_insert_text(AEntryBuffer: PGtkEntryBuffer; position: guint; chars: Pgchar; n_chars: gint): guint; cdecl; external;
function gtk_entry_buffer_new(initial_chars: Pgchar; n_initial_chars: gint): PGtkEntryBuffer; cdecl; external;
function gtk_entry_completion_get_completion_prefix(AEntryCompletion: PGtkEntryCompletion): Pgchar; cdecl; external;
function gtk_entry_completion_get_entry(AEntryCompletion: PGtkEntryCompletion): PGtkWidget; cdecl; external;
function gtk_entry_completion_get_inline_completion(AEntryCompletion: PGtkEntryCompletion): gboolean; cdecl; external;
function gtk_entry_completion_get_inline_selection(AEntryCompletion: PGtkEntryCompletion): gboolean; cdecl; external;
function gtk_entry_completion_get_minimum_key_length(AEntryCompletion: PGtkEntryCompletion): gint; cdecl; external;
function gtk_entry_completion_get_model(AEntryCompletion: PGtkEntryCompletion): PGtkTreeModel; cdecl; external;
function gtk_entry_completion_get_popup_completion(AEntryCompletion: PGtkEntryCompletion): gboolean; cdecl; external;
function gtk_entry_completion_get_popup_set_width(AEntryCompletion: PGtkEntryCompletion): gboolean; cdecl; external;
function gtk_entry_completion_get_popup_single_match(AEntryCompletion: PGtkEntryCompletion): gboolean; cdecl; external;
function gtk_entry_completion_get_text_column(AEntryCompletion: PGtkEntryCompletion): gint; cdecl; external;
function gtk_entry_completion_get_type: TGType; cdecl; external;
function gtk_entry_completion_new: PGtkEntryCompletion; cdecl; external;
function gtk_entry_completion_new_with_area(area: PGtkCellArea): PGtkEntryCompletion; cdecl; external;
function gtk_entry_get_activates_default(AEntry: PGtkEntry): gboolean; cdecl; external;
function gtk_entry_get_alignment(AEntry: PGtkEntry): gfloat; cdecl; external;
function gtk_entry_get_buffer(AEntry: PGtkEntry): PGtkEntryBuffer; cdecl; external;
function gtk_entry_get_completion(AEntry: PGtkEntry): PGtkEntryCompletion; cdecl; external;
function gtk_entry_get_current_icon_drag_source(AEntry: PGtkEntry): gint; cdecl; external;
function gtk_entry_get_cursor_hadjustment(AEntry: PGtkEntry): PGtkAdjustment; cdecl; external;
function gtk_entry_get_has_frame(AEntry: PGtkEntry): gboolean; cdecl; external;
function gtk_entry_get_icon_activatable(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition): gboolean; cdecl; external;
function gtk_entry_get_icon_at_pos(AEntry: PGtkEntry; x: gint; y: gint): gint; cdecl; external;
function gtk_entry_get_icon_gicon(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition): PGIcon; cdecl; external;
function gtk_entry_get_icon_name(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; external;
function gtk_entry_get_icon_pixbuf(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition): PGdkPixbuf; cdecl; external;
function gtk_entry_get_icon_sensitive(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition): gboolean; cdecl; external;
function gtk_entry_get_icon_stock(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; external;
function gtk_entry_get_icon_storage_type(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition): TGtkImageType; cdecl; external;
function gtk_entry_get_icon_tooltip_markup(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; external;
function gtk_entry_get_icon_tooltip_text(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition): Pgchar; cdecl; external;
function gtk_entry_get_inner_border(AEntry: PGtkEntry): PGtkBorder; cdecl; external;
function gtk_entry_get_invisible_char(AEntry: PGtkEntry): gunichar; cdecl; external;
function gtk_entry_get_layout(AEntry: PGtkEntry): PPangoLayout; cdecl; external;
function gtk_entry_get_max_length(AEntry: PGtkEntry): gint; cdecl; external;
function gtk_entry_get_overwrite_mode(AEntry: PGtkEntry): gboolean; cdecl; external;
function gtk_entry_get_placeholder_text(AEntry: PGtkEntry): Pgchar; cdecl; external;
function gtk_entry_get_progress_fraction(AEntry: PGtkEntry): gdouble; cdecl; external;
function gtk_entry_get_progress_pulse_step(AEntry: PGtkEntry): gdouble; cdecl; external;
function gtk_entry_get_text(AEntry: PGtkEntry): Pgchar; cdecl; external;
function gtk_entry_get_text_length(AEntry: PGtkEntry): guint16; cdecl; external;
function gtk_entry_get_type: TGType; cdecl; external;
function gtk_entry_get_visibility(AEntry: PGtkEntry): gboolean; cdecl; external;
function gtk_entry_get_width_chars(AEntry: PGtkEntry): gint; cdecl; external;
function gtk_entry_im_context_filter_keypress(AEntry: PGtkEntry; event: PGdkEventKey): gboolean; cdecl; external;
function gtk_entry_layout_index_to_text_index(AEntry: PGtkEntry; layout_index: gint): gint; cdecl; external;
function gtk_entry_new: PGtkEntry; cdecl; external;
function gtk_entry_new_with_buffer(buffer: PGtkEntryBuffer): PGtkEntry; cdecl; external;
function gtk_entry_text_index_to_layout_index(AEntry: PGtkEntry; text_index: gint): gint; cdecl; external;
function gtk_event_box_get_above_child(AEventBox: PGtkEventBox): gboolean; cdecl; external;
function gtk_event_box_get_type: TGType; cdecl; external;
function gtk_event_box_get_visible_window(AEventBox: PGtkEventBox): gboolean; cdecl; external;
function gtk_event_box_new: PGtkEventBox; cdecl; external;
function gtk_events_pending: gboolean; cdecl; external;
function gtk_expander_get_expanded(AExpander: PGtkExpander): gboolean; cdecl; external;
function gtk_expander_get_label(AExpander: PGtkExpander): Pgchar; cdecl; external;
function gtk_expander_get_label_fill(AExpander: PGtkExpander): gboolean; cdecl; external;
function gtk_expander_get_label_widget(AExpander: PGtkExpander): PGtkWidget; cdecl; external;
function gtk_expander_get_resize_toplevel(AExpander: PGtkExpander): gboolean; cdecl; external;
function gtk_expander_get_spacing(AExpander: PGtkExpander): gint; cdecl; external;
function gtk_expander_get_type: TGType; cdecl; external;
function gtk_expander_get_use_markup(AExpander: PGtkExpander): gboolean; cdecl; external;
function gtk_expander_get_use_underline(AExpander: PGtkExpander): gboolean; cdecl; external;
function gtk_expander_new(label_: Pgchar): PGtkExpander; cdecl; external;
function gtk_expander_new_with_mnemonic(label_: Pgchar): PGtkExpander; cdecl; external;
function gtk_false: gboolean; cdecl; external;
function gtk_file_chooser_add_shortcut_folder(AFileChooser: PGtkFileChooser; folder: Pchar): gboolean; cdecl; external;
function gtk_file_chooser_add_shortcut_folder_uri(AFileChooser: PGtkFileChooser; uri: Pgchar): gboolean; cdecl; external;
function gtk_file_chooser_button_get_focus_on_click(AFileChooserButton: PGtkFileChooserButton): gboolean; cdecl; external;
function gtk_file_chooser_button_get_title(AFileChooserButton: PGtkFileChooserButton): Pgchar; cdecl; external;
function gtk_file_chooser_button_get_type: TGType; cdecl; external;
function gtk_file_chooser_button_get_width_chars(AFileChooserButton: PGtkFileChooserButton): gint; cdecl; external;
function gtk_file_chooser_button_new(title: Pgchar; action: TGtkFileChooserAction): PGtkFileChooserButton; cdecl; external;
function gtk_file_chooser_button_new_with_dialog(dialog: PGtkWidget): PGtkFileChooserButton; cdecl; external;
function gtk_file_chooser_dialog_get_type: TGType; cdecl; external;
function gtk_file_chooser_dialog_new(title: Pgchar; parent: PAtkWindow; action: TGtkFileChooserAction; first_button_text: Pgchar; args: array of const): PGtkFileChooserDialog; cdecl; external;
function gtk_file_chooser_error_quark: TGQuark; cdecl; external;
function gtk_file_chooser_get_action(AFileChooser: PGtkFileChooser): TGtkFileChooserAction; cdecl; external;
function gtk_file_chooser_get_create_folders(AFileChooser: PGtkFileChooser): gboolean; cdecl; external;
function gtk_file_chooser_get_current_folder(AFileChooser: PGtkFileChooser): Pgchar; cdecl; external;
function gtk_file_chooser_get_current_folder_file(AFileChooser: PGtkFileChooser): PGFile; cdecl; external;
function gtk_file_chooser_get_current_folder_uri(AFileChooser: PGtkFileChooser): Pgchar; cdecl; external;
function gtk_file_chooser_get_do_overwrite_confirmation(AFileChooser: PGtkFileChooser): gboolean; cdecl; external;
function gtk_file_chooser_get_extra_widget(AFileChooser: PGtkFileChooser): PGtkWidget; cdecl; external;
function gtk_file_chooser_get_file(AFileChooser: PGtkFileChooser): PGFile; cdecl; external;
function gtk_file_chooser_get_filename(AFileChooser: PGtkFileChooser): Pgchar; cdecl; external;
function gtk_file_chooser_get_filenames(AFileChooser: PGtkFileChooser): PGSList; cdecl; external;
function gtk_file_chooser_get_files(AFileChooser: PGtkFileChooser): PGSList; cdecl; external;
function gtk_file_chooser_get_filter(AFileChooser: PGtkFileChooser): PGtkFileFilter; cdecl; external;
function gtk_file_chooser_get_local_only(AFileChooser: PGtkFileChooser): gboolean; cdecl; external;
function gtk_file_chooser_get_preview_file(AFileChooser: PGtkFileChooser): PGFile; cdecl; external;
function gtk_file_chooser_get_preview_filename(AFileChooser: PGtkFileChooser): Pchar; cdecl; external;
function gtk_file_chooser_get_preview_uri(AFileChooser: PGtkFileChooser): Pgchar; cdecl; external;
function gtk_file_chooser_get_preview_widget(AFileChooser: PGtkFileChooser): PGtkWidget; cdecl; external;
function gtk_file_chooser_get_preview_widget_active(AFileChooser: PGtkFileChooser): gboolean; cdecl; external;
function gtk_file_chooser_get_select_multiple(AFileChooser: PGtkFileChooser): gboolean; cdecl; external;
function gtk_file_chooser_get_show_hidden(AFileChooser: PGtkFileChooser): gboolean; cdecl; external;
function gtk_file_chooser_get_type: TGType; cdecl; external;
function gtk_file_chooser_get_uri(AFileChooser: PGtkFileChooser): Pgchar; cdecl; external;
function gtk_file_chooser_get_uris(AFileChooser: PGtkFileChooser): PGSList; cdecl; external;
function gtk_file_chooser_get_use_preview_label(AFileChooser: PGtkFileChooser): gboolean; cdecl; external;
function gtk_file_chooser_list_filters(AFileChooser: PGtkFileChooser): PGSList; cdecl; external;
function gtk_file_chooser_list_shortcut_folder_uris(AFileChooser: PGtkFileChooser): PGSList; cdecl; external;
function gtk_file_chooser_list_shortcut_folders(AFileChooser: PGtkFileChooser): PGSList; cdecl; external;
function gtk_file_chooser_remove_shortcut_folder(AFileChooser: PGtkFileChooser; folder: Pchar): gboolean; cdecl; external;
function gtk_file_chooser_remove_shortcut_folder_uri(AFileChooser: PGtkFileChooser; uri: Pgchar): gboolean; cdecl; external;
function gtk_file_chooser_select_file(AFileChooser: PGtkFileChooser; file_: PGFile): gboolean; cdecl; external;
function gtk_file_chooser_select_filename(AFileChooser: PGtkFileChooser; filename: Pchar): gboolean; cdecl; external;
function gtk_file_chooser_select_uri(AFileChooser: PGtkFileChooser; uri: Pgchar): gboolean; cdecl; external;
function gtk_file_chooser_set_current_folder(AFileChooser: PGtkFileChooser; filename: Pgchar): gboolean; cdecl; external;
function gtk_file_chooser_set_current_folder_file(AFileChooser: PGtkFileChooser; file_: PGFile): gboolean; cdecl; external;
function gtk_file_chooser_set_current_folder_uri(AFileChooser: PGtkFileChooser; uri: Pgchar): gboolean; cdecl; external;
function gtk_file_chooser_set_file(AFileChooser: PGtkFileChooser; file_: PGFile): gboolean; cdecl; external;
function gtk_file_chooser_set_filename(AFileChooser: PGtkFileChooser; filename: Pchar): gboolean; cdecl; external;
function gtk_file_chooser_set_uri(AFileChooser: PGtkFileChooser; uri: Pgchar): gboolean; cdecl; external;
function gtk_file_chooser_widget_get_type: TGType; cdecl; external;
function gtk_file_chooser_widget_new(action: TGtkFileChooserAction): PGtkFileChooserWidget; cdecl; external;
function gtk_file_filter_filter(AFileFilter: PGtkFileFilter; filter_info: PGtkFileFilterInfo): gboolean; cdecl; external;
function gtk_file_filter_get_name(AFileFilter: PGtkFileFilter): Pgchar; cdecl; external;
function gtk_file_filter_get_needed(AFileFilter: PGtkFileFilter): TGtkFileFilterFlags; cdecl; external;
function gtk_file_filter_get_type: TGType; cdecl; external;
function gtk_file_filter_new: PGtkFileFilter; cdecl; external;
function gtk_fixed_get_type: TGType; cdecl; external;
function gtk_fixed_new: PGtkFixed; cdecl; external;
function gtk_font_button_get_font_name(AFontButton: PGtkFontButton): Pgchar; cdecl; external;
function gtk_font_button_get_show_size(AFontButton: PGtkFontButton): gboolean; cdecl; external;
function gtk_font_button_get_show_style(AFontButton: PGtkFontButton): gboolean; cdecl; external;
function gtk_font_button_get_title(AFontButton: PGtkFontButton): Pgchar; cdecl; external;
function gtk_font_button_get_type: TGType; cdecl; external;
function gtk_font_button_get_use_font(AFontButton: PGtkFontButton): gboolean; cdecl; external;
function gtk_font_button_get_use_size(AFontButton: PGtkFontButton): gboolean; cdecl; external;
function gtk_font_button_new: PGtkFontButton; cdecl; external;
function gtk_font_button_new_with_font(fontname: Pgchar): PGtkFontButton; cdecl; external;
function gtk_font_button_set_font_name(AFontButton: PGtkFontButton; fontname: Pgchar): gboolean; cdecl; external;
function gtk_font_chooser_dialog_get_font_chooser(AFontChooserDialog: PGtkFontChooserDialog): PGtkWidget; cdecl; external;
function gtk_font_chooser_dialog_get_font_name(AFontChooserDialog: PGtkFontChooserDialog): Pgchar; cdecl; external;
function gtk_font_chooser_dialog_get_preview_text(AFontChooserDialog: PGtkFontChooserDialog): Pgchar; cdecl; external;
function gtk_font_chooser_dialog_get_type: TGType; cdecl; external;
function gtk_font_chooser_dialog_new(title: Pgchar; window: PAtkWindow): PGtkFontChooserDialog; cdecl; external;
function gtk_font_chooser_dialog_set_font_name(AFontChooserDialog: PGtkFontChooserDialog; fontname: Pgchar): gboolean; cdecl; external;
function gtk_font_chooser_get_face(AFontChooser: PGtkFontChooser): PPangoFontFace; cdecl; external;
function gtk_font_chooser_get_family(AFontChooser: PGtkFontChooser): PPangoFontFamily; cdecl; external;
function gtk_font_chooser_get_font_name(AFontChooser: PGtkFontChooser): Pgchar; cdecl; external;
function gtk_font_chooser_get_preview_text(AFontChooser: PGtkFontChooser): Pgchar; cdecl; external;
function gtk_font_chooser_get_show_preview_entry(AFontChooser: PGtkFontChooser): gboolean; cdecl; external;
function gtk_font_chooser_get_size(AFontChooser: PGtkFontChooser): gint; cdecl; external;
function gtk_font_chooser_get_type: TGType; cdecl; external;
function gtk_font_chooser_new: PGtkFontChooser; cdecl; external;
function gtk_font_chooser_set_font_name(AFontChooser: PGtkFontChooser; fontname: Pgchar): gboolean; cdecl; external;
function gtk_font_selection_dialog_get_type: TGType; cdecl; external;
function gtk_font_selection_get_type: TGType; cdecl; external;
function gtk_font_selection_new: PGtkFontSelection; cdecl; external;
function gtk_frame_get_label(AFrame: PGtkFrame): Pgchar; cdecl; external;
function gtk_frame_get_label_widget(AFrame: PGtkFrame): PGtkWidget; cdecl; external;
function gtk_frame_get_shadow_type(AFrame: PGtkFrame): TGtkShadowType; cdecl; external;
function gtk_frame_get_type: TGType; cdecl; external;
function gtk_frame_new(label_: Pgchar): PGtkFrame; cdecl; external;
function gtk_get_binary_age: guint; cdecl; external;
function gtk_get_current_event: PGdkEvent; cdecl; external;
function gtk_get_current_event_device: PGdkDevice; cdecl; external;
function gtk_get_current_event_state(state: PGdkModifierType): gboolean; cdecl; external;
function gtk_get_current_event_time: guint32; cdecl; external;
function gtk_get_debug_flags: guint; cdecl; external;
function gtk_get_default_language: PPangoLanguage; cdecl; external;
function gtk_get_event_widget(event: PGdkEvent): PGtkWidget; cdecl; external;
function gtk_get_interface_age: guint; cdecl; external;
function gtk_get_major_version: guint; cdecl; external;
function gtk_get_micro_version: guint; cdecl; external;
function gtk_get_minor_version: guint; cdecl; external;
function gtk_get_option_group(open_default_display: gboolean): PGOptionGroup; cdecl; external;
function gtk_grab_get_current: PGtkWidget; cdecl; external;
function gtk_gradient_get_type: TGType; cdecl; external;
function gtk_gradient_new_linear(x0: gdouble; y0: gdouble; x1: gdouble; y1: gdouble): PGtkGradient; cdecl; external;
function gtk_gradient_new_radial(x0: gdouble; y0: gdouble; radius0: gdouble; x1: gdouble; y1: gdouble; radius1: gdouble): PGtkGradient; cdecl; external;
function gtk_gradient_ref(AGradient: PGtkGradient): PGtkGradient; cdecl; external;
function gtk_gradient_resolve(AGradient: PGtkGradient; props: PGtkStyleProperties; resolved_gradient: PPcairo_pattern_t): gboolean; cdecl; external;
function gtk_gradient_to_string(AGradient: PGtkGradient): Pgchar; cdecl; external;
function gtk_grid_get_child_at(AGrid: PGtkGrid; left: gint; top: gint): PGtkWidget; cdecl; external;
function gtk_grid_get_column_homogeneous(AGrid: PGtkGrid): gboolean; cdecl; external;
function gtk_grid_get_column_spacing(AGrid: PGtkGrid): guint; cdecl; external;
function gtk_grid_get_row_homogeneous(AGrid: PGtkGrid): gboolean; cdecl; external;
function gtk_grid_get_row_spacing(AGrid: PGtkGrid): guint; cdecl; external;
function gtk_grid_get_type: TGType; cdecl; external;
function gtk_grid_new: PGtkGrid; cdecl; external;
function gtk_handle_box_get_child_detached(AHandleBox: PGtkHandleBox): gboolean; cdecl; external;
function gtk_handle_box_get_handle_position(AHandleBox: PGtkHandleBox): TGtkPositionType; cdecl; external;
function gtk_handle_box_get_shadow_type(AHandleBox: PGtkHandleBox): TGtkShadowType; cdecl; external;
function gtk_handle_box_get_snap_edge(AHandleBox: PGtkHandleBox): TGtkPositionType; cdecl; external;
function gtk_handle_box_get_type: TGType; cdecl; external;
function gtk_handle_box_new: PGtkHandleBox; cdecl; external;
function gtk_hbox_get_type: TGType; cdecl; external;
function gtk_hbutton_box_get_type: TGType; cdecl; external;
function gtk_hpaned_get_type: TGType; cdecl; external;
function gtk_hscale_get_type: TGType; cdecl; external;
function gtk_hscrollbar_get_type: TGType; cdecl; external;
function gtk_hseparator_get_type: TGType; cdecl; external;
function gtk_hsv_get_type: TGType; cdecl; external;
function gtk_hsv_is_adjusting(AHSV: PGtkHSV): gboolean; cdecl; external;
function gtk_hsv_new: PGtkHSV; cdecl; external;
function gtk_icon_factory_get_type: TGType; cdecl; external;
function gtk_icon_factory_lookup(AIconFactory: PGtkIconFactory; stock_id: Pgchar): PGtkIconSet; cdecl; external;
function gtk_icon_factory_lookup_default(stock_id: Pgchar): PGtkIconSet; cdecl; external;
function gtk_icon_factory_new: PGtkIconFactory; cdecl; external;
function gtk_icon_info_copy(AIconInfo: PGtkIconInfo): PGtkIconInfo; cdecl; external;
function gtk_icon_info_get_attach_points(AIconInfo: PGtkIconInfo; points: PPGdkPoint; n_points: Pgint): gboolean; cdecl; external;
function gtk_icon_info_get_base_size(AIconInfo: PGtkIconInfo): gint; cdecl; external;
function gtk_icon_info_get_builtin_pixbuf(AIconInfo: PGtkIconInfo): PGdkPixbuf; cdecl; external;
function gtk_icon_info_get_display_name(AIconInfo: PGtkIconInfo): Pgchar; cdecl; external;
function gtk_icon_info_get_embedded_rect(AIconInfo: PGtkIconInfo; rectangle: PGdkRectangle): gboolean; cdecl; external;
function gtk_icon_info_get_filename(AIconInfo: PGtkIconInfo): Pgchar; cdecl; external;
function gtk_icon_info_get_type: TGType; cdecl; external;
function gtk_icon_info_load_icon(AIconInfo: PGtkIconInfo): PGdkPixbuf; cdecl; external;
function gtk_icon_info_load_symbolic(AIconInfo: PGtkIconInfo; fg: PGdkRGBA; success_color: PGdkRGBA; warning_color: PGdkRGBA; error_color: PGdkRGBA; was_symbolic: Pgboolean): PGdkPixbuf; cdecl; external;
function gtk_icon_info_load_symbolic_for_context(AIconInfo: PGtkIconInfo; context: PGtkStyleContext; was_symbolic: Pgboolean): PGdkPixbuf; cdecl; external;
function gtk_icon_info_new_for_pixbuf(icon_theme: PGtkIconTheme; pixbuf: PGdkPixbuf): PGtkIconInfo; cdecl; external;
function gtk_icon_set_copy(AIconSet: PGtkIconSet): PGtkIconSet; cdecl; external;
function gtk_icon_set_get_type: TGType; cdecl; external;
function gtk_icon_set_new: PGtkIconSet; cdecl; external;
function gtk_icon_set_new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkIconSet; cdecl; external;
function gtk_icon_set_ref(AIconSet: PGtkIconSet): PGtkIconSet; cdecl; external;
function gtk_icon_set_render_icon_pixbuf(AIconSet: PGtkIconSet; context: PGtkStyleContext; size: gint): PGdkPixbuf; cdecl; external;
function gtk_icon_size_from_name(name: Pgchar): gint; cdecl; external;
function gtk_icon_size_get_name(size: gint): Pgchar; cdecl; external;
function gtk_icon_size_lookup(size: gint; width: Pgint; height: Pgint): gboolean; cdecl; external;
function gtk_icon_size_lookup_for_settings(settings: PGSettings; size: gint; width: Pgint; height: Pgint): gboolean; cdecl; external;
function gtk_icon_size_lookup_for_settings(settings: PGtkSettings; size: gint; width: Pgint; height: Pgint): gboolean; cdecl; external;
function gtk_icon_size_register(name: Pgchar; width: gint; height: gint): gint; cdecl; external;
function gtk_icon_source_copy(AIconSource: PGtkIconSource): PGtkIconSource; cdecl; external;
function gtk_icon_source_get_direction(AIconSource: PGtkIconSource): TGtkTextDirection; cdecl; external;
function gtk_icon_source_get_direction_wildcarded(AIconSource: PGtkIconSource): gboolean; cdecl; external;
function gtk_icon_source_get_filename(AIconSource: PGtkIconSource): Pgchar; cdecl; external;
function gtk_icon_source_get_icon_name(AIconSource: PGtkIconSource): Pgchar; cdecl; external;
function gtk_icon_source_get_pixbuf(AIconSource: PGtkIconSource): PGdkPixbuf; cdecl; external;
function gtk_icon_source_get_size(AIconSource: PGtkIconSource): gint; cdecl; external;
function gtk_icon_source_get_size_wildcarded(AIconSource: PGtkIconSource): gboolean; cdecl; external;
function gtk_icon_source_get_state(AIconSource: PGtkIconSource): TAtkStateType; cdecl; external;
function gtk_icon_source_get_state_wildcarded(AIconSource: PGtkIconSource): gboolean; cdecl; external;
function gtk_icon_source_get_type: TGType; cdecl; external;
function gtk_icon_source_new: PGtkIconSource; cdecl; external;
function gtk_icon_theme_choose_icon(AIconTheme: PGtkIconTheme; icon_names: Pgchar; size: gint; flags: TGtkIconLookupFlags): PGtkIconInfo; cdecl; external;
function gtk_icon_theme_error_quark: TGQuark; cdecl; external;
function gtk_icon_theme_get_default: PGtkIconTheme; cdecl; external;
function gtk_icon_theme_get_example_icon_name(AIconTheme: PGtkIconTheme): Pgchar; cdecl; external;
function gtk_icon_theme_get_for_screen(screen: PGdkScreen): PGtkIconTheme; cdecl; external;
function gtk_icon_theme_get_icon_sizes(AIconTheme: PGtkIconTheme; icon_name: Pgchar): Pgint; cdecl; external;
function gtk_icon_theme_get_type: TGType; cdecl; external;
function gtk_icon_theme_has_icon(AIconTheme: PGtkIconTheme; icon_name: Pgchar): gboolean; cdecl; external;
function gtk_icon_theme_list_contexts(AIconTheme: PGtkIconTheme): PGList; cdecl; external;
function gtk_icon_theme_list_icons(AIconTheme: PGtkIconTheme; context: Pgchar): PGList; cdecl; external;
function gtk_icon_theme_load_icon(AIconTheme: PGtkIconTheme; icon_name: Pgchar; size: gint; flags: TGtkIconLookupFlags): PGdkPixbuf; cdecl; external;
function gtk_icon_theme_lookup_by_gicon(AIconTheme: PGtkIconTheme; icon: PGIcon; size: gint; flags: TGtkIconLookupFlags): PGtkIconInfo; cdecl; external;
function gtk_icon_theme_lookup_icon(AIconTheme: PGtkIconTheme; icon_name: Pgchar; size: gint; flags: TGtkIconLookupFlags): PGtkIconInfo; cdecl; external;
function gtk_icon_theme_new: PGtkIconTheme; cdecl; external;
function gtk_icon_theme_rescan_if_needed(AIconTheme: PGtkIconTheme): gboolean; cdecl; external;
function gtk_icon_view_create_drag_icon(AIconView: PGtkIconView; path: PGtkTreePath): Pcairo_surface_t; cdecl; external;
function gtk_icon_view_get_column_spacing(AIconView: PGtkIconView): gint; cdecl; external;
function gtk_icon_view_get_columns(AIconView: PGtkIconView): gint; cdecl; external;
function gtk_icon_view_get_cursor(AIconView: PGtkIconView; path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl; external;
function gtk_icon_view_get_dest_item_at_pos(AIconView: PGtkIconView; drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkIconViewDropPosition): gboolean; cdecl; external;
function gtk_icon_view_get_item_at_pos(AIconView: PGtkIconView; x: gint; y: gint; path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl; external;
function gtk_icon_view_get_item_column(AIconView: PGtkIconView; path: PGtkTreePath): gint; cdecl; external;
function gtk_icon_view_get_item_orientation(AIconView: PGtkIconView): TGtkOrientation; cdecl; external;
function gtk_icon_view_get_item_padding(AIconView: PGtkIconView): gint; cdecl; external;
function gtk_icon_view_get_item_row(AIconView: PGtkIconView; path: PGtkTreePath): gint; cdecl; external;
function gtk_icon_view_get_item_width(AIconView: PGtkIconView): gint; cdecl; external;
function gtk_icon_view_get_margin(AIconView: PGtkIconView): gint; cdecl; external;
function gtk_icon_view_get_markup_column(AIconView: PGtkIconView): gint; cdecl; external;
function gtk_icon_view_get_model(AIconView: PGtkIconView): PGtkTreeModel; cdecl; external;
function gtk_icon_view_get_path_at_pos(AIconView: PGtkIconView; x: gint; y: gint): PGtkTreePath; cdecl; external;
function gtk_icon_view_get_pixbuf_column(AIconView: PGtkIconView): gint; cdecl; external;
function gtk_icon_view_get_reorderable(AIconView: PGtkIconView): gboolean; cdecl; external;
function gtk_icon_view_get_row_spacing(AIconView: PGtkIconView): gint; cdecl; external;
function gtk_icon_view_get_selected_items(AIconView: PGtkIconView): PGList; cdecl; external;
function gtk_icon_view_get_selection_mode(AIconView: PGtkIconView): TGtkSelectionMode; cdecl; external;
function gtk_icon_view_get_spacing(AIconView: PGtkIconView): gint; cdecl; external;
function gtk_icon_view_get_text_column(AIconView: PGtkIconView): gint; cdecl; external;
function gtk_icon_view_get_tooltip_column(AIconView: PGtkIconView): gint; cdecl; external;
function gtk_icon_view_get_tooltip_context(AIconView: PGtkIconView; x: Pgint; y: Pgint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_icon_view_get_type: TGType; cdecl; external;
function gtk_icon_view_get_visible_range(AIconView: PGtkIconView; start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl; external;
function gtk_icon_view_new: PGtkIconView; cdecl; external;
function gtk_icon_view_new_with_area(area: PGtkCellArea): PGtkIconView; cdecl; external;
function gtk_icon_view_new_with_model(model: PGtkTreeModel): PGtkIconView; cdecl; external;
function gtk_icon_view_path_is_selected(AIconView: PGtkIconView; path: PGtkTreePath): gboolean; cdecl; external;
function gtk_im_context_delete_surrounding(AIMContext: PGtkIMContext; offset: gint; n_chars: gint): gboolean; cdecl; external;
function gtk_im_context_filter_keypress(AIMContext: PGtkIMContext; event: PGdkEventKey): gboolean; cdecl; external;
function gtk_im_context_get_surrounding(AIMContext: PGtkIMContext; text: PPgchar; cursor_index: Pgint): gboolean; cdecl; external;
function gtk_im_context_get_type: TGType; cdecl; external;
function gtk_im_context_simple_get_type: TGType; cdecl; external;
function gtk_im_context_simple_new: PGtkIMContextSimple; cdecl; external;
function gtk_im_multicontext_get_context_id(AIMMulticontext: PGtkIMMulticontext): Pgchar; cdecl; external;
function gtk_im_multicontext_get_type: TGType; cdecl; external;
function gtk_im_multicontext_new: PGtkIMMulticontext; cdecl; external;
function gtk_image_get_animation(AImage: PGtkImage): PGdkPixbufAnimation; cdecl; external;
function gtk_image_get_pixbuf(AImage: PGtkImage): PGdkPixbuf; cdecl; external;
function gtk_image_get_pixel_size(AImage: PGtkImage): gint; cdecl; external;
function gtk_image_get_storage_type(AImage: PGtkImage): TGtkImageType; cdecl; external;
function gtk_image_get_type: TGType; cdecl; external;
function gtk_image_menu_item_get_always_show_image(AImageMenuItem: PGtkImageMenuItem): gboolean; cdecl; external;
function gtk_image_menu_item_get_image(AImageMenuItem: PGtkImageMenuItem): PGtkWidget; cdecl; external;
function gtk_image_menu_item_get_type: TGType; cdecl; external;
function gtk_image_menu_item_get_use_stock(AImageMenuItem: PGtkImageMenuItem): gboolean; cdecl; external;
function gtk_image_menu_item_new: PGtkImageMenuItem; cdecl; external;
function gtk_image_menu_item_new_from_stock(stock_id: Pgchar; accel_group: PGtkAccelGroup): PGtkImageMenuItem; cdecl; external;
function gtk_image_menu_item_new_with_label(label_: Pgchar): PGtkImageMenuItem; cdecl; external;
function gtk_image_menu_item_new_with_mnemonic(label_: Pgchar): PGtkImageMenuItem; cdecl; external;
function gtk_image_new: PGtkImage; cdecl; external;
function gtk_image_new_from_animation(animation: PGdkPixbufAnimation): PGtkImage; cdecl; external;
function gtk_image_new_from_file(filename: Pgchar): PGtkImage; cdecl; external;
function gtk_image_new_from_gicon(icon: PGIcon; size: gint): PGtkImage; cdecl; external;
function gtk_image_new_from_icon_name(icon_name: Pgchar; size: gint): PGtkImage; cdecl; external;
function gtk_image_new_from_icon_set(icon_set: PGtkIconSet; size: gint): PGtkImage; cdecl; external;
function gtk_image_new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkImage; cdecl; external;
function gtk_image_new_from_stock(stock_id: Pgchar; size: gint): PGtkImage; cdecl; external;
function gtk_info_bar_add_button(AInfoBar: PGtkInfoBar; button_text: Pgchar; response_id: gint): PGtkWidget; cdecl; external;
function gtk_info_bar_get_action_area(AInfoBar: PGtkInfoBar): PGtkWidget; cdecl; external;
function gtk_info_bar_get_content_area(AInfoBar: PGtkInfoBar): PGtkWidget; cdecl; external;
function gtk_info_bar_get_message_type(AInfoBar: PGtkInfoBar): TGtkMessageType; cdecl; external;
function gtk_info_bar_get_type: TGType; cdecl; external;
function gtk_info_bar_new: PGtkInfoBar; cdecl; external;
function gtk_info_bar_new_with_buttons(first_button_text: Pgchar; args: array of const): PGtkInfoBar; cdecl; external;
function gtk_init_check(argc: Pgint; argv: PPPgchar): gboolean; cdecl; external;
function gtk_init_with_args(argc: Pgint; argv: PPPgchar; parameter_string: Pgchar; entries: PGOptionEntry; translation_domain: Pgchar): gboolean; cdecl; external;
function gtk_invisible_get_screen(AInvisible: PGtkInvisible): PGdkScreen; cdecl; external;
function gtk_invisible_get_type: TGType; cdecl; external;
function gtk_invisible_new: PGtkInvisible; cdecl; external;
function gtk_invisible_new_for_screen(screen: PGdkScreen): PGtkInvisible; cdecl; external;
function gtk_key_snooper_install(snooper: TGtkKeySnoopFunc; func_data: gpointer): guint; cdecl; external;
function gtk_label_get_angle(ALabel: PGtkLabel): gdouble; cdecl; external;
function gtk_label_get_attributes(ALabel: PGtkLabel): PPangoAttrList; cdecl; external;
function gtk_label_get_current_uri(ALabel: PGtkLabel): Pgchar; cdecl; external;
function gtk_label_get_ellipsize(ALabel: PGtkLabel): TPangoEllipsizeMode; cdecl; external;
function gtk_label_get_justify(ALabel: PGtkLabel): TGtkJustification; cdecl; external;
function gtk_label_get_label(ALabel: PGtkLabel): Pgchar; cdecl; external;
function gtk_label_get_layout(ALabel: PGtkLabel): PPangoLayout; cdecl; external;
function gtk_label_get_line_wrap(ALabel: PGtkLabel): gboolean; cdecl; external;
function gtk_label_get_line_wrap_mode(ALabel: PGtkLabel): TPangoWrapMode; cdecl; external;
function gtk_label_get_max_width_chars(ALabel: PGtkLabel): gint; cdecl; external;
function gtk_label_get_mnemonic_keyval(ALabel: PGtkLabel): guint; cdecl; external;
function gtk_label_get_mnemonic_widget(ALabel: PGtkLabel): PGtkWidget; cdecl; external;
function gtk_label_get_selectable(ALabel: PGtkLabel): gboolean; cdecl; external;
function gtk_label_get_selection_bounds(ALabel: PGtkLabel; start: Pgint; end_: Pgint): gboolean; cdecl; external;
function gtk_label_get_single_line_mode(ALabel: PGtkLabel): gboolean; cdecl; external;
function gtk_label_get_text(ALabel: PGtkLabel): Pgchar; cdecl; external;
function gtk_label_get_track_visited_links(ALabel: PGtkLabel): gboolean; cdecl; external;
function gtk_label_get_type: TGType; cdecl; external;
function gtk_label_get_use_markup(ALabel: PGtkLabel): gboolean; cdecl; external;
function gtk_label_get_use_underline(ALabel: PGtkLabel): gboolean; cdecl; external;
function gtk_label_get_width_chars(ALabel: PGtkLabel): gint; cdecl; external;
function gtk_label_new(str: Pgchar): PGtkLabel; cdecl; external;
function gtk_label_new_with_mnemonic(str: Pgchar): PGtkLabel; cdecl; external;
function gtk_layout_get_bin_window(ALayout: PGtkLayout): PGdkWindow; cdecl; external;
function gtk_layout_get_type: TGType; cdecl; external;
function gtk_layout_new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkLayout; cdecl; external;
function gtk_link_button_get_type: TGType; cdecl; external;
function gtk_link_button_get_uri(ALinkButton: PGtkLinkButton): Pgchar; cdecl; external;
function gtk_link_button_get_visited(ALinkButton: PGtkLinkButton): gboolean; cdecl; external;
function gtk_link_button_new(uri: Pgchar): PGtkLinkButton; cdecl; external;
function gtk_link_button_new_with_label(uri: Pgchar; label_: Pgchar): PGtkLinkButton; cdecl; external;
function gtk_list_store_get_type: TGType; cdecl; external;
function gtk_list_store_iter_is_valid(AListStore: PGtkListStore; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_list_store_new(n_columns: gint; args: array of const): PGtkListStore; cdecl; external;
function gtk_list_store_newv(n_columns: gint; types: PGType): PGtkListStore; cdecl; external;
function gtk_list_store_remove(AListStore: PGtkListStore; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_lock_button_get_permission(ALockButton: PGtkLockButton): PGPermission; cdecl; external;
function gtk_lock_button_get_type: TGType; cdecl; external;
function gtk_lock_button_new(permission: PGPermission): PGtkLockButton; cdecl; external;
function gtk_main_iteration: gboolean; cdecl; external;
function gtk_main_iteration_do(blocking: gboolean): gboolean; cdecl; external;
function gtk_main_level: guint; cdecl; external;
function gtk_menu_bar_get_child_pack_direction(AMenuBar: PGtkMenuBar): TGtkPackDirection; cdecl; external;
function gtk_menu_bar_get_pack_direction(AMenuBar: PGtkMenuBar): TGtkPackDirection; cdecl; external;
function gtk_menu_bar_get_type: TGType; cdecl; external;
function gtk_menu_bar_new: PGtkMenuBar; cdecl; external;
function gtk_menu_get_accel_group(AMenu: PGtkMenu): PGtkAccelGroup; cdecl; external;
function gtk_menu_get_accel_path(AMenu: PGtkMenu): Pgchar; cdecl; external;
function gtk_menu_get_active(AMenu: PGtkMenu): PGtkWidget; cdecl; external;
function gtk_menu_get_attach_widget(AMenu: PGtkMenu): PGtkWidget; cdecl; external;
function gtk_menu_get_for_attach_widget(widget: PGtkWidget): PGList; cdecl; external;
function gtk_menu_get_monitor(AMenu: PGtkMenu): gint; cdecl; external;
function gtk_menu_get_reserve_toggle_size(AMenu: PGtkMenu): gboolean; cdecl; external;
function gtk_menu_get_tearoff_state(AMenu: PGtkMenu): gboolean; cdecl; external;
function gtk_menu_get_title(AMenu: PGtkMenu): Pgchar; cdecl; external;
function gtk_menu_get_type: TGType; cdecl; external;
function gtk_menu_item_get_accel_path(AMenuItem: PGtkMenuItem): Pgchar; cdecl; external;
function gtk_menu_item_get_label(AMenuItem: PGtkMenuItem): Pgchar; cdecl; external;
function gtk_menu_item_get_reserve_indicator(AMenuItem: PGtkMenuItem): gboolean; cdecl; external;
function gtk_menu_item_get_submenu(AMenuItem: PGtkMenuItem): PGtkWidget; cdecl; external;
function gtk_menu_item_get_type: TGType; cdecl; external;
function gtk_menu_item_get_use_underline(AMenuItem: PGtkMenuItem): gboolean; cdecl; external;
function gtk_menu_item_new: PGtkMenuItem; cdecl; external;
function gtk_menu_item_new_with_label(label_: Pgchar): PGtkMenuItem; cdecl; external;
function gtk_menu_item_new_with_mnemonic(label_: Pgchar): PGtkMenuItem; cdecl; external;
function gtk_menu_new: PGtkMenu; cdecl; external;
function gtk_menu_shell_get_parent_shell(AMenuShell: PGtkMenuShell): PGtkWidget; cdecl; external;
function gtk_menu_shell_get_selected_item(AMenuShell: PGtkMenuShell): PGtkWidget; cdecl; external;
function gtk_menu_shell_get_take_focus(AMenuShell: PGtkMenuShell): gboolean; cdecl; external;
function gtk_menu_shell_get_type: TGType; cdecl; external;
function gtk_menu_tool_button_get_menu(AMenuToolButton: PGtkMenuToolButton): PGtkWidget; cdecl; external;
function gtk_menu_tool_button_get_type: TGType; cdecl; external;
function gtk_menu_tool_button_new(icon_widget: PGtkWidget; label_: Pgchar): PGtkMenuToolButton; cdecl; external;
function gtk_menu_tool_button_new_from_stock(stock_id: Pgchar): PGtkMenuToolButton; cdecl; external;
function gtk_message_dialog_get_image(AMessageDialog: PGtkMessageDialog): PGtkWidget; cdecl; external;
function gtk_message_dialog_get_message_area(AMessageDialog: PGtkMessageDialog): PGtkWidget; cdecl; external;
function gtk_message_dialog_get_type: TGType; cdecl; external;
function gtk_message_dialog_new(parent: PAtkWindow; flags: TGtkDialogFlags; type_: TGtkMessageType; buttons: TGtkButtonsType; message_format: Pgchar; args: array of const): PGtkMessageDialog; cdecl; external;
function gtk_message_dialog_new_with_markup(parent: PAtkWindow; flags: TGtkDialogFlags; type_: TGtkMessageType; buttons: TGtkButtonsType; message_format: Pgchar; args: array of const): PGtkMessageDialog; cdecl; external;
function gtk_misc_get_type: TGType; cdecl; external;
function gtk_mount_operation_get_parent(AMountOperation: PGtkMountOperation): PAtkWindow; cdecl; external;
function gtk_mount_operation_get_screen(AMountOperation: PGtkMountOperation): PGdkScreen; cdecl; external;
function gtk_mount_operation_get_type: TGType; cdecl; external;
function gtk_mount_operation_is_showing(AMountOperation: PGtkMountOperation): gboolean; cdecl; external;
function gtk_mount_operation_new(parent: PAtkWindow): PGtkMountOperation; cdecl; external;
function gtk_notebook_append_page(ANotebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl; external;
function gtk_notebook_append_page_menu(ANotebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl; external;
function gtk_notebook_get_action_widget(ANotebook: PGtkNotebook; pack_type: TGtkPackType): PGtkWidget; cdecl; external;
function gtk_notebook_get_current_page(ANotebook: PGtkNotebook): gint; cdecl; external;
function gtk_notebook_get_group_name(ANotebook: PGtkNotebook): Pgchar; cdecl; external;
function gtk_notebook_get_menu_label(ANotebook: PGtkNotebook; child: PGtkWidget): PGtkWidget; cdecl; external;
function gtk_notebook_get_menu_label_text(ANotebook: PGtkNotebook; child: PGtkWidget): Pgchar; cdecl; external;
function gtk_notebook_get_n_pages(ANotebook: PGtkNotebook): gint; cdecl; external;
function gtk_notebook_get_nth_page(ANotebook: PGtkNotebook; page_num: gint): PGtkWidget; cdecl; external;
function gtk_notebook_get_scrollable(ANotebook: PGtkNotebook): gboolean; cdecl; external;
function gtk_notebook_get_show_border(ANotebook: PGtkNotebook): gboolean; cdecl; external;
function gtk_notebook_get_show_tabs(ANotebook: PGtkNotebook): gboolean; cdecl; external;
function gtk_notebook_get_tab_detachable(ANotebook: PGtkNotebook; child: PGtkWidget): gboolean; cdecl; external;
function gtk_notebook_get_tab_hborder(ANotebook: PGtkNotebook): guint16; cdecl; external;
function gtk_notebook_get_tab_label(ANotebook: PGtkNotebook; child: PGtkWidget): PGtkWidget; cdecl; external;
function gtk_notebook_get_tab_label_text(ANotebook: PGtkNotebook; child: PGtkWidget): Pgchar; cdecl; external;
function gtk_notebook_get_tab_pos(ANotebook: PGtkNotebook): TGtkPositionType; cdecl; external;
function gtk_notebook_get_tab_reorderable(ANotebook: PGtkNotebook; child: PGtkWidget): gboolean; cdecl; external;
function gtk_notebook_get_tab_vborder(ANotebook: PGtkNotebook): guint16; cdecl; external;
function gtk_notebook_get_type: TGType; cdecl; external;
function gtk_notebook_insert_page(ANotebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget; position: gint): gint; cdecl; external;
function gtk_notebook_insert_page_menu(ANotebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget; position: gint): gint; cdecl; external;
function gtk_notebook_new: PGtkNotebook; cdecl; external;
function gtk_notebook_page_num(ANotebook: PGtkNotebook; child: PGtkWidget): gint; cdecl; external;
function gtk_notebook_prepend_page(ANotebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl; external;
function gtk_notebook_prepend_page_menu(ANotebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl; external;
function gtk_numerable_icon_get_background_gicon(ANumerableIcon: PGtkNumerableIcon): PGIcon; cdecl; external;
function gtk_numerable_icon_get_background_icon_name(ANumerableIcon: PGtkNumerableIcon): Pgchar; cdecl; external;
function gtk_numerable_icon_get_count(ANumerableIcon: PGtkNumerableIcon): gint; cdecl; external;
function gtk_numerable_icon_get_label(ANumerableIcon: PGtkNumerableIcon): Pgchar; cdecl; external;
function gtk_numerable_icon_get_style_context(ANumerableIcon: PGtkNumerableIcon): PGtkStyleContext; cdecl; external;
function gtk_numerable_icon_get_type: TGType; cdecl; external;
function gtk_numerable_icon_new(base_icon: PGIcon): PGIcon; cdecl; external;
function gtk_numerable_icon_new_with_style_context(base_icon: PGIcon; context: PGtkStyleContext): PGIcon; cdecl; external;
function gtk_offscreen_window_get_pixbuf(AOffscreenWindow: PGtkOffscreenWindow): PGdkPixbuf; cdecl; external;
function gtk_offscreen_window_get_surface(AOffscreenWindow: PGtkOffscreenWindow): Pcairo_surface_t; cdecl; external;
function gtk_offscreen_window_get_type: TGType; cdecl; external;
function gtk_offscreen_window_new: PGtkOffscreenWindow; cdecl; external;
function gtk_orientable_get_orientation(AOrientable: PGtkOrientable): TGtkOrientation; cdecl; external;
function gtk_orientable_get_type: TGType; cdecl; external;
function gtk_overlay_get_type: TGType; cdecl; external;
function gtk_overlay_new: PGtkOverlay; cdecl; external;
function gtk_page_setup_copy(APageSetup: PGtkPageSetup): PGtkPageSetup; cdecl; external;
function gtk_page_setup_get_bottom_margin(APageSetup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_page_setup_get_left_margin(APageSetup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_page_setup_get_orientation(APageSetup: PGtkPageSetup): TGtkPageOrientation; cdecl; external;
function gtk_page_setup_get_page_height(APageSetup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_page_setup_get_page_width(APageSetup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_page_setup_get_paper_height(APageSetup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_page_setup_get_paper_size(APageSetup: PGtkPageSetup): PGtkPaperSize; cdecl; external;
function gtk_page_setup_get_paper_width(APageSetup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_page_setup_get_right_margin(APageSetup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_page_setup_get_top_margin(APageSetup: PGtkPageSetup; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_page_setup_get_type: TGType; cdecl; external;
function gtk_page_setup_load_file(APageSetup: PGtkPageSetup; file_name: Pchar): gboolean; cdecl; external;
function gtk_page_setup_load_key_file(APageSetup: PGtkPageSetup; key_file: PGKeyFile; group_name: Pgchar): gboolean; cdecl; external;
function gtk_page_setup_new: PGtkPageSetup; cdecl; external;
function gtk_page_setup_new_from_file(file_name: Pgchar): PGtkPageSetup; cdecl; external;
function gtk_page_setup_new_from_key_file(key_file: PGKeyFile; group_name: Pgchar): PGtkPageSetup; cdecl; external;
function gtk_page_setup_to_file(APageSetup: PGtkPageSetup; file_name: Pchar): gboolean; cdecl; external;
function gtk_paned_get_child1(APaned: PGtkPaned): PGtkWidget; cdecl; external;
function gtk_paned_get_child2(APaned: PGtkPaned): PGtkWidget; cdecl; external;
function gtk_paned_get_handle_window(APaned: PGtkPaned): PGdkWindow; cdecl; external;
function gtk_paned_get_position(APaned: PGtkPaned): gint; cdecl; external;
function gtk_paned_get_type: TGType; cdecl; external;
function gtk_paned_new(orientation: TGtkOrientation): PGtkPaned; cdecl; external;
function gtk_paper_size_copy(APaperSize: PGtkPaperSize): PGtkPaperSize; cdecl; external;
function gtk_paper_size_get_default: Pgchar; cdecl; external;
function gtk_paper_size_get_default_bottom_margin(APaperSize: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_paper_size_get_default_left_margin(APaperSize: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_paper_size_get_default_right_margin(APaperSize: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_paper_size_get_default_top_margin(APaperSize: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_paper_size_get_display_name(APaperSize: PGtkPaperSize): Pgchar; cdecl; external;
function gtk_paper_size_get_height(APaperSize: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_paper_size_get_name(APaperSize: PGtkPaperSize): Pgchar; cdecl; external;
function gtk_paper_size_get_paper_sizes(include_custom: gboolean): PGList; cdecl; external;
function gtk_paper_size_get_ppd_name(APaperSize: PGtkPaperSize): Pgchar; cdecl; external;
function gtk_paper_size_get_type: TGType; cdecl; external;
function gtk_paper_size_get_width(APaperSize: PGtkPaperSize; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_paper_size_is_custom(APaperSize: PGtkPaperSize): gboolean; cdecl; external;
function gtk_paper_size_is_equal(APaperSize: PGtkPaperSize; size2: PGtkPaperSize): gboolean; cdecl; external;
function gtk_paper_size_new(name: Pgchar): PGtkPaperSize; cdecl; external;
function gtk_paper_size_new_custom(name: Pgchar; display_name: Pgchar; width: gdouble; height: gdouble; unit_: TGtkUnit): PGtkPaperSize; cdecl; external;
function gtk_paper_size_new_from_key_file(key_file: PGKeyFile; group_name: Pgchar): PGtkPaperSize; cdecl; external;
function gtk_paper_size_new_from_ppd(ppd_name: Pgchar; ppd_display_name: Pgchar; width: gdouble; height: gdouble): PGtkPaperSize; cdecl; external;
function gtk_parse_args(argc: Pgint; argv: PPPgchar): gboolean; cdecl; external;
function gtk_plug_get_embedded(APlug: PGtkPlug): gboolean; cdecl; external;
function gtk_plug_get_id(APlug: PGtkPlug): TWindow; cdecl; external;
function gtk_plug_get_socket_window(APlug: PGtkPlug): PGdkWindow; cdecl; external;
function gtk_plug_get_type: TGType; cdecl; external;
function gtk_plug_new(socket_id: TWindow): PGtkPlug; cdecl; external;
function gtk_plug_new_for_display(display: PGdkDisplay; socket_id: TWindow): PGtkPlug; cdecl; external;
function gtk_print_context_create_pango_context(APrintContext: PGtkPrintContext): PPangoContext; cdecl; external;
function gtk_print_context_create_pango_layout(APrintContext: PGtkPrintContext): PPangoLayout; cdecl; external;
function gtk_print_context_get_cairo_context(APrintContext: PGtkPrintContext): Pcairo_t; cdecl; external;
function gtk_print_context_get_dpi_x(APrintContext: PGtkPrintContext): gdouble; cdecl; external;
function gtk_print_context_get_dpi_y(APrintContext: PGtkPrintContext): gdouble; cdecl; external;
function gtk_print_context_get_hard_margins(APrintContext: PGtkPrintContext; top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl; external;
function gtk_print_context_get_height(APrintContext: PGtkPrintContext): gdouble; cdecl; external;
function gtk_print_context_get_page_setup(APrintContext: PGtkPrintContext): PGtkPageSetup; cdecl; external;
function gtk_print_context_get_pango_fontmap(APrintContext: PGtkPrintContext): PPangoFontMap; cdecl; external;
function gtk_print_context_get_type: TGType; cdecl; external;
function gtk_print_context_get_width(APrintContext: PGtkPrintContext): gdouble; cdecl; external;
function gtk_print_error_quark: TGQuark; cdecl; external;
function gtk_print_operation_get_default_page_setup(APrintOperation: PGtkPrintOperation): PGtkPageSetup; cdecl; external;
function gtk_print_operation_get_embed_page_setup(APrintOperation: PGtkPrintOperation): gboolean; cdecl; external;
function gtk_print_operation_get_has_selection(APrintOperation: PGtkPrintOperation): gboolean; cdecl; external;
function gtk_print_operation_get_n_pages_to_print(APrintOperation: PGtkPrintOperation): gint; cdecl; external;
function gtk_print_operation_get_print_settings(APrintOperation: PGtkPrintOperation): PGtkPrintSettings; cdecl; external;
function gtk_print_operation_get_status(APrintOperation: PGtkPrintOperation): TGtkPrintStatus; cdecl; external;
function gtk_print_operation_get_status_string(APrintOperation: PGtkPrintOperation): Pgchar; cdecl; external;
function gtk_print_operation_get_support_selection(APrintOperation: PGtkPrintOperation): gboolean; cdecl; external;
function gtk_print_operation_get_type: TGType; cdecl; external;
function gtk_print_operation_is_finished(APrintOperation: PGtkPrintOperation): gboolean; cdecl; external;
function gtk_print_operation_new: PGtkPrintOperation; cdecl; external;
function gtk_print_operation_preview_get_type: TGType; cdecl; external;
function gtk_print_operation_preview_is_selected(APrintOperationPreview: PGtkPrintOperationPreview; page_nr: gint): gboolean; cdecl; external;
function gtk_print_operation_run(APrintOperation: PGtkPrintOperation; action: TGtkPrintOperationAction; parent: PAtkWindow): TGtkPrintOperationResult; cdecl; external;
function gtk_print_run_page_setup_dialog(parent: PGtkWindow; page_setup: PGtkPageSetup; settings: PGtkPrintSettings): PGtkPageSetup; cdecl; external;
function gtk_print_settings_copy(APrintSettings: PGtkPrintSettings): PGtkPrintSettings; cdecl; external;
function gtk_print_settings_get(APrintSettings: PGtkPrintSettings; key: Pgchar): Pgchar; cdecl; external;
function gtk_print_settings_get_bool(APrintSettings: PGtkPrintSettings; key: Pgchar): gboolean; cdecl; external;
function gtk_print_settings_get_collate(APrintSettings: PGtkPrintSettings): gboolean; cdecl; external;
function gtk_print_settings_get_default_source(APrintSettings: PGtkPrintSettings): Pgchar; cdecl; external;
function gtk_print_settings_get_dither(APrintSettings: PGtkPrintSettings): Pgchar; cdecl; external;
function gtk_print_settings_get_double(APrintSettings: PGtkPrintSettings; key: Pgchar): gdouble; cdecl; external;
function gtk_print_settings_get_double_with_default(APrintSettings: PGtkPrintSettings; key: Pgchar; def: gdouble): gdouble; cdecl; external;
function gtk_print_settings_get_duplex(APrintSettings: PGtkPrintSettings): TGtkPrintDuplex; cdecl; external;
function gtk_print_settings_get_finishings(APrintSettings: PGtkPrintSettings): Pgchar; cdecl; external;
function gtk_print_settings_get_int(APrintSettings: PGtkPrintSettings; key: Pgchar): gint; cdecl; external;
function gtk_print_settings_get_int_with_default(APrintSettings: PGtkPrintSettings; key: Pgchar; def: gint): gint; cdecl; external;
function gtk_print_settings_get_length(APrintSettings: PGtkPrintSettings; key: Pgchar; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_print_settings_get_media_type(APrintSettings: PGtkPrintSettings): Pgchar; cdecl; external;
function gtk_print_settings_get_n_copies(APrintSettings: PGtkPrintSettings): gint; cdecl; external;
function gtk_print_settings_get_number_up(APrintSettings: PGtkPrintSettings): gint; cdecl; external;
function gtk_print_settings_get_number_up_layout(APrintSettings: PGtkPrintSettings): TGtkNumberUpLayout; cdecl; external;
function gtk_print_settings_get_orientation(APrintSettings: PGtkPrintSettings): TGtkPageOrientation; cdecl; external;
function gtk_print_settings_get_output_bin(APrintSettings: PGtkPrintSettings): Pgchar; cdecl; external;
function gtk_print_settings_get_page_ranges(APrintSettings: PGtkPrintSettings; num_ranges: Pgint): PGtkPageRange; cdecl; external;
function gtk_print_settings_get_page_set(APrintSettings: PGtkPrintSettings): TGtkPageSet; cdecl; external;
function gtk_print_settings_get_paper_height(APrintSettings: PGtkPrintSettings; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_print_settings_get_paper_size(APrintSettings: PGtkPrintSettings): PGtkPaperSize; cdecl; external;
function gtk_print_settings_get_paper_width(APrintSettings: PGtkPrintSettings; unit_: TGtkUnit): gdouble; cdecl; external;
function gtk_print_settings_get_print_pages(APrintSettings: PGtkPrintSettings): TGtkPrintPages; cdecl; external;
function gtk_print_settings_get_printer(APrintSettings: PGtkPrintSettings): Pgchar; cdecl; external;
function gtk_print_settings_get_printer_lpi(APrintSettings: PGtkPrintSettings): gdouble; cdecl; external;
function gtk_print_settings_get_quality(APrintSettings: PGtkPrintSettings): TGtkPrintQuality; cdecl; external;
function gtk_print_settings_get_resolution(APrintSettings: PGtkPrintSettings): gint; cdecl; external;
function gtk_print_settings_get_resolution_x(APrintSettings: PGtkPrintSettings): gint; cdecl; external;
function gtk_print_settings_get_resolution_y(APrintSettings: PGtkPrintSettings): gint; cdecl; external;
function gtk_print_settings_get_reverse(APrintSettings: PGtkPrintSettings): gboolean; cdecl; external;
function gtk_print_settings_get_scale(APrintSettings: PGtkPrintSettings): gdouble; cdecl; external;
function gtk_print_settings_get_type: TGType; cdecl; external;
function gtk_print_settings_get_use_color(APrintSettings: PGtkPrintSettings): gboolean; cdecl; external;
function gtk_print_settings_has_key(APrintSettings: PGtkPrintSettings; key: Pgchar): gboolean; cdecl; external;
function gtk_print_settings_load_file(APrintSettings: PGtkPrintSettings; file_name: Pgchar): gboolean; cdecl; external;
function gtk_print_settings_load_key_file(APrintSettings: PGtkPrintSettings; key_file: PGKeyFile; group_name: Pgchar): gboolean; cdecl; external;
function gtk_print_settings_new: PGtkPrintSettings; cdecl; external;
function gtk_print_settings_new_from_file(file_name: Pgchar): PGtkPrintSettings; cdecl; external;
function gtk_print_settings_new_from_key_file(key_file: PGKeyFile; group_name: Pgchar): PGtkPrintSettings; cdecl; external;
function gtk_print_settings_to_file(APrintSettings: PGtkPrintSettings; file_name: Pgchar): gboolean; cdecl; external;
function gtk_progress_bar_get_ellipsize(AProgressBar: PGtkProgressBar): TPangoEllipsizeMode; cdecl; external;
function gtk_progress_bar_get_fraction(AProgressBar: PGtkProgressBar): gdouble; cdecl; external;
function gtk_progress_bar_get_inverted(AProgressBar: PGtkProgressBar): gboolean; cdecl; external;
function gtk_progress_bar_get_pulse_step(AProgressBar: PGtkProgressBar): gdouble; cdecl; external;
function gtk_progress_bar_get_show_text(AProgressBar: PGtkProgressBar): gboolean; cdecl; external;
function gtk_progress_bar_get_text(AProgressBar: PGtkProgressBar): Pgchar; cdecl; external;
function gtk_progress_bar_get_type: TGType; cdecl; external;
function gtk_progress_bar_new: PGtkProgressBar; cdecl; external;
function gtk_radio_action_get_current_value(ARadioAction: PGtkRadioAction): gint; cdecl; external;
function gtk_radio_action_get_group(ARadioAction: PGtkRadioAction): PGSList; cdecl; external;
function gtk_radio_action_get_type: TGType; cdecl; external;
function gtk_radio_action_new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar; value: gint): PGtkRadioAction; cdecl; external;
function gtk_radio_button_get_group(ARadioButton: PGtkRadioButton): PGSList; cdecl; external;
function gtk_radio_button_get_type: TGType; cdecl; external;
function gtk_radio_button_new(group: PGSList): PGtkRadioButton; cdecl; external;
function gtk_radio_button_new_from_widget(ARadioButton: PGtkRadioButton): PGtkWidget; cdecl; external;
function gtk_radio_button_new_with_label(group: PGSList; label_: Pgchar): PGtkRadioButton; cdecl; external;
function gtk_radio_button_new_with_label_from_widget(radio_group_member: PGtkRadioButton; label_: Pgchar): PGtkRadioButton; cdecl; external;
function gtk_radio_button_new_with_mnemonic(group: PGSList; label_: Pgchar): PGtkRadioButton; cdecl; external;
function gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member: PGtkRadioButton; label_: Pgchar): PGtkRadioButton; cdecl; external;
function gtk_radio_menu_item_get_group(ARadioMenuItem: PGtkRadioMenuItem): PGSList; cdecl; external;
function gtk_radio_menu_item_get_type: TGType; cdecl; external;
function gtk_radio_menu_item_new(group: PGSList): PGtkRadioMenuItem; cdecl; external;
function gtk_radio_menu_item_new_from_widget(ARadioMenuItem: PGtkRadioMenuItem): PGtkWidget; cdecl; external;
function gtk_radio_menu_item_new_with_label(group: PGSList; label_: Pgchar): PGtkRadioMenuItem; cdecl; external;
function gtk_radio_menu_item_new_with_label_from_widget(ARadioMenuItem: PGtkRadioMenuItem; label_: Pgchar): PGtkWidget; cdecl; external;
function gtk_radio_menu_item_new_with_mnemonic(group: PGSList; label_: Pgchar): PGtkRadioMenuItem; cdecl; external;
function gtk_radio_menu_item_new_with_mnemonic_from_widget(ARadioMenuItem: PGtkRadioMenuItem; label_: Pgchar): PGtkWidget; cdecl; external;
function gtk_radio_tool_button_get_group(ARadioToolButton: PGtkRadioToolButton): PGSList; cdecl; external;
function gtk_radio_tool_button_get_type: TGType; cdecl; external;
function gtk_radio_tool_button_new(group: PGSList): PGtkRadioToolButton; cdecl; external;
function gtk_radio_tool_button_new_from_stock(group: PGSList; stock_id: Pgchar): PGtkRadioToolButton; cdecl; external;
function gtk_radio_tool_button_new_from_widget(ARadioToolButton: PGtkRadioToolButton): PGtkToolItem; cdecl; external;
function gtk_radio_tool_button_new_with_stock_from_widget(ARadioToolButton: PGtkRadioToolButton; stock_id: Pgchar): PGtkToolItem; cdecl; external;
function gtk_range_get_adjustment(ARange: PGtkRange): PGtkAdjustment; cdecl; external;
function gtk_range_get_fill_level(ARange: PGtkRange): gdouble; cdecl; external;
function gtk_range_get_flippable(ARange: PGtkRange): gboolean; cdecl; external;
function gtk_range_get_inverted(ARange: PGtkRange): gboolean; cdecl; external;
function gtk_range_get_lower_stepper_sensitivity(ARange: PGtkRange): TGtkSensitivityType; cdecl; external;
function gtk_range_get_min_slider_size(ARange: PGtkRange): gint; cdecl; external;
function gtk_range_get_restrict_to_fill_level(ARange: PGtkRange): gboolean; cdecl; external;
function gtk_range_get_round_digits(ARange: PGtkRange): gint; cdecl; external;
function gtk_range_get_show_fill_level(ARange: PGtkRange): gboolean; cdecl; external;
function gtk_range_get_slider_size_fixed(ARange: PGtkRange): gboolean; cdecl; external;
function gtk_range_get_type: TGType; cdecl; external;
function gtk_range_get_upper_stepper_sensitivity(ARange: PGtkRange): TGtkSensitivityType; cdecl; external;
function gtk_range_get_value(ARange: PGtkRange): gdouble; cdecl; external;
function gtk_rc_find_module_in_path(module_file: Pgchar): Pgchar; cdecl; external;
function gtk_rc_find_pixmap_in_path(settings: PGtkSettings; scanner: PGScanner; pixmap_file: Pgchar): Pgchar; cdecl; external;
function gtk_rc_get_default_files: PPgchar; cdecl; external;
function gtk_rc_get_im_module_file: Pgchar; cdecl; external;
function gtk_rc_get_im_module_path: Pgchar; cdecl; external;
function gtk_rc_get_module_dir: Pgchar; cdecl; external;
function gtk_rc_get_style(widget: PGtkWidget): PGtkStyle; cdecl; external;
function gtk_rc_get_style_by_paths(settings: PGtkSettings; widget_path: Pgchar; class_path: Pgchar; type_: TGType): PGtkStyle; cdecl; external;
function gtk_rc_get_theme_dir: Pgchar; cdecl; external;
function gtk_rc_parse_color(scanner: PGScanner; color: PGdkColor): guint; cdecl; external;
function gtk_rc_parse_color_full(scanner: PGScanner; style: PGtkRcStyle; color: PGdkColor): guint; cdecl; external;
function gtk_rc_parse_priority(scanner: PGScanner; priority: PGtkPathPriorityType): guint; cdecl; external;
function gtk_rc_parse_state(scanner: PGScanner; state: PGtkStateType): guint; cdecl; external;
function gtk_rc_property_parse_border(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl; external;
function gtk_rc_property_parse_color(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl; external;
function gtk_rc_property_parse_enum(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl; external;
function gtk_rc_property_parse_flags(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl; external;
function gtk_rc_property_parse_requisition(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl; external;
function gtk_rc_reparse_all: gboolean; cdecl; external;
function gtk_rc_reparse_all_for_settings(settings: PGtkSettings; force_load: gboolean): gboolean; cdecl; external;
function gtk_rc_scanner_new: PGScanner; cdecl; external;
function gtk_rc_style_get_type: TGType; cdecl; external;
function gtk_recent_action_get_show_numbers(ARecentAction: PGtkRecentAction): gboolean; cdecl; external;
function gtk_recent_action_get_type: TGType; cdecl; external;
function gtk_recent_action_new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar): PGtkRecentAction; cdecl; external;
function gtk_recent_action_new_for_manager(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar; manager: PGtkRecentManager): PGtkRecentAction; cdecl; external;
function gtk_recent_chooser_dialog_get_type: TGType; cdecl; external;
function gtk_recent_chooser_dialog_new(title: Pgchar; parent: PAtkWindow; first_button_text: Pgchar; args: array of const): PGtkRecentChooserDialog; cdecl; external;
function gtk_recent_chooser_dialog_new_for_manager(title: Pgchar; parent: PAtkWindow; manager: PGtkRecentManager; first_button_text: Pgchar; args: array of const): PGtkRecentChooserDialog; cdecl; external;
function gtk_recent_chooser_error_quark: TGQuark; cdecl; external;
function gtk_recent_chooser_get_current_item(ARecentChooser: PGtkRecentChooser): PGtkRecentInfo; cdecl; external;
function gtk_recent_chooser_get_current_uri(ARecentChooser: PGtkRecentChooser): Pgchar; cdecl; external;
function gtk_recent_chooser_get_filter(ARecentChooser: PGtkRecentChooser): PGtkRecentFilter; cdecl; external;
function gtk_recent_chooser_get_items(ARecentChooser: PGtkRecentChooser): PGList; cdecl; external;
function gtk_recent_chooser_get_limit(ARecentChooser: PGtkRecentChooser): gint; cdecl; external;
function gtk_recent_chooser_get_local_only(ARecentChooser: PGtkRecentChooser): gboolean; cdecl; external;
function gtk_recent_chooser_get_select_multiple(ARecentChooser: PGtkRecentChooser): gboolean; cdecl; external;
function gtk_recent_chooser_get_show_icons(ARecentChooser: PGtkRecentChooser): gboolean; cdecl; external;
function gtk_recent_chooser_get_show_not_found(ARecentChooser: PGtkRecentChooser): gboolean; cdecl; external;
function gtk_recent_chooser_get_show_private(ARecentChooser: PGtkRecentChooser): gboolean; cdecl; external;
function gtk_recent_chooser_get_show_tips(ARecentChooser: PGtkRecentChooser): gboolean; cdecl; external;
function gtk_recent_chooser_get_sort_type(ARecentChooser: PGtkRecentChooser): TGtkRecentSortType; cdecl; external;
function gtk_recent_chooser_get_type: TGType; cdecl; external;
function gtk_recent_chooser_get_uris(ARecentChooser: PGtkRecentChooser; length: Pgsize): PPgchar; cdecl; external;
function gtk_recent_chooser_list_filters(ARecentChooser: PGtkRecentChooser): PGSList; cdecl; external;
function gtk_recent_chooser_menu_get_show_numbers(ARecentChooserMenu: PGtkRecentChooserMenu): gboolean; cdecl; external;
function gtk_recent_chooser_menu_get_type: TGType; cdecl; external;
function gtk_recent_chooser_menu_new: PGtkRecentChooserMenu; cdecl; external;
function gtk_recent_chooser_menu_new_for_manager(manager: PGtkRecentManager): PGtkRecentChooserMenu; cdecl; external;
function gtk_recent_chooser_select_uri(ARecentChooser: PGtkRecentChooser; uri: Pgchar): gboolean; cdecl; external;
function gtk_recent_chooser_set_current_uri(ARecentChooser: PGtkRecentChooser; uri: Pgchar): gboolean; cdecl; external;
function gtk_recent_chooser_widget_get_type: TGType; cdecl; external;
function gtk_recent_chooser_widget_new: PGtkRecentChooserWidget; cdecl; external;
function gtk_recent_chooser_widget_new_for_manager(manager: PGtkRecentManager): PGtkRecentChooserWidget; cdecl; external;
function gtk_recent_filter_filter(ARecentFilter: PGtkRecentFilter; filter_info: PGtkRecentFilterInfo): gboolean; cdecl; external;
function gtk_recent_filter_get_name(ARecentFilter: PGtkRecentFilter): Pgchar; cdecl; external;
function gtk_recent_filter_get_needed(ARecentFilter: PGtkRecentFilter): TGtkRecentFilterFlags; cdecl; external;
function gtk_recent_filter_get_type: TGType; cdecl; external;
function gtk_recent_filter_new: PGtkRecentFilter; cdecl; external;
function gtk_recent_info_create_app_info(ARecentInfo: PGtkRecentInfo; app_name: Pgchar): PGAppInfo; cdecl; external;
function gtk_recent_info_exists(ARecentInfo: PGtkRecentInfo): gboolean; cdecl; external;
function gtk_recent_info_get_added(ARecentInfo: PGtkRecentInfo): glong; cdecl; external;
function gtk_recent_info_get_age(ARecentInfo: PGtkRecentInfo): gint; cdecl; external;
function gtk_recent_info_get_application_info(ARecentInfo: PGtkRecentInfo; app_name: Pgchar; app_exec: PPgchar; count: Pguint; time_: Pglong): gboolean; cdecl; external;
function gtk_recent_info_get_applications(ARecentInfo: PGtkRecentInfo; length: Pgsize): PPgchar; cdecl; external;
function gtk_recent_info_get_description(ARecentInfo: PGtkRecentInfo): Pgchar; cdecl; external;
function gtk_recent_info_get_display_name(ARecentInfo: PGtkRecentInfo): Pgchar; cdecl; external;
function gtk_recent_info_get_gicon(ARecentInfo: PGtkRecentInfo): PGIcon; cdecl; external;
function gtk_recent_info_get_groups(ARecentInfo: PGtkRecentInfo; length: Pgsize): PPgchar; cdecl; external;
function gtk_recent_info_get_icon(ARecentInfo: PGtkRecentInfo; size: gint): PGdkPixbuf; cdecl; external;
function gtk_recent_info_get_mime_type(ARecentInfo: PGtkRecentInfo): Pgchar; cdecl; external;
function gtk_recent_info_get_modified(ARecentInfo: PGtkRecentInfo): glong; cdecl; external;
function gtk_recent_info_get_private_hint(ARecentInfo: PGtkRecentInfo): gboolean; cdecl; external;
function gtk_recent_info_get_short_name(ARecentInfo: PGtkRecentInfo): Pgchar; cdecl; external;
function gtk_recent_info_get_type: TGType; cdecl; external;
function gtk_recent_info_get_uri(ARecentInfo: PGtkRecentInfo): Pgchar; cdecl; external;
function gtk_recent_info_get_uri_display(ARecentInfo: PGtkRecentInfo): Pgchar; cdecl; external;
function gtk_recent_info_get_visited(ARecentInfo: PGtkRecentInfo): glong; cdecl; external;
function gtk_recent_info_has_application(ARecentInfo: PGtkRecentInfo; app_name: Pgchar): gboolean; cdecl; external;
function gtk_recent_info_has_group(ARecentInfo: PGtkRecentInfo; group_name: Pgchar): gboolean; cdecl; external;
function gtk_recent_info_is_local(ARecentInfo: PGtkRecentInfo): gboolean; cdecl; external;
function gtk_recent_info_last_application(ARecentInfo: PGtkRecentInfo): Pgchar; cdecl; external;
function gtk_recent_info_match(ARecentInfo: PGtkRecentInfo; info_b: PGtkRecentInfo): gboolean; cdecl; external;
function gtk_recent_info_ref(ARecentInfo: PGtkRecentInfo): PGtkRecentInfo; cdecl; external;
function gtk_recent_manager_add_full(ARecentManager: PGtkRecentManager; uri: Pgchar; recent_data: PGtkRecentData): gboolean; cdecl; external;
function gtk_recent_manager_add_item(ARecentManager: PGtkRecentManager; uri: Pgchar): gboolean; cdecl; external;
function gtk_recent_manager_error_quark: TGQuark; cdecl; external;
function gtk_recent_manager_get_default: PGtkRecentManager; cdecl; external;
function gtk_recent_manager_get_items(ARecentManager: PGtkRecentManager): PGList; cdecl; external;
function gtk_recent_manager_get_type: TGType; cdecl; external;
function gtk_recent_manager_has_item(ARecentManager: PGtkRecentManager; uri: Pgchar): gboolean; cdecl; external;
function gtk_recent_manager_lookup_item(ARecentManager: PGtkRecentManager; uri: Pgchar): PGtkRecentInfo; cdecl; external;
function gtk_recent_manager_move_item(ARecentManager: PGtkRecentManager; uri: Pgchar; new_uri: Pgchar): gboolean; cdecl; external;
function gtk_recent_manager_new: PGtkRecentManager; cdecl; external;
function gtk_recent_manager_purge_items(ARecentManager: PGtkRecentManager): gint; cdecl; external;
function gtk_recent_manager_remove_item(ARecentManager: PGtkRecentManager; uri: Pgchar): gboolean; cdecl; external;
function gtk_render_icon_pixbuf(context: PGtkStyleContext; source: PGtkIconSource; size: gint): PGdkPixbuf; cdecl; external;
function gtk_requisition_copy(ARequisition: PGtkRequisition): PGtkRequisition; cdecl; external;
function gtk_requisition_get_type: TGType; cdecl; external;
function gtk_requisition_new: PGtkRequisition; cdecl; external;
function gtk_scale_button_get_adjustment(AScaleButton: PGtkScaleButton): PGtkAdjustment; cdecl; external;
function gtk_scale_button_get_minus_button(AScaleButton: PGtkScaleButton): PGtkWidget; cdecl; external;
function gtk_scale_button_get_plus_button(AScaleButton: PGtkScaleButton): PGtkWidget; cdecl; external;
function gtk_scale_button_get_popup(AScaleButton: PGtkScaleButton): PGtkWidget; cdecl; external;
function gtk_scale_button_get_type: TGType; cdecl; external;
function gtk_scale_button_get_value(AScaleButton: PGtkScaleButton): gdouble; cdecl; external;
function gtk_scale_button_new(size: gint; min: gdouble; max: gdouble; step: gdouble; icons: PPgchar): PGtkScaleButton; cdecl; external;
function gtk_scale_get_digits(AScale: PGtkScale): gint; cdecl; external;
function gtk_scale_get_draw_value(AScale: PGtkScale): gboolean; cdecl; external;
function gtk_scale_get_layout(AScale: PGtkScale): PPangoLayout; cdecl; external;
function gtk_scale_get_type: TGType; cdecl; external;
function gtk_scale_get_value_pos(AScale: PGtkScale): TGtkPositionType; cdecl; external;
function gtk_scale_new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScale; cdecl; external;
function gtk_scale_new_with_range(orientation: TGtkOrientation; min: gdouble; max: gdouble; step: gdouble): PGtkScale; cdecl; external;
function gtk_scrollable_get_hadjustment(AScrollable: PGtkScrollable): PGtkAdjustment; cdecl; external;
function gtk_scrollable_get_hscroll_policy(AScrollable: PGtkScrollable): TGtkScrollablePolicy; cdecl; external;
function gtk_scrollable_get_type: TGType; cdecl; external;
function gtk_scrollable_get_vadjustment(AScrollable: PGtkScrollable): PGtkAdjustment; cdecl; external;
function gtk_scrollable_get_vscroll_policy(AScrollable: PGtkScrollable): TGtkScrollablePolicy; cdecl; external;
function gtk_scrollbar_get_type: TGType; cdecl; external;
function gtk_scrollbar_new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScrollbar; cdecl; external;
function gtk_scrolled_window_get_hadjustment(AScrolledWindow: PGtkScrolledWindow): PGtkAdjustment; cdecl; external;
function gtk_scrolled_window_get_hscrollbar(AScrolledWindow: PGtkScrolledWindow): PGtkWidget; cdecl; external;
function gtk_scrolled_window_get_min_content_height(AScrolledWindow: PGtkScrolledWindow): gint; cdecl; external;
function gtk_scrolled_window_get_min_content_width(AScrolledWindow: PGtkScrolledWindow): gint; cdecl; external;
function gtk_scrolled_window_get_placement(AScrolledWindow: PGtkScrolledWindow): TGtkCornerType; cdecl; external;
function gtk_scrolled_window_get_shadow_type(AScrolledWindow: PGtkScrolledWindow): TGtkShadowType; cdecl; external;
function gtk_scrolled_window_get_type: TGType; cdecl; external;
function gtk_scrolled_window_get_vadjustment(AScrolledWindow: PGtkScrolledWindow): PGtkAdjustment; cdecl; external;
function gtk_scrolled_window_get_vscrollbar(AScrolledWindow: PGtkScrolledWindow): PGtkWidget; cdecl; external;
function gtk_scrolled_window_new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkScrolledWindow; cdecl; external;
function gtk_selection_convert(widget: PGtkWidget; selection: TGdkAtom; target: TGdkAtom; time_: guint32): gboolean; cdecl; external;
function gtk_selection_data_copy(ASelectionData: PGtkSelectionData): PGtkSelectionData; cdecl; external;
function gtk_selection_data_get_data(ASelectionData: PGtkSelectionData): Pguint8; cdecl; external;
function gtk_selection_data_get_data_type(ASelectionData: PGtkSelectionData): TGdkAtom; cdecl; external;
function gtk_selection_data_get_data_with_length(ASelectionData: PGtkSelectionData; length: Pgint): Pguint8; cdecl; external;
function gtk_selection_data_get_display(ASelectionData: PGtkSelectionData): PGdkDisplay; cdecl; external;
function gtk_selection_data_get_format(ASelectionData: PGtkSelectionData): gint; cdecl; external;
function gtk_selection_data_get_length(ASelectionData: PGtkSelectionData): gint; cdecl; external;
function gtk_selection_data_get_pixbuf(ASelectionData: PGtkSelectionData): PGdkPixbuf; cdecl; external;
function gtk_selection_data_get_selection(ASelectionData: PGtkSelectionData): TGdkAtom; cdecl; external;
function gtk_selection_data_get_target(ASelectionData: PGtkSelectionData): TGdkAtom; cdecl; external;
function gtk_selection_data_get_targets(ASelectionData: PGtkSelectionData; targets: PPGdkAtom; n_atoms: Pgint): gboolean; cdecl; external;
function gtk_selection_data_get_text(ASelectionData: PGtkSelectionData): Pgchar; cdecl; external;
function gtk_selection_data_get_type: TGType; cdecl; external;
function gtk_selection_data_get_uris(ASelectionData: PGtkSelectionData): PPgchar; cdecl; external;
function gtk_selection_data_set_pixbuf(ASelectionData: PGtkSelectionData; pixbuf: PGdkPixbuf): gboolean; cdecl; external;
function gtk_selection_data_set_text(ASelectionData: PGtkSelectionData; str: Pgchar; len: gint): gboolean; cdecl; external;
function gtk_selection_data_set_uris(ASelectionData: PGtkSelectionData; uris: PPgchar): gboolean; cdecl; external;
function gtk_selection_data_targets_include_image(ASelectionData: PGtkSelectionData; writable: gboolean): gboolean; cdecl; external;
function gtk_selection_data_targets_include_rich_text(ASelectionData: PGtkSelectionData; buffer: PGtkTextBuffer): gboolean; cdecl; external;
function gtk_selection_data_targets_include_text(ASelectionData: PGtkSelectionData): gboolean; cdecl; external;
function gtk_selection_data_targets_include_uri(ASelectionData: PGtkSelectionData): gboolean; cdecl; external;
function gtk_selection_owner_set(widget: PGtkWidget; selection: TGdkAtom; time_: guint32): gboolean; cdecl; external;
function gtk_selection_owner_set_for_display(display: PGdkDisplay; widget: PGtkWidget; selection: TGdkAtom; time_: guint32): gboolean; cdecl; external;
function gtk_separator_get_type: TGType; cdecl; external;
function gtk_separator_menu_item_get_type: TGType; cdecl; external;
function gtk_separator_menu_item_new: PGtkSeparatorMenuItem; cdecl; external;
function gtk_separator_new(orientation: TGtkOrientation): PGtkSeparator; cdecl; external;
function gtk_separator_tool_item_get_draw(ASeparatorToolItem: PGtkSeparatorToolItem): gboolean; cdecl; external;
function gtk_separator_tool_item_get_type: TGType; cdecl; external;
function gtk_separator_tool_item_new: PGtkSeparatorToolItem; cdecl; external;
function gtk_settings_get_default: PGSettings; cdecl; external;
function gtk_settings_get_for_screen(screen: PGdkScreen): PGSettings; cdecl; external;
function gtk_settings_get_type: TGType; cdecl; external;
function gtk_show_uri(screen: PGdkScreen; uri: Pgchar; timestamp: guint32): gboolean; cdecl; external;
function gtk_size_group_get_ignore_hidden(ASizeGroup: PGtkSizeGroup): gboolean; cdecl; external;
function gtk_size_group_get_mode(ASizeGroup: PGtkSizeGroup): TGtkSizeGroupMode; cdecl; external;
function gtk_size_group_get_type: TGType; cdecl; external;
function gtk_size_group_get_widgets(ASizeGroup: PGtkSizeGroup): PGSList; cdecl; external;
function gtk_size_group_new(mode: TGtkSizeGroupMode): PGtkSizeGroup; cdecl; external;
function gtk_socket_get_id(ASocket: PGtkSocket): TWindow; cdecl; external;
function gtk_socket_get_plug_window(ASocket: PGtkSocket): PGdkWindow; cdecl; external;
function gtk_socket_get_type: TGType; cdecl; external;
function gtk_socket_new: PGtkSocket; cdecl; external;
function gtk_spin_button_get_adjustment(ASpinButton: PGtkSpinButton): PGtkAdjustment; cdecl; external;
function gtk_spin_button_get_digits(ASpinButton: PGtkSpinButton): guint; cdecl; external;
function gtk_spin_button_get_numeric(ASpinButton: PGtkSpinButton): gboolean; cdecl; external;
function gtk_spin_button_get_snap_to_ticks(ASpinButton: PGtkSpinButton): gboolean; cdecl; external;
function gtk_spin_button_get_type: TGType; cdecl; external;
function gtk_spin_button_get_update_policy(ASpinButton: PGtkSpinButton): TGtkSpinButtonUpdatePolicy; cdecl; external;
function gtk_spin_button_get_value(ASpinButton: PGtkSpinButton): gdouble; cdecl; external;
function gtk_spin_button_get_value_as_int(ASpinButton: PGtkSpinButton): gint; cdecl; external;
function gtk_spin_button_get_wrap(ASpinButton: PGtkSpinButton): gboolean; cdecl; external;
function gtk_spin_button_new(adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint): PGtkSpinButton; cdecl; external;
function gtk_spin_button_new_with_range(min: gdouble; max: gdouble; step: gdouble): PGtkSpinButton; cdecl; external;
function gtk_spinner_get_type: TGType; cdecl; external;
function gtk_spinner_new: PGtkSpinner; cdecl; external;
function gtk_status_icon_get_geometry(AStatusIcon: PGtkStatusIcon; screen: PPGdkScreen; area: PGdkRectangle; orientation: PGtkOrientation): gboolean; cdecl; external;
function gtk_status_icon_get_gicon(AStatusIcon: PGtkStatusIcon): PGIcon; cdecl; external;
function gtk_status_icon_get_has_tooltip(AStatusIcon: PGtkStatusIcon): gboolean; cdecl; external;
function gtk_status_icon_get_icon_name(AStatusIcon: PGtkStatusIcon): Pgchar; cdecl; external;
function gtk_status_icon_get_pixbuf(AStatusIcon: PGtkStatusIcon): PGdkPixbuf; cdecl; external;
function gtk_status_icon_get_screen(AStatusIcon: PGtkStatusIcon): PGdkScreen; cdecl; external;
function gtk_status_icon_get_size(AStatusIcon: PGtkStatusIcon): gint; cdecl; external;
function gtk_status_icon_get_stock(AStatusIcon: PGtkStatusIcon): Pgchar; cdecl; external;
function gtk_status_icon_get_storage_type(AStatusIcon: PGtkStatusIcon): TGtkImageType; cdecl; external;
function gtk_status_icon_get_title(AStatusIcon: PGtkStatusIcon): Pgchar; cdecl; external;
function gtk_status_icon_get_tooltip_markup(AStatusIcon: PGtkStatusIcon): Pgchar; cdecl; external;
function gtk_status_icon_get_tooltip_text(AStatusIcon: PGtkStatusIcon): Pgchar; cdecl; external;
function gtk_status_icon_get_type: TGType; cdecl; external;
function gtk_status_icon_get_visible(AStatusIcon: PGtkStatusIcon): gboolean; cdecl; external;
function gtk_status_icon_get_x11_window_id(AStatusIcon: PGtkStatusIcon): guint32; cdecl; external;
function gtk_status_icon_is_embedded(AStatusIcon: PGtkStatusIcon): gboolean; cdecl; external;
function gtk_status_icon_new: PGtkStatusIcon; cdecl; external;
function gtk_status_icon_new_from_file(filename: Pgchar): PGtkStatusIcon; cdecl; external;
function gtk_status_icon_new_from_gicon(icon: PGIcon): PGtkStatusIcon; cdecl; external;
function gtk_status_icon_new_from_icon_name(icon_name: Pgchar): PGtkStatusIcon; cdecl; external;
function gtk_status_icon_new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkStatusIcon; cdecl; external;
function gtk_status_icon_new_from_stock(stock_id: Pgchar): PGtkStatusIcon; cdecl; external;
function gtk_statusbar_get_context_id(AStatusbar: PGtkStatusbar; context_description: Pgchar): guint; cdecl; external;
function gtk_statusbar_get_message_area(AStatusbar: PGtkStatusbar): PGtkWidget; cdecl; external;
function gtk_statusbar_get_type: TGType; cdecl; external;
function gtk_statusbar_new: PGtkStatusbar; cdecl; external;
function gtk_statusbar_push(AStatusbar: PGtkStatusbar; context_id: guint; text: Pgchar): guint; cdecl; external;
function gtk_stock_item_copy(AStockItem: PGtkStockItem): PGtkStockItem; cdecl; external;
function gtk_stock_list_ids: PGSList; cdecl; external;
function gtk_stock_lookup(stock_id: Pgchar; item: PGtkStockItem): gboolean; cdecl; external;
function gtk_style_attach(AStyle: PGtkStyle; window: PGdkWindow): PPangoStyle; cdecl; external;
function gtk_style_context_get_direction(AStyleContext: PGtkStyleContext): TGtkTextDirection; cdecl; external;
function gtk_style_context_get_font(AStyleContext: PGtkStyleContext; state: TGtkStateFlags): PPangoFontDescription; cdecl; external;
function gtk_style_context_get_junction_sides(AStyleContext: PGtkStyleContext): TGtkJunctionSides; cdecl; external;
function gtk_style_context_get_path(AStyleContext: PGtkStyleContext): PGtkWidgetPath; cdecl; external;
function gtk_style_context_get_screen(AStyleContext: PGtkStyleContext): PGdkScreen; cdecl; external;
function gtk_style_context_get_state(AStyleContext: PGtkStyleContext): TGtkStateFlags; cdecl; external;
function gtk_style_context_get_type: TGType; cdecl; external;
function gtk_style_context_has_class(AStyleContext: PGtkStyleContext; class_name: Pgchar): gboolean; cdecl; external;
function gtk_style_context_has_region(AStyleContext: PGtkStyleContext; region_name: Pgchar; flags_return: PGtkRegionFlags): gboolean; cdecl; external;
function gtk_style_context_list_classes(AStyleContext: PGtkStyleContext): PGList; cdecl; external;
function gtk_style_context_list_regions(AStyleContext: PGtkStyleContext): PGList; cdecl; external;
function gtk_style_context_lookup_color(AStyleContext: PGtkStyleContext; color_name: Pgchar; color: PGdkRGBA): gboolean; cdecl; external;
function gtk_style_context_lookup_icon_set(AStyleContext: PGtkStyleContext; stock_id: Pgchar): PGtkIconSet; cdecl; external;
function gtk_style_context_new: PGtkStyleContext; cdecl; external;
function gtk_style_context_state_is_running(AStyleContext: PGtkStyleContext; state: TGtkStateType; progress: Pgdouble): gboolean; cdecl; external;
function gtk_style_copy(AStyle: PGtkStyle): PPangoStyle; cdecl; external;
function gtk_style_get_type: TGType; cdecl; external;
function gtk_style_has_context(AStyle: PGtkStyle): gboolean; cdecl; external;
function gtk_style_lookup_color(AStyle: PGtkStyle; color_name: Pgchar; color: PGdkColor): gboolean; cdecl; external;
function gtk_style_lookup_icon_set(AStyle: PGtkStyle; stock_id: Pgchar): PGtkIconSet; cdecl; external;
function gtk_style_properties_get_property(AStyleProperties: PGtkStyleProperties; property_: Pgchar; state: TGtkStateFlags; value: PGValue): gboolean; cdecl; external;
function gtk_style_properties_get_type: TGType; cdecl; external;
function gtk_style_properties_lookup_color(AStyleProperties: PGtkStyleProperties; name: Pgchar): PGtkSymbolicColor; cdecl; external;
function gtk_style_properties_lookup_property(property_name: Pgchar; parse_func: PGtkStylePropertyParser; pspec: PPGParamSpec): gboolean; cdecl; external;
function gtk_style_properties_new: PGtkStyleProperties; cdecl; external;
function gtk_style_provider_get_icon_factory(AStyleProvider: PGtkStyleProvider; path: PGtkWidgetPath): PGtkIconFactory; cdecl; external;
function gtk_style_provider_get_style(AStyleProvider: PGtkStyleProvider; path: PGtkWidgetPath): PGtkStyleProperties; cdecl; external;
function gtk_style_provider_get_style_property(AStyleProvider: PGtkStyleProvider; path: PGtkWidgetPath; state: TGtkStateFlags; pspec: PGParamSpec; value: PGValue): gboolean; cdecl; external;
function gtk_style_provider_get_type: TGType; cdecl; external;
function gtk_style_render_icon(AStyle: PGtkStyle; source: PGtkIconSource; direction: TGtkTextDirection; state: TGtkStateType; size: gint; widget: PGtkWidget; detail: Pgchar): PGdkPixbuf; cdecl; external;
function gtk_switch_get_active(ASwitch: PGtkSwitch): gboolean; cdecl; external;
function gtk_switch_get_type: TGType; cdecl; external;
function gtk_switch_new: PGtkSwitch; cdecl; external;
function gtk_symbolic_color_get_type: TGType; cdecl; external;
function gtk_symbolic_color_new_alpha(ASymbolicColor: PGtkSymbolicColor; factor: gdouble): PGtkSymbolicColor; cdecl; external;
function gtk_symbolic_color_new_literal(color: PGdkRGBA): PGtkSymbolicColor; cdecl; external;
function gtk_symbolic_color_new_mix(ASymbolicColor: PGtkSymbolicColor; color2: PGtkSymbolicColor; factor: gdouble): PGtkSymbolicColor; cdecl; external;
function gtk_symbolic_color_new_name(name: Pgchar): PGtkSymbolicColor; cdecl; external;
function gtk_symbolic_color_new_shade(ASymbolicColor: PGtkSymbolicColor; factor: gdouble): PGtkSymbolicColor; cdecl; external;
function gtk_symbolic_color_ref(ASymbolicColor: PGtkSymbolicColor): PGtkSymbolicColor; cdecl; external;
function gtk_symbolic_color_resolve(ASymbolicColor: PGtkSymbolicColor; props: PGtkStyleProperties; resolved_color: PGdkRGBA): gboolean; cdecl; external;
function gtk_symbolic_color_to_string(ASymbolicColor: PGtkSymbolicColor): Pgchar; cdecl; external;
function gtk_table_get_col_spacing(ATable: PGtkTable; column: guint): guint; cdecl; external;
function gtk_table_get_default_col_spacing(ATable: PGtkTable): guint; cdecl; external;
function gtk_table_get_default_row_spacing(ATable: PGtkTable): guint; cdecl; external;
function gtk_table_get_homogeneous(ATable: PGtkTable): gboolean; cdecl; external;
function gtk_table_get_row_spacing(ATable: PGtkTable; row: guint): guint; cdecl; external;
function gtk_table_get_type: TGType; cdecl; external;
function gtk_table_new(rows: guint; columns: guint; homogeneous: gboolean): PGtkTable; cdecl; external;
function gtk_target_entry_copy(ATargetEntry: PGtkTargetEntry): PGtkTargetEntry; cdecl; external;
function gtk_target_entry_get_type: TGType; cdecl; external;
function gtk_target_entry_new(target: Pgchar; flags: guint; info: guint): PGtkTargetEntry; cdecl; external;
function gtk_target_list_find(ATargetList: PGtkTargetList; target: TGdkAtom; info: Pguint): gboolean; cdecl; external;
function gtk_target_list_get_type: TGType; cdecl; external;
function gtk_target_list_new(targets: PGtkTargetEntry; ntargets: guint): PGtkTargetList; cdecl; external;
function gtk_target_list_ref(ATargetList: PGtkTargetList): PGtkTargetList; cdecl; external;
function gtk_target_table_new_from_list(list: PGtkTargetList; n_targets: Pgint): PGtkTargetEntry; cdecl; external;
function gtk_targets_include_image(targets: PGdkAtom; n_targets: gint; writable: gboolean): gboolean; cdecl; external;
function gtk_targets_include_rich_text(targets: PGdkAtom; n_targets: gint; buffer: PGtkTextBuffer): gboolean; cdecl; external;
function gtk_targets_include_text(targets: PGdkAtom; n_targets: gint): gboolean; cdecl; external;
function gtk_targets_include_uri(targets: PGdkAtom; n_targets: gint): gboolean; cdecl; external;
function gtk_tearoff_menu_item_get_type: TGType; cdecl; external;
function gtk_tearoff_menu_item_new: PGtkTearoffMenuItem; cdecl; external;
function gtk_test_create_simple_window(window_title: Pgchar; dialog_text: Pgchar): PGtkWidget; cdecl; external;
function gtk_test_create_widget(widget_type: TGType; first_property_name: Pgchar; args: array of const): PGtkWidget; cdecl; external;
function gtk_test_display_button_window(window_title: Pgchar; dialog_text: Pgchar; args: array of const): PGtkWidget; cdecl; external;
function gtk_test_find_label(widget: PGtkWidget; label_pattern: Pgchar): PGtkWidget; cdecl; external;
function gtk_test_find_sibling(base_widget: PGtkWidget; widget_type: TGType): PGtkWidget; cdecl; external;
function gtk_test_find_widget(widget: PGtkWidget; label_pattern: Pgchar; widget_type: TGType): PGtkWidget; cdecl; external;
function gtk_test_list_all_types(n_types: Pguint): PGType; cdecl; external;
function gtk_test_slider_get_value(widget: PGtkWidget): gdouble; cdecl; external;
function gtk_test_spin_button_click(spinner: PGtkSpinButton; button: guint; upwards: gboolean): gboolean; cdecl; external;
function gtk_test_text_get(widget: PGtkWidget): Pgchar; cdecl; external;
function gtk_test_widget_click(widget: PGtkWidget; button: guint; modifiers: TGdkModifierType): gboolean; cdecl; external;
function gtk_test_widget_send_key(widget: PGtkWidget; keyval: guint; modifiers: TGdkModifierType): gboolean; cdecl; external;
function gtk_text_attributes_copy(ATextAttributes: PGtkTextAttributes): PGtkTextAttributes; cdecl; external;
function gtk_text_attributes_get_type: TGType; cdecl; external;
function gtk_text_attributes_new: PGtkTextAttributes; cdecl; external;
function gtk_text_attributes_ref(ATextAttributes: PGtkTextAttributes): PGtkTextAttributes; cdecl; external;
function gtk_text_buffer_backspace(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; interactive: gboolean; default_editable: gboolean): gboolean; cdecl; external;
function gtk_text_buffer_create_child_anchor(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter): PGtkTextChildAnchor; cdecl; external;
function gtk_text_buffer_create_mark(ATextBuffer: PGtkTextBuffer; mark_name: Pgchar; where: PGtkTextIter; left_gravity: gboolean): PGtkTextMark; cdecl; external;
function gtk_text_buffer_create_tag(ATextBuffer: PGtkTextBuffer; tag_name: Pgchar; first_property_name: Pgchar; args: array of const): PGtkTextTag; cdecl; external;
function gtk_text_buffer_delete_interactive(ATextBuffer: PGtkTextBuffer; start_iter: PGtkTextIter; end_iter: PGtkTextIter; default_editable: gboolean): gboolean; cdecl; external;
function gtk_text_buffer_delete_selection(ATextBuffer: PGtkTextBuffer; interactive: gboolean; default_editable: gboolean): gboolean; cdecl; external;
function gtk_text_buffer_deserialize(ATextBuffer: PGtkTextBuffer; content_buffer: PGtkTextBuffer; format: TGdkAtom; iter: PGtkTextIter; data: Pguint8; length: gsize): gboolean; cdecl; external;
function gtk_text_buffer_deserialize_get_can_create_tags(ATextBuffer: PGtkTextBuffer; format: TGdkAtom): gboolean; cdecl; external;
function gtk_text_buffer_get_char_count(ATextBuffer: PGtkTextBuffer): gint; cdecl; external;
function gtk_text_buffer_get_copy_target_list(ATextBuffer: PGtkTextBuffer): PGtkTargetList; cdecl; external;
function gtk_text_buffer_get_deserialize_formats(ATextBuffer: PGtkTextBuffer; n_formats: Pgint): PGdkAtom; cdecl; external;
function gtk_text_buffer_get_has_selection(ATextBuffer: PGtkTextBuffer): gboolean; cdecl; external;
function gtk_text_buffer_get_insert(ATextBuffer: PGtkTextBuffer): PGtkTextMark; cdecl; external;
function gtk_text_buffer_get_line_count(ATextBuffer: PGtkTextBuffer): gint; cdecl; external;
function gtk_text_buffer_get_mark(ATextBuffer: PGtkTextBuffer; name: Pgchar): PGtkTextMark; cdecl; external;
function gtk_text_buffer_get_modified(ATextBuffer: PGtkTextBuffer): gboolean; cdecl; external;
function gtk_text_buffer_get_paste_target_list(ATextBuffer: PGtkTextBuffer): PGtkTargetList; cdecl; external;
function gtk_text_buffer_get_selection_bound(ATextBuffer: PGtkTextBuffer): PGtkTextMark; cdecl; external;
function gtk_text_buffer_get_selection_bounds(ATextBuffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_buffer_get_serialize_formats(ATextBuffer: PGtkTextBuffer; n_formats: Pgint): PGdkAtom; cdecl; external;
function gtk_text_buffer_get_slice(ATextBuffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl; external;
function gtk_text_buffer_get_tag_table(ATextBuffer: PGtkTextBuffer): PGtkTextTagTable; cdecl; external;
function gtk_text_buffer_get_text(ATextBuffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl; external;
function gtk_text_buffer_get_type: TGType; cdecl; external;
function gtk_text_buffer_insert_interactive(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl; external;
function gtk_text_buffer_insert_interactive_at_cursor(ATextBuffer: PGtkTextBuffer; text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl; external;
function gtk_text_buffer_insert_range_interactive(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter; default_editable: gboolean): gboolean; cdecl; external;
function gtk_text_buffer_new(table: PGtkTextTagTable): PGtkTextBuffer; cdecl; external;
function gtk_text_buffer_register_deserialize_format(ATextBuffer: PGtkTextBuffer; mime_type: Pgchar; function_: TGtkTextBufferDeserializeFunc; user_data: gpointer; user_data_destroy: TGDestroyNotify): TGdkAtom; cdecl; external;
function gtk_text_buffer_register_deserialize_tagset(ATextBuffer: PGtkTextBuffer; tagset_name: Pgchar): TGdkAtom; cdecl; external;
function gtk_text_buffer_register_serialize_format(ATextBuffer: PGtkTextBuffer; mime_type: Pgchar; function_: TGtkTextBufferSerializeFunc; user_data: gpointer; user_data_destroy: TGDestroyNotify): TGdkAtom; cdecl; external;
function gtk_text_buffer_register_serialize_tagset(ATextBuffer: PGtkTextBuffer; tagset_name: Pgchar): TGdkAtom; cdecl; external;
function gtk_text_buffer_serialize(ATextBuffer: PGtkTextBuffer; content_buffer: PGtkTextBuffer; format: TGdkAtom; start: PGtkTextIter; end_: PGtkTextIter; length: Pgsize): Pguint8; cdecl; external;
function gtk_text_child_anchor_get_deleted(ATextChildAnchor: PGtkTextChildAnchor): gboolean; cdecl; external;
function gtk_text_child_anchor_get_type: TGType; cdecl; external;
function gtk_text_child_anchor_get_widgets(ATextChildAnchor: PGtkTextChildAnchor): PGList; cdecl; external;
function gtk_text_child_anchor_new: PGtkTextChildAnchor; cdecl; external;
function gtk_text_iter_backward_char(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_backward_chars(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_backward_cursor_position(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_backward_cursor_positions(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_backward_find_char(ATextIter: PGtkTextIter; pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_backward_line(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_backward_lines(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_backward_search(ATextIter: PGtkTextIter; str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_backward_sentence_start(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_backward_sentence_starts(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_backward_to_tag_toggle(ATextIter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external;
function gtk_text_iter_backward_visible_cursor_position(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_backward_visible_cursor_positions(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_backward_visible_line(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_backward_visible_lines(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_backward_visible_word_start(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_backward_visible_word_starts(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_backward_word_start(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_backward_word_starts(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_begins_tag(ATextIter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external;
function gtk_text_iter_can_insert(ATextIter: PGtkTextIter; default_editability: gboolean): gboolean; cdecl; external;
function gtk_text_iter_compare(ATextIter: PGtkTextIter; rhs: PGtkTextIter): gint; cdecl; external;
function gtk_text_iter_copy(ATextIter: PGtkTextIter): PGtkTextIter; cdecl; external;
function gtk_text_iter_editable(ATextIter: PGtkTextIter; default_setting: gboolean): gboolean; cdecl; external;
function gtk_text_iter_ends_line(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_ends_sentence(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_ends_tag(ATextIter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external;
function gtk_text_iter_ends_word(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_equal(ATextIter: PGtkTextIter; rhs: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_char(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_chars(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_forward_cursor_position(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_cursor_positions(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_forward_find_char(ATextIter: PGtkTextIter; pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_line(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_lines(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_forward_search(ATextIter: PGtkTextIter; str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_sentence_end(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_sentence_ends(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_forward_to_line_end(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_to_tag_toggle(ATextIter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external;
function gtk_text_iter_forward_visible_cursor_position(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_visible_cursor_positions(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_forward_visible_line(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_visible_lines(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_forward_visible_word_end(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_visible_word_ends(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_forward_word_end(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_forward_word_ends(ATextIter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_iter_get_attributes(ATextIter: PGtkTextIter; values: PGtkTextAttributes): gboolean; cdecl; external;
function gtk_text_iter_get_buffer(ATextIter: PGtkTextIter): PGtkTextBuffer; cdecl; external;
function gtk_text_iter_get_bytes_in_line(ATextIter: PGtkTextIter): gint; cdecl; external;
function gtk_text_iter_get_char(ATextIter: PGtkTextIter): gunichar; cdecl; external;
function gtk_text_iter_get_chars_in_line(ATextIter: PGtkTextIter): gint; cdecl; external;
function gtk_text_iter_get_child_anchor(ATextIter: PGtkTextIter): PGtkTextChildAnchor; cdecl; external;
function gtk_text_iter_get_language(ATextIter: PGtkTextIter): PPangoLanguage; cdecl; external;
function gtk_text_iter_get_line(ATextIter: PGtkTextIter): gint; cdecl; external;
function gtk_text_iter_get_line_index(ATextIter: PGtkTextIter): gint; cdecl; external;
function gtk_text_iter_get_line_offset(ATextIter: PGtkTextIter): gint; cdecl; external;
function gtk_text_iter_get_marks(ATextIter: PGtkTextIter): PGSList; cdecl; external;
function gtk_text_iter_get_offset(ATextIter: PGtkTextIter): gint; cdecl; external;
function gtk_text_iter_get_pixbuf(ATextIter: PGtkTextIter): PGdkPixbuf; cdecl; external;
function gtk_text_iter_get_slice(ATextIter: PGtkTextIter; end_: PGtkTextIter): Pgchar; cdecl; external;
function gtk_text_iter_get_tags(ATextIter: PGtkTextIter): PGSList; cdecl; external;
function gtk_text_iter_get_text(ATextIter: PGtkTextIter; end_: PGtkTextIter): Pgchar; cdecl; external;
function gtk_text_iter_get_toggled_tags(ATextIter: PGtkTextIter; toggled_on: gboolean): PGSList; cdecl; external;
function gtk_text_iter_get_type: TGType; cdecl; external;
function gtk_text_iter_get_visible_line_index(ATextIter: PGtkTextIter): gint; cdecl; external;
function gtk_text_iter_get_visible_line_offset(ATextIter: PGtkTextIter): gint; cdecl; external;
function gtk_text_iter_get_visible_slice(ATextIter: PGtkTextIter; end_: PGtkTextIter): Pgchar; cdecl; external;
function gtk_text_iter_get_visible_text(ATextIter: PGtkTextIter; end_: PGtkTextIter): Pgchar; cdecl; external;
function gtk_text_iter_has_tag(ATextIter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external;
function gtk_text_iter_in_range(ATextIter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_inside_sentence(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_inside_word(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_is_cursor_position(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_is_end(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_is_start(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_starts_line(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_starts_sentence(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_starts_word(ATextIter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_iter_toggles_tag(ATextIter: PGtkTextIter; tag: PGtkTextTag): gboolean; cdecl; external;
function gtk_text_mark_get_buffer(ATextMark: PGtkTextMark): PGtkTextBuffer; cdecl; external;
function gtk_text_mark_get_deleted(ATextMark: PGtkTextMark): gboolean; cdecl; external;
function gtk_text_mark_get_left_gravity(ATextMark: PGtkTextMark): gboolean; cdecl; external;
function gtk_text_mark_get_name(ATextMark: PGtkTextMark): Pgchar; cdecl; external;
function gtk_text_mark_get_type: TGType; cdecl; external;
function gtk_text_mark_get_visible(ATextMark: PGtkTextMark): gboolean; cdecl; external;
function gtk_text_mark_new(name: Pgchar; left_gravity: gboolean): PGtkTextMark; cdecl; external;
function gtk_text_tag_event(ATextTag: PGtkTextTag; event_object: PGObject; event: PGdkEvent; iter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_tag_get_priority(ATextTag: PGtkTextTag): gint; cdecl; external;
function gtk_text_tag_get_type: TGType; cdecl; external;
function gtk_text_tag_new(name: Pgchar): PGtkTextTag; cdecl; external;
function gtk_text_tag_table_get_size(ATextTagTable: PGtkTextTagTable): gint; cdecl; external;
function gtk_text_tag_table_get_type: TGType; cdecl; external;
function gtk_text_tag_table_lookup(ATextTagTable: PGtkTextTagTable; name: Pgchar): PGtkTextTag; cdecl; external;
function gtk_text_tag_table_new: PGtkTextTagTable; cdecl; external;
function gtk_text_view_backward_display_line(ATextView: PGtkTextView; iter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_view_backward_display_line_start(ATextView: PGtkTextView; iter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_view_forward_display_line(ATextView: PGtkTextView; iter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_view_forward_display_line_end(ATextView: PGtkTextView; iter: PGtkTextIter): gboolean; cdecl; external;
function gtk_text_view_get_accepts_tab(ATextView: PGtkTextView): gboolean; cdecl; external;
function gtk_text_view_get_border_window_size(ATextView: PGtkTextView; type_: TGtkTextWindowType): gint; cdecl; external;
function gtk_text_view_get_buffer(ATextView: PGtkTextView): PGtkTextBuffer; cdecl; external;
function gtk_text_view_get_cursor_visible(ATextView: PGtkTextView): gboolean; cdecl; external;
function gtk_text_view_get_default_attributes(ATextView: PGtkTextView): PGtkTextAttributes; cdecl; external;
function gtk_text_view_get_editable(ATextView: PGtkTextView): gboolean; cdecl; external;
function gtk_text_view_get_indent(ATextView: PGtkTextView): gint; cdecl; external;
function gtk_text_view_get_justification(ATextView: PGtkTextView): TGtkJustification; cdecl; external;
function gtk_text_view_get_left_margin(ATextView: PGtkTextView): gint; cdecl; external;
function gtk_text_view_get_overwrite(ATextView: PGtkTextView): gboolean; cdecl; external;
function gtk_text_view_get_pixels_above_lines(ATextView: PGtkTextView): gint; cdecl; external;
function gtk_text_view_get_pixels_below_lines(ATextView: PGtkTextView): gint; cdecl; external;
function gtk_text_view_get_pixels_inside_wrap(ATextView: PGtkTextView): gint; cdecl; external;
function gtk_text_view_get_right_margin(ATextView: PGtkTextView): gint; cdecl; external;
function gtk_text_view_get_tabs(ATextView: PGtkTextView): PPangoTabArray; cdecl; external;
function gtk_text_view_get_type: TGType; cdecl; external;
function gtk_text_view_get_window(ATextView: PGtkTextView; win: TGtkTextWindowType): PGdkWindow; cdecl; external;
function gtk_text_view_get_window_type(ATextView: PGtkTextView; window: PGdkWindow): TGtkTextWindowType; cdecl; external;
function gtk_text_view_get_wrap_mode(ATextView: PGtkTextView): TPangoWrapMode; cdecl; external;
function gtk_text_view_im_context_filter_keypress(ATextView: PGtkTextView; event: PGdkEventKey): gboolean; cdecl; external;
function gtk_text_view_move_mark_onscreen(ATextView: PGtkTextView; mark: PGtkTextMark): gboolean; cdecl; external;
function gtk_text_view_move_visually(ATextView: PGtkTextView; iter: PGtkTextIter; count: gint): gboolean; cdecl; external;
function gtk_text_view_new: PGtkTextView; cdecl; external;
function gtk_text_view_new_with_buffer(buffer: PGtkTextBuffer): PGtkTextView; cdecl; external;
function gtk_text_view_place_cursor_onscreen(ATextView: PGtkTextView): gboolean; cdecl; external;
function gtk_text_view_scroll_to_iter(ATextView: PGtkTextView; iter: PGtkTextIter; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble): gboolean; cdecl; external;
function gtk_text_view_starts_display_line(ATextView: PGtkTextView; iter: PGtkTextIter): gboolean; cdecl; external;
function gtk_theming_engine_get_direction(AThemingEngine: PGtkThemingEngine): TGtkTextDirection; cdecl; external;
function gtk_theming_engine_get_font(AThemingEngine: PGtkThemingEngine; state: TGtkStateFlags): PPangoFontDescription; cdecl; external;
function gtk_theming_engine_get_junction_sides(AThemingEngine: PGtkThemingEngine): TGtkJunctionSides; cdecl; external;
function gtk_theming_engine_get_path(AThemingEngine: PGtkThemingEngine): PGtkWidgetPath; cdecl; external;
function gtk_theming_engine_get_screen(AThemingEngine: PGtkThemingEngine): PGdkScreen; cdecl; external;
function gtk_theming_engine_get_state(AThemingEngine: PGtkThemingEngine): TGtkStateFlags; cdecl; external;
function gtk_theming_engine_get_type: TGType; cdecl; external;
function gtk_theming_engine_has_class(AThemingEngine: PGtkThemingEngine; style_class: Pgchar): gboolean; cdecl; external;
function gtk_theming_engine_has_region(AThemingEngine: PGtkThemingEngine; style_region: Pgchar; flags: PGtkRegionFlags): gboolean; cdecl; external;
function gtk_theming_engine_load(name: Pgchar): PGtkThemingEngine; cdecl; external;
function gtk_theming_engine_lookup_color(AThemingEngine: PGtkThemingEngine; color_name: Pgchar; color: PGdkRGBA): gboolean; cdecl; external;
function gtk_theming_engine_state_is_running(AThemingEngine: PGtkThemingEngine; state: TGtkStateType; progress: Pgdouble): gboolean; cdecl; external;
function gtk_toggle_action_get_active(AToggleAction: PGtkToggleAction): gboolean; cdecl; external;
function gtk_toggle_action_get_draw_as_radio(AToggleAction: PGtkToggleAction): gboolean; cdecl; external;
function gtk_toggle_action_get_type: TGType; cdecl; external;
function gtk_toggle_action_new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar): PGtkToggleAction; cdecl; external;
function gtk_toggle_button_get_active(AToggleButton: PGtkToggleButton): gboolean; cdecl; external;
function gtk_toggle_button_get_inconsistent(AToggleButton: PGtkToggleButton): gboolean; cdecl; external;
function gtk_toggle_button_get_mode(AToggleButton: PGtkToggleButton): gboolean; cdecl; external;
function gtk_toggle_button_get_type: TGType; cdecl; external;
function gtk_toggle_button_new: PGtkToggleButton; cdecl; external;
function gtk_toggle_button_new_with_label(label_: Pgchar): PGtkToggleButton; cdecl; external;
function gtk_toggle_button_new_with_mnemonic(label_: Pgchar): PGtkToggleButton; cdecl; external;
function gtk_toggle_tool_button_get_active(AToggleToolButton: PGtkToggleToolButton): gboolean; cdecl; external;
function gtk_toggle_tool_button_get_type: TGType; cdecl; external;
function gtk_toggle_tool_button_new: PGtkToggleToolButton; cdecl; external;
function gtk_toggle_tool_button_new_from_stock(stock_id: Pgchar): PGtkToggleToolButton; cdecl; external;
function gtk_tool_button_get_icon_name(AToolButton: PGtkToolButton): Pgchar; cdecl; external;
function gtk_tool_button_get_icon_widget(AToolButton: PGtkToolButton): PGtkWidget; cdecl; external;
function gtk_tool_button_get_label(AToolButton: PGtkToolButton): Pgchar; cdecl; external;
function gtk_tool_button_get_label_widget(AToolButton: PGtkToolButton): PGtkWidget; cdecl; external;
function gtk_tool_button_get_stock_id(AToolButton: PGtkToolButton): Pgchar; cdecl; external;
function gtk_tool_button_get_type: TGType; cdecl; external;
function gtk_tool_button_get_use_underline(AToolButton: PGtkToolButton): gboolean; cdecl; external;
function gtk_tool_button_new(icon_widget: PGtkWidget; label_: Pgchar): PGtkToolButton; cdecl; external;
function gtk_tool_button_new_from_stock(stock_id: Pgchar): PGtkToolButton; cdecl; external;
function gtk_tool_item_get_ellipsize_mode(AToolItem: PGtkToolItem): TPangoEllipsizeMode; cdecl; external;
function gtk_tool_item_get_expand(AToolItem: PGtkToolItem): gboolean; cdecl; external;
function gtk_tool_item_get_homogeneous(AToolItem: PGtkToolItem): gboolean; cdecl; external;
function gtk_tool_item_get_icon_size(AToolItem: PGtkToolItem): gint; cdecl; external;
function gtk_tool_item_get_is_important(AToolItem: PGtkToolItem): gboolean; cdecl; external;
function gtk_tool_item_get_orientation(AToolItem: PGtkToolItem): TGtkOrientation; cdecl; external;
function gtk_tool_item_get_proxy_menu_item(AToolItem: PGtkToolItem; menu_item_id: Pgchar): PGtkWidget; cdecl; external;
function gtk_tool_item_get_relief_style(AToolItem: PGtkToolItem): TGtkReliefStyle; cdecl; external;
function gtk_tool_item_get_text_alignment(AToolItem: PGtkToolItem): gfloat; cdecl; external;
function gtk_tool_item_get_text_orientation(AToolItem: PGtkToolItem): TGtkOrientation; cdecl; external;
function gtk_tool_item_get_text_size_group(AToolItem: PGtkToolItem): PGtkSizeGroup; cdecl; external;
function gtk_tool_item_get_toolbar_style(AToolItem: PGtkToolItem): TGtkToolbarStyle; cdecl; external;
function gtk_tool_item_get_type: TGType; cdecl; external;
function gtk_tool_item_get_use_drag_window(AToolItem: PGtkToolItem): gboolean; cdecl; external;
function gtk_tool_item_get_visible_horizontal(AToolItem: PGtkToolItem): gboolean; cdecl; external;
function gtk_tool_item_get_visible_vertical(AToolItem: PGtkToolItem): gboolean; cdecl; external;
function gtk_tool_item_group_get_collapsed(AToolItemGroup: PGtkToolItemGroup): gboolean; cdecl; external;
function gtk_tool_item_group_get_drop_item(AToolItemGroup: PGtkToolItemGroup; x: gint; y: gint): PGtkToolItem; cdecl; external;
function gtk_tool_item_group_get_ellipsize(AToolItemGroup: PGtkToolItemGroup): TPangoEllipsizeMode; cdecl; external;
function gtk_tool_item_group_get_header_relief(AToolItemGroup: PGtkToolItemGroup): TGtkReliefStyle; cdecl; external;
function gtk_tool_item_group_get_item_position(AToolItemGroup: PGtkToolItemGroup; item: PGtkToolItem): gint; cdecl; external;
function gtk_tool_item_group_get_label(AToolItemGroup: PGtkToolItemGroup): Pgchar; cdecl; external;
function gtk_tool_item_group_get_label_widget(AToolItemGroup: PGtkToolItemGroup): PGtkWidget; cdecl; external;
function gtk_tool_item_group_get_n_items(AToolItemGroup: PGtkToolItemGroup): guint; cdecl; external;
function gtk_tool_item_group_get_nth_item(AToolItemGroup: PGtkToolItemGroup; index: guint): PGtkToolItem; cdecl; external;
function gtk_tool_item_group_get_type: TGType; cdecl; external;
function gtk_tool_item_group_new(label_: Pgchar): PGtkToolItemGroup; cdecl; external;
function gtk_tool_item_new: PGtkToolItem; cdecl; external;
function gtk_tool_item_retrieve_proxy_menu_item(AToolItem: PGtkToolItem): PGtkWidget; cdecl; external;
function gtk_tool_palette_get_drag_item(AToolPalette: PGtkToolPalette; selection: PGtkSelectionData): PGtkWidget; cdecl; external;
function gtk_tool_palette_get_drag_target_group: PGtkTargetEntry; cdecl; external;
function gtk_tool_palette_get_drag_target_item: PGtkTargetEntry; cdecl; external;
function gtk_tool_palette_get_drop_group(AToolPalette: PGtkToolPalette; x: gint; y: gint): PGtkToolItemGroup; cdecl; external;
function gtk_tool_palette_get_drop_item(AToolPalette: PGtkToolPalette; x: gint; y: gint): PGtkToolItem; cdecl; external;
function gtk_tool_palette_get_exclusive(AToolPalette: PGtkToolPalette; group: PGtkToolItemGroup): gboolean; cdecl; external;
function gtk_tool_palette_get_expand(AToolPalette: PGtkToolPalette; group: PGtkToolItemGroup): gboolean; cdecl; external;
function gtk_tool_palette_get_group_position(AToolPalette: PGtkToolPalette; group: PGtkToolItemGroup): gint; cdecl; external;
function gtk_tool_palette_get_icon_size(AToolPalette: PGtkToolPalette): gint; cdecl; external;
function gtk_tool_palette_get_style(AToolPalette: PGtkToolPalette): TGtkToolbarStyle; cdecl; external;
function gtk_tool_palette_get_type: TGType; cdecl; external;
function gtk_tool_palette_new: PGtkToolPalette; cdecl; external;
function gtk_tool_shell_get_ellipsize_mode(AToolShell: PGtkToolShell): TPangoEllipsizeMode; cdecl; external;
function gtk_tool_shell_get_icon_size(AToolShell: PGtkToolShell): gint; cdecl; external;
function gtk_tool_shell_get_orientation(AToolShell: PGtkToolShell): TGtkOrientation; cdecl; external;
function gtk_tool_shell_get_relief_style(AToolShell: PGtkToolShell): TGtkReliefStyle; cdecl; external;
function gtk_tool_shell_get_style(AToolShell: PGtkToolShell): TGtkToolbarStyle; cdecl; external;
function gtk_tool_shell_get_text_alignment(AToolShell: PGtkToolShell): gfloat; cdecl; external;
function gtk_tool_shell_get_text_orientation(AToolShell: PGtkToolShell): TGtkOrientation; cdecl; external;
function gtk_tool_shell_get_text_size_group(AToolShell: PGtkToolShell): PGtkSizeGroup; cdecl; external;
function gtk_tool_shell_get_type: TGType; cdecl; external;
function gtk_toolbar_get_drop_index(AToolbar: PGtkToolbar; x: gint; y: gint): gint; cdecl; external;
function gtk_toolbar_get_icon_size(AToolbar: PGtkToolbar): gint; cdecl; external;
function gtk_toolbar_get_item_index(AToolbar: PGtkToolbar; item: PGtkToolItem): gint; cdecl; external;
function gtk_toolbar_get_n_items(AToolbar: PGtkToolbar): gint; cdecl; external;
function gtk_toolbar_get_nth_item(AToolbar: PGtkToolbar; n: gint): PGtkToolItem; cdecl; external;
function gtk_toolbar_get_relief_style(AToolbar: PGtkToolbar): TGtkReliefStyle; cdecl; external;
function gtk_toolbar_get_show_arrow(AToolbar: PGtkToolbar): gboolean; cdecl; external;
function gtk_toolbar_get_style(AToolbar: PGtkToolbar): TGtkToolbarStyle; cdecl; external;
function gtk_toolbar_get_type: TGType; cdecl; external;
function gtk_toolbar_new: PGtkToolbar; cdecl; external;
function gtk_tooltip_get_type: TGType; cdecl; external;
function gtk_tree_drag_dest_drag_data_received(ATreeDragDest: PGtkTreeDragDest; dest: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl; external;
function gtk_tree_drag_dest_get_type: TGType; cdecl; external;
function gtk_tree_drag_dest_row_drop_possible(ATreeDragDest: PGtkTreeDragDest; dest_path: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl; external;
function gtk_tree_drag_source_drag_data_delete(ATreeDragSource: PGtkTreeDragSource; path: PGtkTreePath): gboolean; cdecl; external;
function gtk_tree_drag_source_drag_data_get(ATreeDragSource: PGtkTreeDragSource; path: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl; external;
function gtk_tree_drag_source_get_type: TGType; cdecl; external;
function gtk_tree_drag_source_row_draggable(ATreeDragSource: PGtkTreeDragSource; path: PGtkTreePath): gboolean; cdecl; external;
function gtk_tree_get_row_drag_data(selection_data: PGtkSelectionData; tree_model: PPGtkTreeModel; path: PPGtkTreePath): gboolean; cdecl; external;
function gtk_tree_iter_copy(ATreeIter: PGtkTreeIter): PGtkTreeIter; cdecl; external;
function gtk_tree_iter_get_type: TGType; cdecl; external;
function gtk_tree_model_filter_convert_child_iter_to_iter(ATreeModelFilter: PGtkTreeModelFilter; filter_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_model_filter_convert_child_path_to_path(ATreeModelFilter: PGtkTreeModelFilter; child_path: PGtkTreePath): PGtkTreePath; cdecl; external;
function gtk_tree_model_filter_convert_path_to_child_path(ATreeModelFilter: PGtkTreeModelFilter; filter_path: PGtkTreePath): PGtkTreePath; cdecl; external;
function gtk_tree_model_filter_get_model(ATreeModelFilter: PGtkTreeModelFilter): PGtkTreeModel; cdecl; external;
function gtk_tree_model_filter_get_type: TGType; cdecl; external;
function gtk_tree_model_filter_new(ATreeModel: PGtkTreeModel; root: PGtkTreePath): PGtkTreeModel; cdecl; external;
function gtk_tree_model_get_column_type(ATreeModel: PGtkTreeModel; index_: gint): TGType; cdecl; external;
function gtk_tree_model_get_flags(ATreeModel: PGtkTreeModel): TGtkTreeModelFlags; cdecl; external;
function gtk_tree_model_get_iter(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl; external;
function gtk_tree_model_get_iter_first(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_model_get_iter_from_string(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter; path_string: Pgchar): gboolean; cdecl; external;
function gtk_tree_model_get_n_columns(ATreeModel: PGtkTreeModel): gint; cdecl; external;
function gtk_tree_model_get_path(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter): PGtkTreePath; cdecl; external;
function gtk_tree_model_get_string_from_iter(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter): Pgchar; cdecl; external;
function gtk_tree_model_get_type: TGType; cdecl; external;
function gtk_tree_model_iter_children(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter; parent: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_model_iter_has_child(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_model_iter_n_children(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter): gint; cdecl; external;
function gtk_tree_model_iter_next(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_model_iter_nth_child(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter; parent: PGtkTreeIter; n: gint): gboolean; cdecl; external;
function gtk_tree_model_iter_parent(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter; child: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_model_iter_previous(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_model_sort_convert_child_iter_to_iter(ATreeModelSort: PGtkTreeModelSort; sort_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_model_sort_convert_child_path_to_path(ATreeModelSort: PGtkTreeModelSort; child_path: PGtkTreePath): PGtkTreePath; cdecl; external;
function gtk_tree_model_sort_convert_path_to_child_path(ATreeModelSort: PGtkTreeModelSort; sorted_path: PGtkTreePath): PGtkTreePath; cdecl; external;
function gtk_tree_model_sort_get_model(ATreeModelSort: PGtkTreeModelSort): PGtkTreeModel; cdecl; external;
function gtk_tree_model_sort_get_type: TGType; cdecl; external;
function gtk_tree_model_sort_iter_is_valid(ATreeModelSort: PGtkTreeModelSort; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_model_sort_new_with_model(ATreeModel: PGtkTreeModel): PGtkTreeModel; cdecl; external;
function gtk_tree_path_compare(ATreePath: PGtkTreePath; b: PGtkTreePath): gint; cdecl; external;
function gtk_tree_path_copy(ATreePath: PGtkTreePath): PGtkTreePath; cdecl; external;
function gtk_tree_path_get_depth(ATreePath: PGtkTreePath): gint; cdecl; external;
function gtk_tree_path_get_indices(ATreePath: PGtkTreePath): Pgint; cdecl; external;
function gtk_tree_path_get_indices_with_depth(ATreePath: PGtkTreePath; depth: Pgint): Pgint; cdecl; external;
function gtk_tree_path_get_type: TGType; cdecl; external;
function gtk_tree_path_is_ancestor(ATreePath: PGtkTreePath; descendant: PGtkTreePath): gboolean; cdecl; external;
function gtk_tree_path_is_descendant(ATreePath: PGtkTreePath; ancestor: PGtkTreePath): gboolean; cdecl; external;
function gtk_tree_path_new: PGtkTreePath; cdecl; external;
function gtk_tree_path_new_first: PGtkTreePath; cdecl; external;
function gtk_tree_path_new_from_indices(first_index: gint; args: array of const): PGtkTreePath; cdecl; external;
function gtk_tree_path_new_from_string(path: Pgchar): PGtkTreePath; cdecl; external;
function gtk_tree_path_prev(ATreePath: PGtkTreePath): gboolean; cdecl; external;
function gtk_tree_path_to_string(ATreePath: PGtkTreePath): Pgchar; cdecl; external;
function gtk_tree_path_up(ATreePath: PGtkTreePath): gboolean; cdecl; external;
function gtk_tree_row_reference_copy(ATreeRowReference: PGtkTreeRowReference): PGtkTreeRowReference; cdecl; external;
function gtk_tree_row_reference_get_model(ATreeRowReference: PGtkTreeRowReference): PGtkTreeModel; cdecl; external;
function gtk_tree_row_reference_get_path(ATreeRowReference: PGtkTreeRowReference): PGtkTreePath; cdecl; external;
function gtk_tree_row_reference_get_type: TGType; cdecl; external;
function gtk_tree_row_reference_new(model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl; external;
function gtk_tree_row_reference_new_proxy(proxy: PGObject; model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl; external;
function gtk_tree_row_reference_valid(ATreeRowReference: PGtkTreeRowReference): gboolean; cdecl; external;
function gtk_tree_selection_count_selected_rows(ATreeSelection: PGtkTreeSelection): gint; cdecl; external;
function gtk_tree_selection_get_mode(ATreeSelection: PGtkTreeSelection): TGtkSelectionMode; cdecl; external;
function gtk_tree_selection_get_select_function(ATreeSelection: PGtkTreeSelection): TGtkTreeSelectionFunc; cdecl; external;
function gtk_tree_selection_get_selected(ATreeSelection: PGtkTreeSelection; model: PPGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_selection_get_selected_rows(ATreeSelection: PGtkTreeSelection; model: PPGtkTreeModel): PGList; cdecl; external;
function gtk_tree_selection_get_tree_view(ATreeSelection: PGtkTreeSelection): PGtkTreeView; cdecl; external;
function gtk_tree_selection_get_type: TGType; cdecl; external;
function gtk_tree_selection_get_user_data(ATreeSelection: PGtkTreeSelection): gpointer; cdecl; external;
function gtk_tree_selection_iter_is_selected(ATreeSelection: PGtkTreeSelection; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_selection_path_is_selected(ATreeSelection: PGtkTreeSelection; path: PGtkTreePath): gboolean; cdecl; external;
function gtk_tree_set_row_drag_data(selection_data: PGtkSelectionData; tree_model: PGtkTreeModel; path: PGtkTreePath): gboolean; cdecl; external;
function gtk_tree_sortable_get_sort_column_id(ATreeSortable: PGtkTreeSortable; sort_column_id: Pgint; order: PGtkSortType): gboolean; cdecl; external;
function gtk_tree_sortable_get_type: TGType; cdecl; external;
function gtk_tree_sortable_has_default_sort_func(ATreeSortable: PGtkTreeSortable): gboolean; cdecl; external;
function gtk_tree_store_get_type: TGType; cdecl; external;
function gtk_tree_store_is_ancestor(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; descendant: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_store_iter_depth(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter): gint; cdecl; external;
function gtk_tree_store_iter_is_valid(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_store_new(n_columns: gint; args: array of const): PGtkTreeStore; cdecl; external;
function gtk_tree_store_newv(n_columns: gint; types: PGType): PGtkTreeStore; cdecl; external;
function gtk_tree_store_remove(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_view_append_column(ATreeView: PGtkTreeView; column: PGtkTreeViewColumn): gint; cdecl; external;
function gtk_tree_view_collapse_row(ATreeView: PGtkTreeView; path: PGtkTreePath): gboolean; cdecl; external;
function gtk_tree_view_column_cell_get_position(ATreeViewColumn: PGtkTreeViewColumn; cell_renderer: PGtkCellRenderer; x_offset: Pgint; width: Pgint): gboolean; cdecl; external;
function gtk_tree_view_column_cell_is_visible(ATreeViewColumn: PGtkTreeViewColumn): gboolean; cdecl; external;
function gtk_tree_view_column_get_alignment(ATreeViewColumn: PGtkTreeViewColumn): gfloat; cdecl; external;
function gtk_tree_view_column_get_button(ATreeViewColumn: PGtkTreeViewColumn): PGtkWidget; cdecl; external;
function gtk_tree_view_column_get_clickable(ATreeViewColumn: PGtkTreeViewColumn): gboolean; cdecl; external;
function gtk_tree_view_column_get_expand(ATreeViewColumn: PGtkTreeViewColumn): gboolean; cdecl; external;
function gtk_tree_view_column_get_fixed_width(ATreeViewColumn: PGtkTreeViewColumn): gint; cdecl; external;
function gtk_tree_view_column_get_max_width(ATreeViewColumn: PGtkTreeViewColumn): gint; cdecl; external;
function gtk_tree_view_column_get_min_width(ATreeViewColumn: PGtkTreeViewColumn): gint; cdecl; external;
function gtk_tree_view_column_get_reorderable(ATreeViewColumn: PGtkTreeViewColumn): gboolean; cdecl; external;
function gtk_tree_view_column_get_resizable(ATreeViewColumn: PGtkTreeViewColumn): gboolean; cdecl; external;
function gtk_tree_view_column_get_sizing(ATreeViewColumn: PGtkTreeViewColumn): TGtkTreeViewColumnSizing; cdecl; external;
function gtk_tree_view_column_get_sort_column_id(ATreeViewColumn: PGtkTreeViewColumn): gint; cdecl; external;
function gtk_tree_view_column_get_sort_indicator(ATreeViewColumn: PGtkTreeViewColumn): gboolean; cdecl; external;
function gtk_tree_view_column_get_sort_order(ATreeViewColumn: PGtkTreeViewColumn): TGtkSortType; cdecl; external;
function gtk_tree_view_column_get_spacing(ATreeViewColumn: PGtkTreeViewColumn): gint; cdecl; external;
function gtk_tree_view_column_get_title(ATreeViewColumn: PGtkTreeViewColumn): Pgchar; cdecl; external;
function gtk_tree_view_column_get_tree_view(ATreeViewColumn: PGtkTreeViewColumn): PGtkWidget; cdecl; external;
function gtk_tree_view_column_get_type: TGType; cdecl; external;
function gtk_tree_view_column_get_visible(ATreeViewColumn: PGtkTreeViewColumn): gboolean; cdecl; external;
function gtk_tree_view_column_get_widget(ATreeViewColumn: PGtkTreeViewColumn): PGtkWidget; cdecl; external;
function gtk_tree_view_column_get_width(ATreeViewColumn: PGtkTreeViewColumn): gint; cdecl; external;
function gtk_tree_view_column_get_x_offset(ATreeViewColumn: PGtkTreeViewColumn): gint; cdecl; external;
function gtk_tree_view_column_new: PGtkTreeViewColumn; cdecl; external;
function gtk_tree_view_column_new_with_area(area: PGtkCellArea): PGtkTreeViewColumn; cdecl; external;
function gtk_tree_view_column_new_with_attributes(title: Pgchar; cell: PGtkCellRenderer; args: array of const): PGtkTreeViewColumn; cdecl; external;
function gtk_tree_view_create_row_drag_icon(ATreeView: PGtkTreeView; path: PGtkTreePath): Pcairo_surface_t; cdecl; external;
function gtk_tree_view_expand_row(ATreeView: PGtkTreeView; path: PGtkTreePath; open_all: gboolean): gboolean; cdecl; external;
function gtk_tree_view_get_bin_window(ATreeView: PGtkTreeView): PGdkWindow; cdecl; external;
function gtk_tree_view_get_column(ATreeView: PGtkTreeView; n: gint): PGtkTreeViewColumn; cdecl; external;
function gtk_tree_view_get_columns(ATreeView: PGtkTreeView): PGList; cdecl; external;
function gtk_tree_view_get_dest_row_at_pos(ATreeView: PGtkTreeView; drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkTreeViewDropPosition): gboolean; cdecl; external;
function gtk_tree_view_get_enable_search(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_get_enable_tree_lines(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_get_expander_column(ATreeView: PGtkTreeView): PGtkTreeViewColumn; cdecl; external;
function gtk_tree_view_get_fixed_height_mode(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_get_grid_lines(ATreeView: PGtkTreeView): TGtkTreeViewGridLines; cdecl; external;
function gtk_tree_view_get_headers_clickable(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_get_headers_visible(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_get_hover_expand(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_get_hover_selection(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_get_level_indentation(ATreeView: PGtkTreeView): gint; cdecl; external;
function gtk_tree_view_get_model(ATreeView: PGtkTreeView): PGtkTreeModel; cdecl; external;
function gtk_tree_view_get_path_at_pos(ATreeView: PGtkTreeView; x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl; external;
function gtk_tree_view_get_reorderable(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_get_row_separator_func(ATreeView: PGtkTreeView): TGtkTreeViewRowSeparatorFunc; cdecl; external;
function gtk_tree_view_get_rubber_banding(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_get_rules_hint(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_get_search_column(ATreeView: PGtkTreeView): gint; cdecl; external;
function gtk_tree_view_get_search_entry(ATreeView: PGtkTreeView): PGtkEntry; cdecl; external;
function gtk_tree_view_get_search_equal_func(ATreeView: PGtkTreeView): TGtkTreeViewSearchEqualFunc; cdecl; external;
function gtk_tree_view_get_search_position_func(ATreeView: PGtkTreeView): TGtkTreeViewSearchPositionFunc; cdecl; external;
function gtk_tree_view_get_selection(ATreeView: PGtkTreeView): PGtkTreeSelection; cdecl; external;
function gtk_tree_view_get_show_expanders(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_get_tooltip_column(ATreeView: PGtkTreeView): gint; cdecl; external;
function gtk_tree_view_get_tooltip_context(ATreeView: PGtkTreeView; x: Pgint; y: Pgint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl; external;
function gtk_tree_view_get_type: TGType; cdecl; external;
function gtk_tree_view_get_visible_range(ATreeView: PGtkTreeView; start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl; external;
function gtk_tree_view_insert_column(ATreeView: PGtkTreeView; column: PGtkTreeViewColumn; position: gint): gint; cdecl; external;
function gtk_tree_view_insert_column_with_attributes(ATreeView: PGtkTreeView; position: gint; title: Pgchar; cell: PGtkCellRenderer; args: array of const): gint; cdecl; external;
function gtk_tree_view_insert_column_with_data_func(ATreeView: PGtkTreeView; position: gint; title: Pgchar; cell: PGtkCellRenderer; func: TGtkTreeCellDataFunc; data: gpointer; dnotify: TGDestroyNotify): gint; cdecl; external;
function gtk_tree_view_is_blank_at_pos(ATreeView: PGtkTreeView; x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl; external;
function gtk_tree_view_is_rubber_banding_active(ATreeView: PGtkTreeView): gboolean; cdecl; external;
function gtk_tree_view_new: PGtkTreeView; cdecl; external;
function gtk_tree_view_new_with_model(model: PGtkTreeModel): PGtkTreeView; cdecl; external;
function gtk_tree_view_remove_column(ATreeView: PGtkTreeView; column: PGtkTreeViewColumn): gint; cdecl; external;
function gtk_tree_view_row_expanded(ATreeView: PGtkTreeView; path: PGtkTreePath): gboolean; cdecl; external;
function gtk_true: gboolean; cdecl; external;
function gtk_ui_manager_add_ui_from_file(AUIManager: PGtkUIManager; filename: Pgchar): guint; cdecl; external;
function gtk_ui_manager_add_ui_from_string(AUIManager: PGtkUIManager; buffer: Pgchar; length: gssize): guint; cdecl; external;
function gtk_ui_manager_get_accel_group(AUIManager: PGtkUIManager): PGtkAccelGroup; cdecl; external;
function gtk_ui_manager_get_action(AUIManager: PGtkUIManager; path: Pgchar): PGtkAction; cdecl; external;
function gtk_ui_manager_get_action_groups(AUIManager: PGtkUIManager): PGList; cdecl; external;
function gtk_ui_manager_get_add_tearoffs(AUIManager: PGtkUIManager): gboolean; cdecl; external;
function gtk_ui_manager_get_toplevels(AUIManager: PGtkUIManager; types: TGtkUIManagerItemType): PGSList; cdecl; external;
function gtk_ui_manager_get_type: TGType; cdecl; external;
function gtk_ui_manager_get_ui(AUIManager: PGtkUIManager): Pgchar; cdecl; external;
function gtk_ui_manager_get_widget(AUIManager: PGtkUIManager; path: Pgchar): PGtkWidget; cdecl; external;
function gtk_ui_manager_new: PGtkUIManager; cdecl; external;
function gtk_ui_manager_new_merge_id(AUIManager: PGtkUIManager): guint; cdecl; external;
function gtk_vbox_get_type: TGType; cdecl; external;
function gtk_vbutton_box_get_type: TGType; cdecl; external;
function gtk_viewport_get_bin_window(AViewport: PGtkViewport): PGdkWindow; cdecl; external;
function gtk_viewport_get_shadow_type(AViewport: PGtkViewport): TGtkShadowType; cdecl; external;
function gtk_viewport_get_type: TGType; cdecl; external;
function gtk_viewport_get_view_window(AViewport: PGtkViewport): PGdkWindow; cdecl; external;
function gtk_viewport_new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkViewport; cdecl; external;
function gtk_volume_button_get_type: TGType; cdecl; external;
function gtk_volume_button_new: PGtkVolumeButton; cdecl; external;
function gtk_vpaned_get_type: TGType; cdecl; external;
function gtk_vscale_get_type: TGType; cdecl; external;
function gtk_vscrollbar_get_type: TGType; cdecl; external;
function gtk_vseparator_get_type: TGType; cdecl; external;
function gtk_widget_activate(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_can_activate_accel(AWidget: PGtkWidget; signal_id: guint): gboolean; cdecl; external;
function gtk_widget_child_focus(AWidget: PGtkWidget; direction: TGtkDirectionType): gboolean; cdecl; external;
function gtk_widget_class_find_style_property(AWidgetClass: PGtkWidgetClass; property_name: Pgchar): PGParamSpec; cdecl; external;
function gtk_widget_class_list_style_properties(AWidgetClass: PGtkWidgetClass; n_properties: Pguint): PPGParamSpec; cdecl; external;
function gtk_widget_compute_expand(AWidget: PGtkWidget; orientation: TGtkOrientation): gboolean; cdecl; external;
function gtk_widget_create_pango_context(AWidget: PGtkWidget): PPangoContext; cdecl; external;
function gtk_widget_create_pango_layout(AWidget: PGtkWidget; text: Pgchar): PPangoLayout; cdecl; external;
function gtk_widget_device_is_shadowed(AWidget: PGtkWidget; device: PGdkDevice): gboolean; cdecl; external;
function gtk_widget_event(AWidget: PGtkWidget; event: PGdkEvent): gboolean; cdecl; external;
function gtk_widget_get_accessible(AWidget: PGtkWidget): PAtkObject; cdecl; external;
function gtk_widget_get_allocated_height(AWidget: PGtkWidget): gint; cdecl; external;
function gtk_widget_get_allocated_width(AWidget: PGtkWidget): gint; cdecl; external;
function gtk_widget_get_ancestor(AWidget: PGtkWidget; widget_type: TGType): PGtkWidget; cdecl; external;
function gtk_widget_get_app_paintable(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_can_default(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_can_focus(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_child_visible(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_clipboard(AWidget: PGtkWidget; selection: TGdkAtom): PGtkClipboard; cdecl; external;
function gtk_widget_get_composite_name(AWidget: PGtkWidget): Pgchar; cdecl; external;
function gtk_widget_get_default_direction: TGtkTextDirection; cdecl; external;
function gtk_widget_get_default_style: PGtkStyle; cdecl; external;
function gtk_widget_get_device_enabled(AWidget: PGtkWidget; device: PGdkDevice): gboolean; cdecl; external;
function gtk_widget_get_device_events(AWidget: PGtkWidget; device: PGdkDevice): TGdkEventMask; cdecl; external;
function gtk_widget_get_direction(AWidget: PGtkWidget): TGtkTextDirection; cdecl; external;
function gtk_widget_get_display(AWidget: PGtkWidget): PGdkDisplay; cdecl; external;
function gtk_widget_get_double_buffered(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_events(AWidget: PGtkWidget): gint; cdecl; external;
function gtk_widget_get_halign(AWidget: PGtkWidget): TGtkAlign; cdecl; external;
function gtk_widget_get_has_tooltip(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_has_window(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_hexpand(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_hexpand_set(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_mapped(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_margin_bottom(AWidget: PGtkWidget): gint; cdecl; external;
function gtk_widget_get_margin_left(AWidget: PGtkWidget): gint; cdecl; external;
function gtk_widget_get_margin_right(AWidget: PGtkWidget): gint; cdecl; external;
function gtk_widget_get_margin_top(AWidget: PGtkWidget): gint; cdecl; external;
function gtk_widget_get_modifier_style(AWidget: PGtkWidget): PGtkRcStyle; cdecl; external;
function gtk_widget_get_name(AWidget: PGtkWidget): Pgchar; cdecl; external;
function gtk_widget_get_no_show_all(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_pango_context(AWidget: PGtkWidget): PPangoContext; cdecl; external;
function gtk_widget_get_parent(AWidget: PGtkWidget): PGtkWidget; cdecl; external;
function gtk_widget_get_parent_window(AWidget: PGtkWidget): PGdkWindow; cdecl; external;
function gtk_widget_get_path(AWidget: PGtkWidget): PGtkWidgetPath; cdecl; external;
function gtk_widget_get_realized(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_receives_default(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_request_mode(AWidget: PGtkWidget): TGtkSizeRequestMode; cdecl; external;
function gtk_widget_get_root_window(AWidget: PGtkWidget): PGdkWindow; cdecl; external;
function gtk_widget_get_screen(AWidget: PGtkWidget): PGdkScreen; cdecl; external;
function gtk_widget_get_sensitive(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_settings(AWidget: PGtkWidget): PGtkSettings; cdecl; external;
function gtk_widget_get_state(AWidget: PGtkWidget): TGtkStateType; cdecl; external;
function gtk_widget_get_state_flags(AWidget: PGtkWidget): TGtkStateFlags; cdecl; external;
function gtk_widget_get_style(AWidget: PGtkWidget): PGtkStyle; cdecl; external;
function gtk_widget_get_style_context(AWidget: PGtkWidget): PGtkStyleContext; cdecl; external;
function gtk_widget_get_support_multidevice(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_tooltip_markup(AWidget: PGtkWidget): Pgchar; cdecl; external;
function gtk_widget_get_tooltip_text(AWidget: PGtkWidget): Pgchar; cdecl; external;
function gtk_widget_get_tooltip_window(AWidget: PGtkWidget): PAtkWindow; cdecl; external;
function gtk_widget_get_toplevel(AWidget: PGtkWidget): PGtkWidget; cdecl; external;
function gtk_widget_get_type: TGType; cdecl; external;
function gtk_widget_get_valign(AWidget: PGtkWidget): TGtkAlign; cdecl; external;
function gtk_widget_get_vexpand(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_vexpand_set(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_visible(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_get_visual(AWidget: PGtkWidget): PGdkVisual; cdecl; external;
function gtk_widget_get_window(AWidget: PGtkWidget): PGdkWindow; cdecl; external;
function gtk_widget_has_default(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_has_focus(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_has_grab(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_has_rc_style(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_has_screen(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_has_visible_focus(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_hide_on_delete(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_in_destruction(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_intersect(AWidget: PGtkWidget; area: PGdkRectangle; intersection: PGdkRectangle): gboolean; cdecl; external;
function gtk_widget_is_ancestor(AWidget: PGtkWidget; ancestor: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_is_composited(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_is_drawable(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_is_focus(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_is_sensitive(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_is_toplevel(AWidget: PGtkWidget): gboolean; cdecl; external;
function gtk_widget_keynav_failed(AWidget: PGtkWidget; direction: TGtkDirectionType): gboolean; cdecl; external;
function gtk_widget_list_accel_closures(AWidget: PGtkWidget): PGList; cdecl; external;
function gtk_widget_list_mnemonic_labels(AWidget: PGtkWidget): PGList; cdecl; external;
function gtk_widget_mnemonic_activate(AWidget: PGtkWidget; group_cycling: gboolean): gboolean; cdecl; external;
function gtk_widget_new(type_: TGType; first_property_name: Pgchar; args: array of const): PGtkWidget; cdecl; external;
function gtk_widget_path_append_for_widget(AWidgetPath: PGtkWidgetPath; widget: PGtkWidget): gint; cdecl; external;
function gtk_widget_path_append_type(AWidgetPath: PGtkWidgetPath; type_: TGType): gint; cdecl; external;
function gtk_widget_path_append_with_siblings(AWidgetPath: PGtkWidgetPath; siblings: PGtkWidgetPath; sibling_index: guint): gint; cdecl; external;
function gtk_widget_path_copy(AWidgetPath: PGtkWidgetPath): PGtkWidgetPath; cdecl; external;
function gtk_widget_path_get_object_type(AWidgetPath: PGtkWidgetPath): TGType; cdecl; external;
function gtk_widget_path_get_type: TGType; cdecl; external;
function gtk_widget_path_has_parent(AWidgetPath: PGtkWidgetPath; type_: TGType): gboolean; cdecl; external;
function gtk_widget_path_is_type(AWidgetPath: PGtkWidgetPath; type_: TGType): gboolean; cdecl; external;
function gtk_widget_path_iter_get_name(AWidgetPath: PGtkWidgetPath; pos: gint): Pgchar; cdecl; external;
function gtk_widget_path_iter_get_object_type(AWidgetPath: PGtkWidgetPath; pos: gint): TGType; cdecl; external;
function gtk_widget_path_iter_get_sibling_index(AWidgetPath: PGtkWidgetPath; pos: gint): guint; cdecl; external;
function gtk_widget_path_iter_get_siblings(AWidgetPath: PGtkWidgetPath; pos: gint): PGtkWidgetPath; cdecl; external;
function gtk_widget_path_iter_has_class(AWidgetPath: PGtkWidgetPath; pos: gint; name: Pgchar): gboolean; cdecl; external;
function gtk_widget_path_iter_has_name(AWidgetPath: PGtkWidgetPath; pos: gint; name: Pgchar): gboolean; cdecl; external;
function gtk_widget_path_iter_has_qclass(AWidgetPath: PGtkWidgetPath; pos: gint; qname: TGQuark): gboolean; cdecl; external;
function gtk_widget_path_iter_has_qname(AWidgetPath: PGtkWidgetPath; pos: gint; qname: TGQuark): gboolean; cdecl; external;
function gtk_widget_path_iter_has_qregion(AWidgetPath: PGtkWidgetPath; pos: gint; qname: TGQuark; flags: PGtkRegionFlags): gboolean; cdecl; external;
function gtk_widget_path_iter_has_region(AWidgetPath: PGtkWidgetPath; pos: gint; name: Pgchar; flags: PGtkRegionFlags): gboolean; cdecl; external;
function gtk_widget_path_iter_list_classes(AWidgetPath: PGtkWidgetPath; pos: gint): PGSList; cdecl; external;
function gtk_widget_path_iter_list_regions(AWidgetPath: PGtkWidgetPath; pos: gint): PGSList; cdecl; external;
function gtk_widget_path_length(AWidgetPath: PGtkWidgetPath): gint; cdecl; external;
function gtk_widget_path_new: PGtkWidgetPath; cdecl; external;
function gtk_widget_path_ref(AWidgetPath: PGtkWidgetPath): PGtkWidgetPath; cdecl; external;
function gtk_widget_path_to_string(AWidgetPath: PGtkWidgetPath): Pgchar; cdecl; external;
function gtk_widget_region_intersect(AWidget: PGtkWidget; region: Pcairo_region_t): Pcairo_region_t; cdecl; external;
function gtk_widget_remove_accelerator(AWidget: PGtkWidget; accel_group: PGtkAccelGroup; accel_key: guint; accel_mods: TGdkModifierType): gboolean; cdecl; external;
function gtk_widget_render_icon_pixbuf(AWidget: PGtkWidget; stock_id: Pgchar; size: gint): PGdkPixbuf; cdecl; external;
function gtk_widget_send_expose(AWidget: PGtkWidget; event: PGdkEvent): gint; cdecl; external;
function gtk_widget_send_focus_change(AWidget: PGtkWidget; event: PGdkEvent): gboolean; cdecl; external;
function gtk_widget_translate_coordinates(AWidget: PGtkWidget; dest_widget: PGtkWidget; src_x: gint; src_y: gint; dest_x: Pgint; dest_y: Pgint): gboolean; cdecl; external;
function gtk_window_activate_default(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_activate_focus(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_activate_key(AWindow: PGtkWindow; event: PGdkEventKey): gboolean; cdecl; external;
function gtk_window_get_accept_focus(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_application(AWindow: PGtkWindow): PGtkApplication; cdecl; external;
function gtk_window_get_decorated(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_default_icon_list: PGList; cdecl; external;
function gtk_window_get_default_icon_name: Pgchar; cdecl; external;
function gtk_window_get_default_widget(AWindow: PGtkWindow): PGtkWidget; cdecl; external;
function gtk_window_get_deletable(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_destroy_with_parent(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_focus(AWindow: PGtkWindow): PGtkWidget; cdecl; external;
function gtk_window_get_focus_on_map(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_focus_visible(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_gravity(AWindow: PGtkWindow): TGdkGravity; cdecl; external;
function gtk_window_get_group(AWindow: PGtkWindow): PGtkWindowGroup; cdecl; external;
function gtk_window_get_has_resize_grip(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_icon(AWindow: PGtkWindow): PGdkPixbuf; cdecl; external;
function gtk_window_get_icon_list(AWindow: PGtkWindow): PGList; cdecl; external;
function gtk_window_get_icon_name(AWindow: PGtkWindow): Pgchar; cdecl; external;
function gtk_window_get_mnemonic_modifier(AWindow: PGtkWindow): TGdkModifierType; cdecl; external;
function gtk_window_get_mnemonics_visible(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_modal(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_opacity(AWindow: PGtkWindow): gdouble; cdecl; external;
function gtk_window_get_resizable(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_resize_grip_area(AWindow: PGtkWindow; rect: PGdkRectangle): gboolean; cdecl; external;
function gtk_window_get_role(AWindow: PGtkWindow): Pgchar; cdecl; external;
function gtk_window_get_screen(AWindow: PGtkWindow): PGdkScreen; cdecl; external;
function gtk_window_get_skip_pager_hint(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_skip_taskbar_hint(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_title(AWindow: PGtkWindow): Pgchar; cdecl; external;
function gtk_window_get_transient_for(AWindow: PGtkWindow): PAtkWindow; cdecl; external;
function gtk_window_get_type: TGType; cdecl; external;
function gtk_window_get_type_hint(AWindow: PGtkWindow): TGdkWindowTypeHint; cdecl; external;
function gtk_window_get_urgency_hint(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_get_window_type(AWindow: PGtkWindow): TGdkWindowType; cdecl; external;
function gtk_window_group_get_current_device_grab(AWindowGroup: PGtkWindowGroup; device: PGdkDevice): PGtkWidget; cdecl; external;
function gtk_window_group_get_current_grab(AWindowGroup: PGtkWindowGroup): PGtkWidget; cdecl; external;
function gtk_window_group_get_type: TGType; cdecl; external;
function gtk_window_group_list_windows(AWindowGroup: PGtkWindowGroup): PGList; cdecl; external;
function gtk_window_group_new: PGtkWindowGroup; cdecl; external;
function gtk_window_has_group(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_has_toplevel_focus(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_is_active(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_list_toplevels: PGList; cdecl; external;
function gtk_window_mnemonic_activate(AWindow: PGtkWindow; keyval: guint; modifier: TGdkModifierType): gboolean; cdecl; external;
function gtk_window_new(type_: TGdkWindowType): PGtkWindow; cdecl; external;
function gtk_window_parse_geometry(AWindow: PGtkWindow; geometry: Pgchar): gboolean; cdecl; external;
function gtk_window_propagate_key_event(AWindow: PGtkWindow; event: PGdkEventKey): gboolean; cdecl; external;
function gtk_window_resize_grip_is_visible(AWindow: PGtkWindow): gboolean; cdecl; external;
function gtk_window_set_default_icon_from_file(filename: Pgchar): gboolean; cdecl; external;
function gtk_window_set_icon_from_file(AWindow: PGtkWindow; filename: Pgchar): gboolean; cdecl; external;
procedure gtk_about_dialog_set_artists(AAboutDialog: PGtkAboutDialog; artists: PPgchar); cdecl; external;
procedure gtk_about_dialog_set_authors(AAboutDialog: PGtkAboutDialog; authors: PPgchar); cdecl; external;
procedure gtk_about_dialog_set_comments(AAboutDialog: PGtkAboutDialog; comments: Pgchar); cdecl; external;
procedure gtk_about_dialog_set_copyright(AAboutDialog: PGtkAboutDialog; copyright: Pgchar); cdecl; external;
procedure gtk_about_dialog_set_documenters(AAboutDialog: PGtkAboutDialog; documenters: PPgchar); cdecl; external;
procedure gtk_about_dialog_set_license(AAboutDialog: PGtkAboutDialog; license: Pgchar); cdecl; external;
procedure gtk_about_dialog_set_license_type(AAboutDialog: PGtkAboutDialog; license_type: TGtkLicense); cdecl; external;
procedure gtk_about_dialog_set_logo(AAboutDialog: PGtkAboutDialog; logo: PGdkPixbuf); cdecl; external;
procedure gtk_about_dialog_set_logo_icon_name(AAboutDialog: PGtkAboutDialog; icon_name: Pgchar); cdecl; external;
procedure gtk_about_dialog_set_program_name(AAboutDialog: PGtkAboutDialog; name: Pgchar); cdecl; external;
procedure gtk_about_dialog_set_translator_credits(AAboutDialog: PGtkAboutDialog; translator_credits: Pgchar); cdecl; external;
procedure gtk_about_dialog_set_version(AAboutDialog: PGtkAboutDialog; version: Pgchar); cdecl; external;
procedure gtk_about_dialog_set_website(AAboutDialog: PGtkAboutDialog; website: Pgchar); cdecl; external;
procedure gtk_about_dialog_set_website_label(AAboutDialog: PGtkAboutDialog; website_label: Pgchar); cdecl; external;
procedure gtk_about_dialog_set_wrap_license(AAboutDialog: PGtkAboutDialog; wrap_license: gboolean); cdecl; external;
procedure gtk_accel_group_connect(AAccelGroup: PGtkAccelGroup; accel_key: guint; accel_mods: TGdkModifierType; accel_flags: TGtkAccelFlags; closure: PGClosure); cdecl; external;
procedure gtk_accel_group_connect_by_path(AAccelGroup: PGtkAccelGroup; accel_path: Pgchar; closure: PGClosure); cdecl; external;
procedure gtk_accel_group_lock(AAccelGroup: PGtkAccelGroup); cdecl; external;
procedure gtk_accel_group_unlock(AAccelGroup: PGtkAccelGroup); cdecl; external;
procedure gtk_accel_label_set_accel_closure(AAccelLabel: PGtkAccelLabel; accel_closure: PGClosure); cdecl; external;
procedure gtk_accel_label_set_accel_widget(AAccelLabel: PGtkAccelLabel; accel_widget: PGtkWidget); cdecl; external;
procedure gtk_accel_map_add_entry(accel_path: Pgchar; accel_key: guint; accel_mods: TGdkModifierType); cdecl; external;
procedure gtk_accel_map_add_filter(filter_pattern: Pgchar); cdecl; external;
procedure gtk_accel_map_foreach(data: gpointer; foreach_func: TGtkAccelMapForeach); cdecl; external;
procedure gtk_accel_map_foreach_unfiltered(data: gpointer; foreach_func: TGtkAccelMapForeach); cdecl; external;
procedure gtk_accel_map_load(file_name: Pgchar); cdecl; external;
procedure gtk_accel_map_load_fd(fd: gint); cdecl; external;
procedure gtk_accel_map_load_scanner(scanner: PGScanner); cdecl; external;
procedure gtk_accel_map_lock_path(accel_path: Pgchar); cdecl; external;
procedure gtk_accel_map_save(file_name: Pgchar); cdecl; external;
procedure gtk_accel_map_save_fd(fd: gint); cdecl; external;
procedure gtk_accel_map_unlock_path(accel_path: Pgchar); cdecl; external;
procedure gtk_accelerator_parse(accelerator: Pgchar; accelerator_key: Pguint; accelerator_mods: PGdkModifierType); cdecl; external;
procedure gtk_accelerator_set_default_mod_mask(default_mod_mask: TGdkModifierType); cdecl; external;
procedure gtk_accessible_connect_widget_destroyed(AAccessible: PGtkAccessible); cdecl; external;
procedure gtk_accessible_set_widget(AAccessible: PGtkAccessible; widget: PGtkWidget); cdecl; external;
procedure gtk_action_activate(AAction: PGtkAction); cdecl; external;
procedure gtk_action_block_activate(AAction: PGtkAction); cdecl; external;
procedure gtk_action_connect_accelerator(AAction: PGtkAction); cdecl; external;
procedure gtk_action_disconnect_accelerator(AAction: PGtkAction); cdecl; external;
procedure gtk_action_group_add_action(AActionGroup: PGtkActionGroup; action: PGtkAction); cdecl; external;
procedure gtk_action_group_add_action_with_accel(AActionGroup: PGtkActionGroup; action: PGtkAction; accelerator: Pgchar); cdecl; external;
procedure gtk_action_group_add_actions(AActionGroup: PGtkActionGroup; entries: PGtkActionEntry; n_entries: guint; user_data: gpointer); cdecl; external;
procedure gtk_action_group_add_actions_full(AActionGroup: PGtkActionGroup; entries: PGtkActionEntry; n_entries: guint; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_action_group_add_radio_actions(AActionGroup: PGtkActionGroup; entries: PGtkRadioActionEntry; n_entries: guint; value: gint; on_change: TGCallback; user_data: gpointer); cdecl; external;
procedure gtk_action_group_add_radio_actions_full(AActionGroup: PGtkActionGroup; entries: PGtkRadioActionEntry; n_entries: guint; value: gint; on_change: TGCallback; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_action_group_add_toggle_actions(AActionGroup: PGtkActionGroup; entries: PGtkToggleActionEntry; n_entries: guint; user_data: gpointer); cdecl; external;
procedure gtk_action_group_add_toggle_actions_full(AActionGroup: PGtkActionGroup; entries: PGtkToggleActionEntry; n_entries: guint; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_action_group_remove_action(AActionGroup: PGtkActionGroup; action: PGtkAction); cdecl; external;
procedure gtk_action_group_set_sensitive(AActionGroup: PGtkActionGroup; sensitive: gboolean); cdecl; external;
procedure gtk_action_group_set_translate_func(AActionGroup: PGtkActionGroup; func: TGTranslateFunc; data: gpointer; notify: TGDestroyNotify); cdecl; external;
procedure gtk_action_group_set_translation_domain(AActionGroup: PGtkActionGroup; domain: Pgchar); cdecl; external;
procedure gtk_action_group_set_visible(AActionGroup: PGtkActionGroup; visible: gboolean); cdecl; external;
procedure gtk_action_set_accel_group(AAction: PGtkAction; accel_group: PGtkAccelGroup); cdecl; external;
procedure gtk_action_set_accel_path(AAction: PGtkAction; accel_path: Pgchar); cdecl; external;
procedure gtk_action_set_always_show_image(AAction: PGtkAction; always_show: gboolean); cdecl; external;
procedure gtk_action_set_gicon(AAction: PGtkAction; icon: PGIcon); cdecl; external;
procedure gtk_action_set_icon_name(AAction: PGtkAction; icon_name: Pgchar); cdecl; external;
procedure gtk_action_set_is_important(AAction: PGtkAction; is_important: gboolean); cdecl; external;
procedure gtk_action_set_label(AAction: PGtkAction; label_: Pgchar); cdecl; external;
procedure gtk_action_set_sensitive(AAction: PGtkAction; sensitive: gboolean); cdecl; external;
procedure gtk_action_set_short_label(AAction: PGtkAction; short_label: Pgchar); cdecl; external;
procedure gtk_action_set_stock_id(AAction: PGtkAction; stock_id: Pgchar); cdecl; external;
procedure gtk_action_set_tooltip(AAction: PGtkAction; tooltip: Pgchar); cdecl; external;
procedure gtk_action_set_visible(AAction: PGtkAction; visible: gboolean); cdecl; external;
procedure gtk_action_set_visible_horizontal(AAction: PGtkAction; visible_horizontal: gboolean); cdecl; external;
procedure gtk_action_set_visible_vertical(AAction: PGtkAction; visible_vertical: gboolean); cdecl; external;
procedure gtk_action_unblock_activate(AAction: PGtkAction); cdecl; external;
procedure gtk_activatable_do_set_related_action(AActivatable: PGtkActivatable; action: PGtkAction); cdecl; external;
procedure gtk_activatable_set_related_action(AActivatable: PGtkActivatable; action: PGtkAction); cdecl; external;
procedure gtk_activatable_set_use_action_appearance(AActivatable: PGtkActivatable; use_appearance: gboolean); cdecl; external;
procedure gtk_activatable_sync_action_properties(AActivatable: PGtkActivatable; action: PGtkAction); cdecl; external;
procedure gtk_adjustment_changed(AAdjustment: PGtkAdjustment); cdecl; external;
procedure gtk_adjustment_clamp_page(AAdjustment: PGtkAdjustment; lower: gdouble; upper: gdouble); cdecl; external;
procedure gtk_adjustment_configure(AAdjustment: PGtkAdjustment; value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble); cdecl; external;
procedure gtk_adjustment_set_lower(AAdjustment: PGtkAdjustment; lower: gdouble); cdecl; external;
procedure gtk_adjustment_set_page_increment(AAdjustment: PGtkAdjustment; page_increment: gdouble); cdecl; external;
procedure gtk_adjustment_set_page_size(AAdjustment: PGtkAdjustment; page_size: gdouble); cdecl; external;
procedure gtk_adjustment_set_step_increment(AAdjustment: PGtkAdjustment; step_increment: gdouble); cdecl; external;
procedure gtk_adjustment_set_upper(AAdjustment: PGtkAdjustment; upper: gdouble); cdecl; external;
procedure gtk_adjustment_set_value(AAdjustment: PGtkAdjustment; value: gdouble); cdecl; external;
procedure gtk_adjustment_value_changed(AAdjustment: PGtkAdjustment); cdecl; external;
procedure gtk_alignment_get_padding(AAlignment: PGtkAlignment; padding_top: Pguint; padding_bottom: Pguint; padding_left: Pguint; padding_right: Pguint); cdecl; external;
procedure gtk_alignment_set(AAlignment: PGtkAlignment; xalign: gfloat; yalign: gfloat; xscale: gfloat; yscale: gfloat); cdecl; external;
procedure gtk_alignment_set_padding(AAlignment: PGtkAlignment; padding_top: guint; padding_bottom: guint; padding_left: guint; padding_right: guint); cdecl; external;
procedure gtk_app_chooser_button_append_custom_item(AAppChooserButton: PGtkAppChooserButton; name: Pgchar; label_: Pgchar; icon: PGIcon); cdecl; external;
procedure gtk_app_chooser_button_append_separator(AAppChooserButton: PGtkAppChooserButton); cdecl; external;
procedure gtk_app_chooser_button_set_active_custom_item(AAppChooserButton: PGtkAppChooserButton; name: Pgchar); cdecl; external;
procedure gtk_app_chooser_button_set_heading(AAppChooserButton: PGtkAppChooserButton; heading: Pgchar); cdecl; external;
procedure gtk_app_chooser_button_set_show_dialog_item(AAppChooserButton: PGtkAppChooserButton; setting: gboolean); cdecl; external;
procedure gtk_app_chooser_dialog_set_heading(AAppChooserDialog: PGtkAppChooserDialog; heading: Pgchar); cdecl; external;
procedure gtk_app_chooser_refresh(AAppChooser: PGtkAppChooser); cdecl; external;
procedure gtk_app_chooser_widget_set_default_text(AAppChooserWidget: PGtkAppChooserWidget; text: Pgchar); cdecl; external;
procedure gtk_app_chooser_widget_set_show_all(AAppChooserWidget: PGtkAppChooserWidget; setting: gboolean); cdecl; external;
procedure gtk_app_chooser_widget_set_show_default(AAppChooserWidget: PGtkAppChooserWidget; setting: gboolean); cdecl; external;
procedure gtk_app_chooser_widget_set_show_fallback(AAppChooserWidget: PGtkAppChooserWidget; setting: gboolean); cdecl; external;
procedure gtk_app_chooser_widget_set_show_other(AAppChooserWidget: PGtkAppChooserWidget; setting: gboolean); cdecl; external;
procedure gtk_app_chooser_widget_set_show_recommended(AAppChooserWidget: PGtkAppChooserWidget; setting: gboolean); cdecl; external;
procedure gtk_application_add_window(AApplication: PGtkApplication; window: PAtkWindow); cdecl; external;
procedure gtk_application_remove_window(AApplication: PGtkApplication; window: PAtkWindow); cdecl; external;
procedure gtk_arrow_set(AArrow: PGtkArrow; arrow_type: TGtkArrowType; shadow_type: TGtkShadowType); cdecl; external;
procedure gtk_aspect_frame_set(AAspectFrame: PGtkAspectFrame; xalign: gfloat; yalign: gfloat; ratio: gfloat; obey_child: gboolean); cdecl; external;
procedure gtk_assistant_add_action_widget(AAssistant: PGtkAssistant; child: PGtkWidget); cdecl; external;
procedure gtk_assistant_commit(AAssistant: PGtkAssistant); cdecl; external;
procedure gtk_assistant_next_page(AAssistant: PGtkAssistant); cdecl; external;
procedure gtk_assistant_previous_page(AAssistant: PGtkAssistant); cdecl; external;
procedure gtk_assistant_remove_action_widget(AAssistant: PGtkAssistant; child: PGtkWidget); cdecl; external;
procedure gtk_assistant_remove_page(AAssistant: PGtkAssistant; page_num: gint); cdecl; external;
procedure gtk_assistant_set_current_page(AAssistant: PGtkAssistant; page_num: gint); cdecl; external;
procedure gtk_assistant_set_forward_page_func(AAssistant: PGtkAssistant; page_func: TGtkAssistantPageFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_assistant_set_page_complete(AAssistant: PGtkAssistant; page: PGtkWidget; complete: gboolean); cdecl; external;
procedure gtk_assistant_set_page_title(AAssistant: PGtkAssistant; page: PGtkWidget; title: Pgchar); cdecl; external;
procedure gtk_assistant_set_page_type(AAssistant: PGtkAssistant; page: PGtkWidget; type_: TGtkAssistantPageType); cdecl; external;
procedure gtk_assistant_update_buttons_state(AAssistant: PGtkAssistant); cdecl; external;
procedure gtk_binding_entry_add_signal(binding_set: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType; signal_name: Pgchar; n_args: guint; args: array of const); cdecl; external;
procedure gtk_binding_entry_add_signall(binding_set: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType; signal_name: Pgchar; binding_args: PGSList); cdecl; external;
procedure gtk_binding_entry_remove(binding_set: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType); cdecl; external;
procedure gtk_binding_entry_skip(binding_set: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType); cdecl; external;
procedure gtk_binding_set_add_path(ABindingSet: PGtkBindingSet; path_type: TGtkPathType; path_pattern: Pgchar; priority: TGtkPathPriorityType); cdecl; external;
procedure gtk_border_free(ABorder: PGtkBorder); cdecl; external;
procedure gtk_box_pack_end(ABox: PGtkBox; child: PGtkWidget; expand: gboolean; fill: gboolean; padding: guint); cdecl; external;
procedure gtk_box_pack_start(ABox: PGtkBox; child: PGtkWidget; expand: gboolean; fill: gboolean; padding: guint); cdecl; external;
procedure gtk_box_query_child_packing(ABox: PGtkBox; child: PGtkWidget; expand: Pgboolean; fill: Pgboolean; padding: Pguint; pack_type: PGtkPackType); cdecl; external;
procedure gtk_box_reorder_child(ABox: PGtkBox; child: PGtkWidget; position: gint); cdecl; external;
procedure gtk_box_set_child_packing(ABox: PGtkBox; child: PGtkWidget; expand: gboolean; fill: gboolean; padding: guint; pack_type: TGtkPackType); cdecl; external;
procedure gtk_box_set_homogeneous(ABox: PGtkBox; homogeneous: gboolean); cdecl; external;
procedure gtk_box_set_spacing(ABox: PGtkBox; spacing: gint); cdecl; external;
procedure gtk_buildable_add_child(ABuildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; type_: Pgchar); cdecl; external;
procedure gtk_buildable_custom_finished(ABuildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; tagname: Pgchar; data: gpointer); cdecl; external;
procedure gtk_buildable_custom_tag_end(ABuildable: PGtkBuildable; builder: PGtkBuilder; child: PGObject; tagname: Pgchar; data: Pgpointer); cdecl; external;
procedure gtk_buildable_parser_finished(ABuildable: PGtkBuildable; builder: PGtkBuilder); cdecl; external;
procedure gtk_buildable_set_buildable_property(ABuildable: PGtkBuildable; builder: PGtkBuilder; name: Pgchar; value: PGValue); cdecl; external;
procedure gtk_buildable_set_name(ABuildable: PGtkBuildable; name: Pgchar); cdecl; external;
procedure gtk_builder_connect_signals(ABuilder: PGtkBuilder; user_data: gpointer); cdecl; external;
procedure gtk_builder_connect_signals_full(ABuilder: PGtkBuilder; func: TGtkBuilderConnectFunc; user_data: gpointer); cdecl; external;
procedure gtk_builder_set_translation_domain(ABuilder: PGtkBuilder; domain: Pgchar); cdecl; external;
procedure gtk_button_box_set_child_non_homogeneous(AButtonBox: PGtkButtonBox; child: PGtkWidget; non_homogeneous: gboolean); cdecl; external;
procedure gtk_button_box_set_child_secondary(AButtonBox: PGtkButtonBox; child: PGtkWidget; is_secondary: gboolean); cdecl; external;
procedure gtk_button_box_set_layout(AButtonBox: PGtkButtonBox; layout_style: TGtkButtonBoxStyle); cdecl; external;
procedure gtk_button_clicked(AButton: PGtkButton); cdecl; external;
procedure gtk_button_enter(AButton: PGtkButton); cdecl; external;
procedure gtk_button_get_alignment(AButton: PGtkButton; xalign: Pgfloat; yalign: Pgfloat); cdecl; external;
procedure gtk_button_leave(AButton: PGtkButton); cdecl; external;
procedure gtk_button_pressed(AButton: PGtkButton); cdecl; external;
procedure gtk_button_released(AButton: PGtkButton); cdecl; external;
procedure gtk_button_set_alignment(AButton: PGtkButton; xalign: gfloat; yalign: gfloat); cdecl; external;
procedure gtk_button_set_focus_on_click(AButton: PGtkButton; focus_on_click: gboolean); cdecl; external;
procedure gtk_button_set_image(AButton: PGtkButton; image: PGtkWidget); cdecl; external;
procedure gtk_button_set_image_position(AButton: PGtkButton; position: TGtkPositionType); cdecl; external;
procedure gtk_button_set_label(AButton: PGtkButton; label_: Pgchar); cdecl; external;
procedure gtk_button_set_relief(AButton: PGtkButton; newstyle: TGtkReliefStyle); cdecl; external;
procedure gtk_button_set_use_stock(AButton: PGtkButton; use_stock: gboolean); cdecl; external;
procedure gtk_button_set_use_underline(AButton: PGtkButton; use_underline: gboolean); cdecl; external;
procedure gtk_cairo_transform_to_window(cr: Pcairo_t; widget: PGtkWidget; window: PGdkWindow); cdecl; external;
procedure gtk_calendar_clear_marks(ACalendar: PGtkCalendar); cdecl; external;
procedure gtk_calendar_get_date(ACalendar: PGtkCalendar; year: Pguint; month: Pguint; day: Pguint); cdecl; external;
procedure gtk_calendar_mark_day(ACalendar: PGtkCalendar; day: guint); cdecl; external;
procedure gtk_calendar_select_day(ACalendar: PGtkCalendar; day: guint); cdecl; external;
procedure gtk_calendar_select_month(ACalendar: PGtkCalendar; month: guint; year: guint); cdecl; external;
procedure gtk_calendar_set_detail_func(ACalendar: PGtkCalendar; func: TGtkCalendarDetailFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_calendar_set_detail_height_rows(ACalendar: PGtkCalendar; rows: gint); cdecl; external;
procedure gtk_calendar_set_detail_width_chars(ACalendar: PGtkCalendar; chars: gint); cdecl; external;
procedure gtk_calendar_set_display_options(ACalendar: PGtkCalendar; flags: TGtkCalendarDisplayOptions); cdecl; external;
procedure gtk_calendar_unmark_day(ACalendar: PGtkCalendar; day: guint); cdecl; external;
procedure gtk_cell_area_add(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer); cdecl; external;
procedure gtk_cell_area_add_focus_sibling(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl; external;
procedure gtk_cell_area_add_with_properties(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; external;
procedure gtk_cell_area_apply_attributes(ACellArea: PGtkCellArea; tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl; external;
procedure gtk_cell_area_attribute_connect(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; external;
procedure gtk_cell_area_attribute_disconnect(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; attribute: Pgchar); cdecl; external;
procedure gtk_cell_area_box_pack_end(ACellAreaBox: PGtkCellAreaBox; renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl; external;
procedure gtk_cell_area_box_pack_start(ACellAreaBox: PGtkCellAreaBox; renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl; external;
procedure gtk_cell_area_box_set_spacing(ACellAreaBox: PGtkCellAreaBox; spacing: gint); cdecl; external;
procedure gtk_cell_area_cell_get(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; external;
procedure gtk_cell_area_cell_get_property(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl; external;
procedure gtk_cell_area_cell_get_valist(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; first_property_name: Pgchar; var_args: Tva_list); cdecl; external;
procedure gtk_cell_area_cell_set(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; first_prop_name: Pgchar; args: array of const); cdecl; external;
procedure gtk_cell_area_cell_set_property(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl; external;
procedure gtk_cell_area_cell_set_valist(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; first_property_name: Pgchar; var_args: Tva_list); cdecl; external;
procedure gtk_cell_area_class_install_cell_property(ACellAreaClass: PGtkCellAreaClass; property_id: guint; pspec: PGParamSpec); cdecl; external;
procedure gtk_cell_area_context_allocate(ACellAreaContext: PGtkCellAreaContext; width: gint; height: gint); cdecl; external;
procedure gtk_cell_area_context_get_allocation(ACellAreaContext: PGtkCellAreaContext; width: Pgint; height: Pgint); cdecl; external;
procedure gtk_cell_area_context_get_preferred_height(ACellAreaContext: PGtkCellAreaContext; minimum_height: Pgint; natural_height: Pgint); cdecl; external;
procedure gtk_cell_area_context_get_preferred_height_for_width(ACellAreaContext: PGtkCellAreaContext; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; external;
procedure gtk_cell_area_context_get_preferred_width(ACellAreaContext: PGtkCellAreaContext; minimum_width: Pgint; natural_width: Pgint); cdecl; external;
procedure gtk_cell_area_context_get_preferred_width_for_height(ACellAreaContext: PGtkCellAreaContext; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; external;
procedure gtk_cell_area_context_push_preferred_height(ACellAreaContext: PGtkCellAreaContext; minimum_height: gint; natural_height: gint); cdecl; external;
procedure gtk_cell_area_context_push_preferred_width(ACellAreaContext: PGtkCellAreaContext; minimum_width: gint; natural_width: gint); cdecl; external;
procedure gtk_cell_area_context_reset(ACellAreaContext: PGtkCellAreaContext); cdecl; external;
procedure gtk_cell_area_foreach(ACellArea: PGtkCellArea; callback: TGtkCellCallback; callback_data: gpointer); cdecl; external;
procedure gtk_cell_area_foreach_alloc(ACellArea: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; background_area: PGdkRectangle; callback: TGtkCellAllocCallback; callback_data: gpointer); cdecl; external;
procedure gtk_cell_area_get_cell_allocation(ACellArea: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; renderer: PGtkCellRenderer; cell_area: PGdkRectangle; allocation: PGdkRectangle); cdecl; external;
procedure gtk_cell_area_get_preferred_height(ACellArea: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; minimum_height: Pgint; natural_height: Pgint); cdecl; external;
procedure gtk_cell_area_get_preferred_height_for_width(ACellArea: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; external;
procedure gtk_cell_area_get_preferred_width(ACellArea: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; minimum_width: Pgint; natural_width: Pgint); cdecl; external;
procedure gtk_cell_area_get_preferred_width_for_height(ACellArea: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; external;
procedure gtk_cell_area_inner_cell_area(ACellArea: PGtkCellArea; widget: PGtkWidget; cell_area: PGdkRectangle; inner_area: PGdkRectangle); cdecl; external;
procedure gtk_cell_area_remove(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer); cdecl; external;
procedure gtk_cell_area_remove_focus_sibling(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl; external;
procedure gtk_cell_area_render(ACellArea: PGtkCellArea; context: PGtkCellAreaContext; widget: PGtkWidget; cr: Pcairo_t; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState; paint_focus: gboolean); cdecl; external;
procedure gtk_cell_area_request_renderer(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer; orientation: TGtkOrientation; widget: PGtkWidget; for_size: gint; minimum_size: Pgint; natural_size: Pgint); cdecl; external;
procedure gtk_cell_area_set_focus_cell(ACellArea: PGtkCellArea; renderer: PGtkCellRenderer); cdecl; external;
procedure gtk_cell_area_stop_editing(ACellArea: PGtkCellArea; canceled: gboolean); cdecl; external;
procedure gtk_cell_editable_editing_done(ACellEditable: PGtkCellEditable); cdecl; external;
procedure gtk_cell_editable_remove_widget(ACellEditable: PGtkCellEditable); cdecl; external;
procedure gtk_cell_editable_start_editing(ACellEditable: PGtkCellEditable; event: PGdkEvent); cdecl; external;
procedure gtk_cell_layout_add_attribute(ACellLayout: PGtkCellLayout; cell: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; external;
procedure gtk_cell_layout_clear(ACellLayout: PGtkCellLayout); cdecl; external;
procedure gtk_cell_layout_clear_attributes(ACellLayout: PGtkCellLayout; cell: PGtkCellRenderer); cdecl; external;
procedure gtk_cell_layout_pack_end(ACellLayout: PGtkCellLayout; cell: PGtkCellRenderer; expand: gboolean); cdecl; external;
procedure gtk_cell_layout_pack_start(ACellLayout: PGtkCellLayout; cell: PGtkCellRenderer; expand: gboolean); cdecl; external;
procedure gtk_cell_layout_reorder(ACellLayout: PGtkCellLayout; cell: PGtkCellRenderer; position: gint); cdecl; external;
procedure gtk_cell_layout_set_attributes(ACellLayout: PGtkCellLayout; cell: PGtkCellRenderer; args: array of const); cdecl; external;
procedure gtk_cell_layout_set_cell_data_func(ACellLayout: PGtkCellLayout; cell: PGtkCellRenderer; func: TGtkCellLayoutDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_cell_renderer_get_aligned_area(ACellRenderer: PGtkCellRenderer; widget: PGtkWidget; flags: TGtkCellRendererState; cell_area: PGdkRectangle; aligned_area: PGdkRectangle); cdecl; external;
procedure gtk_cell_renderer_get_alignment(ACellRenderer: PGtkCellRenderer; xalign: Pgfloat; yalign: Pgfloat); cdecl; external;
procedure gtk_cell_renderer_get_fixed_size(ACellRenderer: PGtkCellRenderer; width: Pgint; height: Pgint); cdecl; external;
procedure gtk_cell_renderer_get_padding(ACellRenderer: PGtkCellRenderer; xpad: Pgint; ypad: Pgint); cdecl; external;
procedure gtk_cell_renderer_get_preferred_height(ACellRenderer: PGtkCellRenderer; widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl; external;
procedure gtk_cell_renderer_get_preferred_height_for_width(ACellRenderer: PGtkCellRenderer; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; external;
procedure gtk_cell_renderer_get_preferred_size(ACellRenderer: PGtkCellRenderer; widget: PGtkWidget; minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl; external;
procedure gtk_cell_renderer_get_preferred_width(ACellRenderer: PGtkCellRenderer; widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl; external;
procedure gtk_cell_renderer_get_preferred_width_for_height(ACellRenderer: PGtkCellRenderer; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; external;
procedure gtk_cell_renderer_render(ACellRenderer: PGtkCellRenderer; cr: Pcairo_t; widget: PGtkWidget; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState); cdecl; external;
procedure gtk_cell_renderer_set_alignment(ACellRenderer: PGtkCellRenderer; xalign: gfloat; yalign: gfloat); cdecl; external;
procedure gtk_cell_renderer_set_fixed_size(ACellRenderer: PGtkCellRenderer; width: gint; height: gint); cdecl; external;
procedure gtk_cell_renderer_set_padding(ACellRenderer: PGtkCellRenderer; xpad: gint; ypad: gint); cdecl; external;
procedure gtk_cell_renderer_set_sensitive(ACellRenderer: PGtkCellRenderer; sensitive: gboolean); cdecl; external;
procedure gtk_cell_renderer_set_visible(ACellRenderer: PGtkCellRenderer; visible: gboolean); cdecl; external;
procedure gtk_cell_renderer_stop_editing(ACellRenderer: PGtkCellRenderer; canceled: gboolean); cdecl; external;
procedure gtk_cell_renderer_text_set_fixed_height_from_font(ACellRendererText: PGtkCellRendererText; number_of_rows: gint); cdecl; external;
procedure gtk_cell_renderer_toggle_set_activatable(ACellRendererToggle: PGtkCellRendererToggle; setting: gboolean); cdecl; external;
procedure gtk_cell_renderer_toggle_set_active(ACellRendererToggle: PGtkCellRendererToggle; setting: gboolean); cdecl; external;
procedure gtk_cell_renderer_toggle_set_radio(ACellRendererToggle: PGtkCellRendererToggle; radio: gboolean); cdecl; external;
procedure gtk_cell_view_set_background_color(ACellView: PGtkCellView; color: PGdkColor); cdecl; external;
procedure gtk_cell_view_set_background_rgba(ACellView: PGtkCellView; rgba: PGdkRGBA); cdecl; external;
procedure gtk_cell_view_set_displayed_row(ACellView: PGtkCellView; path: PGtkTreePath); cdecl; external;
procedure gtk_cell_view_set_draw_sensitive(ACellView: PGtkCellView; draw_sensitive: gboolean); cdecl; external;
procedure gtk_cell_view_set_fit_model(ACellView: PGtkCellView; fit_model: gboolean); cdecl; external;
procedure gtk_cell_view_set_model(ACellView: PGtkCellView; model: PGtkTreeModel); cdecl; external;
procedure gtk_check_menu_item_set_active(ACheckMenuItem: PGtkCheckMenuItem; is_active: gboolean); cdecl; external;
procedure gtk_check_menu_item_set_draw_as_radio(ACheckMenuItem: PGtkCheckMenuItem; draw_as_radio: gboolean); cdecl; external;
procedure gtk_check_menu_item_set_inconsistent(ACheckMenuItem: PGtkCheckMenuItem; setting: gboolean); cdecl; external;
procedure gtk_check_menu_item_toggled(ACheckMenuItem: PGtkCheckMenuItem); cdecl; external;
procedure gtk_clipboard_clear(AClipboard: PGtkClipboard); cdecl; external;
procedure gtk_clipboard_request_contents(AClipboard: PGtkClipboard; target: TGdkAtom; callback: TGtkClipboardReceivedFunc; user_data: gpointer); cdecl; external;
procedure gtk_clipboard_request_image(AClipboard: PGtkClipboard; callback: TGtkClipboardImageReceivedFunc; user_data: gpointer); cdecl; external;
procedure gtk_clipboard_request_rich_text(AClipboard: PGtkClipboard; buffer: PGtkTextBuffer; callback: TGtkClipboardRichTextReceivedFunc; user_data: gpointer); cdecl; external;
procedure gtk_clipboard_request_targets(AClipboard: PGtkClipboard; callback: TGtkClipboardTargetsReceivedFunc; user_data: gpointer); cdecl; external;
procedure gtk_clipboard_request_text(AClipboard: PGtkClipboard; callback: TGtkClipboardTextReceivedFunc; user_data: gpointer); cdecl; external;
procedure gtk_clipboard_request_uris(AClipboard: PGtkClipboard; callback: TGtkClipboardURIReceivedFunc; user_data: gpointer); cdecl; external;
procedure gtk_clipboard_set_can_store(AClipboard: PGtkClipboard; targets: PGtkTargetEntry; n_targets: gint); cdecl; external;
procedure gtk_clipboard_set_image(AClipboard: PGtkClipboard; pixbuf: PGdkPixbuf); cdecl; external;
procedure gtk_clipboard_set_text(AClipboard: PGtkClipboard; text: Pgchar; len: gint); cdecl; external;
procedure gtk_clipboard_store(AClipboard: PGtkClipboard); cdecl; external;
procedure gtk_color_button_get_color(AColorButton: PGtkColorButton; color: PGdkColor); cdecl; external;
procedure gtk_color_button_get_rgba(AColorButton: PGtkColorButton; rgba: PGdkRGBA); cdecl; external;
procedure gtk_color_button_set_alpha(AColorButton: PGtkColorButton; alpha: guint16); cdecl; external;
procedure gtk_color_button_set_color(AColorButton: PGtkColorButton; color: PGdkColor); cdecl; external;
procedure gtk_color_button_set_rgba(AColorButton: PGtkColorButton; rgba: PGdkRGBA); cdecl; external;
procedure gtk_color_button_set_title(AColorButton: PGtkColorButton; title: Pgchar); cdecl; external;
procedure gtk_color_button_set_use_alpha(AColorButton: PGtkColorButton; use_alpha: gboolean); cdecl; external;
procedure gtk_color_selection_get_current_color(AColorSelection: PGtkColorSelection; color: PGdkColor); cdecl; external;
procedure gtk_color_selection_get_current_rgba(AColorSelection: PGtkColorSelection; rgba: PGdkRGBA); cdecl; external;
procedure gtk_color_selection_get_previous_color(AColorSelection: PGtkColorSelection; color: PGdkColor); cdecl; external;
procedure gtk_color_selection_get_previous_rgba(AColorSelection: PGtkColorSelection; rgba: PGdkRGBA); cdecl; external;
procedure gtk_color_selection_set_current_alpha(AColorSelection: PGtkColorSelection; alpha: guint16); cdecl; external;
procedure gtk_color_selection_set_current_color(AColorSelection: PGtkColorSelection; color: PGdkColor); cdecl; external;
procedure gtk_color_selection_set_current_rgba(AColorSelection: PGtkColorSelection; rgba: PGdkRGBA); cdecl; external;
procedure gtk_color_selection_set_has_opacity_control(AColorSelection: PGtkColorSelection; has_opacity: gboolean); cdecl; external;
procedure gtk_color_selection_set_has_palette(AColorSelection: PGtkColorSelection; has_palette: gboolean); cdecl; external;
procedure gtk_color_selection_set_previous_alpha(AColorSelection: PGtkColorSelection; alpha: guint16); cdecl; external;
procedure gtk_color_selection_set_previous_color(AColorSelection: PGtkColorSelection; color: PGdkColor); cdecl; external;
procedure gtk_color_selection_set_previous_rgba(AColorSelection: PGtkColorSelection; rgba: PGdkRGBA); cdecl; external;
procedure gtk_combo_box_popdown(AComboBox: PGtkComboBox); cdecl; external;
procedure gtk_combo_box_popup(AComboBox: PGtkComboBox); cdecl; external;
procedure gtk_combo_box_popup_for_device(AComboBox: PGtkComboBox; device: PGdkDevice); cdecl; external;
procedure gtk_combo_box_set_active(AComboBox: PGtkComboBox; index_: gint); cdecl; external;
procedure gtk_combo_box_set_active_iter(AComboBox: PGtkComboBox; iter: PGtkTreeIter); cdecl; external;
procedure gtk_combo_box_set_add_tearoffs(AComboBox: PGtkComboBox; add_tearoffs: gboolean); cdecl; external;
procedure gtk_combo_box_set_button_sensitivity(AComboBox: PGtkComboBox; sensitivity: TGtkSensitivityType); cdecl; external;
procedure gtk_combo_box_set_column_span_column(AComboBox: PGtkComboBox; column_span: gint); cdecl; external;
procedure gtk_combo_box_set_entry_text_column(AComboBox: PGtkComboBox; text_column: gint); cdecl; external;
procedure gtk_combo_box_set_focus_on_click(AComboBox: PGtkComboBox; focus_on_click: gboolean); cdecl; external;
procedure gtk_combo_box_set_id_column(AComboBox: PGtkComboBox; id_column: gint); cdecl; external;
procedure gtk_combo_box_set_model(AComboBox: PGtkComboBox; model: PGtkTreeModel); cdecl; external;
procedure gtk_combo_box_set_popup_fixed_width(AComboBox: PGtkComboBox; fixed: gboolean); cdecl; external;
procedure gtk_combo_box_set_row_separator_func(AComboBox: PGtkComboBox; func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_combo_box_set_row_span_column(AComboBox: PGtkComboBox; row_span: gint); cdecl; external;
procedure gtk_combo_box_set_title(AComboBox: PGtkComboBox; title: Pgchar); cdecl; external;
procedure gtk_combo_box_set_wrap_width(AComboBox: PGtkComboBox; width: gint); cdecl; external;
procedure gtk_combo_box_text_append(AComboBoxText: PGtkComboBoxText; id: Pgchar; text: Pgchar); cdecl; external;
procedure gtk_combo_box_text_append_text(AComboBoxText: PGtkComboBoxText; text: Pgchar); cdecl; external;
procedure gtk_combo_box_text_insert(AComboBoxText: PGtkComboBoxText; position: gint; id: Pgchar; text: Pgchar); cdecl; external;
procedure gtk_combo_box_text_insert_text(AComboBoxText: PGtkComboBoxText; position: gint; text: Pgchar); cdecl; external;
procedure gtk_combo_box_text_prepend(AComboBoxText: PGtkComboBoxText; id: Pgchar; text: Pgchar); cdecl; external;
procedure gtk_combo_box_text_prepend_text(AComboBoxText: PGtkComboBoxText; text: Pgchar); cdecl; external;
procedure gtk_combo_box_text_remove(AComboBoxText: PGtkComboBoxText; position: gint); cdecl; external;
procedure gtk_combo_box_text_remove_all(AComboBoxText: PGtkComboBoxText); cdecl; external;
procedure gtk_container_add(AContainer: PGtkContainer; widget: PGtkWidget); cdecl; external;
procedure gtk_container_add_with_properties(AContainer: PGtkContainer; widget: PGtkWidget; first_prop_name: Pgchar; args: array of const); cdecl; external;
procedure gtk_container_check_resize(AContainer: PGtkContainer); cdecl; external;
procedure gtk_container_child_get(AContainer: PGtkContainer; child: PGtkWidget; first_prop_name: Pgchar; args: array of const); cdecl; external;
procedure gtk_container_child_get_property(AContainer: PGtkContainer; child: PGtkWidget; property_name: Pgchar; value: PGValue); cdecl; external;
procedure gtk_container_child_get_valist(AContainer: PGtkContainer; child: PGtkWidget; first_property_name: Pgchar; var_args: Tva_list); cdecl; external;
procedure gtk_container_child_notify(AContainer: PGtkContainer; child: PGtkWidget; child_property: Pgchar); cdecl; external;
procedure gtk_container_child_set(AContainer: PGtkContainer; child: PGtkWidget; first_prop_name: Pgchar; args: array of const); cdecl; external;
procedure gtk_container_child_set_property(AContainer: PGtkContainer; child: PGtkWidget; property_name: Pgchar; value: PGValue); cdecl; external;
procedure gtk_container_child_set_valist(AContainer: PGtkContainer; child: PGtkWidget; first_property_name: Pgchar; var_args: Tva_list); cdecl; external;
procedure gtk_container_class_handle_border_width(AContainerClass: PGtkContainerClass); cdecl; external;
procedure gtk_container_class_install_child_property(AContainerClass: PGtkContainerClass; property_id: guint; pspec: PGParamSpec); cdecl; external;
procedure gtk_container_forall(AContainer: PGtkContainer; callback: TGtkCallback; callback_data: gpointer); cdecl; external;
procedure gtk_container_foreach(AContainer: PGtkContainer; callback: TGtkCallback; callback_data: gpointer); cdecl; external;
procedure gtk_container_propagate_draw(AContainer: PGtkContainer; child: PGtkWidget; cr: Pcairo_t); cdecl; external;
procedure gtk_container_remove(AContainer: PGtkContainer; widget: PGtkWidget); cdecl; external;
procedure gtk_container_resize_children(AContainer: PGtkContainer); cdecl; external;
procedure gtk_container_set_border_width(AContainer: PGtkContainer; border_width: guint); cdecl; external;
procedure gtk_container_set_focus_chain(AContainer: PGtkContainer; focusable_widgets: PGList); cdecl; external;
procedure gtk_container_set_focus_child(AContainer: PGtkContainer; child: PGtkWidget); cdecl; external;
procedure gtk_container_set_focus_hadjustment(AContainer: PGtkContainer; adjustment: PGtkAdjustment); cdecl; external;
procedure gtk_container_set_focus_vadjustment(AContainer: PGtkContainer; adjustment: PGtkAdjustment); cdecl; external;
procedure gtk_container_set_reallocate_redraws(AContainer: PGtkContainer; needs_redraws: gboolean); cdecl; external;
procedure gtk_container_set_resize_mode(AContainer: PGtkContainer; resize_mode: TGtkResizeMode); cdecl; external;
procedure gtk_container_unset_focus_chain(AContainer: PGtkContainer); cdecl; external;
procedure gtk_css_section_unref(ACssSection: PGtkCssSection); cdecl; external;
procedure gtk_device_grab_add(widget: PGtkWidget; device: PGdkDevice; block_others: gboolean); cdecl; external;
procedure gtk_device_grab_remove(widget: PGtkWidget; device: PGdkDevice); cdecl; external;
procedure gtk_dialog_add_action_widget(ADialog: PGtkDialog; child: PGtkWidget; response_id: gint); cdecl; external;
procedure gtk_dialog_add_buttons(ADialog: PGtkDialog; first_button_text: Pgchar; args: array of const); cdecl; external;
procedure gtk_dialog_response(ADialog: PGtkDialog; response_id: gint); cdecl; external;
procedure gtk_dialog_set_alternative_button_order(ADialog: PGtkDialog; first_response_id: gint; args: array of const); cdecl; external;
procedure gtk_dialog_set_alternative_button_order_from_array(ADialog: PGtkDialog; n_params: gint; new_order: Pgint); cdecl; external;
procedure gtk_dialog_set_default_response(ADialog: PGtkDialog; response_id: gint); cdecl; external;
procedure gtk_dialog_set_response_sensitive(ADialog: PGtkDialog; response_id: gint; setting: gboolean); cdecl; external;
procedure gtk_disable_setlocale; cdecl; external;
procedure gtk_drag_dest_add_image_targets(AWidget: PGtkWidget); cdecl; external;
procedure gtk_drag_dest_add_text_targets(AWidget: PGtkWidget); cdecl; external;
procedure gtk_drag_dest_add_uri_targets(AWidget: PGtkWidget); cdecl; external;
procedure gtk_drag_dest_set(AWidget: PGtkWidget; flags: TGtkDestDefaults; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; external;
procedure gtk_drag_dest_set_proxy(AWidget: PGtkWidget; proxy_window: PGdkWindow; protocol: TGdkDragProtocol; use_coordinates: gboolean); cdecl; external;
procedure gtk_drag_dest_set_target_list(AWidget: PGtkWidget; target_list: PGtkTargetList); cdecl; external;
procedure gtk_drag_dest_set_track_motion(AWidget: PGtkWidget; track_motion: gboolean); cdecl; external;
procedure gtk_drag_dest_unset(AWidget: PGtkWidget); cdecl; external;
procedure gtk_drag_finish(context: PGdkDragContext; success: gboolean; del: gboolean; time_: guint32); cdecl; external;
procedure gtk_drag_get_data(AWidget: PGtkWidget; context: PGdkDragContext; target: TGdkAtom; time_: guint32); cdecl; external;
procedure gtk_drag_highlight(AWidget: PGtkWidget); cdecl; external;
procedure gtk_drag_set_icon_default(context: PGdkDragContext); cdecl; external;
procedure gtk_drag_set_icon_gicon(context: PGdkDragContext; icon: PGIcon; hot_x: gint; hot_y: gint); cdecl; external;
procedure gtk_drag_set_icon_name(context: PGdkDragContext; icon_name: Pgchar; hot_x: gint; hot_y: gint); cdecl; external;
procedure gtk_drag_set_icon_pixbuf(context: PGdkDragContext; pixbuf: PGdkPixbuf; hot_x: gint; hot_y: gint); cdecl; external;
procedure gtk_drag_set_icon_stock(context: PGdkDragContext; stock_id: Pgchar; hot_x: gint; hot_y: gint); cdecl; external;
procedure gtk_drag_set_icon_surface(context: PGdkDragContext; surface: Pcairo_surface_t); cdecl; external;
procedure gtk_drag_set_icon_widget(context: PGdkDragContext; widget: PGtkWidget; hot_x: gint; hot_y: gint); cdecl; external;
procedure gtk_drag_source_add_image_targets(AWidget: PGtkWidget); cdecl; external;
procedure gtk_drag_source_add_text_targets(AWidget: PGtkWidget); cdecl; external;
procedure gtk_drag_source_add_uri_targets(AWidget: PGtkWidget); cdecl; external;
procedure gtk_drag_source_set(AWidget: PGtkWidget; start_button_mask: TGdkModifierType; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; external;
procedure gtk_drag_source_set_icon_gicon(AWidget: PGtkWidget; icon: PGIcon); cdecl; external;
procedure gtk_drag_source_set_icon_name(AWidget: PGtkWidget; icon_name: Pgchar); cdecl; external;
procedure gtk_drag_source_set_icon_pixbuf(AWidget: PGtkWidget; pixbuf: PGdkPixbuf); cdecl; external;
procedure gtk_drag_source_set_icon_stock(AWidget: PGtkWidget; stock_id: Pgchar); cdecl; external;
procedure gtk_drag_source_set_target_list(AWidget: PGtkWidget; target_list: PGtkTargetList); cdecl; external;
procedure gtk_drag_source_unset(AWidget: PGtkWidget); cdecl; external;
procedure gtk_drag_unhighlight(AWidget: PGtkWidget); cdecl; external;
procedure gtk_draw_insertion_cursor(widget: PGtkWidget; cr: Pcairo_t; location: PGdkRectangle; is_primary: gboolean; direction: TGtkTextDirection; draw_arrow: gboolean); cdecl; external;
procedure gtk_editable_copy_clipboard(AEditable: PGtkEditable); cdecl; external;
procedure gtk_editable_cut_clipboard(AEditable: PGtkEditable); cdecl; external;
procedure gtk_editable_delete_selection(AEditable: PGtkEditable); cdecl; external;
procedure gtk_editable_delete_text(AEditable: PGtkEditable; start_pos: gint; end_pos: gint); cdecl; external;
procedure gtk_editable_insert_text(AEditable: PGtkEditable; new_text: Pgchar; new_text_length: gint; position: Pgint); cdecl; external;
procedure gtk_editable_paste_clipboard(AEditable: PGtkEditable); cdecl; external;
procedure gtk_editable_select_region(AEditable: PGtkEditable; start_pos: gint; end_pos: gint); cdecl; external;
procedure gtk_editable_set_editable(AEditable: PGtkEditable; is_editable: gboolean); cdecl; external;
procedure gtk_editable_set_position(AEditable: PGtkEditable; position: gint); cdecl; external;
procedure gtk_entry_buffer_emit_deleted_text(AEntryBuffer: PGtkEntryBuffer; position: guint; n_chars: guint); cdecl; external;
procedure gtk_entry_buffer_emit_inserted_text(AEntryBuffer: PGtkEntryBuffer; position: guint; chars: Pgchar; n_chars: guint); cdecl; external;
procedure gtk_entry_buffer_set_max_length(AEntryBuffer: PGtkEntryBuffer; max_length: gint); cdecl; external;
procedure gtk_entry_buffer_set_text(AEntryBuffer: PGtkEntryBuffer; chars: Pgchar; n_chars: gint); cdecl; external;
procedure gtk_entry_completion_complete(AEntryCompletion: PGtkEntryCompletion); cdecl; external;
procedure gtk_entry_completion_delete_action(AEntryCompletion: PGtkEntryCompletion; index_: gint); cdecl; external;
procedure gtk_entry_completion_insert_action_markup(AEntryCompletion: PGtkEntryCompletion; index_: gint; markup: Pgchar); cdecl; external;
procedure gtk_entry_completion_insert_action_text(AEntryCompletion: PGtkEntryCompletion; index_: gint; text: Pgchar); cdecl; external;
procedure gtk_entry_completion_insert_prefix(AEntryCompletion: PGtkEntryCompletion); cdecl; external;
procedure gtk_entry_completion_set_inline_completion(AEntryCompletion: PGtkEntryCompletion; inline_completion: gboolean); cdecl; external;
procedure gtk_entry_completion_set_inline_selection(AEntryCompletion: PGtkEntryCompletion; inline_selection: gboolean); cdecl; external;
procedure gtk_entry_completion_set_match_func(AEntryCompletion: PGtkEntryCompletion; func: TGtkEntryCompletionMatchFunc; func_data: gpointer; func_notify: TGDestroyNotify); cdecl; external;
procedure gtk_entry_completion_set_minimum_key_length(AEntryCompletion: PGtkEntryCompletion; length: gint); cdecl; external;
procedure gtk_entry_completion_set_model(AEntryCompletion: PGtkEntryCompletion; model: PGtkTreeModel); cdecl; external;
procedure gtk_entry_completion_set_popup_completion(AEntryCompletion: PGtkEntryCompletion; popup_completion: gboolean); cdecl; external;
procedure gtk_entry_completion_set_popup_set_width(AEntryCompletion: PGtkEntryCompletion; popup_set_width: gboolean); cdecl; external;
procedure gtk_entry_completion_set_popup_single_match(AEntryCompletion: PGtkEntryCompletion; popup_single_match: gboolean); cdecl; external;
procedure gtk_entry_completion_set_text_column(AEntryCompletion: PGtkEntryCompletion; column: gint); cdecl; external;
procedure gtk_entry_get_icon_area(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition; icon_area: PGdkRectangle); cdecl; external;
procedure gtk_entry_get_layout_offsets(AEntry: PGtkEntry; x: Pgint; y: Pgint); cdecl; external;
procedure gtk_entry_get_text_area(AEntry: PGtkEntry; text_area: PGdkRectangle); cdecl; external;
procedure gtk_entry_progress_pulse(AEntry: PGtkEntry); cdecl; external;
procedure gtk_entry_reset_im_context(AEntry: PGtkEntry); cdecl; external;
procedure gtk_entry_set_activates_default(AEntry: PGtkEntry; setting: gboolean); cdecl; external;
procedure gtk_entry_set_alignment(AEntry: PGtkEntry; xalign: gfloat); cdecl; external;
procedure gtk_entry_set_buffer(AEntry: PGtkEntry; buffer: PGtkEntryBuffer); cdecl; external;
procedure gtk_entry_set_completion(AEntry: PGtkEntry; completion: PGtkEntryCompletion); cdecl; external;
procedure gtk_entry_set_cursor_hadjustment(AEntry: PGtkEntry; adjustment: PGtkAdjustment); cdecl; external;
procedure gtk_entry_set_has_frame(AEntry: PGtkEntry; setting: gboolean); cdecl; external;
procedure gtk_entry_set_icon_activatable(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition; activatable: gboolean); cdecl; external;
procedure gtk_entry_set_icon_drag_source(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition; target_list: PGtkTargetList; actions: TGdkDragAction); cdecl; external;
procedure gtk_entry_set_icon_from_gicon(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition; icon: PGIcon); cdecl; external;
procedure gtk_entry_set_icon_from_icon_name(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition; icon_name: Pgchar); cdecl; external;
procedure gtk_entry_set_icon_from_pixbuf(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition; pixbuf: PGdkPixbuf); cdecl; external;
procedure gtk_entry_set_icon_from_stock(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition; stock_id: Pgchar); cdecl; external;
procedure gtk_entry_set_icon_sensitive(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition; sensitive: gboolean); cdecl; external;
procedure gtk_entry_set_icon_tooltip_markup(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl; external;
procedure gtk_entry_set_icon_tooltip_text(AEntry: PGtkEntry; icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl; external;
procedure gtk_entry_set_inner_border(AEntry: PGtkEntry; border: PGtkBorder); cdecl; external;
procedure gtk_entry_set_invisible_char(AEntry: PGtkEntry; ch: gunichar); cdecl; external;
procedure gtk_entry_set_max_length(AEntry: PGtkEntry; max: gint); cdecl; external;
procedure gtk_entry_set_overwrite_mode(AEntry: PGtkEntry; overwrite: gboolean); cdecl; external;
procedure gtk_entry_set_placeholder_text(AEntry: PGtkEntry; text: Pgchar); cdecl; external;
procedure gtk_entry_set_progress_fraction(AEntry: PGtkEntry; fraction: gdouble); cdecl; external;
procedure gtk_entry_set_progress_pulse_step(AEntry: PGtkEntry; fraction: gdouble); cdecl; external;
procedure gtk_entry_set_text(AEntry: PGtkEntry; text: Pgchar); cdecl; external;
procedure gtk_entry_set_visibility(AEntry: PGtkEntry; visible: gboolean); cdecl; external;
procedure gtk_entry_set_width_chars(AEntry: PGtkEntry; n_chars: gint); cdecl; external;
procedure gtk_entry_unset_invisible_char(AEntry: PGtkEntry); cdecl; external;
procedure gtk_event_box_set_above_child(AEventBox: PGtkEventBox; above_child: gboolean); cdecl; external;
procedure gtk_event_box_set_visible_window(AEventBox: PGtkEventBox; visible_window: gboolean); cdecl; external;
procedure gtk_expander_set_expanded(AExpander: PGtkExpander; expanded: gboolean); cdecl; external;
procedure gtk_expander_set_label(AExpander: PGtkExpander; label_: Pgchar); cdecl; external;
procedure gtk_expander_set_label_fill(AExpander: PGtkExpander; label_fill: gboolean); cdecl; external;
procedure gtk_expander_set_label_widget(AExpander: PGtkExpander; label_widget: PGtkWidget); cdecl; external;
procedure gtk_expander_set_resize_toplevel(AExpander: PGtkExpander; resize_toplevel: gboolean); cdecl; external;
procedure gtk_expander_set_spacing(AExpander: PGtkExpander; spacing: gint); cdecl; external;
procedure gtk_expander_set_use_markup(AExpander: PGtkExpander; use_markup: gboolean); cdecl; external;
procedure gtk_expander_set_use_underline(AExpander: PGtkExpander; use_underline: gboolean); cdecl; external;
procedure gtk_file_chooser_add_filter(AFileChooser: PGtkFileChooser; filter: PGtkFileFilter); cdecl; external;
procedure gtk_file_chooser_button_set_focus_on_click(AFileChooserButton: PGtkFileChooserButton; focus_on_click: gboolean); cdecl; external;
procedure gtk_file_chooser_button_set_title(AFileChooserButton: PGtkFileChooserButton; title: Pgchar); cdecl; external;
procedure gtk_file_chooser_button_set_width_chars(AFileChooserButton: PGtkFileChooserButton; n_chars: gint); cdecl; external;
procedure gtk_file_chooser_remove_filter(AFileChooser: PGtkFileChooser; filter: PGtkFileFilter); cdecl; external;
procedure gtk_file_chooser_select_all(AFileChooser: PGtkFileChooser); cdecl; external;
procedure gtk_file_chooser_set_action(AFileChooser: PGtkFileChooser; action: TGtkFileChooserAction); cdecl; external;
procedure gtk_file_chooser_set_create_folders(AFileChooser: PGtkFileChooser; create_folders: gboolean); cdecl; external;
procedure gtk_file_chooser_set_current_name(AFileChooser: PGtkFileChooser; name: Pgchar); cdecl; external;
procedure gtk_file_chooser_set_do_overwrite_confirmation(AFileChooser: PGtkFileChooser; do_overwrite_confirmation: gboolean); cdecl; external;
procedure gtk_file_chooser_set_extra_widget(AFileChooser: PGtkFileChooser; extra_widget: PGtkWidget); cdecl; external;
procedure gtk_file_chooser_set_filter(AFileChooser: PGtkFileChooser; filter: PGtkFileFilter); cdecl; external;
procedure gtk_file_chooser_set_local_only(AFileChooser: PGtkFileChooser; local_only: gboolean); cdecl; external;
procedure gtk_file_chooser_set_preview_widget(AFileChooser: PGtkFileChooser; preview_widget: PGtkWidget); cdecl; external;
procedure gtk_file_chooser_set_preview_widget_active(AFileChooser: PGtkFileChooser; active: gboolean); cdecl; external;
procedure gtk_file_chooser_set_select_multiple(AFileChooser: PGtkFileChooser; select_multiple: gboolean); cdecl; external;
procedure gtk_file_chooser_set_show_hidden(AFileChooser: PGtkFileChooser; show_hidden: gboolean); cdecl; external;
procedure gtk_file_chooser_set_use_preview_label(AFileChooser: PGtkFileChooser; use_label: gboolean); cdecl; external;
procedure gtk_file_chooser_unselect_all(AFileChooser: PGtkFileChooser); cdecl; external;
procedure gtk_file_chooser_unselect_file(AFileChooser: PGtkFileChooser; file_: PGFile); cdecl; external;
procedure gtk_file_chooser_unselect_filename(AFileChooser: PGtkFileChooser; filename: Pchar); cdecl; external;
procedure gtk_file_chooser_unselect_uri(AFileChooser: PGtkFileChooser; uri: Pgchar); cdecl; external;
procedure gtk_file_filter_add_custom(AFileFilter: PGtkFileFilter; needed: TGtkFileFilterFlags; func: TGtkFileFilterFunc; data: gpointer; notify: TGDestroyNotify); cdecl; external;
procedure gtk_file_filter_add_mime_type(AFileFilter: PGtkFileFilter; mime_type: Pgchar); cdecl; external;
procedure gtk_file_filter_add_pattern(AFileFilter: PGtkFileFilter; pattern: Pgchar); cdecl; external;
procedure gtk_file_filter_add_pixbuf_formats(AFileFilter: PGtkFileFilter); cdecl; external;
procedure gtk_file_filter_set_name(AFileFilter: PGtkFileFilter; name: Pgchar); cdecl; external;
procedure gtk_fixed_move(AFixed: PGtkFixed; widget: PGtkWidget; x: gint; y: gint); cdecl; external;
procedure gtk_fixed_put(AFixed: PGtkFixed; widget: PGtkWidget; x: gint; y: gint); cdecl; external;
procedure gtk_font_button_set_show_size(AFontButton: PGtkFontButton; show_size: gboolean); cdecl; external;
procedure gtk_font_button_set_show_style(AFontButton: PGtkFontButton; show_style: gboolean); cdecl; external;
procedure gtk_font_button_set_title(AFontButton: PGtkFontButton; title: Pgchar); cdecl; external;
procedure gtk_font_button_set_use_font(AFontButton: PGtkFontButton; use_font: gboolean); cdecl; external;
procedure gtk_font_button_set_use_size(AFontButton: PGtkFontButton; use_size: gboolean); cdecl; external;
procedure gtk_font_chooser_dialog_set_preview_text(AFontChooserDialog: PGtkFontChooserDialog; text: Pgchar); cdecl; external;
procedure gtk_font_chooser_set_filter_func(AFontChooser: PGtkFontChooser; filter: TGtkFontFilterFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_font_chooser_set_preview_text(AFontChooser: PGtkFontChooser; text: Pgchar); cdecl; external;
procedure gtk_font_chooser_set_show_preview_entry(AFontChooser: PGtkFontChooser; show_preview_entry: gboolean); cdecl; external;
procedure gtk_frame_get_label_align(AFrame: PGtkFrame; xalign: Pgfloat; yalign: Pgfloat); cdecl; external;
procedure gtk_frame_set_label(AFrame: PGtkFrame; label_: Pgchar); cdecl; external;
procedure gtk_frame_set_label_align(AFrame: PGtkFrame; xalign: gfloat; yalign: gfloat); cdecl; external;
procedure gtk_frame_set_label_widget(AFrame: PGtkFrame; label_widget: PGtkWidget); cdecl; external;
procedure gtk_frame_set_shadow_type(AFrame: PGtkFrame; type_: TGtkShadowType); cdecl; external;
procedure gtk_grab_add(AWidget: PGtkWidget); cdecl; external;
procedure gtk_grab_remove(AWidget: PGtkWidget); cdecl; external;
procedure gtk_gradient_add_color_stop(AGradient: PGtkGradient; offset: gdouble; color: PGtkSymbolicColor); cdecl; external;
procedure gtk_gradient_unref(AGradient: PGtkGradient); cdecl; external;
procedure gtk_grid_attach(AGrid: PGtkGrid; child: PGtkWidget; left: gint; top: gint; width: gint; height: gint); cdecl; external;
procedure gtk_grid_attach_next_to(AGrid: PGtkGrid; child: PGtkWidget; sibling: PGtkWidget; side: TGtkPositionType; width: gint; height: gint); cdecl; external;
procedure gtk_grid_insert_column(AGrid: PGtkGrid; position: gint); cdecl; external;
procedure gtk_grid_insert_next_to(AGrid: PGtkGrid; sibling: PGtkWidget; side: TGtkPositionType); cdecl; external;
procedure gtk_grid_insert_row(AGrid: PGtkGrid; position: gint); cdecl; external;
procedure gtk_grid_set_column_homogeneous(AGrid: PGtkGrid; homogeneous: gboolean); cdecl; external;
procedure gtk_grid_set_column_spacing(AGrid: PGtkGrid; spacing: guint); cdecl; external;
procedure gtk_grid_set_row_homogeneous(AGrid: PGtkGrid; homogeneous: gboolean); cdecl; external;
procedure gtk_grid_set_row_spacing(AGrid: PGtkGrid; spacing: guint); cdecl; external;
procedure gtk_handle_box_set_handle_position(AHandleBox: PGtkHandleBox; position: TGtkPositionType); cdecl; external;
procedure gtk_handle_box_set_shadow_type(AHandleBox: PGtkHandleBox; type_: TGtkShadowType); cdecl; external;
procedure gtk_handle_box_set_snap_edge(AHandleBox: PGtkHandleBox; edge: TGtkPositionType); cdecl; external;
procedure gtk_hsv_get_color(AHSV: PGtkHSV; h: Pgdouble; s: Pgdouble; v: Pgdouble); cdecl; external;
procedure gtk_hsv_get_metrics(AHSV: PGtkHSV; size: Pgint; ring_width: Pgint); cdecl; external;
procedure gtk_hsv_set_color(AHSV: PGtkHSV; h: gdouble; s: gdouble; v: gdouble); cdecl; external;
procedure gtk_hsv_set_metrics(AHSV: PGtkHSV; size: gint; ring_width: gint); cdecl; external;
procedure gtk_hsv_to_rgb(h: gdouble; s: gdouble; v: gdouble; r: Pgdouble; g: Pgdouble; b: Pgdouble); cdecl; external;
procedure gtk_icon_factory_add(AIconFactory: PGtkIconFactory; stock_id: Pgchar; icon_set: PGtkIconSet); cdecl; external;
procedure gtk_icon_factory_add_default(AIconFactory: PGtkIconFactory); cdecl; external;
procedure gtk_icon_factory_remove_default(AIconFactory: PGtkIconFactory); cdecl; external;
procedure gtk_icon_info_free(AIconInfo: PGtkIconInfo); cdecl; external;
procedure gtk_icon_info_set_raw_coordinates(AIconInfo: PGtkIconInfo; raw_coordinates: gboolean); cdecl; external;
procedure gtk_icon_set_add_source(AIconSet: PGtkIconSet; source: PGtkIconSource); cdecl; external;
procedure gtk_icon_set_get_sizes(AIconSet: PGtkIconSet; sizes: PPgint; n_sizes: Pgint); cdecl; external;
procedure gtk_icon_set_unref(AIconSet: PGtkIconSet); cdecl; external;
procedure gtk_icon_size_register_alias(alias: Pgchar; target: gint); cdecl; external;
procedure gtk_icon_source_free(AIconSource: PGtkIconSource); cdecl; external;
procedure gtk_icon_source_set_direction(AIconSource: PGtkIconSource; direction: TGtkTextDirection); cdecl; external;
procedure gtk_icon_source_set_direction_wildcarded(AIconSource: PGtkIconSource; setting: gboolean); cdecl; external;
procedure gtk_icon_source_set_filename(AIconSource: PGtkIconSource; filename: Pgchar); cdecl; external;
procedure gtk_icon_source_set_icon_name(AIconSource: PGtkIconSource; icon_name: Pgchar); cdecl; external;
procedure gtk_icon_source_set_pixbuf(AIconSource: PGtkIconSource; pixbuf: PGdkPixbuf); cdecl; external;
procedure gtk_icon_source_set_size(AIconSource: PGtkIconSource; size: gint); cdecl; external;
procedure gtk_icon_source_set_size_wildcarded(AIconSource: PGtkIconSource; setting: gboolean); cdecl; external;
procedure gtk_icon_source_set_state(AIconSource: PGtkIconSource; state: TAtkStateType); cdecl; external;
procedure gtk_icon_source_set_state_wildcarded(AIconSource: PGtkIconSource; setting: gboolean); cdecl; external;
procedure gtk_icon_theme_add_builtin_icon(icon_name: Pgchar; size: gint; pixbuf: PGdkPixbuf); cdecl; external;
procedure gtk_icon_theme_append_search_path(AIconTheme: PGtkIconTheme; path: Pgchar); cdecl; external;
procedure gtk_icon_theme_get_search_path(AIconTheme: PGtkIconTheme; path: PPgchar; n_elements: Pgint); cdecl; external;
procedure gtk_icon_theme_prepend_search_path(AIconTheme: PGtkIconTheme; path: Pgchar); cdecl; external;
procedure gtk_icon_theme_set_custom_theme(AIconTheme: PGtkIconTheme; theme_name: Pgchar); cdecl; external;
procedure gtk_icon_theme_set_screen(AIconTheme: PGtkIconTheme; screen: PGdkScreen); cdecl; external;
procedure gtk_icon_theme_set_search_path(AIconTheme: PGtkIconTheme; path: Pgchar; n_elements: gint); cdecl; external;
procedure gtk_icon_view_convert_widget_to_bin_window_coords(AIconView: PGtkIconView; wx: gint; wy: gint; bx: Pgint; by: Pgint); cdecl; external;
procedure gtk_icon_view_enable_model_drag_dest(AIconView: PGtkIconView; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; external;
procedure gtk_icon_view_enable_model_drag_source(AIconView: PGtkIconView; start_button_mask: TGdkModifierType; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; external;
procedure gtk_icon_view_get_drag_dest_item(AIconView: PGtkIconView; path: PPGtkTreePath; pos: PGtkIconViewDropPosition); cdecl; external;
procedure gtk_icon_view_item_activated(AIconView: PGtkIconView; path: PGtkTreePath); cdecl; external;
procedure gtk_icon_view_scroll_to_path(AIconView: PGtkIconView; path: PGtkTreePath; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl; external;
procedure gtk_icon_view_select_all(AIconView: PGtkIconView); cdecl; external;
procedure gtk_icon_view_select_path(AIconView: PGtkIconView; path: PGtkTreePath); cdecl; external;
procedure gtk_icon_view_selected_foreach(AIconView: PGtkIconView; func: TGtkIconViewForeachFunc; data: gpointer); cdecl; external;
procedure gtk_icon_view_set_column_spacing(AIconView: PGtkIconView; column_spacing: gint); cdecl; external;
procedure gtk_icon_view_set_columns(AIconView: PGtkIconView; columns: gint); cdecl; external;
procedure gtk_icon_view_set_cursor(AIconView: PGtkIconView; path: PGtkTreePath; cell: PGtkCellRenderer; start_editing: gboolean); cdecl; external;
procedure gtk_icon_view_set_drag_dest_item(AIconView: PGtkIconView; path: PGtkTreePath; pos: TGtkIconViewDropPosition); cdecl; external;
procedure gtk_icon_view_set_item_orientation(AIconView: PGtkIconView; orientation: TGtkOrientation); cdecl; external;
procedure gtk_icon_view_set_item_padding(AIconView: PGtkIconView; item_padding: gint); cdecl; external;
procedure gtk_icon_view_set_item_width(AIconView: PGtkIconView; item_width: gint); cdecl; external;
procedure gtk_icon_view_set_margin(AIconView: PGtkIconView; margin: gint); cdecl; external;
procedure gtk_icon_view_set_markup_column(AIconView: PGtkIconView; column: gint); cdecl; external;
procedure gtk_icon_view_set_model(AIconView: PGtkIconView; model: PGtkTreeModel); cdecl; external;
procedure gtk_icon_view_set_pixbuf_column(AIconView: PGtkIconView; column: gint); cdecl; external;
procedure gtk_icon_view_set_reorderable(AIconView: PGtkIconView; reorderable: gboolean); cdecl; external;
procedure gtk_icon_view_set_row_spacing(AIconView: PGtkIconView; row_spacing: gint); cdecl; external;
procedure gtk_icon_view_set_selection_mode(AIconView: PGtkIconView; mode: TGtkSelectionMode); cdecl; external;
procedure gtk_icon_view_set_spacing(AIconView: PGtkIconView; spacing: gint); cdecl; external;
procedure gtk_icon_view_set_text_column(AIconView: PGtkIconView; column: gint); cdecl; external;
procedure gtk_icon_view_set_tooltip_cell(AIconView: PGtkIconView; tooltip: PGtkTooltip; path: PGtkTreePath; cell: PGtkCellRenderer); cdecl; external;
procedure gtk_icon_view_set_tooltip_column(AIconView: PGtkIconView; column: gint); cdecl; external;
procedure gtk_icon_view_set_tooltip_item(AIconView: PGtkIconView; tooltip: PGtkTooltip; path: PGtkTreePath); cdecl; external;
procedure gtk_icon_view_unselect_all(AIconView: PGtkIconView); cdecl; external;
procedure gtk_icon_view_unselect_path(AIconView: PGtkIconView; path: PGtkTreePath); cdecl; external;
procedure gtk_icon_view_unset_model_drag_dest(AIconView: PGtkIconView); cdecl; external;
procedure gtk_icon_view_unset_model_drag_source(AIconView: PGtkIconView); cdecl; external;
procedure gtk_im_context_focus_in(AIMContext: PGtkIMContext); cdecl; external;
procedure gtk_im_context_focus_out(AIMContext: PGtkIMContext); cdecl; external;
procedure gtk_im_context_get_preedit_string(AIMContext: PGtkIMContext; str: PPgchar; attrs: PPPangoAttrList; cursor_pos: Pgint); cdecl; external;
procedure gtk_im_context_reset(AIMContext: PGtkIMContext); cdecl; external;
procedure gtk_im_context_set_client_window(AIMContext: PGtkIMContext; window: PGdkWindow); cdecl; external;
procedure gtk_im_context_set_cursor_location(AIMContext: PGtkIMContext; area: PGdkRectangle); cdecl; external;
procedure gtk_im_context_set_surrounding(AIMContext: PGtkIMContext; text: Pgchar; len: gint; cursor_index: gint); cdecl; external;
procedure gtk_im_context_set_use_preedit(AIMContext: PGtkIMContext; use_preedit: gboolean); cdecl; external;
procedure gtk_im_context_simple_add_table(AIMContextSimple: PGtkIMContextSimple; data: Pguint16; max_seq_len: gint; n_seqs: gint); cdecl; external;
procedure gtk_im_multicontext_append_menuitems(AIMMulticontext: PGtkIMMulticontext; menushell: PGtkMenuShell); cdecl; external;
procedure gtk_im_multicontext_set_context_id(AIMMulticontext: PGtkIMMulticontext; context_id: Pgchar); cdecl; external;
procedure gtk_image_clear(AImage: PGtkImage); cdecl; external;
procedure gtk_image_get_gicon(AImage: PGtkImage; gicon: PPGIcon; size: Pgint); cdecl; external;
procedure gtk_image_get_icon_name(AImage: PGtkImage; icon_name: PPgchar; size: Pgint); cdecl; external;
procedure gtk_image_get_icon_set(AImage: PGtkImage; icon_set: PPGtkIconSet; size: Pgint); cdecl; external;
procedure gtk_image_get_stock(AImage: PGtkImage; stock_id: PPgchar; size: Pgint); cdecl; external;
procedure gtk_image_menu_item_set_accel_group(AImageMenuItem: PGtkImageMenuItem; accel_group: PGtkAccelGroup); cdecl; external;
procedure gtk_image_menu_item_set_always_show_image(AImageMenuItem: PGtkImageMenuItem; always_show: gboolean); cdecl; external;
procedure gtk_image_menu_item_set_image(AImageMenuItem: PGtkImageMenuItem; image: PGtkWidget); cdecl; external;
procedure gtk_image_menu_item_set_use_stock(AImageMenuItem: PGtkImageMenuItem; use_stock: gboolean); cdecl; external;
procedure gtk_image_set_from_animation(AImage: PGtkImage; animation: PGdkPixbufAnimation); cdecl; external;
procedure gtk_image_set_from_file(AImage: PGtkImage; filename: Pgchar); cdecl; external;
procedure gtk_image_set_from_gicon(AImage: PGtkImage; icon: PGIcon; size: gint); cdecl; external;
procedure gtk_image_set_from_icon_name(AImage: PGtkImage; icon_name: Pgchar; size: gint); cdecl; external;
procedure gtk_image_set_from_icon_set(AImage: PGtkImage; icon_set: PGtkIconSet; size: gint); cdecl; external;
procedure gtk_image_set_from_pixbuf(AImage: PGtkImage; pixbuf: PGdkPixbuf); cdecl; external;
procedure gtk_image_set_from_stock(AImage: PGtkImage; stock_id: Pgchar; size: gint); cdecl; external;
procedure gtk_image_set_pixel_size(AImage: PGtkImage; pixel_size: gint); cdecl; external;
procedure gtk_info_bar_add_action_widget(AInfoBar: PGtkInfoBar; child: PGtkWidget; response_id: gint); cdecl; external;
procedure gtk_info_bar_add_buttons(AInfoBar: PGtkInfoBar; first_button_text: Pgchar; args: array of const); cdecl; external;
procedure gtk_info_bar_response(AInfoBar: PGtkInfoBar; response_id: gint); cdecl; external;
procedure gtk_info_bar_set_default_response(AInfoBar: PGtkInfoBar; response_id: gint); cdecl; external;
procedure gtk_info_bar_set_message_type(AInfoBar: PGtkInfoBar; message_type: TGtkMessageType); cdecl; external;
procedure gtk_info_bar_set_response_sensitive(AInfoBar: PGtkInfoBar; response_id: gint; setting: gboolean); cdecl; external;
procedure gtk_init(argc: Pgint; argv: PPPgchar); cdecl; external;
procedure gtk_invisible_set_screen(AInvisible: PGtkInvisible; screen: PGdkScreen); cdecl; external;
procedure gtk_key_snooper_remove(snooper_handler_id: guint); cdecl; external;
procedure gtk_label_get_layout_offsets(ALabel: PGtkLabel; x: Pgint; y: Pgint); cdecl; external;
procedure gtk_label_select_region(ALabel: PGtkLabel; start_offset: gint; end_offset: gint); cdecl; external;
procedure gtk_label_set_angle(ALabel: PGtkLabel; angle: gdouble); cdecl; external;
procedure gtk_label_set_attributes(ALabel: PGtkLabel; attrs: PPangoAttrList); cdecl; external;
procedure gtk_label_set_ellipsize(ALabel: PGtkLabel; mode: TPangoEllipsizeMode); cdecl; external;
procedure gtk_label_set_justify(ALabel: PGtkLabel; jtype: TGtkJustification); cdecl; external;
procedure gtk_label_set_label(ALabel: PGtkLabel; str: Pgchar); cdecl; external;
procedure gtk_label_set_line_wrap(ALabel: PGtkLabel; wrap: gboolean); cdecl; external;
procedure gtk_label_set_line_wrap_mode(ALabel: PGtkLabel; wrap_mode: TPangoWrapMode); cdecl; external;
procedure gtk_label_set_markup(ALabel: PGtkLabel; str: Pgchar); cdecl; external;
procedure gtk_label_set_markup_with_mnemonic(ALabel: PGtkLabel; str: Pgchar); cdecl; external;
procedure gtk_label_set_max_width_chars(ALabel: PGtkLabel; n_chars: gint); cdecl; external;
procedure gtk_label_set_mnemonic_widget(ALabel: PGtkLabel; widget: PGtkWidget); cdecl; external;
procedure gtk_label_set_pattern(ALabel: PGtkLabel; pattern: Pgchar); cdecl; external;
procedure gtk_label_set_selectable(ALabel: PGtkLabel; setting: gboolean); cdecl; external;
procedure gtk_label_set_single_line_mode(ALabel: PGtkLabel; single_line_mode: gboolean); cdecl; external;
procedure gtk_label_set_text(ALabel: PGtkLabel; str: Pgchar); cdecl; external;
procedure gtk_label_set_text_with_mnemonic(ALabel: PGtkLabel; str: Pgchar); cdecl; external;
procedure gtk_label_set_track_visited_links(ALabel: PGtkLabel; track_links: gboolean); cdecl; external;
procedure gtk_label_set_use_markup(ALabel: PGtkLabel; setting: gboolean); cdecl; external;
procedure gtk_label_set_use_underline(ALabel: PGtkLabel; setting: gboolean); cdecl; external;
procedure gtk_label_set_width_chars(ALabel: PGtkLabel; n_chars: gint); cdecl; external;
procedure gtk_layout_get_size(ALayout: PGtkLayout; width: Pguint; height: Pguint); cdecl; external;
procedure gtk_layout_move(ALayout: PGtkLayout; child_widget: PGtkWidget; x: gint; y: gint); cdecl; external;
procedure gtk_layout_put(ALayout: PGtkLayout; child_widget: PGtkWidget; x: gint; y: gint); cdecl; external;
procedure gtk_layout_set_size(ALayout: PGtkLayout; width: guint; height: guint); cdecl; external;
procedure gtk_link_button_set_uri(ALinkButton: PGtkLinkButton; uri: Pgchar); cdecl; external;
procedure gtk_link_button_set_visited(ALinkButton: PGtkLinkButton; visited: gboolean); cdecl; external;
procedure gtk_list_store_append(AListStore: PGtkListStore; iter: PGtkTreeIter); cdecl; external;
procedure gtk_list_store_clear(AListStore: PGtkListStore); cdecl; external;
procedure gtk_list_store_insert(AListStore: PGtkListStore; iter: PGtkTreeIter; position: gint); cdecl; external;
procedure gtk_list_store_insert_after(AListStore: PGtkListStore; iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; external;
procedure gtk_list_store_insert_before(AListStore: PGtkListStore; iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; external;
procedure gtk_list_store_insert_with_values(AListStore: PGtkListStore; iter: PGtkTreeIter; position: gint; args: array of const); cdecl; external;
procedure gtk_list_store_insert_with_valuesv(AListStore: PGtkListStore; iter: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl; external;
procedure gtk_list_store_move_after(AListStore: PGtkListStore; iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; external;
procedure gtk_list_store_move_before(AListStore: PGtkListStore; iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; external;
procedure gtk_list_store_prepend(AListStore: PGtkListStore; iter: PGtkTreeIter); cdecl; external;
procedure gtk_list_store_reorder(AListStore: PGtkListStore; new_order: Pgint); cdecl; external;
procedure gtk_list_store_set(AListStore: PGtkListStore; iter: PGtkTreeIter; args: array of const); cdecl; external;
procedure gtk_list_store_set_column_types(AListStore: PGtkListStore; n_columns: gint; types: PGType); cdecl; external;
procedure gtk_list_store_set_valist(AListStore: PGtkListStore; iter: PGtkTreeIter; var_args: Tva_list); cdecl; external;
procedure gtk_list_store_set_value(AListStore: PGtkListStore; iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; external;
procedure gtk_list_store_set_valuesv(AListStore: PGtkListStore; iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl; external;
procedure gtk_list_store_swap(AListStore: PGtkListStore; a: PGtkTreeIter; b: PGtkTreeIter); cdecl; external;
procedure gtk_lock_button_set_permission(ALockButton: PGtkLockButton; permission: PGPermission); cdecl; external;
procedure gtk_main; cdecl; external;
procedure gtk_main_do_event(event: PGdkEvent); cdecl; external;
procedure gtk_main_quit; cdecl; external;
procedure gtk_menu_attach(AMenu: PGtkMenu; child: PGtkWidget; left_attach: guint; right_attach: guint; top_attach: guint; bottom_attach: guint); cdecl; external;
procedure gtk_menu_attach_to_widget(AMenu: PGtkMenu; attach_widget: PGtkWidget; detacher: TGtkMenuDetachFunc); cdecl; external;
procedure gtk_menu_bar_set_child_pack_direction(AMenuBar: PGtkMenuBar; child_pack_dir: TGtkPackDirection); cdecl; external;
procedure gtk_menu_bar_set_pack_direction(AMenuBar: PGtkMenuBar; pack_dir: TGtkPackDirection); cdecl; external;
procedure gtk_menu_detach(AMenu: PGtkMenu); cdecl; external;
procedure gtk_menu_item_activate(AMenuItem: PGtkMenuItem); cdecl; external;
procedure gtk_menu_item_deselect(AMenuItem: PGtkMenuItem); cdecl; external;
procedure gtk_menu_item_select(AMenuItem: PGtkMenuItem); cdecl; external;
procedure gtk_menu_item_set_accel_path(AMenuItem: PGtkMenuItem; accel_path: Pgchar); cdecl; external;
procedure gtk_menu_item_set_label(AMenuItem: PGtkMenuItem; label_: Pgchar); cdecl; external;
procedure gtk_menu_item_set_reserve_indicator(AMenuItem: PGtkMenuItem; reserve: gboolean); cdecl; external;
procedure gtk_menu_item_set_submenu(AMenuItem: PGtkMenuItem; submenu: PGtkWidget); cdecl; external;
procedure gtk_menu_item_set_use_underline(AMenuItem: PGtkMenuItem; setting: gboolean); cdecl; external;
procedure gtk_menu_item_toggle_size_allocate(AMenuItem: PGtkMenuItem; allocation: gint); cdecl; external;
procedure gtk_menu_item_toggle_size_request(AMenuItem: PGtkMenuItem; requisition: Pgint); cdecl; external;
procedure gtk_menu_popdown(AMenu: PGtkMenu); cdecl; external;
procedure gtk_menu_popup(AMenu: PGtkMenu; parent_menu_shell: PGtkWidget; parent_menu_item: PGtkWidget; func: TGtkMenuPositionFunc; data: gpointer; button: guint; activate_time: guint32); cdecl; external;
procedure gtk_menu_popup_for_device(AMenu: PGtkMenu; device: PGdkDevice; parent_menu_shell: PGtkWidget; parent_menu_item: PGtkWidget; func: TGtkMenuPositionFunc; data: gpointer; destroy_: TGDestroyNotify; button: guint; activate_time: guint32); cdecl; external;
procedure gtk_menu_reorder_child(AMenu: PGtkMenu; child: PGtkWidget; position: gint); cdecl; external;
procedure gtk_menu_reposition(AMenu: PGtkMenu); cdecl; external;
procedure gtk_menu_set_accel_group(AMenu: PGtkMenu; accel_group: PGtkAccelGroup); cdecl; external;
procedure gtk_menu_set_accel_path(AMenu: PGtkMenu; accel_path: Pgchar); cdecl; external;
procedure gtk_menu_set_active(AMenu: PGtkMenu; index: guint); cdecl; external;
procedure gtk_menu_set_monitor(AMenu: PGtkMenu; monitor_num: gint); cdecl; external;
procedure gtk_menu_set_reserve_toggle_size(AMenu: PGtkMenu; reserve_toggle_size: gboolean); cdecl; external;
procedure gtk_menu_set_screen(AMenu: PGtkMenu; screen: PGdkScreen); cdecl; external;
procedure gtk_menu_set_tearoff_state(AMenu: PGtkMenu; torn_off: gboolean); cdecl; external;
procedure gtk_menu_set_title(AMenu: PGtkMenu; title: Pgchar); cdecl; external;
procedure gtk_menu_shell_activate_item(AMenuShell: PGtkMenuShell; menu_item: PGtkWidget; force_deactivate: gboolean); cdecl; external;
procedure gtk_menu_shell_append(AMenuShell: PGtkMenuShell; child: PGtkWidget); cdecl; external;
procedure gtk_menu_shell_cancel(AMenuShell: PGtkMenuShell); cdecl; external;
procedure gtk_menu_shell_deactivate(AMenuShell: PGtkMenuShell); cdecl; external;
procedure gtk_menu_shell_deselect(AMenuShell: PGtkMenuShell); cdecl; external;
procedure gtk_menu_shell_insert(AMenuShell: PGtkMenuShell; child: PGtkWidget; position: gint); cdecl; external;
procedure gtk_menu_shell_prepend(AMenuShell: PGtkMenuShell; child: PGtkWidget); cdecl; external;
procedure gtk_menu_shell_select_first(AMenuShell: PGtkMenuShell; search_sensitive: gboolean); cdecl; external;
procedure gtk_menu_shell_select_item(AMenuShell: PGtkMenuShell; menu_item: PGtkWidget); cdecl; external;
procedure gtk_menu_shell_set_take_focus(AMenuShell: PGtkMenuShell; take_focus: gboolean); cdecl; external;
procedure gtk_menu_tool_button_set_arrow_tooltip_markup(AMenuToolButton: PGtkMenuToolButton; markup: Pgchar); cdecl; external;
procedure gtk_menu_tool_button_set_arrow_tooltip_text(AMenuToolButton: PGtkMenuToolButton; text: Pgchar); cdecl; external;
procedure gtk_menu_tool_button_set_menu(AMenuToolButton: PGtkMenuToolButton; menu: PGtkWidget); cdecl; external;
procedure gtk_message_dialog_format_secondary_markup(AMessageDialog: PGtkMessageDialog; message_format: Pgchar; args: array of const); cdecl; external;
procedure gtk_message_dialog_format_secondary_text(AMessageDialog: PGtkMessageDialog; message_format: Pgchar; args: array of const); cdecl; external;
procedure gtk_message_dialog_set_image(AMessageDialog: PGtkMessageDialog; image: PGtkWidget); cdecl; external;
procedure gtk_message_dialog_set_markup(AMessageDialog: PGtkMessageDialog; str: Pgchar); cdecl; external;
procedure gtk_misc_get_alignment(AMisc: PGtkMisc; xalign: Pgfloat; yalign: Pgfloat); cdecl; external;
procedure gtk_misc_get_padding(AMisc: PGtkMisc; xpad: Pgint; ypad: Pgint); cdecl; external;
procedure gtk_misc_set_alignment(AMisc: PGtkMisc; xalign: gfloat; yalign: gfloat); cdecl; external;
procedure gtk_misc_set_padding(AMisc: PGtkMisc; xpad: gint; ypad: gint); cdecl; external;
procedure gtk_mount_operation_set_parent(AMountOperation: PGtkMountOperation; parent: PAtkWindow); cdecl; external;
procedure gtk_mount_operation_set_screen(AMountOperation: PGtkMountOperation; screen: PGdkScreen); cdecl; external;
procedure gtk_notebook_next_page(ANotebook: PGtkNotebook); cdecl; external;
procedure gtk_notebook_popup_disable(ANotebook: PGtkNotebook); cdecl; external;
procedure gtk_notebook_popup_enable(ANotebook: PGtkNotebook); cdecl; external;
procedure gtk_notebook_prev_page(ANotebook: PGtkNotebook); cdecl; external;
procedure gtk_notebook_remove_page(ANotebook: PGtkNotebook; page_num: gint); cdecl; external;
procedure gtk_notebook_reorder_child(ANotebook: PGtkNotebook; child: PGtkWidget; position: gint); cdecl; external;
procedure gtk_notebook_set_action_widget(ANotebook: PGtkNotebook; widget: PGtkWidget; pack_type: TGtkPackType); cdecl; external;
procedure gtk_notebook_set_current_page(ANotebook: PGtkNotebook; page_num: gint); cdecl; external;
procedure gtk_notebook_set_group_name(ANotebook: PGtkNotebook; group_name: Pgchar); cdecl; external;
procedure gtk_notebook_set_menu_label(ANotebook: PGtkNotebook; child: PGtkWidget; menu_label: PGtkWidget); cdecl; external;
procedure gtk_notebook_set_menu_label_text(ANotebook: PGtkNotebook; child: PGtkWidget; menu_text: Pgchar); cdecl; external;
procedure gtk_notebook_set_scrollable(ANotebook: PGtkNotebook; scrollable: gboolean); cdecl; external;
procedure gtk_notebook_set_show_border(ANotebook: PGtkNotebook; show_border: gboolean); cdecl; external;
procedure gtk_notebook_set_show_tabs(ANotebook: PGtkNotebook; show_tabs: gboolean); cdecl; external;
procedure gtk_notebook_set_tab_detachable(ANotebook: PGtkNotebook; child: PGtkWidget; detachable: gboolean); cdecl; external;
procedure gtk_notebook_set_tab_label(ANotebook: PGtkNotebook; child: PGtkWidget; tab_label: PGtkWidget); cdecl; external;
procedure gtk_notebook_set_tab_label_text(ANotebook: PGtkNotebook; child: PGtkWidget; tab_text: Pgchar); cdecl; external;
procedure gtk_notebook_set_tab_pos(ANotebook: PGtkNotebook; pos: TGtkPositionType); cdecl; external;
procedure gtk_notebook_set_tab_reorderable(ANotebook: PGtkNotebook; child: PGtkWidget; reorderable: gboolean); cdecl; external;
procedure gtk_numerable_icon_set_background_gicon(ANumerableIcon: PGtkNumerableIcon; icon: PGIcon); cdecl; external;
procedure gtk_numerable_icon_set_background_icon_name(ANumerableIcon: PGtkNumerableIcon; icon_name: Pgchar); cdecl; external;
procedure gtk_numerable_icon_set_count(ANumerableIcon: PGtkNumerableIcon; count: gint); cdecl; external;
procedure gtk_numerable_icon_set_label(ANumerableIcon: PGtkNumerableIcon; label_: Pgchar); cdecl; external;
procedure gtk_numerable_icon_set_style_context(ANumerableIcon: PGtkNumerableIcon; style: PGtkStyleContext); cdecl; external;
procedure gtk_orientable_set_orientation(AOrientable: PGtkOrientable; orientation: TGtkOrientation); cdecl; external;
procedure gtk_overlay_add_overlay(AOverlay: PGtkOverlay; widget: PGtkWidget); cdecl; external;
procedure gtk_page_setup_set_bottom_margin(APageSetup: PGtkPageSetup; margin: gdouble; unit_: TGtkUnit); cdecl; external;
procedure gtk_page_setup_set_left_margin(APageSetup: PGtkPageSetup; margin: gdouble; unit_: TGtkUnit); cdecl; external;
procedure gtk_page_setup_set_orientation(APageSetup: PGtkPageSetup; orientation: TGtkPageOrientation); cdecl; external;
procedure gtk_page_setup_set_paper_size(APageSetup: PGtkPageSetup; size: PGtkPaperSize); cdecl; external;
procedure gtk_page_setup_set_paper_size_and_default_margins(APageSetup: PGtkPageSetup; size: PGtkPaperSize); cdecl; external;
procedure gtk_page_setup_set_right_margin(APageSetup: PGtkPageSetup; margin: gdouble; unit_: TGtkUnit); cdecl; external;
procedure gtk_page_setup_set_top_margin(APageSetup: PGtkPageSetup; margin: gdouble; unit_: TGtkUnit); cdecl; external;
procedure gtk_page_setup_to_key_file(APageSetup: PGtkPageSetup; key_file: PGKeyFile; group_name: Pgchar); cdecl; external;
procedure gtk_paint_arrow(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; arrow_type: TGtkArrowType; fill: gboolean; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_paint_box(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_paint_box_gap(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint; gap_side: TGtkPositionType; gap_x: gint; gap_width: gint); cdecl; external;
procedure gtk_paint_check(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_paint_diamond(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_paint_expander(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; expander_style: TGtkExpanderStyle); cdecl; external;
procedure gtk_paint_extension(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint; gap_side: TGtkPositionType); cdecl; external;
procedure gtk_paint_flat_box(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_paint_focus(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_paint_handle(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint; orientation: TGtkOrientation); cdecl; external;
procedure gtk_paint_hline(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; x1: gint; x2: gint; y: gint); cdecl; external;
procedure gtk_paint_layout(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; use_text: gboolean; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; layout: PPangoLayout); cdecl; external;
procedure gtk_paint_option(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_paint_resize_grip(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; edge: TGdkWindowEdge; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_paint_shadow(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_paint_shadow_gap(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint; gap_side: TGtkPositionType; gap_x: gint; gap_width: gint); cdecl; external;
procedure gtk_paint_slider(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint; orientation: TGtkOrientation); cdecl; external;
procedure gtk_paint_spinner(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; step: guint; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_paint_tab(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; shadow_type: TGtkShadowType; widget: PGtkWidget; detail: Pgchar; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_paint_vline(style: PGtkStyle; cr: Pcairo_t; state_type: TGtkStateType; widget: PGtkWidget; detail: Pgchar; y1_: gint; y2_: gint; x: gint); cdecl; external;
procedure gtk_paned_add1(APaned: PGtkPaned; child: PGtkWidget); cdecl; external;
procedure gtk_paned_add2(APaned: PGtkPaned; child: PGtkWidget); cdecl; external;
procedure gtk_paned_pack1(APaned: PGtkPaned; child: PGtkWidget; resize: gboolean; shrink: gboolean); cdecl; external;
procedure gtk_paned_pack2(APaned: PGtkPaned; child: PGtkWidget; resize: gboolean; shrink: gboolean); cdecl; external;
procedure gtk_paned_set_position(APaned: PGtkPaned; position: gint); cdecl; external;
procedure gtk_paper_size_free(APaperSize: PGtkPaperSize); cdecl; external;
procedure gtk_paper_size_set_size(APaperSize: PGtkPaperSize; width: gdouble; height: gdouble; unit_: TGtkUnit); cdecl; external;
procedure gtk_paper_size_to_key_file(APaperSize: PGtkPaperSize; key_file: PGKeyFile; group_name: Pgchar); cdecl; external;
procedure gtk_plug_construct(APlug: PGtkPlug; socket_id: TWindow); cdecl; external;
procedure gtk_plug_construct_for_display(APlug: PGtkPlug; display: PGdkDisplay; socket_id: TWindow); cdecl; external;
procedure gtk_print_context_set_cairo_context(APrintContext: PGtkPrintContext; cr: Pcairo_t; dpi_x: gdouble; dpi_y: gdouble); cdecl; external;
procedure gtk_print_operation_cancel(APrintOperation: PGtkPrintOperation); cdecl; external;
procedure gtk_print_operation_draw_page_finish(APrintOperation: PGtkPrintOperation); cdecl; external;
procedure gtk_print_operation_get_error(APrintOperation: PGtkPrintOperation); cdecl; external;
procedure gtk_print_operation_preview_end_preview(APrintOperationPreview: PGtkPrintOperationPreview); cdecl; external;
procedure gtk_print_operation_preview_render_page(APrintOperationPreview: PGtkPrintOperationPreview; page_nr: gint); cdecl; external;
procedure gtk_print_operation_set_allow_async(APrintOperation: PGtkPrintOperation; allow_async: gboolean); cdecl; external;
procedure gtk_print_operation_set_current_page(APrintOperation: PGtkPrintOperation; current_page: gint); cdecl; external;
procedure gtk_print_operation_set_custom_tab_label(APrintOperation: PGtkPrintOperation; label_: Pgchar); cdecl; external;
procedure gtk_print_operation_set_default_page_setup(APrintOperation: PGtkPrintOperation; default_page_setup: PGtkPageSetup); cdecl; external;
procedure gtk_print_operation_set_defer_drawing(APrintOperation: PGtkPrintOperation); cdecl; external;
procedure gtk_print_operation_set_embed_page_setup(APrintOperation: PGtkPrintOperation; embed: gboolean); cdecl; external;
procedure gtk_print_operation_set_export_filename(APrintOperation: PGtkPrintOperation; filename: Pgchar); cdecl; external;
procedure gtk_print_operation_set_has_selection(APrintOperation: PGtkPrintOperation; has_selection: gboolean); cdecl; external;
procedure gtk_print_operation_set_job_name(APrintOperation: PGtkPrintOperation; job_name: Pgchar); cdecl; external;
procedure gtk_print_operation_set_n_pages(APrintOperation: PGtkPrintOperation; n_pages: gint); cdecl; external;
procedure gtk_print_operation_set_print_settings(APrintOperation: PGtkPrintOperation; print_settings: PGtkPrintSettings); cdecl; external;
procedure gtk_print_operation_set_show_progress(APrintOperation: PGtkPrintOperation; show_progress: gboolean); cdecl; external;
procedure gtk_print_operation_set_support_selection(APrintOperation: PGtkPrintOperation; support_selection: gboolean); cdecl; external;
procedure gtk_print_operation_set_track_print_status(APrintOperation: PGtkPrintOperation; track_status: gboolean); cdecl; external;
procedure gtk_print_operation_set_unit(APrintOperation: PGtkPrintOperation; unit_: TGtkUnit); cdecl; external;
procedure gtk_print_operation_set_use_full_page(APrintOperation: PGtkPrintOperation; full_page: gboolean); cdecl; external;
procedure gtk_print_run_page_setup_dialog_async(parent: PGtkWindow; page_setup: PGtkPageSetup; settings: PGtkPrintSettings; done_cb: TGtkPageSetupDoneFunc; data: gpointer); cdecl; external;
procedure gtk_print_settings_foreach(APrintSettings: PGtkPrintSettings; func: TGtkPrintSettingsFunc; user_data: gpointer); cdecl; external;
procedure gtk_print_settings_set(APrintSettings: PGtkPrintSettings; key: Pgchar; value: Pgchar); cdecl; external;
procedure gtk_print_settings_set_bool(APrintSettings: PGtkPrintSettings; key: Pgchar; value: gboolean); cdecl; external;
procedure gtk_print_settings_set_collate(APrintSettings: PGtkPrintSettings; collate: gboolean); cdecl; external;
procedure gtk_print_settings_set_default_source(APrintSettings: PGtkPrintSettings; default_source: Pgchar); cdecl; external;
procedure gtk_print_settings_set_dither(APrintSettings: PGtkPrintSettings; dither: Pgchar); cdecl; external;
procedure gtk_print_settings_set_double(APrintSettings: PGtkPrintSettings; key: Pgchar; value: gdouble); cdecl; external;
procedure gtk_print_settings_set_duplex(APrintSettings: PGtkPrintSettings; duplex: TGtkPrintDuplex); cdecl; external;
procedure gtk_print_settings_set_finishings(APrintSettings: PGtkPrintSettings; finishings: Pgchar); cdecl; external;
procedure gtk_print_settings_set_int(APrintSettings: PGtkPrintSettings; key: Pgchar; value: gint); cdecl; external;
procedure gtk_print_settings_set_length(APrintSettings: PGtkPrintSettings; key: Pgchar; value: gdouble; unit_: TGtkUnit); cdecl; external;
procedure gtk_print_settings_set_media_type(APrintSettings: PGtkPrintSettings; media_type: Pgchar); cdecl; external;
procedure gtk_print_settings_set_n_copies(APrintSettings: PGtkPrintSettings; num_copies: gint); cdecl; external;
procedure gtk_print_settings_set_number_up(APrintSettings: PGtkPrintSettings; number_up: gint); cdecl; external;
procedure gtk_print_settings_set_number_up_layout(APrintSettings: PGtkPrintSettings; number_up_layout: TGtkNumberUpLayout); cdecl; external;
procedure gtk_print_settings_set_orientation(APrintSettings: PGtkPrintSettings; orientation: TGtkPageOrientation); cdecl; external;
procedure gtk_print_settings_set_output_bin(APrintSettings: PGtkPrintSettings; output_bin: Pgchar); cdecl; external;
procedure gtk_print_settings_set_page_ranges(APrintSettings: PGtkPrintSettings; page_ranges: PGtkPageRange; num_ranges: gint); cdecl; external;
procedure gtk_print_settings_set_page_set(APrintSettings: PGtkPrintSettings; page_set: TGtkPageSet); cdecl; external;
procedure gtk_print_settings_set_paper_height(APrintSettings: PGtkPrintSettings; height: gdouble; unit_: TGtkUnit); cdecl; external;
procedure gtk_print_settings_set_paper_size(APrintSettings: PGtkPrintSettings; paper_size: PGtkPaperSize); cdecl; external;
procedure gtk_print_settings_set_paper_width(APrintSettings: PGtkPrintSettings; width: gdouble; unit_: TGtkUnit); cdecl; external;
procedure gtk_print_settings_set_print_pages(APrintSettings: PGtkPrintSettings; pages: TGtkPrintPages); cdecl; external;
procedure gtk_print_settings_set_printer(APrintSettings: PGtkPrintSettings; printer: Pgchar); cdecl; external;
procedure gtk_print_settings_set_printer_lpi(APrintSettings: PGtkPrintSettings; lpi: gdouble); cdecl; external;
procedure gtk_print_settings_set_quality(APrintSettings: PGtkPrintSettings; quality: TGtkPrintQuality); cdecl; external;
procedure gtk_print_settings_set_resolution(APrintSettings: PGtkPrintSettings; resolution: gint); cdecl; external;
procedure gtk_print_settings_set_resolution_xy(APrintSettings: PGtkPrintSettings; resolution_x: gint; resolution_y: gint); cdecl; external;
procedure gtk_print_settings_set_reverse(APrintSettings: PGtkPrintSettings; reverse: gboolean); cdecl; external;
procedure gtk_print_settings_set_scale(APrintSettings: PGtkPrintSettings; scale: gdouble); cdecl; external;
procedure gtk_print_settings_set_use_color(APrintSettings: PGtkPrintSettings; use_color: gboolean); cdecl; external;
procedure gtk_print_settings_to_key_file(APrintSettings: PGtkPrintSettings; key_file: PGKeyFile; group_name: Pgchar); cdecl; external;
procedure gtk_print_settings_unset(APrintSettings: PGtkPrintSettings; key: Pgchar); cdecl; external;
procedure gtk_progress_bar_pulse(AProgressBar: PGtkProgressBar); cdecl; external;
procedure gtk_progress_bar_set_ellipsize(AProgressBar: PGtkProgressBar; mode: TPangoEllipsizeMode); cdecl; external;
procedure gtk_progress_bar_set_fraction(AProgressBar: PGtkProgressBar; fraction: gdouble); cdecl; external;
procedure gtk_progress_bar_set_inverted(AProgressBar: PGtkProgressBar; inverted: gboolean); cdecl; external;
procedure gtk_progress_bar_set_pulse_step(AProgressBar: PGtkProgressBar; fraction: gdouble); cdecl; external;
procedure gtk_progress_bar_set_show_text(AProgressBar: PGtkProgressBar; show_text: gboolean); cdecl; external;
procedure gtk_progress_bar_set_text(AProgressBar: PGtkProgressBar; text: Pgchar); cdecl; external;
procedure gtk_propagate_event(widget: PGtkWidget; event: PGdkEvent); cdecl; external;
procedure gtk_radio_action_join_group(ARadioAction: PGtkRadioAction; group_source: PGtkRadioAction); cdecl; external;
procedure gtk_radio_action_set_current_value(ARadioAction: PGtkRadioAction; current_value: gint); cdecl; external;
procedure gtk_radio_action_set_group(ARadioAction: PGtkRadioAction; group: PGSList); cdecl; external;
procedure gtk_radio_button_join_group(ARadioButton: PGtkRadioButton; group_source: PGtkRadioButton); cdecl; external;
procedure gtk_radio_button_set_group(ARadioButton: PGtkRadioButton; group: PGSList); cdecl; external;
procedure gtk_radio_menu_item_set_group(ARadioMenuItem: PGtkRadioMenuItem; group: PGSList); cdecl; external;
procedure gtk_radio_tool_button_set_group(ARadioToolButton: PGtkRadioToolButton; group: PGSList); cdecl; external;
procedure gtk_range_get_range_rect(ARange: PGtkRange; range_rect: PGdkRectangle); cdecl; external;
procedure gtk_range_get_slider_range(ARange: PGtkRange; slider_start: Pgint; slider_end: Pgint); cdecl; external;
procedure gtk_range_set_adjustment(ARange: PGtkRange; adjustment: PGtkAdjustment); cdecl; external;
procedure gtk_range_set_fill_level(ARange: PGtkRange; fill_level: gdouble); cdecl; external;
procedure gtk_range_set_flippable(ARange: PGtkRange; flippable: gboolean); cdecl; external;
procedure gtk_range_set_increments(ARange: PGtkRange; step: gdouble; page: gdouble); cdecl; external;
procedure gtk_range_set_inverted(ARange: PGtkRange; setting: gboolean); cdecl; external;
procedure gtk_range_set_lower_stepper_sensitivity(ARange: PGtkRange; sensitivity: TGtkSensitivityType); cdecl; external;
procedure gtk_range_set_min_slider_size(ARange: PGtkRange; min_size: gint); cdecl; external;
procedure gtk_range_set_range(ARange: PGtkRange; min: gdouble; max: gdouble); cdecl; external;
procedure gtk_range_set_restrict_to_fill_level(ARange: PGtkRange; restrict_to_fill_level: gboolean); cdecl; external;
procedure gtk_range_set_round_digits(ARange: PGtkRange; round_digits: gint); cdecl; external;
procedure gtk_range_set_show_fill_level(ARange: PGtkRange; show_fill_level: gboolean); cdecl; external;
procedure gtk_range_set_slider_size_fixed(ARange: PGtkRange; size_fixed: gboolean); cdecl; external;
procedure gtk_range_set_upper_stepper_sensitivity(ARange: PGtkRange; sensitivity: TGtkSensitivityType); cdecl; external;
procedure gtk_range_set_value(ARange: PGtkRange; value: gdouble); cdecl; external;
procedure gtk_rc_add_default_file(filename: Pgchar); cdecl; external;
procedure gtk_rc_parse(filename: Pgchar); cdecl; external;
procedure gtk_rc_parse_string(rc_string: Pgchar); cdecl; external;
procedure gtk_rc_reset_styles(settings: PGtkSettings); cdecl; external;
procedure gtk_rc_set_default_files(filenames: PPgchar); cdecl; external;
procedure gtk_recent_action_set_show_numbers(ARecentAction: PGtkRecentAction; show_numbers: gboolean); cdecl; external;
procedure gtk_recent_chooser_add_filter(ARecentChooser: PGtkRecentChooser; filter: PGtkRecentFilter); cdecl; external;
procedure gtk_recent_chooser_menu_set_show_numbers(ARecentChooserMenu: PGtkRecentChooserMenu; show_numbers: gboolean); cdecl; external;
procedure gtk_recent_chooser_remove_filter(ARecentChooser: PGtkRecentChooser; filter: PGtkRecentFilter); cdecl; external;
procedure gtk_recent_chooser_select_all(ARecentChooser: PGtkRecentChooser); cdecl; external;
procedure gtk_recent_chooser_set_filter(ARecentChooser: PGtkRecentChooser; filter: PGtkRecentFilter); cdecl; external;
procedure gtk_recent_chooser_set_limit(ARecentChooser: PGtkRecentChooser; limit: gint); cdecl; external;
procedure gtk_recent_chooser_set_local_only(ARecentChooser: PGtkRecentChooser; local_only: gboolean); cdecl; external;
procedure gtk_recent_chooser_set_select_multiple(ARecentChooser: PGtkRecentChooser; select_multiple: gboolean); cdecl; external;
procedure gtk_recent_chooser_set_show_icons(ARecentChooser: PGtkRecentChooser; show_icons: gboolean); cdecl; external;
procedure gtk_recent_chooser_set_show_not_found(ARecentChooser: PGtkRecentChooser; show_not_found: gboolean); cdecl; external;
procedure gtk_recent_chooser_set_show_private(ARecentChooser: PGtkRecentChooser; show_private: gboolean); cdecl; external;
procedure gtk_recent_chooser_set_show_tips(ARecentChooser: PGtkRecentChooser; show_tips: gboolean); cdecl; external;
procedure gtk_recent_chooser_set_sort_func(ARecentChooser: PGtkRecentChooser; sort_func: TGtkRecentSortFunc; sort_data: gpointer; data_destroy: TGDestroyNotify); cdecl; external;
procedure gtk_recent_chooser_set_sort_type(ARecentChooser: PGtkRecentChooser; sort_type: TGtkRecentSortType); cdecl; external;
procedure gtk_recent_chooser_unselect_all(ARecentChooser: PGtkRecentChooser); cdecl; external;
procedure gtk_recent_chooser_unselect_uri(ARecentChooser: PGtkRecentChooser; uri: Pgchar); cdecl; external;
procedure gtk_recent_filter_add_age(ARecentFilter: PGtkRecentFilter; days: gint); cdecl; external;
procedure gtk_recent_filter_add_application(ARecentFilter: PGtkRecentFilter; application: Pgchar); cdecl; external;
procedure gtk_recent_filter_add_custom(ARecentFilter: PGtkRecentFilter; needed: TGtkRecentFilterFlags; func: TGtkRecentFilterFunc; data: gpointer; data_destroy: TGDestroyNotify); cdecl; external;
procedure gtk_recent_filter_add_group(ARecentFilter: PGtkRecentFilter; group: Pgchar); cdecl; external;
procedure gtk_recent_filter_add_mime_type(ARecentFilter: PGtkRecentFilter; mime_type: Pgchar); cdecl; external;
procedure gtk_recent_filter_add_pattern(ARecentFilter: PGtkRecentFilter; pattern: Pgchar); cdecl; external;
procedure gtk_recent_filter_add_pixbuf_formats(ARecentFilter: PGtkRecentFilter); cdecl; external;
procedure gtk_recent_filter_set_name(ARecentFilter: PGtkRecentFilter; name: Pgchar); cdecl; external;
procedure gtk_recent_info_unref(ARecentInfo: PGtkRecentInfo); cdecl; external;
procedure gtk_render_activity(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external;
procedure gtk_render_arrow(context: PGtkStyleContext; cr: Pcairo_t; angle: gdouble; x: gdouble; y: gdouble; size: gdouble); cdecl; external;
procedure gtk_render_background(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external;
procedure gtk_render_check(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external;
procedure gtk_render_expander(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external;
procedure gtk_render_extension(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble; gap_side: TGtkPositionType); cdecl; external;
procedure gtk_render_focus(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external;
procedure gtk_render_frame(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external;
procedure gtk_render_frame_gap(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble; gap_side: TGtkPositionType; xy0_gap: gdouble; xy1_gap: gdouble); cdecl; external;
procedure gtk_render_handle(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external;
procedure gtk_render_icon(context: PGtkStyleContext; cr: Pcairo_t; pixbuf: PGdkPixbuf; x: gdouble; y: gdouble); cdecl; external;
procedure gtk_render_layout(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; layout: PPangoLayout); cdecl; external;
procedure gtk_render_line(context: PGtkStyleContext; cr: Pcairo_t; x0: gdouble; y0: gdouble; x1: gdouble; y1: gdouble); cdecl; external;
procedure gtk_render_option(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble); cdecl; external;
procedure gtk_render_slider(context: PGtkStyleContext; cr: Pcairo_t; x: gdouble; y: gdouble; width: gdouble; height: gdouble; orientation: TGtkOrientation); cdecl; external;
procedure gtk_requisition_free(ARequisition: PGtkRequisition); cdecl; external;
procedure gtk_rgb_to_hsv(r: gdouble; g: gdouble; b: gdouble; h: Pgdouble; s: Pgdouble; v: Pgdouble); cdecl; external;
procedure gtk_scale_add_mark(AScale: PGtkScale; value: gdouble; position: TGtkPositionType; markup: Pgchar); cdecl; external;
procedure gtk_scale_button_set_adjustment(AScaleButton: PGtkScaleButton; adjustment: PGtkAdjustment); cdecl; external;
procedure gtk_scale_button_set_icons(AScaleButton: PGtkScaleButton; icons: PPgchar); cdecl; external;
procedure gtk_scale_button_set_value(AScaleButton: PGtkScaleButton; value: gdouble); cdecl; external;
procedure gtk_scale_clear_marks(AScale: PGtkScale); cdecl; external;
procedure gtk_scale_get_layout_offsets(AScale: PGtkScale; x: Pgint; y: Pgint); cdecl; external;
procedure gtk_scale_set_digits(AScale: PGtkScale; digits: gint); cdecl; external;
procedure gtk_scale_set_draw_value(AScale: PGtkScale; draw_value: gboolean); cdecl; external;
procedure gtk_scale_set_value_pos(AScale: PGtkScale; pos: TGtkPositionType); cdecl; external;
procedure gtk_scrollable_set_hadjustment(AScrollable: PGtkScrollable; hadjustment: PGtkAdjustment); cdecl; external;
procedure gtk_scrollable_set_hscroll_policy(AScrollable: PGtkScrollable; policy: TGtkScrollablePolicy); cdecl; external;
procedure gtk_scrollable_set_vadjustment(AScrollable: PGtkScrollable; vadjustment: PGtkAdjustment); cdecl; external;
procedure gtk_scrollable_set_vscroll_policy(AScrollable: PGtkScrollable; policy: TGtkScrollablePolicy); cdecl; external;
procedure gtk_scrolled_window_add_with_viewport(AScrolledWindow: PGtkScrolledWindow; child: PGtkWidget); cdecl; external;
procedure gtk_scrolled_window_get_policy(AScrolledWindow: PGtkScrolledWindow; hscrollbar_policy: PGtkPolicyType; vscrollbar_policy: PGtkPolicyType); cdecl; external;
procedure gtk_scrolled_window_set_hadjustment(AScrolledWindow: PGtkScrolledWindow; hadjustment: PGtkAdjustment); cdecl; external;
procedure gtk_scrolled_window_set_min_content_height(AScrolledWindow: PGtkScrolledWindow; height: gint); cdecl; external;
procedure gtk_scrolled_window_set_min_content_width(AScrolledWindow: PGtkScrolledWindow; width: gint); cdecl; external;
procedure gtk_scrolled_window_set_placement(AScrolledWindow: PGtkScrolledWindow; window_placement: TGtkCornerType); cdecl; external;
procedure gtk_scrolled_window_set_policy(AScrolledWindow: PGtkScrolledWindow; hscrollbar_policy: TGtkPolicyType; vscrollbar_policy: TGtkPolicyType); cdecl; external;
procedure gtk_scrolled_window_set_shadow_type(AScrolledWindow: PGtkScrolledWindow; type_: TGtkShadowType); cdecl; external;
procedure gtk_scrolled_window_set_vadjustment(AScrolledWindow: PGtkScrolledWindow; vadjustment: PGtkAdjustment); cdecl; external;
procedure gtk_scrolled_window_unset_placement(AScrolledWindow: PGtkScrolledWindow); cdecl; external;
procedure gtk_selection_add_target(widget: PGtkWidget; selection: TGdkAtom; target: TGdkAtom; info: guint); cdecl; external;
procedure gtk_selection_add_targets(widget: PGtkWidget; selection: TGdkAtom; targets: PGtkTargetEntry; ntargets: guint); cdecl; external;
procedure gtk_selection_clear_targets(widget: PGtkWidget; selection: TGdkAtom); cdecl; external;
procedure gtk_selection_data_free(ASelectionData: PGtkSelectionData); cdecl; external;
procedure gtk_selection_data_set(ASelectionData: PGtkSelectionData; type_: TGdkAtom; format: gint; data: Pguint8; length: gint); cdecl; external;
procedure gtk_selection_remove_all(widget: PGtkWidget); cdecl; external;
procedure gtk_separator_tool_item_set_draw(ASeparatorToolItem: PGtkSeparatorToolItem; draw: gboolean); cdecl; external;
procedure gtk_set_debug_flags(flags: guint); cdecl; external;
procedure gtk_settings_install_property(pspec: PGParamSpec); cdecl; external;
procedure gtk_settings_install_property_parser(pspec: PGParamSpec; parser: TGtkRcPropertyParser); cdecl; external;
procedure gtk_settings_set_double_property(ASettings: PGtkSettings; name: Pgchar; v_double: gdouble; origin: Pgchar); cdecl; external;
procedure gtk_settings_set_long_property(ASettings: PGtkSettings; name: Pgchar; v_long: glong; origin: Pgchar); cdecl; external;
procedure gtk_settings_set_property_value(ASettings: PGtkSettings; name: Pgchar; svalue: PGtkSettingsValue); cdecl; external;
procedure gtk_settings_set_string_property(ASettings: PGtkSettings; name: Pgchar; v_string: Pgchar; origin: Pgchar); cdecl; external;
procedure gtk_show_about_dialog(parent: PGtkWindow; first_property_name: Pgchar; args: array of const); cdecl; external;
procedure gtk_size_group_add_widget(ASizeGroup: PGtkSizeGroup; widget: PGtkWidget); cdecl; external;
procedure gtk_size_group_remove_widget(ASizeGroup: PGtkSizeGroup; widget: PGtkWidget); cdecl; external;
procedure gtk_size_group_set_ignore_hidden(ASizeGroup: PGtkSizeGroup; ignore_hidden: gboolean); cdecl; external;
procedure gtk_size_group_set_mode(ASizeGroup: PGtkSizeGroup; mode: TGtkSizeGroupMode); cdecl; external;
procedure gtk_socket_add_id(ASocket: PGtkSocket; window: TWindow); cdecl; external;
procedure gtk_spin_button_configure(ASpinButton: PGtkSpinButton; adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint); cdecl; external;
procedure gtk_spin_button_get_increments(ASpinButton: PGtkSpinButton; step: Pgdouble; page: Pgdouble); cdecl; external;
procedure gtk_spin_button_get_range(ASpinButton: PGtkSpinButton; min: Pgdouble; max: Pgdouble); cdecl; external;
procedure gtk_spin_button_set_adjustment(ASpinButton: PGtkSpinButton; adjustment: PGtkAdjustment); cdecl; external;
procedure gtk_spin_button_set_digits(ASpinButton: PGtkSpinButton; digits: guint); cdecl; external;
procedure gtk_spin_button_set_increments(ASpinButton: PGtkSpinButton; step: gdouble; page: gdouble); cdecl; external;
procedure gtk_spin_button_set_numeric(ASpinButton: PGtkSpinButton; numeric: gboolean); cdecl; external;
procedure gtk_spin_button_set_range(ASpinButton: PGtkSpinButton; min: gdouble; max: gdouble); cdecl; external;
procedure gtk_spin_button_set_snap_to_ticks(ASpinButton: PGtkSpinButton; snap_to_ticks: gboolean); cdecl; external;
procedure gtk_spin_button_set_update_policy(ASpinButton: PGtkSpinButton; policy: TGtkSpinButtonUpdatePolicy); cdecl; external;
procedure gtk_spin_button_set_value(ASpinButton: PGtkSpinButton; value: gdouble); cdecl; external;
procedure gtk_spin_button_set_wrap(ASpinButton: PGtkSpinButton; wrap: gboolean); cdecl; external;
procedure gtk_spin_button_spin(ASpinButton: PGtkSpinButton; direction: TGtkSpinType; increment: gdouble); cdecl; external;
procedure gtk_spin_button_update(ASpinButton: PGtkSpinButton); cdecl; external;
procedure gtk_spinner_start(ASpinner: PGtkSpinner); cdecl; external;
procedure gtk_spinner_stop(ASpinner: PGtkSpinner); cdecl; external;
procedure gtk_status_icon_position_menu(menu: PGtkMenu; x: Pgint; y: Pgint; push_in: Pgboolean; user_data: TGtkStatusIcon); cdecl; external;
procedure gtk_status_icon_set_from_file(AStatusIcon: PGtkStatusIcon; filename: Pgchar); cdecl; external;
procedure gtk_status_icon_set_from_gicon(AStatusIcon: PGtkStatusIcon; icon: PGIcon); cdecl; external;
procedure gtk_status_icon_set_from_icon_name(AStatusIcon: PGtkStatusIcon; icon_name: Pgchar); cdecl; external;
procedure gtk_status_icon_set_from_pixbuf(AStatusIcon: PGtkStatusIcon; pixbuf: PGdkPixbuf); cdecl; external;
procedure gtk_status_icon_set_from_stock(AStatusIcon: PGtkStatusIcon; stock_id: Pgchar); cdecl; external;
procedure gtk_status_icon_set_has_tooltip(AStatusIcon: PGtkStatusIcon; has_tooltip: gboolean); cdecl; external;
procedure gtk_status_icon_set_name(AStatusIcon: PGtkStatusIcon; name: Pgchar); cdecl; external;
procedure gtk_status_icon_set_screen(AStatusIcon: PGtkStatusIcon; screen: PGdkScreen); cdecl; external;
procedure gtk_status_icon_set_title(AStatusIcon: PGtkStatusIcon; title: Pgchar); cdecl; external;
procedure gtk_status_icon_set_tooltip_markup(AStatusIcon: PGtkStatusIcon; markup: Pgchar); cdecl; external;
procedure gtk_status_icon_set_tooltip_text(AStatusIcon: PGtkStatusIcon; text: Pgchar); cdecl; external;
procedure gtk_status_icon_set_visible(AStatusIcon: PGtkStatusIcon; visible: gboolean); cdecl; external;
procedure gtk_statusbar_pop(AStatusbar: PGtkStatusbar; context_id: guint); cdecl; external;
procedure gtk_statusbar_remove(AStatusbar: PGtkStatusbar; context_id: guint; message_id: guint); cdecl; external;
procedure gtk_statusbar_remove_all(AStatusbar: PGtkStatusbar; context_id: guint); cdecl; external;
procedure gtk_stock_add(items: PGtkStockItem; n_items: guint); cdecl; external;
procedure gtk_stock_add_static(items: PGtkStockItem; n_items: guint); cdecl; external;
procedure gtk_stock_item_free(AStockItem: PGtkStockItem); cdecl; external;
procedure gtk_stock_set_translate_func(domain: Pgchar; func: TGtkTranslateFunc; data: gpointer; notify: TGDestroyNotify); cdecl; external;
procedure gtk_style_apply_default_background(AStyle: PGtkStyle; cr: Pcairo_t; window: PGdkWindow; state_type: TGtkStateType; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_style_context_add_class(AStyleContext: PGtkStyleContext; class_name: Pgchar); cdecl; external;
procedure gtk_style_context_add_provider(AStyleContext: PGtkStyleContext; provider: PGtkStyleProvider; priority: guint); cdecl; external;
procedure gtk_style_context_add_provider_for_screen(screen: PGdkScreen; provider: PGtkStyleProvider; priority: guint); cdecl; external;
procedure gtk_style_context_add_region(AStyleContext: PGtkStyleContext; region_name: Pgchar; flags: TGtkRegionFlags); cdecl; external;
procedure gtk_style_context_cancel_animations(AStyleContext: PGtkStyleContext; region_id: gpointer); cdecl; external;
procedure gtk_style_context_get(AStyleContext: PGtkStyleContext; state: TGtkStateFlags; args: array of const); cdecl; external;
procedure gtk_style_context_get_background_color(AStyleContext: PGtkStyleContext; state: TGtkStateFlags; color: PGdkRGBA); cdecl; external;
procedure gtk_style_context_get_border(AStyleContext: PGtkStyleContext; state: TGtkStateFlags; border: PGtkBorder); cdecl; external;
procedure gtk_style_context_get_border_color(AStyleContext: PGtkStyleContext; state: TGtkStateFlags; color: PGdkRGBA); cdecl; external;
procedure gtk_style_context_get_color(AStyleContext: PGtkStyleContext; state: TGtkStateFlags; color: PGdkRGBA); cdecl; external;
procedure gtk_style_context_get_margin(AStyleContext: PGtkStyleContext; state: TGtkStateFlags; margin: PGtkBorder); cdecl; external;
procedure gtk_style_context_get_padding(AStyleContext: PGtkStyleContext; state: TGtkStateFlags; padding: PGtkBorder); cdecl; external;
procedure gtk_style_context_get_property(AStyleContext: PGtkStyleContext; property_: Pgchar; state: TGtkStateFlags; value: PGValue); cdecl; external;
procedure gtk_style_context_get_style(AStyleContext: PGtkStyleContext; args: array of const); cdecl; external;
procedure gtk_style_context_get_style_property(AStyleContext: PGtkStyleContext; property_name: Pgchar; value: PGValue); cdecl; external;
procedure gtk_style_context_get_style_valist(AStyleContext: PGtkStyleContext; args: Tva_list); cdecl; external;
procedure gtk_style_context_get_valist(AStyleContext: PGtkStyleContext; state: TGtkStateFlags; args: Tva_list); cdecl; external;
procedure gtk_style_context_invalidate(AStyleContext: PGtkStyleContext); cdecl; external;
procedure gtk_style_context_notify_state_change(AStyleContext: PGtkStyleContext; window: PGdkWindow; region_id: gpointer; state: TGtkStateType; state_value: gboolean); cdecl; external;
procedure gtk_style_context_pop_animatable_region(AStyleContext: PGtkStyleContext); cdecl; external;
procedure gtk_style_context_push_animatable_region(AStyleContext: PGtkStyleContext; region_id: gpointer); cdecl; external;
procedure gtk_style_context_remove_class(AStyleContext: PGtkStyleContext; class_name: Pgchar); cdecl; external;
procedure gtk_style_context_remove_provider(AStyleContext: PGtkStyleContext; provider: PGtkStyleProvider); cdecl; external;
procedure gtk_style_context_remove_provider_for_screen(screen: PGdkScreen; provider: PGtkStyleProvider); cdecl; external;
procedure gtk_style_context_remove_region(AStyleContext: PGtkStyleContext; region_name: Pgchar); cdecl; external;
procedure gtk_style_context_reset_widgets(screen: PGdkScreen); cdecl; external;
procedure gtk_style_context_restore(AStyleContext: PGtkStyleContext); cdecl; external;
procedure gtk_style_context_save(AStyleContext: PGtkStyleContext); cdecl; external;
procedure gtk_style_context_scroll_animations(AStyleContext: PGtkStyleContext; window: PGdkWindow; dx: gint; dy: gint); cdecl; external;
procedure gtk_style_context_set_background(AStyleContext: PGtkStyleContext; window: PGdkWindow); cdecl; external;
procedure gtk_style_context_set_direction(AStyleContext: PGtkStyleContext; direction: TGtkTextDirection); cdecl; external;
procedure gtk_style_context_set_junction_sides(AStyleContext: PGtkStyleContext; sides: TGtkJunctionSides); cdecl; external;
procedure gtk_style_context_set_path(AStyleContext: PGtkStyleContext; path: PGtkWidgetPath); cdecl; external;
procedure gtk_style_context_set_screen(AStyleContext: PGtkStyleContext; screen: PGdkScreen); cdecl; external;
procedure gtk_style_context_set_state(AStyleContext: PGtkStyleContext; flags: TGtkStateFlags); cdecl; external;
procedure gtk_style_detach(AStyle: PGtkStyle); cdecl; external;
procedure gtk_style_get(AStyle: PGtkStyle; widget_type: TGType; first_property_name: Pgchar; args: array of const); cdecl; external;
procedure gtk_style_get_style_property(AStyle: PGtkStyle; widget_type: TGType; property_name: Pgchar; value: PGValue); cdecl; external;
procedure gtk_style_get_valist(AStyle: PGtkStyle; widget_type: TGType; first_property_name: Pgchar; var_args: Tva_list); cdecl; external;
procedure gtk_style_properties_clear(AStyleProperties: PGtkStyleProperties); cdecl; external;
procedure gtk_style_properties_get(AStyleProperties: PGtkStyleProperties; state: TGtkStateFlags; args: array of const); cdecl; external;
procedure gtk_style_properties_get_valist(AStyleProperties: PGtkStyleProperties; state: TGtkStateFlags; args: Tva_list); cdecl; external;
procedure gtk_style_properties_map_color(AStyleProperties: PGtkStyleProperties; name: Pgchar; color: PGtkSymbolicColor); cdecl; external;
procedure gtk_style_properties_merge(AStyleProperties: PGtkStyleProperties; props_to_merge: PGtkStyleProperties; replace: gboolean); cdecl; external;
procedure gtk_style_properties_register_property(parse_func: TGtkStylePropertyParser; pspec: PGParamSpec); cdecl; external;
procedure gtk_style_properties_set(AStyleProperties: PGtkStyleProperties; state: TGtkStateFlags; args: array of const); cdecl; external;
procedure gtk_style_properties_set_property(AStyleProperties: PGtkStyleProperties; property_: Pgchar; state: TGtkStateFlags; value: PGValue); cdecl; external;
procedure gtk_style_properties_set_valist(AStyleProperties: PGtkStyleProperties; state: TGtkStateFlags; args: Tva_list); cdecl; external;
procedure gtk_style_properties_unset_property(AStyleProperties: PGtkStyleProperties; property_: Pgchar; state: TGtkStateFlags); cdecl; external;
procedure gtk_style_set_background(AStyle: PGtkStyle; window: PGdkWindow; state_type: TGtkStateType); cdecl; external;
procedure gtk_switch_set_active(ASwitch: PGtkSwitch; is_active: gboolean); cdecl; external;
procedure gtk_symbolic_color_unref(ASymbolicColor: PGtkSymbolicColor); cdecl; external;
procedure gtk_table_attach(ATable: PGtkTable; child: PGtkWidget; left_attach: guint; right_attach: guint; top_attach: guint; bottom_attach: guint; xoptions: TGtkAttachOptions; yoptions: TGtkAttachOptions; xpadding: guint; ypadding: guint); cdecl; external;
procedure gtk_table_attach_defaults(ATable: PGtkTable; widget: PGtkWidget; left_attach: guint; right_attach: guint; top_attach: guint; bottom_attach: guint); cdecl; external;
procedure gtk_table_get_size(ATable: PGtkTable; rows: Pguint; columns: Pguint); cdecl; external;
procedure gtk_table_resize(ATable: PGtkTable; rows: guint; columns: guint); cdecl; external;
procedure gtk_table_set_col_spacing(ATable: PGtkTable; column: guint; spacing: guint); cdecl; external;
procedure gtk_table_set_col_spacings(ATable: PGtkTable; spacing: guint); cdecl; external;
procedure gtk_table_set_homogeneous(ATable: PGtkTable; homogeneous: gboolean); cdecl; external;
procedure gtk_table_set_row_spacing(ATable: PGtkTable; row: guint; spacing: guint); cdecl; external;
procedure gtk_table_set_row_spacings(ATable: PGtkTable; spacing: guint); cdecl; external;
procedure gtk_target_entry_free(ATargetEntry: PGtkTargetEntry); cdecl; external;
procedure gtk_target_list_add(ATargetList: PGtkTargetList; target: TGdkAtom; flags: guint; info: guint); cdecl; external;
procedure gtk_target_list_add_image_targets(ATargetList: PGtkTargetList; info: guint; writable: gboolean); cdecl; external;
procedure gtk_target_list_add_rich_text_targets(ATargetList: PGtkTargetList; info: guint; deserializable: gboolean; buffer: PGtkTextBuffer); cdecl; external;
procedure gtk_target_list_add_table(ATargetList: PGtkTargetList; targets: PGtkTargetEntry; ntargets: guint); cdecl; external;
procedure gtk_target_list_add_text_targets(ATargetList: PGtkTargetList; info: guint); cdecl; external;
procedure gtk_target_list_add_uri_targets(ATargetList: PGtkTargetList; info: guint); cdecl; external;
procedure gtk_target_list_remove(ATargetList: PGtkTargetList; target: TGdkAtom); cdecl; external;
procedure gtk_target_list_unref(ATargetList: PGtkTargetList); cdecl; external;
procedure gtk_target_table_free(targets: PGtkTargetEntry; n_targets: gint); cdecl; external;
procedure gtk_test_init(argcp: Pgint; argvp: PPPgchar; args: array of const); cdecl; external;
procedure gtk_test_register_all_types; cdecl; external;
procedure gtk_test_slider_set_perc(widget: PGtkWidget; percentage: gdouble); cdecl; external;
procedure gtk_test_text_set(widget: PGtkWidget; string_: Pgchar); cdecl; external;
procedure gtk_text_attributes_copy_values(ATextAttributes: PGtkTextAttributes; dest: PGtkTextAttributes); cdecl; external;
procedure gtk_text_attributes_unref(ATextAttributes: PGtkTextAttributes); cdecl; external;
procedure gtk_text_buffer_add_mark(ATextBuffer: PGtkTextBuffer; mark: PGtkTextMark; where: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_add_selection_clipboard(ATextBuffer: PGtkTextBuffer; clipboard: PGtkClipboard); cdecl; external;
procedure gtk_text_buffer_apply_tag(ATextBuffer: PGtkTextBuffer; tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_apply_tag_by_name(ATextBuffer: PGtkTextBuffer; name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_begin_user_action(ATextBuffer: PGtkTextBuffer); cdecl; external;
procedure gtk_text_buffer_copy_clipboard(ATextBuffer: PGtkTextBuffer; clipboard: PGtkClipboard); cdecl; external;
procedure gtk_text_buffer_cut_clipboard(ATextBuffer: PGtkTextBuffer; clipboard: PGtkClipboard; default_editable: gboolean); cdecl; external;
procedure gtk_text_buffer_delete(ATextBuffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_delete_mark(ATextBuffer: PGtkTextBuffer; mark: PGtkTextMark); cdecl; external;
procedure gtk_text_buffer_delete_mark_by_name(ATextBuffer: PGtkTextBuffer; name: Pgchar); cdecl; external;
procedure gtk_text_buffer_deserialize_set_can_create_tags(ATextBuffer: PGtkTextBuffer; format: TGdkAtom; can_create_tags: gboolean); cdecl; external;
procedure gtk_text_buffer_end_user_action(ATextBuffer: PGtkTextBuffer); cdecl; external;
procedure gtk_text_buffer_get_bounds(ATextBuffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_get_end_iter(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_get_iter_at_child_anchor(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl; external;
procedure gtk_text_buffer_get_iter_at_line(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; line_number: gint); cdecl; external;
procedure gtk_text_buffer_get_iter_at_line_index(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; line_number: gint; byte_index: gint); cdecl; external;
procedure gtk_text_buffer_get_iter_at_line_offset(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; line_number: gint; char_offset: gint); cdecl; external;
procedure gtk_text_buffer_get_iter_at_mark(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; mark: PGtkTextMark); cdecl; external;
procedure gtk_text_buffer_get_iter_at_offset(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; char_offset: gint); cdecl; external;
procedure gtk_text_buffer_get_start_iter(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_insert(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; text: Pgchar; len: gint); cdecl; external;
procedure gtk_text_buffer_insert_at_cursor(ATextBuffer: PGtkTextBuffer; text: Pgchar; len: gint); cdecl; external;
procedure gtk_text_buffer_insert_child_anchor(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl; external;
procedure gtk_text_buffer_insert_pixbuf(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; pixbuf: PGdkPixbuf); cdecl; external;
procedure gtk_text_buffer_insert_range(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_insert_with_tags(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; text: Pgchar; len: gint; first_tag: PGtkTextTag; args: array of const); cdecl; external;
procedure gtk_text_buffer_insert_with_tags_by_name(ATextBuffer: PGtkTextBuffer; iter: PGtkTextIter; text: Pgchar; len: gint; first_tag_name: Pgchar; args: array of const); cdecl; external;
procedure gtk_text_buffer_move_mark(ATextBuffer: PGtkTextBuffer; mark: PGtkTextMark; where: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_move_mark_by_name(ATextBuffer: PGtkTextBuffer; name: Pgchar; where: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_paste_clipboard(ATextBuffer: PGtkTextBuffer; clipboard: PGtkClipboard; override_location: PGtkTextIter; default_editable: gboolean); cdecl; external;
procedure gtk_text_buffer_place_cursor(ATextBuffer: PGtkTextBuffer; where: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_remove_all_tags(ATextBuffer: PGtkTextBuffer; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_remove_selection_clipboard(ATextBuffer: PGtkTextBuffer; clipboard: PGtkClipboard); cdecl; external;
procedure gtk_text_buffer_remove_tag(ATextBuffer: PGtkTextBuffer; tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_remove_tag_by_name(ATextBuffer: PGtkTextBuffer; name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_select_range(ATextBuffer: PGtkTextBuffer; ins: PGtkTextIter; bound: PGtkTextIter); cdecl; external;
procedure gtk_text_buffer_set_modified(ATextBuffer: PGtkTextBuffer; setting: gboolean); cdecl; external;
procedure gtk_text_buffer_set_text(ATextBuffer: PGtkTextBuffer; text: Pgchar; len: gint); cdecl; external;
procedure gtk_text_buffer_unregister_deserialize_format(ATextBuffer: PGtkTextBuffer; format: TGdkAtom); cdecl; external;
procedure gtk_text_buffer_unregister_serialize_format(ATextBuffer: PGtkTextBuffer; format: TGdkAtom); cdecl; external;
procedure gtk_text_iter_assign(ATextIter: PGtkTextIter; other: PGtkTextIter); cdecl; external;
procedure gtk_text_iter_forward_to_end(ATextIter: PGtkTextIter); cdecl; external;
procedure gtk_text_iter_free(ATextIter: PGtkTextIter); cdecl; external;
procedure gtk_text_iter_order(ATextIter: PGtkTextIter; second: PGtkTextIter); cdecl; external;
procedure gtk_text_iter_set_line(ATextIter: PGtkTextIter; line_number: gint); cdecl; external;
procedure gtk_text_iter_set_line_index(ATextIter: PGtkTextIter; byte_on_line: gint); cdecl; external;
procedure gtk_text_iter_set_line_offset(ATextIter: PGtkTextIter; char_on_line: gint); cdecl; external;
procedure gtk_text_iter_set_offset(ATextIter: PGtkTextIter; char_offset: gint); cdecl; external;
procedure gtk_text_iter_set_visible_line_index(ATextIter: PGtkTextIter; byte_on_line: gint); cdecl; external;
procedure gtk_text_iter_set_visible_line_offset(ATextIter: PGtkTextIter; char_on_line: gint); cdecl; external;
procedure gtk_text_mark_set_visible(ATextMark: PGtkTextMark; setting: gboolean); cdecl; external;
procedure gtk_text_tag_set_priority(ATextTag: PGtkTextTag; priority: gint); cdecl; external;
procedure gtk_text_tag_table_add(ATextTagTable: PGtkTextTagTable; tag: PGtkTextTag); cdecl; external;
procedure gtk_text_tag_table_foreach(ATextTagTable: PGtkTextTagTable; func: TGtkTextTagTableForeach; data: gpointer); cdecl; external;
procedure gtk_text_tag_table_remove(ATextTagTable: PGtkTextTagTable; tag: PGtkTextTag); cdecl; external;
procedure gtk_text_view_add_child_at_anchor(ATextView: PGtkTextView; child: PGtkWidget; anchor: PGtkTextChildAnchor); cdecl; external;
procedure gtk_text_view_add_child_in_window(ATextView: PGtkTextView; child: PGtkWidget; which_window: TGtkTextWindowType; xpos: gint; ypos: gint); cdecl; external;
procedure gtk_text_view_buffer_to_window_coords(ATextView: PGtkTextView; win: TGtkTextWindowType; buffer_x: gint; buffer_y: gint; window_x: Pgint; window_y: Pgint); cdecl; external;
procedure gtk_text_view_get_cursor_locations(ATextView: PGtkTextView; iter: PGtkTextIter; strong: PGdkRectangle; weak: PGdkRectangle); cdecl; external;
procedure gtk_text_view_get_iter_at_location(ATextView: PGtkTextView; iter: PGtkTextIter; x: gint; y: gint); cdecl; external;
procedure gtk_text_view_get_iter_at_position(ATextView: PGtkTextView; iter: PGtkTextIter; trailing: Pgint; x: gint; y: gint); cdecl; external;
procedure gtk_text_view_get_iter_location(ATextView: PGtkTextView; iter: PGtkTextIter; location: PGdkRectangle); cdecl; external;
procedure gtk_text_view_get_line_at_y(ATextView: PGtkTextView; target_iter: PGtkTextIter; y: gint; line_top: Pgint); cdecl; external;
procedure gtk_text_view_get_line_yrange(ATextView: PGtkTextView; iter: PGtkTextIter; y: Pgint; height: Pgint); cdecl; external;
procedure gtk_text_view_get_visible_rect(ATextView: PGtkTextView; visible_rect: PGdkRectangle); cdecl; external;
procedure gtk_text_view_move_child(ATextView: PGtkTextView; child: PGtkWidget; xpos: gint; ypos: gint); cdecl; external;
procedure gtk_text_view_reset_im_context(ATextView: PGtkTextView); cdecl; external;
procedure gtk_text_view_scroll_mark_onscreen(ATextView: PGtkTextView; mark: PGtkTextMark); cdecl; external;
procedure gtk_text_view_scroll_to_mark(ATextView: PGtkTextView; mark: PGtkTextMark; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble); cdecl; external;
procedure gtk_text_view_set_accepts_tab(ATextView: PGtkTextView; accepts_tab: gboolean); cdecl; external;
procedure gtk_text_view_set_border_window_size(ATextView: PGtkTextView; type_: TGtkTextWindowType; size: gint); cdecl; external;
procedure gtk_text_view_set_buffer(ATextView: PGtkTextView; buffer: PGtkTextBuffer); cdecl; external;
procedure gtk_text_view_set_cursor_visible(ATextView: PGtkTextView; setting: gboolean); cdecl; external;
procedure gtk_text_view_set_editable(ATextView: PGtkTextView; setting: gboolean); cdecl; external;
procedure gtk_text_view_set_indent(ATextView: PGtkTextView; indent: gint); cdecl; external;
procedure gtk_text_view_set_justification(ATextView: PGtkTextView; justification: TGtkJustification); cdecl; external;
procedure gtk_text_view_set_left_margin(ATextView: PGtkTextView; left_margin: gint); cdecl; external;
procedure gtk_text_view_set_overwrite(ATextView: PGtkTextView; overwrite: gboolean); cdecl; external;
procedure gtk_text_view_set_pixels_above_lines(ATextView: PGtkTextView; pixels_above_lines: gint); cdecl; external;
procedure gtk_text_view_set_pixels_below_lines(ATextView: PGtkTextView; pixels_below_lines: gint); cdecl; external;
procedure gtk_text_view_set_pixels_inside_wrap(ATextView: PGtkTextView; pixels_inside_wrap: gint); cdecl; external;
procedure gtk_text_view_set_right_margin(ATextView: PGtkTextView; right_margin: gint); cdecl; external;
procedure gtk_text_view_set_tabs(ATextView: PGtkTextView; tabs: PPangoTabArray); cdecl; external;
procedure gtk_text_view_set_wrap_mode(ATextView: PGtkTextView; wrap_mode: TPangoWrapMode); cdecl; external;
procedure gtk_text_view_window_to_buffer_coords(ATextView: PGtkTextView; win: TGtkTextWindowType; window_x: gint; window_y: gint; buffer_x: Pgint; buffer_y: Pgint); cdecl; external;
procedure gtk_theming_engine_get(AThemingEngine: PGtkThemingEngine; state: TGtkStateFlags; args: array of const); cdecl; external;
procedure gtk_theming_engine_get_background_color(AThemingEngine: PGtkThemingEngine; state: TGtkStateFlags; color: PGdkRGBA); cdecl; external;
procedure gtk_theming_engine_get_border(AThemingEngine: PGtkThemingEngine; state: TGtkStateFlags; border: PGtkBorder); cdecl; external;
procedure gtk_theming_engine_get_border_color(AThemingEngine: PGtkThemingEngine; state: TGtkStateFlags; color: PGdkRGBA); cdecl; external;
procedure gtk_theming_engine_get_color(AThemingEngine: PGtkThemingEngine; state: TGtkStateFlags; color: PGdkRGBA); cdecl; external;
procedure gtk_theming_engine_get_margin(AThemingEngine: PGtkThemingEngine; state: TGtkStateFlags; margin: PGtkBorder); cdecl; external;
procedure gtk_theming_engine_get_padding(AThemingEngine: PGtkThemingEngine; state: TGtkStateFlags; padding: PGtkBorder); cdecl; external;
procedure gtk_theming_engine_get_property(AThemingEngine: PGtkThemingEngine; property_: Pgchar; state: TGtkStateFlags; value: PGValue); cdecl; external;
procedure gtk_theming_engine_get_style(AThemingEngine: PGtkThemingEngine; args: array of const); cdecl; external;
procedure gtk_theming_engine_get_style_property(AThemingEngine: PGtkThemingEngine; property_name: Pgchar; value: PGValue); cdecl; external;
procedure gtk_theming_engine_get_style_valist(AThemingEngine: PGtkThemingEngine; args: Tva_list); cdecl; external;
procedure gtk_theming_engine_get_valist(AThemingEngine: PGtkThemingEngine; state: TGtkStateFlags; args: Tva_list); cdecl; external;
procedure gtk_theming_engine_register_property(name_space: Pgchar; parse_func: TGtkStylePropertyParser; pspec: PGParamSpec); cdecl; external;
procedure gtk_toggle_action_set_active(AToggleAction: PGtkToggleAction; is_active: gboolean); cdecl; external;
procedure gtk_toggle_action_set_draw_as_radio(AToggleAction: PGtkToggleAction; draw_as_radio: gboolean); cdecl; external;
procedure gtk_toggle_action_toggled(AToggleAction: PGtkToggleAction); cdecl; external;
procedure gtk_toggle_button_set_active(AToggleButton: PGtkToggleButton; is_active: gboolean); cdecl; external;
procedure gtk_toggle_button_set_inconsistent(AToggleButton: PGtkToggleButton; setting: gboolean); cdecl; external;
procedure gtk_toggle_button_set_mode(AToggleButton: PGtkToggleButton; draw_indicator: gboolean); cdecl; external;
procedure gtk_toggle_button_toggled(AToggleButton: PGtkToggleButton); cdecl; external;
procedure gtk_toggle_tool_button_set_active(AToggleToolButton: PGtkToggleToolButton; is_active: gboolean); cdecl; external;
procedure gtk_tool_button_set_icon_name(AToolButton: PGtkToolButton; icon_name: Pgchar); cdecl; external;
procedure gtk_tool_button_set_icon_widget(AToolButton: PGtkToolButton; icon_widget: PGtkWidget); cdecl; external;
procedure gtk_tool_button_set_label(AToolButton: PGtkToolButton; label_: Pgchar); cdecl; external;
procedure gtk_tool_button_set_label_widget(AToolButton: PGtkToolButton; label_widget: PGtkWidget); cdecl; external;
procedure gtk_tool_button_set_stock_id(AToolButton: PGtkToolButton; stock_id: Pgchar); cdecl; external;
procedure gtk_tool_button_set_use_underline(AToolButton: PGtkToolButton; use_underline: gboolean); cdecl; external;
procedure gtk_tool_item_group_insert(AToolItemGroup: PGtkToolItemGroup; item: PGtkToolItem; position: gint); cdecl; external;
procedure gtk_tool_item_group_set_collapsed(AToolItemGroup: PGtkToolItemGroup; collapsed: gboolean); cdecl; external;
procedure gtk_tool_item_group_set_ellipsize(AToolItemGroup: PGtkToolItemGroup; ellipsize: TPangoEllipsizeMode); cdecl; external;
procedure gtk_tool_item_group_set_header_relief(AToolItemGroup: PGtkToolItemGroup; style: TGtkReliefStyle); cdecl; external;
procedure gtk_tool_item_group_set_item_position(AToolItemGroup: PGtkToolItemGroup; item: PGtkToolItem; position: gint); cdecl; external;
procedure gtk_tool_item_group_set_label(AToolItemGroup: PGtkToolItemGroup; label_: Pgchar); cdecl; external;
procedure gtk_tool_item_group_set_label_widget(AToolItemGroup: PGtkToolItemGroup; label_widget: PGtkWidget); cdecl; external;
procedure gtk_tool_item_rebuild_menu(AToolItem: PGtkToolItem); cdecl; external;
procedure gtk_tool_item_set_expand(AToolItem: PGtkToolItem; expand: gboolean); cdecl; external;
procedure gtk_tool_item_set_homogeneous(AToolItem: PGtkToolItem; homogeneous: gboolean); cdecl; external;
procedure gtk_tool_item_set_is_important(AToolItem: PGtkToolItem; is_important: gboolean); cdecl; external;
procedure gtk_tool_item_set_proxy_menu_item(AToolItem: PGtkToolItem; menu_item_id: Pgchar; menu_item: PGtkWidget); cdecl; external;
procedure gtk_tool_item_set_tooltip_markup(AToolItem: PGtkToolItem; markup: Pgchar); cdecl; external;
procedure gtk_tool_item_set_tooltip_text(AToolItem: PGtkToolItem; text: Pgchar); cdecl; external;
procedure gtk_tool_item_set_use_drag_window(AToolItem: PGtkToolItem; use_drag_window: gboolean); cdecl; external;
procedure gtk_tool_item_set_visible_horizontal(AToolItem: PGtkToolItem; visible_horizontal: gboolean); cdecl; external;
procedure gtk_tool_item_set_visible_vertical(AToolItem: PGtkToolItem; visible_vertical: gboolean); cdecl; external;
procedure gtk_tool_item_toolbar_reconfigured(AToolItem: PGtkToolItem); cdecl; external;
procedure gtk_tool_palette_add_drag_dest(AToolPalette: PGtkToolPalette; widget: PGtkWidget; flags: TGtkDestDefaults; targets: TGtkToolPaletteDragTargets; actions: TGdkDragAction); cdecl; external;
procedure gtk_tool_palette_set_drag_source(AToolPalette: PGtkToolPalette; targets: TGtkToolPaletteDragTargets); cdecl; external;
procedure gtk_tool_palette_set_exclusive(AToolPalette: PGtkToolPalette; group: PGtkToolItemGroup; exclusive: gboolean); cdecl; external;
procedure gtk_tool_palette_set_expand(AToolPalette: PGtkToolPalette; group: PGtkToolItemGroup; expand: gboolean); cdecl; external;
procedure gtk_tool_palette_set_group_position(AToolPalette: PGtkToolPalette; group: PGtkToolItemGroup; position: gint); cdecl; external;
procedure gtk_tool_palette_set_icon_size(AToolPalette: PGtkToolPalette; icon_size: gint); cdecl; external;
procedure gtk_tool_palette_set_style(AToolPalette: PGtkToolPalette; style: TGtkToolbarStyle); cdecl; external;
procedure gtk_tool_palette_unset_icon_size(AToolPalette: PGtkToolPalette); cdecl; external;
procedure gtk_tool_palette_unset_style(AToolPalette: PGtkToolPalette); cdecl; external;
procedure gtk_tool_shell_rebuild_menu(AToolShell: PGtkToolShell); cdecl; external;
procedure gtk_toolbar_insert(AToolbar: PGtkToolbar; item: PGtkToolItem; pos: gint); cdecl; external;
procedure gtk_toolbar_set_drop_highlight_item(AToolbar: PGtkToolbar; tool_item: PGtkToolItem; index_: gint); cdecl; external;
procedure gtk_toolbar_set_icon_size(AToolbar: PGtkToolbar; icon_size: gint); cdecl; external;
procedure gtk_toolbar_set_show_arrow(AToolbar: PGtkToolbar; show_arrow: gboolean); cdecl; external;
procedure gtk_toolbar_set_style(AToolbar: PGtkToolbar; style: TGtkToolbarStyle); cdecl; external;
procedure gtk_toolbar_unset_icon_size(AToolbar: PGtkToolbar); cdecl; external;
procedure gtk_toolbar_unset_style(AToolbar: PGtkToolbar); cdecl; external;
procedure gtk_tooltip_set_custom(ATooltip: PGtkTooltip; custom_widget: PGtkWidget); cdecl; external;
procedure gtk_tooltip_set_icon(ATooltip: PGtkTooltip; pixbuf: PGdkPixbuf); cdecl; external;
procedure gtk_tooltip_set_icon_from_gicon(ATooltip: PGtkTooltip; gicon: PGIcon; size: gint); cdecl; external;
procedure gtk_tooltip_set_icon_from_icon_name(ATooltip: PGtkTooltip; icon_name: Pgchar; size: gint); cdecl; external;
procedure gtk_tooltip_set_icon_from_stock(ATooltip: PGtkTooltip; stock_id: Pgchar; size: gint); cdecl; external;
procedure gtk_tooltip_set_markup(ATooltip: PGtkTooltip; markup: Pgchar); cdecl; external;
procedure gtk_tooltip_set_text(ATooltip: PGtkTooltip; text: Pgchar); cdecl; external;
procedure gtk_tooltip_set_tip_area(ATooltip: PGtkTooltip; rect: PGdkRectangle); cdecl; external;
procedure gtk_tooltip_trigger_tooltip_query(display: PGdkDisplay); cdecl; external;
procedure gtk_tree_iter_free(ATreeIter: PGtkTreeIter); cdecl; external;
procedure gtk_tree_model_filter_clear_cache(ATreeModelFilter: PGtkTreeModelFilter); cdecl; external;
procedure gtk_tree_model_filter_convert_iter_to_child_iter(ATreeModelFilter: PGtkTreeModelFilter; child_iter: PGtkTreeIter; filter_iter: PGtkTreeIter); cdecl; external;
procedure gtk_tree_model_filter_refilter(ATreeModelFilter: PGtkTreeModelFilter); cdecl; external;
procedure gtk_tree_model_filter_set_modify_func(ATreeModelFilter: PGtkTreeModelFilter; n_columns: gint; types: PGType; func: TGtkTreeModelFilterModifyFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_tree_model_filter_set_visible_column(ATreeModelFilter: PGtkTreeModelFilter; column: gint); cdecl; external;
procedure gtk_tree_model_filter_set_visible_func(ATreeModelFilter: PGtkTreeModelFilter; func: TGtkTreeModelFilterVisibleFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_tree_model_foreach(ATreeModel: PGtkTreeModel; func: TGtkTreeModelForeachFunc; user_data: gpointer); cdecl; external;
procedure gtk_tree_model_get(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter; args: array of const); cdecl; external;
procedure gtk_tree_model_get_valist(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter; var_args: Tva_list); cdecl; external;
procedure gtk_tree_model_get_value(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; external;
procedure gtk_tree_model_ref_node(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter); cdecl; external;
procedure gtk_tree_model_row_changed(ATreeModel: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl; external;
procedure gtk_tree_model_row_deleted(ATreeModel: PGtkTreeModel; path: PGtkTreePath); cdecl; external;
procedure gtk_tree_model_row_has_child_toggled(ATreeModel: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl; external;
procedure gtk_tree_model_row_inserted(ATreeModel: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter); cdecl; external;
procedure gtk_tree_model_rows_reordered(ATreeModel: PGtkTreeModel; path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl; external;
procedure gtk_tree_model_sort_clear_cache(ATreeModelSort: PGtkTreeModelSort); cdecl; external;
procedure gtk_tree_model_sort_convert_iter_to_child_iter(ATreeModelSort: PGtkTreeModelSort; child_iter: PGtkTreeIter; sorted_iter: PGtkTreeIter); cdecl; external;
procedure gtk_tree_model_sort_reset_default_sort_func(ATreeModelSort: PGtkTreeModelSort); cdecl; external;
procedure gtk_tree_model_unref_node(ATreeModel: PGtkTreeModel; iter: PGtkTreeIter); cdecl; external;
procedure gtk_tree_path_append_index(ATreePath: PGtkTreePath; index_: gint); cdecl; external;
procedure gtk_tree_path_down(ATreePath: PGtkTreePath); cdecl; external;
procedure gtk_tree_path_free(ATreePath: PGtkTreePath); cdecl; external;
procedure gtk_tree_path_next(ATreePath: PGtkTreePath); cdecl; external;
procedure gtk_tree_path_prepend_index(ATreePath: PGtkTreePath; index_: gint); cdecl; external;
procedure gtk_tree_row_reference_deleted(proxy: PGObject; path: PGtkTreePath); cdecl; external;
procedure gtk_tree_row_reference_free(ATreeRowReference: PGtkTreeRowReference); cdecl; external;
procedure gtk_tree_row_reference_inserted(proxy: PGObject; path: PGtkTreePath); cdecl; external;
procedure gtk_tree_row_reference_reordered(proxy: PGObject; path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl; external;
procedure gtk_tree_selection_select_all(ATreeSelection: PGtkTreeSelection); cdecl; external;
procedure gtk_tree_selection_select_iter(ATreeSelection: PGtkTreeSelection; iter: PGtkTreeIter); cdecl; external;
procedure gtk_tree_selection_select_path(ATreeSelection: PGtkTreeSelection; path: PGtkTreePath); cdecl; external;
procedure gtk_tree_selection_select_range(ATreeSelection: PGtkTreeSelection; start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl; external;
procedure gtk_tree_selection_selected_foreach(ATreeSelection: PGtkTreeSelection; func: TGtkTreeSelectionForeachFunc; data: gpointer); cdecl; external;
procedure gtk_tree_selection_set_mode(ATreeSelection: PGtkTreeSelection; type_: TGtkSelectionMode); cdecl; external;
procedure gtk_tree_selection_set_select_function(ATreeSelection: PGtkTreeSelection; func: TGtkTreeSelectionFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_tree_selection_unselect_all(ATreeSelection: PGtkTreeSelection); cdecl; external;
procedure gtk_tree_selection_unselect_iter(ATreeSelection: PGtkTreeSelection; iter: PGtkTreeIter); cdecl; external;
procedure gtk_tree_selection_unselect_path(ATreeSelection: PGtkTreeSelection; path: PGtkTreePath); cdecl; external;
procedure gtk_tree_selection_unselect_range(ATreeSelection: PGtkTreeSelection; start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl; external;
procedure gtk_tree_sortable_set_default_sort_func(ATreeSortable: PGtkTreeSortable; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_tree_sortable_set_sort_column_id(ATreeSortable: PGtkTreeSortable; sort_column_id: gint; order: TGtkSortType); cdecl; external;
procedure gtk_tree_sortable_set_sort_func(ATreeSortable: PGtkTreeSortable; sort_column_id: gint; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_tree_sortable_sort_column_changed(ATreeSortable: PGtkTreeSortable); cdecl; external;
procedure gtk_tree_store_append(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl; external;
procedure gtk_tree_store_clear(ATreeStore: PGtkTreeStore); cdecl; external;
procedure gtk_tree_store_insert(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint); cdecl; external;
procedure gtk_tree_store_insert_after(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; external;
procedure gtk_tree_store_insert_before(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl; external;
procedure gtk_tree_store_insert_with_values(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint; args: array of const); cdecl; external;
procedure gtk_tree_store_insert_with_valuesv(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl; external;
procedure gtk_tree_store_move_after(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; external;
procedure gtk_tree_store_move_before(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; position: PGtkTreeIter); cdecl; external;
procedure gtk_tree_store_prepend(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl; external;
procedure gtk_tree_store_reorder(ATreeStore: PGtkTreeStore; parent: PGtkTreeIter; new_order: Pgint); cdecl; external;
procedure gtk_tree_store_set(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; args: array of const); cdecl; external;
procedure gtk_tree_store_set_column_types(ATreeStore: PGtkTreeStore; n_columns: gint; types: PGType); cdecl; external;
procedure gtk_tree_store_set_valist(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; var_args: Tva_list); cdecl; external;
procedure gtk_tree_store_set_value(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; column: gint; value: PGValue); cdecl; external;
procedure gtk_tree_store_set_valuesv(ATreeStore: PGtkTreeStore; iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl; external;
procedure gtk_tree_store_swap(ATreeStore: PGtkTreeStore; a: PGtkTreeIter; b: PGtkTreeIter); cdecl; external;
procedure gtk_tree_view_collapse_all(ATreeView: PGtkTreeView); cdecl; external;
procedure gtk_tree_view_column_add_attribute(ATreeViewColumn: PGtkTreeViewColumn; cell_renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl; external;
procedure gtk_tree_view_column_cell_get_size(ATreeViewColumn: PGtkTreeViewColumn; cell_area: PGdkRectangle; x_offset: Pgint; y_offset: Pgint; width: Pgint; height: Pgint); cdecl; external;
procedure gtk_tree_view_column_cell_set_cell_data(ATreeViewColumn: PGtkTreeViewColumn; tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl; external;
procedure gtk_tree_view_column_clear(ATreeViewColumn: PGtkTreeViewColumn); cdecl; external;
procedure gtk_tree_view_column_clear_attributes(ATreeViewColumn: PGtkTreeViewColumn; cell_renderer: PGtkCellRenderer); cdecl; external;
procedure gtk_tree_view_column_clicked(ATreeViewColumn: PGtkTreeViewColumn); cdecl; external;
procedure gtk_tree_view_column_focus_cell(ATreeViewColumn: PGtkTreeViewColumn; cell: PGtkCellRenderer); cdecl; external;
procedure gtk_tree_view_column_pack_end(ATreeViewColumn: PGtkTreeViewColumn; cell: PGtkCellRenderer; expand: gboolean); cdecl; external;
procedure gtk_tree_view_column_pack_start(ATreeViewColumn: PGtkTreeViewColumn; cell: PGtkCellRenderer; expand: gboolean); cdecl; external;
procedure gtk_tree_view_column_queue_resize(ATreeViewColumn: PGtkTreeViewColumn); cdecl; external;
procedure gtk_tree_view_column_set_alignment(ATreeViewColumn: PGtkTreeViewColumn; xalign: gfloat); cdecl; external;
procedure gtk_tree_view_column_set_attributes(ATreeViewColumn: PGtkTreeViewColumn; cell_renderer: PGtkCellRenderer; args: array of const); cdecl; external;
procedure gtk_tree_view_column_set_cell_data_func(ATreeViewColumn: PGtkTreeViewColumn; cell_renderer: PGtkCellRenderer; func: TGtkTreeCellDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_tree_view_column_set_clickable(ATreeViewColumn: PGtkTreeViewColumn; clickable: gboolean); cdecl; external;
procedure gtk_tree_view_column_set_expand(ATreeViewColumn: PGtkTreeViewColumn; expand: gboolean); cdecl; external;
procedure gtk_tree_view_column_set_fixed_width(ATreeViewColumn: PGtkTreeViewColumn; fixed_width: gint); cdecl; external;
procedure gtk_tree_view_column_set_max_width(ATreeViewColumn: PGtkTreeViewColumn; max_width: gint); cdecl; external;
procedure gtk_tree_view_column_set_min_width(ATreeViewColumn: PGtkTreeViewColumn; min_width: gint); cdecl; external;
procedure gtk_tree_view_column_set_reorderable(ATreeViewColumn: PGtkTreeViewColumn; reorderable: gboolean); cdecl; external;
procedure gtk_tree_view_column_set_resizable(ATreeViewColumn: PGtkTreeViewColumn; resizable: gboolean); cdecl; external;
procedure gtk_tree_view_column_set_sizing(ATreeViewColumn: PGtkTreeViewColumn; type_: TGtkTreeViewColumnSizing); cdecl; external;
procedure gtk_tree_view_column_set_sort_column_id(ATreeViewColumn: PGtkTreeViewColumn; sort_column_id: gint); cdecl; external;
procedure gtk_tree_view_column_set_sort_indicator(ATreeViewColumn: PGtkTreeViewColumn; setting: gboolean); cdecl; external;
procedure gtk_tree_view_column_set_sort_order(ATreeViewColumn: PGtkTreeViewColumn; order: TGtkSortType); cdecl; external;
procedure gtk_tree_view_column_set_spacing(ATreeViewColumn: PGtkTreeViewColumn; spacing: gint); cdecl; external;
procedure gtk_tree_view_column_set_title(ATreeViewColumn: PGtkTreeViewColumn; title: Pgchar); cdecl; external;
procedure gtk_tree_view_column_set_visible(ATreeViewColumn: PGtkTreeViewColumn; visible: gboolean); cdecl; external;
procedure gtk_tree_view_column_set_widget(ATreeViewColumn: PGtkTreeViewColumn; widget: PGtkWidget); cdecl; external;
procedure gtk_tree_view_columns_autosize(ATreeView: PGtkTreeView); cdecl; external;
procedure gtk_tree_view_convert_bin_window_to_tree_coords(ATreeView: PGtkTreeView; bx: gint; by: gint; tx: Pgint; ty: Pgint); cdecl; external;
procedure gtk_tree_view_convert_bin_window_to_widget_coords(ATreeView: PGtkTreeView; bx: gint; by: gint; wx: Pgint; wy: Pgint); cdecl; external;
procedure gtk_tree_view_convert_tree_to_bin_window_coords(ATreeView: PGtkTreeView; tx: gint; ty: gint; bx: Pgint; by: Pgint); cdecl; external;
procedure gtk_tree_view_convert_tree_to_widget_coords(ATreeView: PGtkTreeView; tx: gint; ty: gint; wx: Pgint; wy: Pgint); cdecl; external;
procedure gtk_tree_view_convert_widget_to_bin_window_coords(ATreeView: PGtkTreeView; wx: gint; wy: gint; bx: Pgint; by: Pgint); cdecl; external;
procedure gtk_tree_view_convert_widget_to_tree_coords(ATreeView: PGtkTreeView; wx: gint; wy: gint; tx: Pgint; ty: Pgint); cdecl; external;
procedure gtk_tree_view_enable_model_drag_dest(ATreeView: PGtkTreeView; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; external;
procedure gtk_tree_view_enable_model_drag_source(ATreeView: PGtkTreeView; start_button_mask: TGdkModifierType; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl; external;
procedure gtk_tree_view_expand_all(ATreeView: PGtkTreeView); cdecl; external;
procedure gtk_tree_view_expand_to_path(ATreeView: PGtkTreeView; path: PGtkTreePath); cdecl; external;
procedure gtk_tree_view_get_background_area(ATreeView: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl; external;
procedure gtk_tree_view_get_cell_area(ATreeView: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl; external;
procedure gtk_tree_view_get_cursor(ATreeView: PGtkTreeView; path: PPGtkTreePath; focus_column: PPGtkTreeViewColumn); cdecl; external;
procedure gtk_tree_view_get_drag_dest_row(ATreeView: PGtkTreeView; path: PPGtkTreePath; pos: PGtkTreeViewDropPosition); cdecl; external;
procedure gtk_tree_view_get_visible_rect(ATreeView: PGtkTreeView; visible_rect: PGdkRectangle); cdecl; external;
procedure gtk_tree_view_map_expanded_rows(ATreeView: PGtkTreeView; func: TGtkTreeViewMappingFunc; data: gpointer); cdecl; external;
procedure gtk_tree_view_move_column_after(ATreeView: PGtkTreeView; column: PGtkTreeViewColumn; base_column: PGtkTreeViewColumn); cdecl; external;
procedure gtk_tree_view_row_activated(ATreeView: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn); cdecl; external;
procedure gtk_tree_view_scroll_to_cell(ATreeView: PGtkTreeView; path: PGtkTreePath; column: PGtkTreeViewColumn; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl; external;
procedure gtk_tree_view_scroll_to_point(ATreeView: PGtkTreeView; tree_x: gint; tree_y: gint); cdecl; external;
procedure gtk_tree_view_set_column_drag_function(ATreeView: PGtkTreeView; func: TGtkTreeViewColumnDropFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_tree_view_set_cursor(ATreeView: PGtkTreeView; path: PGtkTreePath; focus_column: PGtkTreeViewColumn; start_editing: gboolean); cdecl; external;
procedure gtk_tree_view_set_cursor_on_cell(ATreeView: PGtkTreeView; path: PGtkTreePath; focus_column: PGtkTreeViewColumn; focus_cell: PGtkCellRenderer; start_editing: gboolean); cdecl; external;
procedure gtk_tree_view_set_destroy_count_func(ATreeView: PGtkTreeView; func: TGtkTreeDestroyCountFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_tree_view_set_drag_dest_row(ATreeView: PGtkTreeView; path: PGtkTreePath; pos: TGtkTreeViewDropPosition); cdecl; external;
procedure gtk_tree_view_set_enable_search(ATreeView: PGtkTreeView; enable_search: gboolean); cdecl; external;
procedure gtk_tree_view_set_enable_tree_lines(ATreeView: PGtkTreeView; enabled: gboolean); cdecl; external;
procedure gtk_tree_view_set_expander_column(ATreeView: PGtkTreeView; column: PGtkTreeViewColumn); cdecl; external;
procedure gtk_tree_view_set_fixed_height_mode(ATreeView: PGtkTreeView; enable: gboolean); cdecl; external;
procedure gtk_tree_view_set_grid_lines(ATreeView: PGtkTreeView; grid_lines: TGtkTreeViewGridLines); cdecl; external;
procedure gtk_tree_view_set_headers_clickable(ATreeView: PGtkTreeView; setting: gboolean); cdecl; external;
procedure gtk_tree_view_set_headers_visible(ATreeView: PGtkTreeView; headers_visible: gboolean); cdecl; external;
procedure gtk_tree_view_set_hover_expand(ATreeView: PGtkTreeView; expand: gboolean); cdecl; external;
procedure gtk_tree_view_set_hover_selection(ATreeView: PGtkTreeView; hover: gboolean); cdecl; external;
procedure gtk_tree_view_set_level_indentation(ATreeView: PGtkTreeView; indentation: gint); cdecl; external;
procedure gtk_tree_view_set_model(ATreeView: PGtkTreeView; model: PGtkTreeModel); cdecl; external;
procedure gtk_tree_view_set_reorderable(ATreeView: PGtkTreeView; reorderable: gboolean); cdecl; external;
procedure gtk_tree_view_set_row_separator_func(ATreeView: PGtkTreeView; func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_tree_view_set_rubber_banding(ATreeView: PGtkTreeView; enable: gboolean); cdecl; external;
procedure gtk_tree_view_set_rules_hint(ATreeView: PGtkTreeView; setting: gboolean); cdecl; external;
procedure gtk_tree_view_set_search_column(ATreeView: PGtkTreeView; column: gint); cdecl; external;
procedure gtk_tree_view_set_search_entry(ATreeView: PGtkTreeView; entry: PGtkEntry); cdecl; external;
procedure gtk_tree_view_set_search_equal_func(ATreeView: PGtkTreeView; search_equal_func: TGtkTreeViewSearchEqualFunc; search_user_data: gpointer; search_destroy: TGDestroyNotify); cdecl; external;
procedure gtk_tree_view_set_search_position_func(ATreeView: PGtkTreeView; func: TGtkTreeViewSearchPositionFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl; external;
procedure gtk_tree_view_set_show_expanders(ATreeView: PGtkTreeView; enabled: gboolean); cdecl; external;
procedure gtk_tree_view_set_tooltip_cell(ATreeView: PGtkTreeView; tooltip: PGtkTooltip; path: PGtkTreePath; column: PGtkTreeViewColumn; cell: PGtkCellRenderer); cdecl; external;
procedure gtk_tree_view_set_tooltip_column(ATreeView: PGtkTreeView; column: gint); cdecl; external;
procedure gtk_tree_view_set_tooltip_row(ATreeView: PGtkTreeView; tooltip: PGtkTooltip; path: PGtkTreePath); cdecl; external;
procedure gtk_tree_view_unset_rows_drag_dest(ATreeView: PGtkTreeView); cdecl; external;
procedure gtk_tree_view_unset_rows_drag_source(ATreeView: PGtkTreeView); cdecl; external;
procedure gtk_ui_manager_add_ui(AUIManager: PGtkUIManager; merge_id: guint; path: Pgchar; name: Pgchar; action: Pgchar; type_: TGtkUIManagerItemType; top: gboolean); cdecl; external;
procedure gtk_ui_manager_ensure_update(AUIManager: PGtkUIManager); cdecl; external;
procedure gtk_ui_manager_insert_action_group(AUIManager: PGtkUIManager; action_group: PGtkActionGroup; pos: gint); cdecl; external;
procedure gtk_ui_manager_remove_action_group(AUIManager: PGtkUIManager; action_group: PGtkActionGroup); cdecl; external;
procedure gtk_ui_manager_remove_ui(AUIManager: PGtkUIManager; merge_id: guint); cdecl; external;
procedure gtk_ui_manager_set_add_tearoffs(AUIManager: PGtkUIManager; add_tearoffs: gboolean); cdecl; external;
procedure gtk_viewport_set_shadow_type(AViewport: PGtkViewport; type_: TGtkShadowType); cdecl; external;
procedure gtk_widget_add_accelerator(AWidget: PGtkWidget; accel_signal: Pgchar; accel_group: PGtkAccelGroup; accel_key: guint; accel_mods: TGdkModifierType; accel_flags: TGtkAccelFlags); cdecl; external;
procedure gtk_widget_add_device_events(AWidget: PGtkWidget; device: PGdkDevice; events: TGdkEventMask); cdecl; external;
procedure gtk_widget_add_events(AWidget: PGtkWidget; events: gint); cdecl; external;
procedure gtk_widget_add_mnemonic_label(AWidget: PGtkWidget; label_: PGtkWidget); cdecl; external;
procedure gtk_widget_child_notify(AWidget: PGtkWidget; child_property: Pgchar); cdecl; external;
procedure gtk_widget_class_install_style_property(AWidgetClass: PGtkWidgetClass; pspec: PGParamSpec); cdecl; external;
procedure gtk_widget_class_install_style_property_parser(AWidgetClass: PGtkWidgetClass; pspec: PGParamSpec; parser: TGtkRcPropertyParser); cdecl; external;
procedure gtk_widget_class_path(AWidget: PGtkWidget; path_length: Pguint; path: PPgchar; path_reversed: PPgchar); cdecl; external;
procedure gtk_widget_class_set_accessible_role(AWidgetClass: PGtkWidgetClass; role: TAtkRole); cdecl; external;
procedure gtk_widget_class_set_accessible_type(AWidgetClass: PGtkWidgetClass; type_: TGType); cdecl; external;
procedure gtk_widget_destroy(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_destroyed(AWidget: PGtkWidget; widget_pointer: PPGtkWidget); cdecl; external;
procedure gtk_widget_draw(AWidget: PGtkWidget; cr: Pcairo_t); cdecl; external;
procedure gtk_widget_ensure_style(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_error_bell(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_freeze_child_notify(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_get_allocation(AWidget: PGtkWidget; allocation: PGtkAllocation); cdecl; external;
procedure gtk_widget_get_pointer(AWidget: PGtkWidget; x: Pgint; y: Pgint); cdecl; external;
procedure gtk_widget_get_preferred_height(AWidget: PGtkWidget; minimum_height: Pgint; natural_height: Pgint); cdecl; external;
procedure gtk_widget_get_preferred_height_for_width(AWidget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl; external;
procedure gtk_widget_get_preferred_size(AWidget: PGtkWidget; minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl; external;
procedure gtk_widget_get_preferred_width(AWidget: PGtkWidget; minimum_width: Pgint; natural_width: Pgint); cdecl; external;
procedure gtk_widget_get_preferred_width_for_height(AWidget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl; external;
procedure gtk_widget_get_size_request(AWidget: PGtkWidget; width: Pgint; height: Pgint); cdecl; external;
procedure gtk_widget_grab_default(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_grab_focus(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_hide(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_input_shape_combine_region(AWidget: PGtkWidget; region: Pcairo_region_t); cdecl; external;
procedure gtk_widget_map(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_modify_base(AWidget: PGtkWidget; state: TGtkStateType; color: PGdkColor); cdecl; external;
procedure gtk_widget_modify_bg(AWidget: PGtkWidget; state: TGtkStateType; color: PGdkColor); cdecl; external;
procedure gtk_widget_modify_cursor(AWidget: PGtkWidget; primary: PGdkColor; secondary: PGdkColor); cdecl; external;
procedure gtk_widget_modify_fg(AWidget: PGtkWidget; state: TGtkStateType; color: PGdkColor); cdecl; external;
procedure gtk_widget_modify_font(AWidget: PGtkWidget; font_desc: PPangoFontDescription); cdecl; external;
procedure gtk_widget_modify_style(AWidget: PGtkWidget; style: PGtkRcStyle); cdecl; external;
procedure gtk_widget_modify_text(AWidget: PGtkWidget; state: TGtkStateType; color: PGdkColor); cdecl; external;
procedure gtk_widget_override_background_color(AWidget: PGtkWidget; state: TGtkStateFlags; color: PGdkRGBA); cdecl; external;
procedure gtk_widget_override_color(AWidget: PGtkWidget; state: TGtkStateFlags; color: PGdkRGBA); cdecl; external;
procedure gtk_widget_override_cursor(AWidget: PGtkWidget; cursor: PGdkRGBA; secondary_cursor: PGdkRGBA); cdecl; external;
procedure gtk_widget_override_font(AWidget: PGtkWidget; font_desc: PPangoFontDescription); cdecl; external;
procedure gtk_widget_override_symbolic_color(AWidget: PGtkWidget; name: Pgchar; color: PGdkRGBA); cdecl; external;
procedure gtk_widget_path(AWidget: PGtkWidget; path_length: Pguint; path: PPgchar; path_reversed: PPgchar); cdecl; external;
procedure gtk_widget_path_free(AWidgetPath: PGtkWidgetPath); cdecl; external;
procedure gtk_widget_path_iter_add_class(AWidgetPath: PGtkWidgetPath; pos: gint; name: Pgchar); cdecl; external;
procedure gtk_widget_path_iter_add_region(AWidgetPath: PGtkWidgetPath; pos: gint; name: Pgchar; flags: TGtkRegionFlags); cdecl; external;
procedure gtk_widget_path_iter_clear_classes(AWidgetPath: PGtkWidgetPath; pos: gint); cdecl; external;
procedure gtk_widget_path_iter_clear_regions(AWidgetPath: PGtkWidgetPath; pos: gint); cdecl; external;
procedure gtk_widget_path_iter_remove_class(AWidgetPath: PGtkWidgetPath; pos: gint; name: Pgchar); cdecl; external;
procedure gtk_widget_path_iter_remove_region(AWidgetPath: PGtkWidgetPath; pos: gint; name: Pgchar); cdecl; external;
procedure gtk_widget_path_iter_set_name(AWidgetPath: PGtkWidgetPath; pos: gint; name: Pgchar); cdecl; external;
procedure gtk_widget_path_iter_set_object_type(AWidgetPath: PGtkWidgetPath; pos: gint; type_: TGType); cdecl; external;
procedure gtk_widget_path_prepend_type(AWidgetPath: PGtkWidgetPath; type_: TGType); cdecl; external;
procedure gtk_widget_path_unref(AWidgetPath: PGtkWidgetPath); cdecl; external;
procedure gtk_widget_pop_composite_child; cdecl; external;
procedure gtk_widget_push_composite_child; cdecl; external;
procedure gtk_widget_queue_compute_expand(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_queue_draw(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_queue_draw_area(AWidget: PGtkWidget; x: gint; y: gint; width: gint; height: gint); cdecl; external;
procedure gtk_widget_queue_draw_region(AWidget: PGtkWidget; region: Pcairo_region_t); cdecl; external;
procedure gtk_widget_queue_resize(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_queue_resize_no_redraw(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_realize(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_remove_mnemonic_label(AWidget: PGtkWidget; label_: PGtkWidget); cdecl; external;
procedure gtk_widget_reparent(AWidget: PGtkWidget; new_parent: PGtkWidget); cdecl; external;
procedure gtk_widget_reset_rc_styles(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_reset_style(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_set_accel_path(AWidget: PGtkWidget; accel_path: Pgchar; accel_group: PGtkAccelGroup); cdecl; external;
procedure gtk_widget_set_allocation(AWidget: PGtkWidget; allocation: PGtkAllocation); cdecl; external;
procedure gtk_widget_set_app_paintable(AWidget: PGtkWidget; app_paintable: gboolean); cdecl; external;
procedure gtk_widget_set_can_default(AWidget: PGtkWidget; can_default: gboolean); cdecl; external;
procedure gtk_widget_set_can_focus(AWidget: PGtkWidget; can_focus: gboolean); cdecl; external;
procedure gtk_widget_set_child_visible(AWidget: PGtkWidget; is_visible: gboolean); cdecl; external;
procedure gtk_widget_set_composite_name(AWidget: PGtkWidget; name: Pgchar); cdecl; external;
procedure gtk_widget_set_default_direction(dir: TGtkTextDirection); cdecl; external;
procedure gtk_widget_set_device_enabled(AWidget: PGtkWidget; device: PGdkDevice; enabled: gboolean); cdecl; external;
procedure gtk_widget_set_device_events(AWidget: PGtkWidget; device: PGdkDevice; events: TGdkEventMask); cdecl; external;
procedure gtk_widget_set_direction(AWidget: PGtkWidget; dir: TGtkTextDirection); cdecl; external;
procedure gtk_widget_set_double_buffered(AWidget: PGtkWidget; double_buffered: gboolean); cdecl; external;
procedure gtk_widget_set_events(AWidget: PGtkWidget; events: gint); cdecl; external;
procedure gtk_widget_set_halign(AWidget: PGtkWidget; align: TGtkAlign); cdecl; external;
procedure gtk_widget_set_has_tooltip(AWidget: PGtkWidget; has_tooltip: gboolean); cdecl; external;
procedure gtk_widget_set_has_window(AWidget: PGtkWidget; has_window: gboolean); cdecl; external;
procedure gtk_widget_set_hexpand(AWidget: PGtkWidget; expand: gboolean); cdecl; external;
procedure gtk_widget_set_hexpand_set(AWidget: PGtkWidget; set_: gboolean); cdecl; external;
procedure gtk_widget_set_mapped(AWidget: PGtkWidget; mapped: gboolean); cdecl; external;
procedure gtk_widget_set_margin_bottom(AWidget: PGtkWidget; margin: gint); cdecl; external;
procedure gtk_widget_set_margin_left(AWidget: PGtkWidget; margin: gint); cdecl; external;
procedure gtk_widget_set_margin_right(AWidget: PGtkWidget; margin: gint); cdecl; external;
procedure gtk_widget_set_margin_top(AWidget: PGtkWidget; margin: gint); cdecl; external;
procedure gtk_widget_set_name(AWidget: PGtkWidget; name: Pgchar); cdecl; external;
procedure gtk_widget_set_no_show_all(AWidget: PGtkWidget; no_show_all: gboolean); cdecl; external;
procedure gtk_widget_set_parent(AWidget: PGtkWidget; parent: PGtkWidget); cdecl; external;
procedure gtk_widget_set_parent_window(AWidget: PGtkWidget; parent_window: PGdkWindow); cdecl; external;
procedure gtk_widget_set_realized(AWidget: PGtkWidget; realized: gboolean); cdecl; external;
procedure gtk_widget_set_receives_default(AWidget: PGtkWidget; receives_default: gboolean); cdecl; external;
procedure gtk_widget_set_redraw_on_allocate(AWidget: PGtkWidget; redraw_on_allocate: gboolean); cdecl; external;
procedure gtk_widget_set_sensitive(AWidget: PGtkWidget; sensitive: gboolean); cdecl; external;
procedure gtk_widget_set_size_request(AWidget: PGtkWidget; width: gint; height: gint); cdecl; external;
procedure gtk_widget_set_state(AWidget: PGtkWidget; state: TGtkStateType); cdecl; external;
procedure gtk_widget_set_state_flags(AWidget: PGtkWidget; flags: TGtkStateFlags; clear: gboolean); cdecl; external;
procedure gtk_widget_set_style(AWidget: PGtkWidget; style: PGtkStyle); cdecl; external;
procedure gtk_widget_set_support_multidevice(AWidget: PGtkWidget; support_multidevice: gboolean); cdecl; external;
procedure gtk_widget_set_tooltip_markup(AWidget: PGtkWidget; markup: Pgchar); cdecl; external;
procedure gtk_widget_set_tooltip_text(AWidget: PGtkWidget; text: Pgchar); cdecl; external;
procedure gtk_widget_set_tooltip_window(AWidget: PGtkWidget; custom_window: PAtkWindow); cdecl; external;
procedure gtk_widget_set_valign(AWidget: PGtkWidget; align: TGtkAlign); cdecl; external;
procedure gtk_widget_set_vexpand(AWidget: PGtkWidget; expand: gboolean); cdecl; external;
procedure gtk_widget_set_vexpand_set(AWidget: PGtkWidget; set_: gboolean); cdecl; external;
procedure gtk_widget_set_visible(AWidget: PGtkWidget; visible: gboolean); cdecl; external;
procedure gtk_widget_set_visual(AWidget: PGtkWidget; visual: PGdkVisual); cdecl; external;
procedure gtk_widget_set_window(AWidget: PGtkWidget; window: PGdkWindow); cdecl; external;
procedure gtk_widget_shape_combine_region(AWidget: PGtkWidget; region: Pcairo_region_t); cdecl; external;
procedure gtk_widget_show(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_show_all(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_show_now(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_size_allocate(AWidget: PGtkWidget; allocation: PGtkAllocation); cdecl; external;
procedure gtk_widget_style_attach(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_style_get(AWidget: PGtkWidget; first_property_name: Pgchar; args: array of const); cdecl; external;
procedure gtk_widget_style_get_property(AWidget: PGtkWidget; property_name: Pgchar; value: PGValue); cdecl; external;
procedure gtk_widget_style_get_valist(AWidget: PGtkWidget; first_property_name: Pgchar; var_args: Tva_list); cdecl; external;
procedure gtk_widget_thaw_child_notify(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_trigger_tooltip_query(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_unmap(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_unparent(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_unrealize(AWidget: PGtkWidget); cdecl; external;
procedure gtk_widget_unset_state_flags(AWidget: PGtkWidget; flags: TGtkStateFlags); cdecl; external;
procedure gtk_window_add_accel_group(AWindow: PGtkWindow; accel_group: PGtkAccelGroup); cdecl; external;
procedure gtk_window_add_mnemonic(AWindow: PGtkWindow; keyval: guint; target: PGtkWidget); cdecl; external;
procedure gtk_window_begin_move_drag(AWindow: PGtkWindow; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; external;
procedure gtk_window_begin_resize_drag(AWindow: PGtkWindow; edge: TGdkWindowEdge; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl; external;
procedure gtk_window_deiconify(AWindow: PGtkWindow); cdecl; external;
procedure gtk_window_fullscreen(AWindow: PGtkWindow); cdecl; external;
procedure gtk_window_get_default_size(AWindow: PGtkWindow; width: Pgint; height: Pgint); cdecl; external;
procedure gtk_window_get_position(AWindow: PGtkWindow; root_x: Pgint; root_y: Pgint); cdecl; external;
procedure gtk_window_get_size(AWindow: PGtkWindow; width: Pgint; height: Pgint); cdecl; external;
procedure gtk_window_group_add_window(AWindowGroup: PGtkWindowGroup; window: PGtkWindow); cdecl; external;
procedure gtk_window_group_remove_window(AWindowGroup: PGtkWindowGroup; window: PGtkWindow); cdecl; external;
procedure gtk_window_iconify(AWindow: PGtkWindow); cdecl; external;
procedure gtk_window_maximize(AWindow: PGtkWindow); cdecl; external;
procedure gtk_window_move(AWindow: PGtkWindow; x: gint; y: gint); cdecl; external;
procedure gtk_window_present(AWindow: PGtkWindow); cdecl; external;
procedure gtk_window_present_with_time(AWindow: PGtkWindow; timestamp: guint32); cdecl; external;
procedure gtk_window_remove_accel_group(AWindow: PGtkWindow; accel_group: PGtkAccelGroup); cdecl; external;
procedure gtk_window_remove_mnemonic(AWindow: PGtkWindow; keyval: guint; target: PGtkWidget); cdecl; external;
procedure gtk_window_reshow_with_initial_size(AWindow: PGtkWindow); cdecl; external;
procedure gtk_window_resize(AWindow: PGtkWindow; width: gint; height: gint); cdecl; external;
procedure gtk_window_resize_to_geometry(AWindow: PGtkWindow; width: gint; height: gint); cdecl; external;
procedure gtk_window_set_accept_focus(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_application(AWindow: PGtkWindow; application: PGtkApplication); cdecl; external;
procedure gtk_window_set_auto_startup_notification(setting: gboolean); cdecl; external;
procedure gtk_window_set_decorated(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_default(AWindow: PGtkWindow; default_widget: PGtkWidget); cdecl; external;
procedure gtk_window_set_default_geometry(AWindow: PGtkWindow; width: gint; height: gint); cdecl; external;
procedure gtk_window_set_default_icon(icon: PGdkPixbuf); cdecl; external;
procedure gtk_window_set_default_icon_list(list: PGList); cdecl; external;
procedure gtk_window_set_default_icon_name(name: Pgchar); cdecl; external;
procedure gtk_window_set_default_size(AWindow: PGtkWindow; width: gint; height: gint); cdecl; external;
procedure gtk_window_set_deletable(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_destroy_with_parent(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_focus(AWindow: PGtkWindow; focus: PGtkWidget); cdecl; external;
procedure gtk_window_set_focus_on_map(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_focus_visible(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_geometry_hints(AWindow: PGtkWindow; geometry_widget: PGtkWidget; geometry: PGdkGeometry; geom_mask: TGdkWindowHints); cdecl; external;
procedure gtk_window_set_gravity(AWindow: PGtkWindow; gravity: TGdkGravity); cdecl; external;
procedure gtk_window_set_has_resize_grip(AWindow: PGtkWindow; value: gboolean); cdecl; external;
procedure gtk_window_set_has_user_ref_count(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_icon(AWindow: PGtkWindow; icon: PGdkPixbuf); cdecl; external;
procedure gtk_window_set_icon_list(AWindow: PGtkWindow; list: PGList); cdecl; external;
procedure gtk_window_set_icon_name(AWindow: PGtkWindow; name: Pgchar); cdecl; external;
procedure gtk_window_set_keep_above(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_keep_below(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_mnemonic_modifier(AWindow: PGtkWindow; modifier: TGdkModifierType); cdecl; external;
procedure gtk_window_set_mnemonics_visible(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_modal(AWindow: PGtkWindow; modal: gboolean); cdecl; external;
procedure gtk_window_set_opacity(AWindow: PGtkWindow; opacity: gdouble); cdecl; external;
procedure gtk_window_set_position(AWindow: PGtkWindow; position: TGtkWindowPosition); cdecl; external;
procedure gtk_window_set_resizable(AWindow: PGtkWindow; resizable: gboolean); cdecl; external;
procedure gtk_window_set_role(AWindow: PGtkWindow; role: Pgchar); cdecl; external;
procedure gtk_window_set_screen(AWindow: PGtkWindow; screen: PGdkScreen); cdecl; external;
procedure gtk_window_set_skip_pager_hint(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_skip_taskbar_hint(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_startup_id(AWindow: PGtkWindow; startup_id: Pgchar); cdecl; external;
procedure gtk_window_set_title(AWindow: PGtkWindow; title: Pgchar); cdecl; external;
procedure gtk_window_set_transient_for(AWindow: PGtkWindow; parent: PAtkWindow); cdecl; external;
procedure gtk_window_set_type_hint(AWindow: PGtkWindow; hint: TGdkWindowTypeHint); cdecl; external;
procedure gtk_window_set_urgency_hint(AWindow: PGtkWindow; setting: gboolean); cdecl; external;
procedure gtk_window_set_wmclass(AWindow: PGtkWindow; wmclass_name: Pgchar; wmclass_class: Pgchar); cdecl; external;
procedure gtk_window_stick(AWindow: PGtkWindow); cdecl; external;
procedure gtk_window_unfullscreen(AWindow: PGtkWindow); cdecl; external;
procedure gtk_window_unmaximize(AWindow: PGtkWindow); cdecl; external;
procedure gtk_window_unstick(AWindow: PGtkWindow); cdecl; external;
implementation
procedure TGtkBuildable.add_child(builder: PGtkBuilder; child: PGObject; type_: Pgchar); cdecl;
begin
  Gtk3.gtk_buildable_add_child(@self, builder, child, type_);
end;

function TGtkBuildable.construct_child(builder: PGtkBuilder; name: Pgchar): PGObject; cdecl;
begin
  Result := Gtk3.gtk_buildable_construct_child(@self, builder, name);
end;

procedure TGtkBuildable.custom_finished(builder: PGtkBuilder; child: PGObject; tagname: Pgchar; data: gpointer); cdecl;
begin
  Gtk3.gtk_buildable_custom_finished(@self, builder, child, tagname, data);
end;

procedure TGtkBuildable.custom_tag_end(builder: PGtkBuilder; child: PGObject; tagname: Pgchar; data: Pgpointer); cdecl;
begin
  Gtk3.gtk_buildable_custom_tag_end(@self, builder, child, tagname, data);
end;

function TGtkBuildable.custom_tag_start(builder: PGtkBuilder; child: PGObject; tagname: Pgchar; parser: PGMarkupParser; data: Pgpointer): gboolean; cdecl;
begin
  Result := Gtk3.gtk_buildable_custom_tag_start(@self, builder, child, tagname, parser, data);
end;

function TGtkBuildable.get_internal_child(builder: PGtkBuilder; childname: Pgchar): PGObject; cdecl;
begin
  Result := Gtk3.gtk_buildable_get_internal_child(@self, builder, childname);
end;

function TGtkBuildable.get_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_buildable_get_name(@self);
end;

procedure TGtkBuildable.parser_finished(builder: PGtkBuilder); cdecl;
begin
  Gtk3.gtk_buildable_parser_finished(@self, builder);
end;

procedure TGtkBuildable.set_buildable_property(builder: PGtkBuilder; name: Pgchar; value: PGValue); cdecl;
begin
  Gtk3.gtk_buildable_set_buildable_property(@self, builder, name, value);
end;

procedure TGtkBuildable.set_name(name: Pgchar); cdecl;
begin
  Gtk3.gtk_buildable_set_name(@self, name);
end;

function TGtkWidget.get_default_direction: TGtkTextDirection; cdecl;
begin
  Result := Gtk3.gtk_widget_get_default_direction();
end;

function TGtkWidget.get_default_style: PGtkStyle; cdecl;
begin
  Result := Gtk3.gtk_widget_get_default_style();
end;

procedure TGtkWidget.pop_composite_child; cdecl;
begin
  Gtk3.gtk_widget_pop_composite_child();
end;

procedure TGtkWidget.push_composite_child; cdecl;
begin
  Gtk3.gtk_widget_push_composite_child();
end;

procedure TGtkWidget.set_default_direction(dir: TGtkTextDirection); cdecl;
begin
  Gtk3.gtk_widget_set_default_direction(dir);
end;

function TGtkWidget.activate: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_activate(@self);
end;


procedure TGtkWidget.add_accelerator(accel_signal: Pgchar; accel_group: PGtkAccelGroup; accel_key: guint; accel_mods: TGdkModifierType; accel_flags: TGtkAccelFlags); cdecl;
begin
  Gtk3.gtk_widget_add_accelerator(@self, accel_signal, accel_group, accel_key, accel_mods, accel_flags);
end;

procedure TGtkWidget.add_device_events(device: PGdkDevice; events: TGdkEventMask); cdecl;
begin
  Gtk3.gtk_widget_add_device_events(@self, device, events);
end;

procedure TGtkWidget.add_events(events: gint); cdecl;
begin
  Gtk3.gtk_widget_add_events(@self, events);
end;

procedure TGtkWidget.add_mnemonic_label(label_: PGtkWidget); cdecl;
begin
  Gtk3.gtk_widget_add_mnemonic_label(@self, label_);
end;

function TGtkWidget.can_activate_accel(signal_id: guint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_can_activate_accel(@self, signal_id);
end;

function TGtkWidget.child_focus(direction: TGtkDirectionType): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_child_focus(@self, direction);
end;

procedure TGtkWidget.child_notify(child_property: Pgchar); cdecl;
begin
  Gtk3.gtk_widget_child_notify(@self, child_property);
end;

procedure TGtkWidget.class_path(path_length: Pguint; path: PPgchar; path_reversed: PPgchar); cdecl;
begin
  Gtk3.gtk_widget_class_path(@self, path_length, path, path_reversed);
end;

function TGtkWidget.compute_expand(orientation: TGtkOrientation): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_compute_expand(@self, orientation);
end;

function TGtkWidget.create_pango_context: PPangoContext; cdecl;
begin
  Result := Gtk3.gtk_widget_create_pango_context(@self);
end;

function TGtkWidget.create_pango_layout(text: Pgchar): PPangoLayout; cdecl;
begin
  Result := Gtk3.gtk_widget_create_pango_layout(@self, text);
end;

procedure TGtkWidget.destroy_; cdecl;
begin
  Gtk3.gtk_widget_destroy(@self);
end;

procedure TGtkWidget.destroyed(widget_pointer: PPGtkWidget); cdecl;
begin
  Gtk3.gtk_widget_destroyed(@self, widget_pointer);
end;

function TGtkWidget.device_is_shadowed(device: PGdkDevice): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_device_is_shadowed(@self, device);
end;

function TGtkWidget.drag_begin(targets: PGtkTargetList; actions: TGdkDragAction; button: gint; event: PGdkEvent): PGdkDragContext; cdecl;
begin
  Result := Gtk3.gtk_drag_begin(@self, targets, actions, button, event);
end;

function TGtkWidget.drag_check_threshold(start_x: gint; start_y: gint; current_x: gint; current_y: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_drag_check_threshold(@self, start_x, start_y, current_x, current_y);
end;

procedure TGtkWidget.drag_dest_add_image_targets; cdecl;
begin
  Gtk3.gtk_drag_dest_add_image_targets(@self);
end;

procedure TGtkWidget.drag_dest_add_text_targets; cdecl;
begin
  Gtk3.gtk_drag_dest_add_text_targets(@self);
end;

procedure TGtkWidget.drag_dest_add_uri_targets; cdecl;
begin
  Gtk3.gtk_drag_dest_add_uri_targets(@self);
end;

function TGtkWidget.drag_dest_find_target(context: PGdkDragContext; target_list: PGtkTargetList): TGdkAtom; cdecl;
begin
  Result := Gtk3.gtk_drag_dest_find_target(@self, context, target_list);
end;

function TGtkWidget.drag_dest_get_target_list: PGtkTargetList; cdecl;
begin
  Result := Gtk3.gtk_drag_dest_get_target_list(@self);
end;

function TGtkWidget.drag_dest_get_track_motion: gboolean; cdecl;
begin
  Result := Gtk3.gtk_drag_dest_get_track_motion(@self);
end;


procedure TGtkWidget.drag_dest_set(flags: TGtkDestDefaults; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl;
begin
  Gtk3.gtk_drag_dest_set(@self, flags, targets, n_targets, actions);
end;

procedure TGtkWidget.drag_dest_set_proxy(proxy_window: PGdkWindow; protocol: TGdkDragProtocol; use_coordinates: gboolean); cdecl;
begin
  Gtk3.gtk_drag_dest_set_proxy(@self, proxy_window, protocol, use_coordinates);
end;

procedure TGtkWidget.drag_dest_set_target_list(target_list: PGtkTargetList); cdecl;
begin
  Gtk3.gtk_drag_dest_set_target_list(@self, target_list);
end;

procedure TGtkWidget.drag_dest_set_track_motion(track_motion: gboolean); cdecl;
begin
  Gtk3.gtk_drag_dest_set_track_motion(@self, track_motion);
end;

procedure TGtkWidget.drag_dest_unset; cdecl;
begin
  Gtk3.gtk_drag_dest_unset(@self);
end;

procedure TGtkWidget.drag_get_data(context: PGdkDragContext; target: TGdkAtom; time_: guint32); cdecl;
begin
  Gtk3.gtk_drag_get_data(@self, context, target, time_);
end;

procedure TGtkWidget.drag_highlight; cdecl;
begin
  Gtk3.gtk_drag_highlight(@self);
end;

procedure TGtkWidget.drag_source_add_image_targets; cdecl;
begin
  Gtk3.gtk_drag_source_add_image_targets(@self);
end;

procedure TGtkWidget.drag_source_add_text_targets; cdecl;
begin
  Gtk3.gtk_drag_source_add_text_targets(@self);
end;

procedure TGtkWidget.drag_source_add_uri_targets; cdecl;
begin
  Gtk3.gtk_drag_source_add_uri_targets(@self);
end;

function TGtkWidget.drag_source_get_target_list: PGtkTargetList; cdecl;
begin
  Result := Gtk3.gtk_drag_source_get_target_list(@self);
end;

procedure TGtkWidget.drag_source_set(start_button_mask: TGdkModifierType; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl;
begin
  Gtk3.gtk_drag_source_set(@self, start_button_mask, targets, n_targets, actions);
end;

procedure TGtkWidget.drag_source_set_icon_gicon(icon: PGIcon); cdecl;
begin
  Gtk3.gtk_drag_source_set_icon_gicon(@self, icon);
end;

procedure TGtkWidget.drag_source_set_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk3.gtk_drag_source_set_icon_name(@self, icon_name);
end;

procedure TGtkWidget.drag_source_set_icon_pixbuf(pixbuf: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_drag_source_set_icon_pixbuf(@self, pixbuf);
end;

procedure TGtkWidget.drag_source_set_icon_stock(stock_id: Pgchar); cdecl;
begin
  Gtk3.gtk_drag_source_set_icon_stock(@self, stock_id);
end;

procedure TGtkWidget.drag_source_set_target_list(target_list: PGtkTargetList); cdecl;
begin
  Gtk3.gtk_drag_source_set_target_list(@self, target_list);
end;

procedure TGtkWidget.drag_source_unset; cdecl;
begin
  Gtk3.gtk_drag_source_unset(@self);
end;

procedure TGtkWidget.drag_unhighlight; cdecl;
begin
  Gtk3.gtk_drag_unhighlight(@self);
end;

procedure TGtkWidget.draw(cr: Pcairo_t); cdecl;
begin
  Gtk3.gtk_widget_draw(@self, cr);
end;

procedure TGtkWidget.ensure_style; cdecl;
begin
  Gtk3.gtk_widget_ensure_style(@self);
end;

procedure TGtkWidget.error_bell; cdecl;
begin
  Gtk3.gtk_widget_error_bell(@self);
end;

function TGtkWidget.event(event: PGdkEvent): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_event(@self, event);
end;

procedure TGtkWidget.freeze_child_notify; cdecl;
begin
  Gtk3.gtk_widget_freeze_child_notify(@self);
end;

function TGtkWidget.get_accessible: PAtkObject; cdecl;
begin
  Result := Gtk3.gtk_widget_get_accessible(@self);
end;

function TGtkWidget.get_allocated_height: gint; cdecl;
begin
  Result := Gtk3.gtk_widget_get_allocated_height(@self);
end;

function TGtkWidget.get_allocated_width: gint; cdecl;
begin
  Result := Gtk3.gtk_widget_get_allocated_width(@self);
end;

procedure TGtkWidget.get_allocation(allocation: PGtkAllocation); cdecl;
begin
  Gtk3.gtk_widget_get_allocation(@self, allocation);
end;

function TGtkWidget.get_ancestor(widget_type: TGType): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_widget_get_ancestor(@self, widget_type);
end;

function TGtkWidget.get_app_paintable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_app_paintable(@self);
end;

function TGtkWidget.get_can_default: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_can_default(@self);
end;

function TGtkWidget.get_can_focus: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_can_focus(@self);
end;

function TGtkWidget.get_child_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_child_visible(@self);
end;

function TGtkWidget.get_clipboard(selection: TGdkAtom): PGtkClipboard; cdecl;
begin
  Result := Gtk3.gtk_widget_get_clipboard(@self, selection);
end;

function TGtkWidget.get_composite_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_widget_get_composite_name(@self);
end;

function TGtkWidget.get_device_enabled(device: PGdkDevice): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_device_enabled(@self, device);
end;

function TGtkWidget.get_device_events(device: PGdkDevice): TGdkEventMask; cdecl;
begin
  Result := Gtk3.gtk_widget_get_device_events(@self, device);
end;

function TGtkWidget.get_direction: TGtkTextDirection; cdecl;
begin
  Result := Gtk3.gtk_widget_get_direction(@self);
end;

function TGtkWidget.get_display: PGdkDisplay; cdecl;
begin
  Result := Gtk3.gtk_widget_get_display(@self);
end;

function TGtkWidget.get_double_buffered: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_double_buffered(@self);
end;

function TGtkWidget.get_events: gint; cdecl;
begin
  Result := Gtk3.gtk_widget_get_events(@self);
end;

function TGtkWidget.get_halign: TGtkAlign; cdecl;
begin
  Result := Gtk3.gtk_widget_get_halign(@self);
end;

function TGtkWidget.get_has_tooltip: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_has_tooltip(@self);
end;

function TGtkWidget.get_has_window: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_has_window(@self);
end;

function TGtkWidget.get_hexpand: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_hexpand(@self);
end;

function TGtkWidget.get_hexpand_set: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_hexpand_set(@self);
end;

function TGtkWidget.get_mapped: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_mapped(@self);
end;

function TGtkWidget.get_margin_bottom: gint; cdecl;
begin
  Result := Gtk3.gtk_widget_get_margin_bottom(@self);
end;

function TGtkWidget.get_margin_left: gint; cdecl;
begin
  Result := Gtk3.gtk_widget_get_margin_left(@self);
end;

function TGtkWidget.get_margin_right: gint; cdecl;
begin
  Result := Gtk3.gtk_widget_get_margin_right(@self);
end;

function TGtkWidget.get_margin_top: gint; cdecl;
begin
  Result := Gtk3.gtk_widget_get_margin_top(@self);
end;

function TGtkWidget.get_modifier_style: PGtkRcStyle; cdecl;
begin
  Result := Gtk3.gtk_widget_get_modifier_style(@self);
end;

function TGtkWidget.get_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_widget_get_name(@self);
end;

function TGtkWidget.get_no_show_all: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_no_show_all(@self);
end;

function TGtkWidget.get_pango_context: PPangoContext; cdecl;
begin
  Result := Gtk3.gtk_widget_get_pango_context(@self);
end;

function TGtkWidget.get_parent: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_widget_get_parent(@self);
end;

function TGtkWidget.get_parent_window: PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_widget_get_parent_window(@self);
end;

function TGtkWidget.get_path: PGtkWidgetPath; cdecl;
begin
  Result := Gtk3.gtk_widget_get_path(@self);
end;

procedure TGtkWidget.get_pointer(x: Pgint; y: Pgint); cdecl;
begin
  Gtk3.gtk_widget_get_pointer(@self, x, y);
end;

procedure TGtkWidget.get_preferred_height(minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk3.gtk_widget_get_preferred_height(@self, minimum_height, natural_height);
end;

procedure TGtkWidget.get_preferred_height_for_width(width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk3.gtk_widget_get_preferred_height_for_width(@self, width, minimum_height, natural_height);
end;

procedure TGtkWidget.get_preferred_size(minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl;
begin
  Gtk3.gtk_widget_get_preferred_size(@self, minimum_size, natural_size);
end;

procedure TGtkWidget.get_preferred_width(minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk3.gtk_widget_get_preferred_width(@self, minimum_width, natural_width);
end;

procedure TGtkWidget.get_preferred_width_for_height(height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk3.gtk_widget_get_preferred_width_for_height(@self, height, minimum_width, natural_width);
end;

function TGtkWidget.get_realized: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_realized(@self);
end;

function TGtkWidget.get_receives_default: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_receives_default(@self);
end;

function TGtkWidget.get_request_mode: TGtkSizeRequestMode; cdecl;
begin
  Result := Gtk3.gtk_widget_get_request_mode(@self);
end;

function TGtkWidget.get_root_window: PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_widget_get_root_window(@self);
end;

function TGtkWidget.get_screen: PGdkScreen; cdecl;
begin
  Result := Gtk3.gtk_widget_get_screen(@self);
end;

function TGtkWidget.get_sensitive: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_sensitive(@self);
end;

function TGtkWidget.get_settings: PGtkSettings; cdecl;
begin
  Result := Gtk3.gtk_widget_get_settings(@self);
end;

procedure TGtkWidget.get_size_request(width: Pgint; height: Pgint); cdecl;
begin
  Gtk3.gtk_widget_get_size_request(@self, width, height);
end;

function TGtkWidget.get_state: TGtkStateType; cdecl;
begin
  Result := Gtk3.gtk_widget_get_state(@self);
end;


function TGtkWidget.get_state_flags: TGtkStateFlags; cdecl;
begin
  Result := Gtk3.gtk_widget_get_state_flags(@self);
end;

function TGtkWidget.get_style: PGtkStyle; cdecl;
begin
  Result := Gtk3.gtk_widget_get_style(@self);
end;

function TGtkWidget.get_style_context: PGtkStyleContext; cdecl;
begin
  Result := Gtk3.gtk_widget_get_style_context(@self);
end;

function TGtkWidget.get_support_multidevice: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_support_multidevice(@self);
end;

function TGtkWidget.get_tooltip_markup: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_widget_get_tooltip_markup(@self);
end;

function TGtkWidget.get_tooltip_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_widget_get_tooltip_text(@self);
end;

function TGtkWidget.get_tooltip_window: PAtkWindow; cdecl;
begin
  Result := Gtk3.gtk_widget_get_tooltip_window(@self);
end;

function TGtkWidget.get_toplevel: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_widget_get_toplevel(@self);
end;

function TGtkWidget.get_valign: TGtkAlign; cdecl;
begin
  Result := Gtk3.gtk_widget_get_valign(@self);
end;

function TGtkWidget.get_vexpand: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_vexpand(@self);
end;

function TGtkWidget.get_vexpand_set: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_vexpand_set(@self);
end;

function TGtkWidget.get_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_get_visible(@self);
end;

function TGtkWidget.get_visual: PGdkVisual; cdecl;
begin
  Result := Gtk3.gtk_widget_get_visual(@self);
end;

function TGtkWidget.get_window: PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_widget_get_window(@self);
end;

procedure TGtkWidget.grab_add; cdecl;
begin
  Gtk3.gtk_grab_add(@self);
end;

procedure TGtkWidget.grab_default; cdecl;
begin
  Gtk3.gtk_widget_grab_default(@self);
end;

procedure TGtkWidget.grab_focus; cdecl;
begin
  Gtk3.gtk_widget_grab_focus(@self);
end;

procedure TGtkWidget.grab_remove; cdecl;
begin
  Gtk3.gtk_grab_remove(@self);
end;

function TGtkWidget.has_default: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_has_default(@self);
end;

function TGtkWidget.has_focus: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_has_focus(@self);
end;

function TGtkWidget.has_grab: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_has_grab(@self);
end;

function TGtkWidget.has_rc_style: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_has_rc_style(@self);
end;

function TGtkWidget.has_screen: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_has_screen(@self);
end;

function TGtkWidget.has_visible_focus: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_has_visible_focus(@self);
end;

procedure TGtkWidget.hide; cdecl;
begin
  Gtk3.gtk_widget_hide(@self);
end;

function TGtkWidget.hide_on_delete: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_hide_on_delete(@self);
end;

function TGtkWidget.in_destruction: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_in_destruction(@self);
end;

procedure TGtkWidget.input_shape_combine_region(region: Pcairo_region_t); cdecl;
begin
  Gtk3.gtk_widget_input_shape_combine_region(@self, region);
end;

function TGtkWidget.intersect(area: PGdkRectangle; intersection: PGdkRectangle): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_intersect(@self, area, intersection);
end;

function TGtkWidget.is_ancestor(ancestor: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_is_ancestor(@self, ancestor);
end;

function TGtkWidget.is_composited: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_is_composited(@self);
end;

function TGtkWidget.is_drawable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_is_drawable(@self);
end;

function TGtkWidget.is_focus: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_is_focus(@self);
end;

function TGtkWidget.is_sensitive: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_is_sensitive(@self);
end;

function TGtkWidget.is_toplevel: gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_is_toplevel(@self);
end;

function TGtkWidget.keynav_failed(direction: TGtkDirectionType): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_keynav_failed(@self, direction);
end;

function TGtkWidget.list_accel_closures: PGList; cdecl;
begin
  Result := Gtk3.gtk_widget_list_accel_closures(@self);
end;

function TGtkWidget.list_mnemonic_labels: PGList; cdecl;
begin
  Result := Gtk3.gtk_widget_list_mnemonic_labels(@self);
end;

procedure TGtkWidget.map; cdecl;
begin
  Gtk3.gtk_widget_map(@self);
end;

function TGtkWidget.mnemonic_activate(group_cycling: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_mnemonic_activate(@self, group_cycling);
end;

procedure TGtkWidget.modify_base(state: TGtkStateType; color: PGdkColor); cdecl;
begin
  Gtk3.gtk_widget_modify_base(@self, state, color);
end;

procedure TGtkWidget.modify_bg(state: TGtkStateType; color: PGdkColor); cdecl;
begin
  Gtk3.gtk_widget_modify_bg(@self, state, color);
end;

procedure TGtkWidget.modify_cursor(primary: PGdkColor; secondary: PGdkColor); cdecl;
begin
  Gtk3.gtk_widget_modify_cursor(@self, primary, secondary);
end;

procedure TGtkWidget.modify_fg(state: TGtkStateType; color: PGdkColor); cdecl;
begin
  Gtk3.gtk_widget_modify_fg(@self, state, color);
end;

procedure TGtkWidget.modify_font(font_desc: PPangoFontDescription); cdecl;
begin
  Gtk3.gtk_widget_modify_font(@self, font_desc);
end;

procedure TGtkWidget.modify_style(style: PGtkRcStyle); cdecl;
begin
  Gtk3.gtk_widget_modify_style(@self, style);
end;

procedure TGtkWidget.modify_text(state: TGtkStateType; color: PGdkColor); cdecl;
begin
  Gtk3.gtk_widget_modify_text(@self, state, color);
end;

procedure TGtkWidget.override_background_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_widget_override_background_color(@self, state, color);
end;

procedure TGtkWidget.override_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_widget_override_color(@self, state, color);
end;

procedure TGtkWidget.override_cursor(cursor: PGdkRGBA; secondary_cursor: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_widget_override_cursor(@self, cursor, secondary_cursor);
end;

procedure TGtkWidget.override_font(font_desc: PPangoFontDescription); cdecl;
begin
  Gtk3.gtk_widget_override_font(@self, font_desc);
end;

procedure TGtkWidget.override_symbolic_color(name: Pgchar; color: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_widget_override_symbolic_color(@self, name, color);
end;

procedure TGtkWidget.path(path_length: Pguint; path: PPgchar; path_reversed: PPgchar); cdecl;
begin
  Gtk3.gtk_widget_path(@self, path_length, path, path_reversed);
end;

procedure TGtkWidget.queue_compute_expand; cdecl;
begin
  Gtk3.gtk_widget_queue_compute_expand(@self);
end;

procedure TGtkWidget.queue_draw; cdecl;
begin
  Gtk3.gtk_widget_queue_draw(@self);
end;

procedure TGtkWidget.queue_draw_area(x: gint; y: gint; width: gint; height: gint); cdecl;
begin
  Gtk3.gtk_widget_queue_draw_area(@self, x, y, width, height);
end;

procedure TGtkWidget.queue_draw_region(region: Pcairo_region_t); cdecl;
begin
  Gtk3.gtk_widget_queue_draw_region(@self, region);
end;

procedure TGtkWidget.queue_resize; cdecl;
begin
  Gtk3.gtk_widget_queue_resize(@self);
end;

procedure TGtkWidget.queue_resize_no_redraw; cdecl;
begin
  Gtk3.gtk_widget_queue_resize_no_redraw(@self);
end;

procedure TGtkWidget.realize; cdecl;
begin
  Gtk3.gtk_widget_realize(@self);
end;

function TGtkWidget.region_intersect(region: Pcairo_region_t): Pcairo_region_t; cdecl;
begin
  Result := Gtk3.gtk_widget_region_intersect(@self, region);
end;

function TGtkWidget.remove_accelerator(accel_group: PGtkAccelGroup; accel_key: guint; accel_mods: TGdkModifierType): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_remove_accelerator(@self, accel_group, accel_key, accel_mods);
end;

procedure TGtkWidget.remove_mnemonic_label(label_: PGtkWidget); cdecl;
begin
  Gtk3.gtk_widget_remove_mnemonic_label(@self, label_);
end;

function TGtkWidget.render_icon_pixbuf(stock_id: Pgchar; size: gint): PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_widget_render_icon_pixbuf(@self, stock_id, size);
end;

procedure TGtkWidget.reparent(new_parent: PGtkWidget); cdecl;
begin
  Gtk3.gtk_widget_reparent(@self, new_parent);
end;

procedure TGtkWidget.reset_rc_styles; cdecl;
begin
  Gtk3.gtk_widget_reset_rc_styles(@self);
end;

procedure TGtkWidget.reset_style; cdecl;
begin
  Gtk3.gtk_widget_reset_style(@self);
end;

function TGtkWidget.send_expose(event: PGdkEvent): gint; cdecl;
begin
  Result := Gtk3.gtk_widget_send_expose(@self, event);
end;

function TGtkWidget.send_focus_change(event: PGdkEvent): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_send_focus_change(@self, event);
end;

procedure TGtkWidget.set_accel_path(accel_path: Pgchar; accel_group: PGtkAccelGroup); cdecl;
begin
  Gtk3.gtk_widget_set_accel_path(@self, accel_path, accel_group);
end;

procedure TGtkWidget.set_allocation(allocation: PGtkAllocation); cdecl;
begin
  Gtk3.gtk_widget_set_allocation(@self, allocation);
end;

procedure TGtkWidget.set_app_paintable(app_paintable: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_app_paintable(@self, app_paintable);
end;

procedure TGtkWidget.set_can_default(can_default: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_can_default(@self, can_default);
end;

procedure TGtkWidget.set_can_focus(can_focus: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_can_focus(@self, can_focus);
end;

procedure TGtkWidget.set_child_visible(is_visible: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_child_visible(@self, is_visible);
end;

procedure TGtkWidget.set_composite_name(name: Pgchar); cdecl;
begin
  Gtk3.gtk_widget_set_composite_name(@self, name);
end;

procedure TGtkWidget.set_device_enabled(device: PGdkDevice; enabled: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_device_enabled(@self, device, enabled);
end;

procedure TGtkWidget.set_device_events(device: PGdkDevice; events: TGdkEventMask); cdecl;
begin
  Gtk3.gtk_widget_set_device_events(@self, device, events);
end;

procedure TGtkWidget.set_direction(dir: TGtkTextDirection); cdecl;
begin
  Gtk3.gtk_widget_set_direction(@self, dir);
end;

procedure TGtkWidget.set_double_buffered(double_buffered: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_double_buffered(@self, double_buffered);
end;

procedure TGtkWidget.set_events(events: gint); cdecl;
begin
  Gtk3.gtk_widget_set_events(@self, events);
end;

procedure TGtkWidget.set_halign(align: TGtkAlign); cdecl;
begin
  Gtk3.gtk_widget_set_halign(@self, align);
end;

procedure TGtkWidget.set_has_tooltip(has_tooltip: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_has_tooltip(@self, has_tooltip);
end;

procedure TGtkWidget.set_has_window(has_window: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_has_window(@self, has_window);
end;

procedure TGtkWidget.set_hexpand(expand: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_hexpand(@self, expand);
end;

procedure TGtkWidget.set_hexpand_set(set_: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_hexpand_set(@self, set_);
end;

procedure TGtkWidget.set_mapped(mapped: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_mapped(@self, mapped);
end;

procedure TGtkWidget.set_margin_bottom(margin: gint); cdecl;
begin
  Gtk3.gtk_widget_set_margin_bottom(@self, margin);
end;

procedure TGtkWidget.set_margin_left(margin: gint); cdecl;
begin
  Gtk3.gtk_widget_set_margin_left(@self, margin);
end;

procedure TGtkWidget.set_margin_right(margin: gint); cdecl;
begin
  Gtk3.gtk_widget_set_margin_right(@self, margin);
end;

procedure TGtkWidget.set_margin_top(margin: gint); cdecl;
begin
  Gtk3.gtk_widget_set_margin_top(@self, margin);
end;

procedure TGtkWidget.set_name(name: Pgchar); cdecl;
begin
  Gtk3.gtk_widget_set_name(@self, name);
end;

procedure TGtkWidget.set_no_show_all(no_show_all: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_no_show_all(@self, no_show_all);
end;

procedure TGtkWidget.set_parent(parent: PGtkWidget); cdecl;
begin
  Gtk3.gtk_widget_set_parent(@self, parent);
end;

procedure TGtkWidget.set_parent_window(parent_window: PGdkWindow); cdecl;
begin
  Gtk3.gtk_widget_set_parent_window(@self, parent_window);
end;

procedure TGtkWidget.set_realized(realized: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_realized(@self, realized);
end;

procedure TGtkWidget.set_receives_default(receives_default: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_receives_default(@self, receives_default);
end;

procedure TGtkWidget.set_redraw_on_allocate(redraw_on_allocate: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_redraw_on_allocate(@self, redraw_on_allocate);
end;

procedure TGtkWidget.set_sensitive(sensitive: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_sensitive(@self, sensitive);
end;

procedure TGtkWidget.set_size_request(width: gint; height: gint); cdecl;
begin
  Gtk3.gtk_widget_set_size_request(@self, width, height);
end;

procedure TGtkWidget.set_state(state: TGtkStateType); cdecl;
begin
  Gtk3.gtk_widget_set_state(@self, state);
end;

procedure TGtkWidget.set_state_flags(flags: TGtkStateFlags; clear: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_state_flags(@self, flags, clear);
end;

procedure TGtkWidget.set_style(style: PGtkStyle); cdecl;
begin
  Gtk3.gtk_widget_set_style(@self, style);
end;

procedure TGtkWidget.set_support_multidevice(support_multidevice: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_support_multidevice(@self, support_multidevice);
end;

procedure TGtkWidget.set_tooltip_markup(markup: Pgchar); cdecl;
begin
  Gtk3.gtk_widget_set_tooltip_markup(@self, markup);
end;

procedure TGtkWidget.set_tooltip_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_widget_set_tooltip_text(@self, text);
end;

procedure TGtkWidget.set_tooltip_window(custom_window: PAtkWindow); cdecl;
begin
  Gtk3.gtk_widget_set_tooltip_window(@self, custom_window);
end;

procedure TGtkWidget.set_valign(align: TGtkAlign); cdecl;
begin
  Gtk3.gtk_widget_set_valign(@self, align);
end;

procedure TGtkWidget.set_vexpand(expand: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_vexpand(@self, expand);
end;

procedure TGtkWidget.set_vexpand_set(set_: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_vexpand_set(@self, set_);
end;

procedure TGtkWidget.set_visible(visible: gboolean); cdecl;
begin
  Gtk3.gtk_widget_set_visible(@self, visible);
end;

procedure TGtkWidget.set_visual(visual: PGdkVisual); cdecl;
begin
  Gtk3.gtk_widget_set_visual(@self, visual);
end;

procedure TGtkWidget.set_window(window: PGdkWindow); cdecl;
begin
  Gtk3.gtk_widget_set_window(@self, window);
end;

procedure TGtkWidget.shape_combine_region(region: Pcairo_region_t); cdecl;
begin
  Gtk3.gtk_widget_shape_combine_region(@self, region);
end;

procedure TGtkWidget.show; cdecl;
begin
  Gtk3.gtk_widget_show(@self);
end;

procedure TGtkWidget.show_all; cdecl;
begin
  Gtk3.gtk_widget_show_all(@self);
end;

procedure TGtkWidget.show_now; cdecl;
begin
  Gtk3.gtk_widget_show_now(@self);
end;

procedure TGtkWidget.size_allocate(allocation: PGtkAllocation); cdecl;
begin
  Gtk3.gtk_widget_size_allocate(@self, allocation);
end;

procedure TGtkWidget.style_attach; cdecl;
begin
  Gtk3.gtk_widget_style_attach(@self);
end;

procedure TGtkWidget.style_get_property(property_name: Pgchar; value: PGValue); cdecl;
begin
  Gtk3.gtk_widget_style_get_property(@self, property_name, value);
end;

procedure TGtkWidget.thaw_child_notify; cdecl;
begin
  Gtk3.gtk_widget_thaw_child_notify(@self);
end;

function TGtkWidget.translate_coordinates(dest_widget: PGtkWidget; src_x: gint; src_y: gint; dest_x: Pgint; dest_y: Pgint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_translate_coordinates(@self, dest_widget, src_x, src_y, dest_x, dest_y);
end;

procedure TGtkWidget.trigger_tooltip_query; cdecl;
begin
  Gtk3.gtk_widget_trigger_tooltip_query(@self);
end;

procedure TGtkWidget.unmap; cdecl;
begin
  Gtk3.gtk_widget_unmap(@self);
end;

procedure TGtkWidget.unparent; cdecl;
begin
  Gtk3.gtk_widget_unparent(@self);
end;

procedure TGtkWidget.unrealize; cdecl;
begin
  Gtk3.gtk_widget_unrealize(@self);
end;

procedure TGtkWidget.unset_state_flags(flags: TGtkStateFlags); cdecl;
begin
  Gtk3.gtk_widget_unset_state_flags(@self, flags);
end;

function TGtkDialog.new: PGtkDialog; cdecl;
begin
  Result := Gtk3.gtk_dialog_new();
end;


procedure TGtkDialog.add_action_widget(child: PGtkWidget; response_id: gint); cdecl;
begin
  Gtk3.gtk_dialog_add_action_widget(@self, child, response_id);
end;

function TGtkDialog.add_button(button_text: Pgchar; response_id: gint): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_dialog_add_button(@self, button_text, response_id);
end;

function TGtkDialog.get_action_area: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_dialog_get_action_area(@self);
end;

function TGtkDialog.get_content_area: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_dialog_get_content_area(@self);
end;

function TGtkDialog.get_response_for_widget(widget: PGtkWidget): gint; cdecl;
begin
  Result := Gtk3.gtk_dialog_get_response_for_widget(@self, widget);
end;

function TGtkDialog.get_widget_for_response(response_id: gint): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_dialog_get_widget_for_response(@self, response_id);
end;

procedure TGtkDialog.response(response_id: gint); cdecl;
begin
  Gtk3.gtk_dialog_response(@self, response_id);
end;

function TGtkDialog.run: gint; cdecl;
begin
  Result := Gtk3.gtk_dialog_run(@self);
end;

procedure TGtkDialog.set_alternative_button_order_from_array(n_params: gint; new_order: Pgint); cdecl;
begin
  Gtk3.gtk_dialog_set_alternative_button_order_from_array(@self, n_params, new_order);
end;

procedure TGtkDialog.set_default_response(response_id: gint); cdecl;
begin
  Gtk3.gtk_dialog_set_default_response(@self, response_id);
end;

procedure TGtkDialog.set_response_sensitive(response_id: gint; setting: gboolean); cdecl;
begin
  Gtk3.gtk_dialog_set_response_sensitive(@self, response_id, setting);
end;

function TGtkAboutDialog.new: PGtkAboutDialog; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_new();
end;

function TGtkAboutDialog.get_artists: PPgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_artists(@self);
end;

function TGtkAboutDialog.get_authors: PPgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_authors(@self);
end;

function TGtkAboutDialog.get_comments: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_comments(@self);
end;

function TGtkAboutDialog.get_copyright: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_copyright(@self);
end;

function TGtkAboutDialog.get_documenters: PPgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_documenters(@self);
end;

function TGtkAboutDialog.get_license: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_license(@self);
end;

function TGtkAboutDialog.get_license_type: TGtkLicense; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_license_type(@self);
end;

function TGtkAboutDialog.get_logo: PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_logo(@self);
end;

function TGtkAboutDialog.get_logo_icon_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_logo_icon_name(@self);
end;

function TGtkAboutDialog.get_program_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_program_name(@self);
end;

function TGtkAboutDialog.get_translator_credits: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_translator_credits(@self);
end;

function TGtkAboutDialog.get_version: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_version(@self);
end;

function TGtkAboutDialog.get_website: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_website(@self);
end;

function TGtkAboutDialog.get_website_label: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_website_label(@self);
end;

function TGtkAboutDialog.get_wrap_license: gboolean; cdecl;
begin
  Result := Gtk3.gtk_about_dialog_get_wrap_license(@self);
end;

procedure TGtkAboutDialog.set_artists(artists: PPgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_artists(@self, artists);
end;

procedure TGtkAboutDialog.set_authors(authors: PPgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_authors(@self, authors);
end;

procedure TGtkAboutDialog.set_comments(comments: Pgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_comments(@self, comments);
end;

procedure TGtkAboutDialog.set_copyright(copyright: Pgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_copyright(@self, copyright);
end;

procedure TGtkAboutDialog.set_documenters(documenters: PPgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_documenters(@self, documenters);
end;

procedure TGtkAboutDialog.set_license(license: Pgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_license(@self, license);
end;

procedure TGtkAboutDialog.set_license_type(license_type: TGtkLicense); cdecl;
begin
  Gtk3.gtk_about_dialog_set_license_type(@self, license_type);
end;

procedure TGtkAboutDialog.set_logo(logo: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_about_dialog_set_logo(@self, logo);
end;

procedure TGtkAboutDialog.set_logo_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_logo_icon_name(@self, icon_name);
end;

procedure TGtkAboutDialog.set_program_name(name: Pgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_program_name(@self, name);
end;

procedure TGtkAboutDialog.set_translator_credits(translator_credits: Pgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_translator_credits(@self, translator_credits);
end;

procedure TGtkAboutDialog.set_version(version: Pgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_version(@self, version);
end;

procedure TGtkAboutDialog.set_website(website: Pgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_website(@self, website);
end;

procedure TGtkAboutDialog.set_website_label(website_label: Pgchar); cdecl;
begin
  Gtk3.gtk_about_dialog_set_website_label(@self, website_label);
end;

procedure TGtkAboutDialog.set_wrap_license(wrap_license: gboolean); cdecl;
begin
  Gtk3.gtk_about_dialog_set_wrap_license(@self, wrap_license);
end;

function TGtkAccelGroup.new: PGtkAccelGroup; cdecl;
begin
  Result := Gtk3.gtk_accel_group_new();
end;

function TGtkAccelGroup.from_accel_closure(closure: PGClosure): PGtkAccelGroup; cdecl;
begin
  Result := Gtk3.gtk_accel_group_from_accel_closure(closure);
end;

function TGtkAccelGroup.activate(accel_quark: TGQuark; acceleratable: PGObject; accel_key: guint; accel_mods: TGdkModifierType): gboolean; cdecl;
begin
  Result := Gtk3.gtk_accel_group_activate(@self, accel_quark, acceleratable, accel_key, accel_mods);
end;

procedure TGtkAccelGroup.connect(accel_key: guint; accel_mods: TGdkModifierType; accel_flags: TGtkAccelFlags; closure: PGClosure); cdecl;
begin
  Gtk3.gtk_accel_group_connect(@self, accel_key, accel_mods, accel_flags, closure);
end;

procedure TGtkAccelGroup.connect_by_path(accel_path: Pgchar; closure: PGClosure); cdecl;
begin
  Gtk3.gtk_accel_group_connect_by_path(@self, accel_path, closure);
end;

function TGtkAccelGroup.disconnect(closure: PGClosure): gboolean; cdecl;
begin
  Result := Gtk3.gtk_accel_group_disconnect(@self, closure);
end;

function TGtkAccelGroup.disconnect_key(accel_key: guint; accel_mods: TGdkModifierType): gboolean; cdecl;
begin
  Result := Gtk3.gtk_accel_group_disconnect_key(@self, accel_key, accel_mods);
end;

function TGtkAccelGroup.find(find_func: TGtkAccelGroupFindFunc; data: gpointer): PGtkAccelKey; cdecl;
begin
  Result := Gtk3.gtk_accel_group_find(@self, find_func, data);
end;

function TGtkAccelGroup.get_is_locked: gboolean; cdecl;
begin
  Result := Gtk3.gtk_accel_group_get_is_locked(@self);
end;

function TGtkAccelGroup.get_modifier_mask: TGdkModifierType; cdecl;
begin
  Result := Gtk3.gtk_accel_group_get_modifier_mask(@self);
end;

procedure TGtkAccelGroup.lock; cdecl;
begin
  Gtk3.gtk_accel_group_lock(@self);
end;

function TGtkAccelGroup.query(accel_key: guint; accel_mods: TGdkModifierType; n_entries: Pguint): PGtkAccelGroupEntry; cdecl;
begin
  Result := Gtk3.gtk_accel_group_query(@self, accel_key, accel_mods, n_entries);
end;

procedure TGtkAccelGroup.unlock; cdecl;
begin
  Gtk3.gtk_accel_group_unlock(@self);
end;

function TGtkLabel.new(str: Pgchar): PGtkLabel; cdecl;
begin
  Result := Gtk3.gtk_label_new(str);
end;

function TGtkLabel.new_with_mnemonic(str: Pgchar): PGtkLabel; cdecl;
begin
  Result := Gtk3.gtk_label_new_with_mnemonic(str);
end;

function TGtkLabel.get_angle: gdouble; cdecl;
begin
  Result := Gtk3.gtk_label_get_angle(@self);
end;

function TGtkLabel.get_attributes: PPangoAttrList; cdecl;
begin
  Result := Gtk3.gtk_label_get_attributes(@self);
end;

function TGtkLabel.get_current_uri: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_label_get_current_uri(@self);
end;

function TGtkLabel.get_ellipsize: TPangoEllipsizeMode; cdecl;
begin
  Result := Gtk3.gtk_label_get_ellipsize(@self);
end;

function TGtkLabel.get_justify: TGtkJustification; cdecl;
begin
  Result := Gtk3.gtk_label_get_justify(@self);
end;

function TGtkLabel.get_label: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_label_get_label(@self);
end;

function TGtkLabel.get_layout: PPangoLayout; cdecl;
begin
  Result := Gtk3.gtk_label_get_layout(@self);
end;

procedure TGtkLabel.get_layout_offsets(x: Pgint; y: Pgint); cdecl;
begin
  Gtk3.gtk_label_get_layout_offsets(@self, x, y);
end;

function TGtkLabel.get_line_wrap: gboolean; cdecl;
begin
  Result := Gtk3.gtk_label_get_line_wrap(@self);
end;

function TGtkLabel.get_line_wrap_mode: TPangoWrapMode; cdecl;
begin
  Result := Gtk3.gtk_label_get_line_wrap_mode(@self);
end;

function TGtkLabel.get_max_width_chars: gint; cdecl;
begin
  Result := Gtk3.gtk_label_get_max_width_chars(@self);
end;

function TGtkLabel.get_mnemonic_keyval: guint; cdecl;
begin
  Result := Gtk3.gtk_label_get_mnemonic_keyval(@self);
end;

function TGtkLabel.get_mnemonic_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_label_get_mnemonic_widget(@self);
end;

function TGtkLabel.get_selectable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_label_get_selectable(@self);
end;

function TGtkLabel.get_selection_bounds(start: Pgint; end_: Pgint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_label_get_selection_bounds(@self, start, end_);
end;

function TGtkLabel.get_single_line_mode: gboolean; cdecl;
begin
  Result := Gtk3.gtk_label_get_single_line_mode(@self);
end;

function TGtkLabel.get_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_label_get_text(@self);
end;

function TGtkLabel.get_track_visited_links: gboolean; cdecl;
begin
  Result := Gtk3.gtk_label_get_track_visited_links(@self);
end;

function TGtkLabel.get_use_markup: gboolean; cdecl;
begin
  Result := Gtk3.gtk_label_get_use_markup(@self);
end;

function TGtkLabel.get_use_underline: gboolean; cdecl;
begin
  Result := Gtk3.gtk_label_get_use_underline(@self);
end;

function TGtkLabel.get_width_chars: gint; cdecl;
begin
  Result := Gtk3.gtk_label_get_width_chars(@self);
end;

procedure TGtkLabel.select_region(start_offset: gint; end_offset: gint); cdecl;
begin
  Gtk3.gtk_label_select_region(@self, start_offset, end_offset);
end;

procedure TGtkLabel.set_angle(angle: gdouble); cdecl;
begin
  Gtk3.gtk_label_set_angle(@self, angle);
end;

procedure TGtkLabel.set_attributes(attrs: PPangoAttrList); cdecl;
begin
  Gtk3.gtk_label_set_attributes(@self, attrs);
end;

procedure TGtkLabel.set_ellipsize(mode: TPangoEllipsizeMode); cdecl;
begin
  Gtk3.gtk_label_set_ellipsize(@self, mode);
end;

procedure TGtkLabel.set_justify(jtype: TGtkJustification); cdecl;
begin
  Gtk3.gtk_label_set_justify(@self, jtype);
end;

procedure TGtkLabel.set_label(str: Pgchar); cdecl;
begin
  Gtk3.gtk_label_set_label(@self, str);
end;

procedure TGtkLabel.set_line_wrap(wrap: gboolean); cdecl;
begin
  Gtk3.gtk_label_set_line_wrap(@self, wrap);
end;

procedure TGtkLabel.set_line_wrap_mode(wrap_mode: TPangoWrapMode); cdecl;
begin
  Gtk3.gtk_label_set_line_wrap_mode(@self, wrap_mode);
end;

procedure TGtkLabel.set_markup(str: Pgchar); cdecl;
begin
  Gtk3.gtk_label_set_markup(@self, str);
end;

procedure TGtkLabel.set_markup_with_mnemonic(str: Pgchar); cdecl;
begin
  Gtk3.gtk_label_set_markup_with_mnemonic(@self, str);
end;

procedure TGtkLabel.set_max_width_chars(n_chars: gint); cdecl;
begin
  Gtk3.gtk_label_set_max_width_chars(@self, n_chars);
end;

procedure TGtkLabel.set_mnemonic_widget(widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_label_set_mnemonic_widget(@self, widget);
end;

procedure TGtkLabel.set_pattern(pattern: Pgchar); cdecl;
begin
  Gtk3.gtk_label_set_pattern(@self, pattern);
end;

procedure TGtkLabel.set_selectable(setting: gboolean); cdecl;
begin
  Gtk3.gtk_label_set_selectable(@self, setting);
end;

procedure TGtkLabel.set_single_line_mode(single_line_mode: gboolean); cdecl;
begin
  Gtk3.gtk_label_set_single_line_mode(@self, single_line_mode);
end;

procedure TGtkLabel.set_text(str: Pgchar); cdecl;
begin
  Gtk3.gtk_label_set_text(@self, str);
end;

procedure TGtkLabel.set_text_with_mnemonic(str: Pgchar); cdecl;
begin
  Gtk3.gtk_label_set_text_with_mnemonic(@self, str);
end;

procedure TGtkLabel.set_track_visited_links(track_links: gboolean); cdecl;
begin
  Gtk3.gtk_label_set_track_visited_links(@self, track_links);
end;

procedure TGtkLabel.set_use_markup(setting: gboolean); cdecl;
begin
  Gtk3.gtk_label_set_use_markup(@self, setting);
end;

procedure TGtkLabel.set_use_underline(setting: gboolean); cdecl;
begin
  Gtk3.gtk_label_set_use_underline(@self, setting);
end;

procedure TGtkLabel.set_width_chars(n_chars: gint); cdecl;
begin
  Gtk3.gtk_label_set_width_chars(@self, n_chars);
end;

function TGtkAccelLabel.new(string_: Pgchar): PGtkAccelLabel; cdecl;
begin
  Result := Gtk3.gtk_accel_label_new(string_);
end;

function TGtkAccelLabel.get_accel_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_accel_label_get_accel_widget(@self);
end;

function TGtkAccelLabel.get_accel_width: guint; cdecl;
begin
  Result := Gtk3.gtk_accel_label_get_accel_width(@self);
end;

function TGtkAccelLabel.refetch: gboolean; cdecl;
begin
  Result := Gtk3.gtk_accel_label_refetch(@self);
end;

procedure TGtkAccelLabel.set_accel_closure(accel_closure: PGClosure); cdecl;
begin
  Gtk3.gtk_accel_label_set_accel_closure(@self, accel_closure);
end;

procedure TGtkAccelLabel.set_accel_widget(accel_widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_accel_label_set_accel_widget(@self, accel_widget);
end;

procedure TGtkAccelMap.add_entry(accel_path: Pgchar; accel_key: guint; accel_mods: TGdkModifierType); cdecl;
begin
  Gtk3.gtk_accel_map_add_entry(accel_path, accel_key, accel_mods);
end;

procedure TGtkAccelMap.add_filter(filter_pattern: Pgchar); cdecl;
begin
  Gtk3.gtk_accel_map_add_filter(filter_pattern);
end;

function TGtkAccelMap.change_entry(accel_path: Pgchar; accel_key: guint; accel_mods: TGdkModifierType; replace: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_accel_map_change_entry(accel_path, accel_key, accel_mods, replace);
end;

procedure TGtkAccelMap.foreach(data: gpointer; foreach_func: TGtkAccelMapForeach); cdecl;
begin
  Gtk3.gtk_accel_map_foreach(data, foreach_func);
end;

procedure TGtkAccelMap.foreach_unfiltered(data: gpointer; foreach_func: TGtkAccelMapForeach); cdecl;
begin
  Gtk3.gtk_accel_map_foreach_unfiltered(data, foreach_func);
end;

function TGtkAccelMap.get: PGtkAccelMap; cdecl;
begin
  Result := Gtk3.gtk_accel_map_get();
end;

procedure TGtkAccelMap.load(file_name: Pgchar); cdecl;
begin
  Gtk3.gtk_accel_map_load(file_name);
end;

procedure TGtkAccelMap.load_fd(fd: gint); cdecl;
begin
  Gtk3.gtk_accel_map_load_fd(fd);
end;

procedure TGtkAccelMap.load_scanner(scanner: PGScanner); cdecl;
begin
  Gtk3.gtk_accel_map_load_scanner(scanner);
end;

procedure TGtkAccelMap.lock_path(accel_path: Pgchar); cdecl;
begin
  Gtk3.gtk_accel_map_lock_path(accel_path);
end;

function TGtkAccelMap.lookup_entry(accel_path: Pgchar; key: PGtkAccelKey): gboolean; cdecl;
begin
  Result := Gtk3.gtk_accel_map_lookup_entry(accel_path, key);
end;

procedure TGtkAccelMap.save(file_name: Pgchar); cdecl;
begin
  Gtk3.gtk_accel_map_save(file_name);
end;

procedure TGtkAccelMap.save_fd(fd: gint); cdecl;
begin
  Gtk3.gtk_accel_map_save_fd(fd);
end;

procedure TGtkAccelMap.unlock_path(accel_path: Pgchar); cdecl;
begin
  Gtk3.gtk_accel_map_unlock_path(accel_path);
end;

procedure TGtkAccessible.connect_widget_destroyed; cdecl;
begin
  Gtk3.gtk_accessible_connect_widget_destroyed(@self);
end;

function TGtkAccessible.get_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_accessible_get_widget(@self);
end;

procedure TGtkAccessible.set_widget(widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_accessible_set_widget(@self, widget);
end;

function TGtkAction.new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar): PGtkAction; cdecl;
begin
  Result := Gtk3.gtk_action_new(name, label_, tooltip, stock_id);
end;

procedure TGtkAction.activate; cdecl;
begin
  Gtk3.gtk_action_activate(@self);
end;

procedure TGtkAction.block_activate; cdecl;
begin
  Gtk3.gtk_action_block_activate(@self);
end;

procedure TGtkAction.connect_accelerator; cdecl;
begin
  Gtk3.gtk_action_connect_accelerator(@self);
end;

function TGtkAction.create_icon(icon_size: gint): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_action_create_icon(@self, icon_size);
end;

function TGtkAction.create_menu: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_action_create_menu(@self);
end;

function TGtkAction.create_menu_item: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_action_create_menu_item(@self);
end;

function TGtkAction.create_tool_item: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_action_create_tool_item(@self);
end;

procedure TGtkAction.disconnect_accelerator; cdecl;
begin
  Gtk3.gtk_action_disconnect_accelerator(@self);
end;

function TGtkAction.get_accel_closure: PGClosure; cdecl;
begin
  Result := Gtk3.gtk_action_get_accel_closure(@self);
end;

function TGtkAction.get_accel_path: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_action_get_accel_path(@self);
end;

function TGtkAction.get_always_show_image: gboolean; cdecl;
begin
  Result := Gtk3.gtk_action_get_always_show_image(@self);
end;

function TGtkAction.get_gicon: PGIcon; cdecl;
begin
  Result := Gtk3.gtk_action_get_gicon(@self);
end;

function TGtkAction.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_action_get_icon_name(@self);
end;

function TGtkAction.get_is_important: gboolean; cdecl;
begin
  Result := Gtk3.gtk_action_get_is_important(@self);
end;

function TGtkAction.get_label: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_action_get_label(@self);
end;

function TGtkAction.get_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_action_get_name(@self);
end;

function TGtkAction.get_proxies: PGSList; cdecl;
begin
  Result := Gtk3.gtk_action_get_proxies(@self);
end;

function TGtkAction.get_sensitive: gboolean; cdecl;
begin
  Result := Gtk3.gtk_action_get_sensitive(@self);
end;

function TGtkAction.get_short_label: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_action_get_short_label(@self);
end;

function TGtkAction.get_stock_id: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_action_get_stock_id(@self);
end;

function TGtkAction.get_tooltip: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_action_get_tooltip(@self);
end;

function TGtkAction.get_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_action_get_visible(@self);
end;

function TGtkAction.get_visible_horizontal: gboolean; cdecl;
begin
  Result := Gtk3.gtk_action_get_visible_horizontal(@self);
end;

function TGtkAction.get_visible_vertical: gboolean; cdecl;
begin
  Result := Gtk3.gtk_action_get_visible_vertical(@self);
end;

function TGtkAction.is_sensitive: gboolean; cdecl;
begin
  Result := Gtk3.gtk_action_is_sensitive(@self);
end;

function TGtkAction.is_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_action_is_visible(@self);
end;

procedure TGtkAction.set_accel_group(accel_group: PGtkAccelGroup); cdecl;
begin
  Gtk3.gtk_action_set_accel_group(@self, accel_group);
end;

procedure TGtkAction.set_accel_path(accel_path: Pgchar); cdecl;
begin
  Gtk3.gtk_action_set_accel_path(@self, accel_path);
end;

procedure TGtkAction.set_always_show_image(always_show: gboolean); cdecl;
begin
  Gtk3.gtk_action_set_always_show_image(@self, always_show);
end;

procedure TGtkAction.set_gicon(icon: PGIcon); cdecl;
begin
  Gtk3.gtk_action_set_gicon(@self, icon);
end;

procedure TGtkAction.set_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk3.gtk_action_set_icon_name(@self, icon_name);
end;

procedure TGtkAction.set_is_important(is_important: gboolean); cdecl;
begin
  Gtk3.gtk_action_set_is_important(@self, is_important);
end;

procedure TGtkAction.set_label(label_: Pgchar); cdecl;
begin
  Gtk3.gtk_action_set_label(@self, label_);
end;

procedure TGtkAction.set_sensitive(sensitive: gboolean); cdecl;
begin
  Gtk3.gtk_action_set_sensitive(@self, sensitive);
end;

procedure TGtkAction.set_short_label(short_label: Pgchar); cdecl;
begin
  Gtk3.gtk_action_set_short_label(@self, short_label);
end;

procedure TGtkAction.set_stock_id(stock_id: Pgchar); cdecl;
begin
  Gtk3.gtk_action_set_stock_id(@self, stock_id);
end;

procedure TGtkAction.set_tooltip(tooltip: Pgchar); cdecl;
begin
  Gtk3.gtk_action_set_tooltip(@self, tooltip);
end;

procedure TGtkAction.set_visible(visible: gboolean); cdecl;
begin
  Gtk3.gtk_action_set_visible(@self, visible);
end;

procedure TGtkAction.set_visible_horizontal(visible_horizontal: gboolean); cdecl;
begin
  Gtk3.gtk_action_set_visible_horizontal(@self, visible_horizontal);
end;

procedure TGtkAction.set_visible_vertical(visible_vertical: gboolean); cdecl;
begin
  Gtk3.gtk_action_set_visible_vertical(@self, visible_vertical);
end;

procedure TGtkAction.unblock_activate; cdecl;
begin
  Gtk3.gtk_action_unblock_activate(@self);
end;

function TGtkActionGroup.new(name: Pgchar): PGtkActionGroup; cdecl;
begin
  Result := Gtk3.gtk_action_group_new(name);
end;

procedure TGtkActionGroup.add_action(action: PGtkAction); cdecl;
begin
  Gtk3.gtk_action_group_add_action(@self, action);
end;

procedure TGtkActionGroup.add_action_with_accel(action: PGtkAction; accelerator: Pgchar); cdecl;
begin
  Gtk3.gtk_action_group_add_action_with_accel(@self, action, accelerator);
end;

procedure TGtkActionGroup.add_actions(entries: PGtkActionEntry; n_entries: guint; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_action_group_add_actions(@self, entries, n_entries, user_data);
end;

procedure TGtkActionGroup.add_actions_full(entries: PGtkActionEntry; n_entries: guint; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_action_group_add_actions_full(@self, entries, n_entries, user_data, destroy_);
end;

procedure TGtkActionGroup.add_radio_actions(entries: PGtkRadioActionEntry; n_entries: guint; value: gint; on_change: TGCallback; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_action_group_add_radio_actions(@self, entries, n_entries, value, on_change, user_data);
end;

procedure TGtkActionGroup.add_radio_actions_full(entries: PGtkRadioActionEntry; n_entries: guint; value: gint; on_change: TGCallback; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_action_group_add_radio_actions_full(@self, entries, n_entries, value, on_change, user_data, destroy_);
end;

procedure TGtkActionGroup.add_toggle_actions(entries: PGtkToggleActionEntry; n_entries: guint; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_action_group_add_toggle_actions(@self, entries, n_entries, user_data);
end;

procedure TGtkActionGroup.add_toggle_actions_full(entries: PGtkToggleActionEntry; n_entries: guint; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_action_group_add_toggle_actions_full(@self, entries, n_entries, user_data, destroy_);
end;

function TGtkActionGroup.get_action(action_name: Pgchar): PGtkAction; cdecl;
begin
  Result := Gtk3.gtk_action_group_get_action(@self, action_name);
end;

function TGtkActionGroup.get_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_action_group_get_name(@self);
end;

function TGtkActionGroup.get_sensitive: gboolean; cdecl;
begin
  Result := Gtk3.gtk_action_group_get_sensitive(@self);
end;

function TGtkActionGroup.get_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_action_group_get_visible(@self);
end;

function TGtkActionGroup.list_actions: PGList; cdecl;
begin
  Result := Gtk3.gtk_action_group_list_actions(@self);
end;

procedure TGtkActionGroup.remove_action(action: PGtkAction); cdecl;
begin
  Gtk3.gtk_action_group_remove_action(@self, action);
end;

procedure TGtkActionGroup.set_sensitive(sensitive: gboolean); cdecl;
begin
  Gtk3.gtk_action_group_set_sensitive(@self, sensitive);
end;

procedure TGtkActionGroup.set_translate_func(func: TGTranslateFunc; data: gpointer; notify: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_action_group_set_translate_func(@self, func, data, notify);
end;

procedure TGtkActionGroup.set_translation_domain(domain: Pgchar); cdecl;
begin
  Gtk3.gtk_action_group_set_translation_domain(@self, domain);
end;

procedure TGtkActionGroup.set_visible(visible: gboolean); cdecl;
begin
  Gtk3.gtk_action_group_set_visible(@self, visible);
end;

function TGtkActionGroup.translate_string(string_: Pgchar): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_action_group_translate_string(@self, string_);
end;

procedure TGtkActivatable.do_set_related_action(action: PGtkAction); cdecl;
begin
  Gtk3.gtk_activatable_do_set_related_action(@self, action);
end;

function TGtkActivatable.get_related_action: PGtkAction; cdecl;
begin
  Result := Gtk3.gtk_activatable_get_related_action(@self);
end;

function TGtkActivatable.get_use_action_appearance: gboolean; cdecl;
begin
  Result := Gtk3.gtk_activatable_get_use_action_appearance(@self);
end;

procedure TGtkActivatable.set_related_action(action: PGtkAction); cdecl;
begin
  Gtk3.gtk_activatable_set_related_action(@self, action);
end;

procedure TGtkActivatable.set_use_action_appearance(use_appearance: gboolean); cdecl;
begin
  Gtk3.gtk_activatable_set_use_action_appearance(@self, use_appearance);
end;

procedure TGtkActivatable.sync_action_properties(action: PGtkAction); cdecl;
begin
  Gtk3.gtk_activatable_sync_action_properties(@self, action);
end;

function TGtkAdjustment.new(value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble): PGtkAdjustment; cdecl;
begin
  Result := Gtk3.gtk_adjustment_new(value, lower, upper, step_increment, page_increment, page_size);
end;

procedure TGtkAdjustment.changed; cdecl;
begin
  Gtk3.gtk_adjustment_changed(@self);
end;

procedure TGtkAdjustment.clamp_page(lower: gdouble; upper: gdouble); cdecl;
begin
  Gtk3.gtk_adjustment_clamp_page(@self, lower, upper);
end;

procedure TGtkAdjustment.configure(value: gdouble; lower: gdouble; upper: gdouble; step_increment: gdouble; page_increment: gdouble; page_size: gdouble); cdecl;
begin
  Gtk3.gtk_adjustment_configure(@self, value, lower, upper, step_increment, page_increment, page_size);
end;

function TGtkAdjustment.get_lower: gdouble; cdecl;
begin
  Result := Gtk3.gtk_adjustment_get_lower(@self);
end;

function TGtkAdjustment.get_minimum_increment: gdouble; cdecl;
begin
  Result := Gtk3.gtk_adjustment_get_minimum_increment(@self);
end;

function TGtkAdjustment.get_page_increment: gdouble; cdecl;
begin
  Result := Gtk3.gtk_adjustment_get_page_increment(@self);
end;

function TGtkAdjustment.get_page_size: gdouble; cdecl;
begin
  Result := Gtk3.gtk_adjustment_get_page_size(@self);
end;

function TGtkAdjustment.get_step_increment: gdouble; cdecl;
begin
  Result := Gtk3.gtk_adjustment_get_step_increment(@self);
end;

function TGtkAdjustment.get_upper: gdouble; cdecl;
begin
  Result := Gtk3.gtk_adjustment_get_upper(@self);
end;

function TGtkAdjustment.get_value: gdouble; cdecl;
begin
  Result := Gtk3.gtk_adjustment_get_value(@self);
end;

procedure TGtkAdjustment.set_lower(lower: gdouble); cdecl;
begin
  Gtk3.gtk_adjustment_set_lower(@self, lower);
end;

procedure TGtkAdjustment.set_page_increment(page_increment: gdouble); cdecl;
begin
  Gtk3.gtk_adjustment_set_page_increment(@self, page_increment);
end;

procedure TGtkAdjustment.set_page_size(page_size: gdouble); cdecl;
begin
  Gtk3.gtk_adjustment_set_page_size(@self, page_size);
end;

procedure TGtkAdjustment.set_step_increment(step_increment: gdouble); cdecl;
begin
  Gtk3.gtk_adjustment_set_step_increment(@self, step_increment);
end;

procedure TGtkAdjustment.set_upper(upper: gdouble); cdecl;
begin
  Gtk3.gtk_adjustment_set_upper(@self, upper);
end;

procedure TGtkAdjustment.set_value(value: gdouble); cdecl;
begin
  Gtk3.gtk_adjustment_set_value(@self, value);
end;

procedure TGtkAdjustment.value_changed; cdecl;
begin
  Gtk3.gtk_adjustment_value_changed(@self);
end;

procedure TGtkContainer.add(widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_container_add(@self, widget);
end;

procedure TGtkContainer.check_resize; cdecl;
begin
  Gtk3.gtk_container_check_resize(@self);
end;

procedure TGtkContainer.child_get_property(child: PGtkWidget; property_name: Pgchar; value: PGValue); cdecl;
begin
  Gtk3.gtk_container_child_get_property(@self, child, property_name, value);
end;

procedure TGtkContainer.child_notify(child: PGtkWidget; child_property: Pgchar); cdecl;
begin
  Gtk3.gtk_container_child_notify(@self, child, child_property);
end;

procedure TGtkContainer.child_set_property(child: PGtkWidget; property_name: Pgchar; value: PGValue); cdecl;
begin
  Gtk3.gtk_container_child_set_property(@self, child, property_name, value);
end;

function TGtkContainer.child_type: TGType; cdecl;
begin
  Result := Gtk3.gtk_container_child_type(@self);
end;

procedure TGtkContainer.forall(callback: TGtkCallback; callback_data: gpointer); cdecl;
begin
  Gtk3.gtk_container_forall(@self, callback, callback_data);
end;

procedure TGtkContainer.foreach(callback: TGtkCallback; callback_data: gpointer); cdecl;
begin
  Gtk3.gtk_container_foreach(@self, callback, callback_data);
end;

function TGtkContainer.get_border_width: guint; cdecl;
begin
  Result := Gtk3.gtk_container_get_border_width(@self);
end;

function TGtkContainer.get_children: PGList; cdecl;
begin
  Result := Gtk3.gtk_container_get_children(@self);
end;

function TGtkContainer.get_focus_chain(focusable_widgets: PPGList): gboolean; cdecl;
begin
  Result := Gtk3.gtk_container_get_focus_chain(@self, focusable_widgets);
end;

function TGtkContainer.get_focus_child: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_container_get_focus_child(@self);
end;

function TGtkContainer.get_focus_hadjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk3.gtk_container_get_focus_hadjustment(@self);
end;

function TGtkContainer.get_focus_vadjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk3.gtk_container_get_focus_vadjustment(@self);
end;

function TGtkContainer.get_path_for_child(child: PGtkWidget): PGtkWidgetPath; cdecl;
begin
  Result := Gtk3.gtk_container_get_path_for_child(@self, child);
end;

function TGtkContainer.get_resize_mode: TGtkResizeMode; cdecl;
begin
  Result := Gtk3.gtk_container_get_resize_mode(@self);
end;

procedure TGtkContainer.propagate_draw(child: PGtkWidget; cr: Pcairo_t); cdecl;
begin
  Gtk3.gtk_container_propagate_draw(@self, child, cr);
end;

procedure TGtkContainer.remove(widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_container_remove(@self, widget);
end;

procedure TGtkContainer.resize_children; cdecl;
begin
  Gtk3.gtk_container_resize_children(@self);
end;

procedure TGtkContainer.set_border_width(border_width: guint); cdecl;
begin
  Gtk3.gtk_container_set_border_width(@self, border_width);
end;

procedure TGtkContainer.set_focus_chain(focusable_widgets: PGList); cdecl;
begin
  Gtk3.gtk_container_set_focus_chain(@self, focusable_widgets);
end;

procedure TGtkContainer.set_focus_child(child: PGtkWidget); cdecl;
begin
  Gtk3.gtk_container_set_focus_child(@self, child);
end;

procedure TGtkContainer.set_focus_hadjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk3.gtk_container_set_focus_hadjustment(@self, adjustment);
end;

procedure TGtkContainer.set_focus_vadjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk3.gtk_container_set_focus_vadjustment(@self, adjustment);
end;

procedure TGtkContainer.set_reallocate_redraws(needs_redraws: gboolean); cdecl;
begin
  Gtk3.gtk_container_set_reallocate_redraws(@self, needs_redraws);
end;

procedure TGtkContainer.set_resize_mode(resize_mode: TGtkResizeMode); cdecl;
begin
  Gtk3.gtk_container_set_resize_mode(@self, resize_mode);
end;

procedure TGtkContainer.unset_focus_chain; cdecl;
begin
  Gtk3.gtk_container_unset_focus_chain(@self);
end;

function TGtkBin.get_child: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_bin_get_child(@self);
end;

function TGtkAlignment.new(xalign: gfloat; yalign: gfloat; xscale: gfloat; yscale: gfloat): PGtkAlignment; cdecl;
begin
  Result := Gtk3.gtk_alignment_new(xalign, yalign, xscale, yscale);
end;

procedure TGtkAlignment.get_padding(padding_top: Pguint; padding_bottom: Pguint; padding_left: Pguint; padding_right: Pguint); cdecl;
begin
  Gtk3.gtk_alignment_get_padding(@self, padding_top, padding_bottom, padding_left, padding_right);
end;

procedure TGtkAlignment.set_(xalign: gfloat; yalign: gfloat; xscale: gfloat; yscale: gfloat); cdecl;
begin
  Gtk3.gtk_alignment_set(@self, xalign, yalign, xscale, yscale);
end;

procedure TGtkAlignment.set_padding(padding_top: guint; padding_bottom: guint; padding_left: guint; padding_right: guint); cdecl;
begin
  Gtk3.gtk_alignment_set_padding(@self, padding_top, padding_bottom, padding_left, padding_right);
end;

function TGtkContainerClass.find_child_property(property_name: Pgchar): PGParamSpec; cdecl;
begin
  Result := Gtk3.gtk_container_class_find_child_property(@self, property_name);
end;

procedure TGtkContainerClass.handle_border_width; cdecl;
begin
  Gtk3.gtk_container_class_handle_border_width(@self);
end;

procedure TGtkContainerClass.install_child_property(property_id: guint; pspec: PGParamSpec); cdecl;
begin
  Gtk3.gtk_container_class_install_child_property(@self, property_id, pspec);
end;

function TGtkContainerClass.list_child_properties(n_properties: Pguint): PPGParamSpec; cdecl;
begin
  Result := Gtk3.gtk_container_class_list_child_properties(@self, n_properties);
end;

function TGtkWidgetClass.find_style_property(property_name: Pgchar): PGParamSpec; cdecl;
begin
  Result := Gtk3.gtk_widget_class_find_style_property(@self, property_name);
end;

procedure TGtkWidgetClass.install_style_property(pspec: PGParamSpec); cdecl;
begin
  Gtk3.gtk_widget_class_install_style_property(@self, pspec);
end;

procedure TGtkWidgetClass.install_style_property_parser(pspec: PGParamSpec; parser: TGtkRcPropertyParser); cdecl;
begin
  Gtk3.gtk_widget_class_install_style_property_parser(@self, pspec, parser);
end;

function TGtkWidgetClass.list_style_properties(n_properties: Pguint): PPGParamSpec; cdecl;
begin
  Result := Gtk3.gtk_widget_class_list_style_properties(@self, n_properties);
end;

procedure TGtkWidgetClass.set_accessible_role(role: TAtkRole); cdecl;
begin
  Gtk3.gtk_widget_class_set_accessible_role(@self, role);
end;

procedure TGtkWidgetClass.set_accessible_type(type_: TGType); cdecl;
begin
  Gtk3.gtk_widget_class_set_accessible_type(@self, type_);
end;

function TGtkAppChooser.get_app_info: PGAppInfo; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_get_app_info(@self);
end;

function TGtkAppChooser.get_content_type: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_get_content_type(@self);
end;

procedure TGtkAppChooser.refresh; cdecl;
begin
  Gtk3.gtk_app_chooser_refresh(@self);
end;

procedure TGtkCellEditable.editing_done; cdecl;
begin
  Gtk3.gtk_cell_editable_editing_done(@self);
end;

procedure TGtkCellEditable.remove_widget; cdecl;
begin
  Gtk3.gtk_cell_editable_remove_widget(@self);
end;

procedure TGtkCellEditable.start_editing(event: PGdkEvent); cdecl;
begin
  Gtk3.gtk_cell_editable_start_editing(@self, event);
end;

procedure TGtkCellLayout.add_attribute(cell: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl;
begin
  Gtk3.gtk_cell_layout_add_attribute(@self, cell, attribute, column);
end;

procedure TGtkCellLayout.clear; cdecl;
begin
  Gtk3.gtk_cell_layout_clear(@self);
end;

procedure TGtkCellLayout.clear_attributes(cell: PGtkCellRenderer); cdecl;
begin
  Gtk3.gtk_cell_layout_clear_attributes(@self, cell);
end;

function TGtkCellLayout.get_area: PGtkCellArea; cdecl;
begin
  Result := Gtk3.gtk_cell_layout_get_area(@self);
end;

function TGtkCellLayout.get_cells: PGList; cdecl;
begin
  Result := Gtk3.gtk_cell_layout_get_cells(@self);
end;

procedure TGtkCellLayout.pack_end(cell: PGtkCellRenderer; expand: gboolean); cdecl;
begin
  Gtk3.gtk_cell_layout_pack_end(@self, cell, expand);
end;

procedure TGtkCellLayout.pack_start(cell: PGtkCellRenderer; expand: gboolean); cdecl;
begin
  Gtk3.gtk_cell_layout_pack_start(@self, cell, expand);
end;

procedure TGtkCellLayout.reorder(cell: PGtkCellRenderer; position: gint); cdecl;
begin
  Gtk3.gtk_cell_layout_reorder(@self, cell, position);
end;

procedure TGtkCellLayout.set_cell_data_func(cell: PGtkCellRenderer; func: TGtkCellLayoutDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_cell_layout_set_cell_data_func(@self, cell, func, func_data, destroy_);
end;

function TGtkComboBox.new: PGtkComboBox; cdecl;
begin
  Result := Gtk3.gtk_combo_box_new();
end;

function TGtkComboBox.new_with_area(area: PGtkCellArea): PGtkComboBox; cdecl;
begin
  Result := Gtk3.gtk_combo_box_new_with_area(area);
end;

function TGtkComboBox.new_with_area_and_entry(area: PGtkCellArea): PGtkComboBox; cdecl;
begin
  Result := Gtk3.gtk_combo_box_new_with_area_and_entry(area);
end;

function TGtkComboBox.new_with_entry: PGtkComboBox; cdecl;
begin
  Result := Gtk3.gtk_combo_box_new_with_entry();
end;

function TGtkComboBox.new_with_model(model: PGtkTreeModel): PGtkComboBox; cdecl;
begin
  Result := Gtk3.gtk_combo_box_new_with_model(model);
end;

function TGtkComboBox.new_with_model_and_entry(model: PGtkTreeModel): PGtkComboBox; cdecl;
begin
  Result := Gtk3.gtk_combo_box_new_with_model_and_entry(model);
end;

function TGtkComboBox.get_active: gint; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_active(@self);
end;

function TGtkComboBox.get_active_id: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_active_id(@self);
end;

function TGtkComboBox.get_active_iter(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_active_iter(@self, iter);
end;

function TGtkComboBox.get_add_tearoffs: gboolean; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_add_tearoffs(@self);
end;

function TGtkComboBox.get_button_sensitivity: TGtkSensitivityType; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_button_sensitivity(@self);
end;

function TGtkComboBox.get_column_span_column: gint; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_column_span_column(@self);
end;

function TGtkComboBox.get_entry_text_column: gint; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_entry_text_column(@self);
end;

function TGtkComboBox.get_focus_on_click: gboolean; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_focus_on_click(@self);
end;

function TGtkComboBox.get_has_entry: gboolean; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_has_entry(@self);
end;

function TGtkComboBox.get_id_column: gint; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_id_column(@self);
end;

function TGtkComboBox.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_model(@self);
end;

function TGtkComboBox.get_popup_accessible: PAtkObject; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_popup_accessible(@self);
end;

function TGtkComboBox.get_popup_fixed_width: gboolean; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_popup_fixed_width(@self);
end;

function TGtkComboBox.get_row_separator_func: TGtkTreeViewRowSeparatorFunc; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_row_separator_func(@self);
end;

function TGtkComboBox.get_row_span_column: gint; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_row_span_column(@self);
end;

function TGtkComboBox.get_title: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_title(@self);
end;

function TGtkComboBox.get_wrap_width: gint; cdecl;
begin
  Result := Gtk3.gtk_combo_box_get_wrap_width(@self);
end;

procedure TGtkComboBox.popdown; cdecl;
begin
  Gtk3.gtk_combo_box_popdown(@self);
end;

procedure TGtkComboBox.popup; cdecl;
begin
  Gtk3.gtk_combo_box_popup(@self);
end;

procedure TGtkComboBox.popup_for_device(device: PGdkDevice); cdecl;
begin
  Gtk3.gtk_combo_box_popup_for_device(@self, device);
end;

procedure TGtkComboBox.set_active(index_: gint); cdecl;
begin
  Gtk3.gtk_combo_box_set_active(@self, index_);
end;

function TGtkComboBox.set_active_id(active_id: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_combo_box_set_active_id(@self, active_id);
end;

procedure TGtkComboBox.set_active_iter(iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_combo_box_set_active_iter(@self, iter);
end;

procedure TGtkComboBox.set_add_tearoffs(add_tearoffs: gboolean); cdecl;
begin
  Gtk3.gtk_combo_box_set_add_tearoffs(@self, add_tearoffs);
end;

procedure TGtkComboBox.set_button_sensitivity(sensitivity: TGtkSensitivityType); cdecl;
begin
  Gtk3.gtk_combo_box_set_button_sensitivity(@self, sensitivity);
end;

procedure TGtkComboBox.set_column_span_column(column_span: gint); cdecl;
begin
  Gtk3.gtk_combo_box_set_column_span_column(@self, column_span);
end;

procedure TGtkComboBox.set_entry_text_column(text_column: gint); cdecl;
begin
  Gtk3.gtk_combo_box_set_entry_text_column(@self, text_column);
end;

procedure TGtkComboBox.set_focus_on_click(focus_on_click: gboolean); cdecl;
begin
  Gtk3.gtk_combo_box_set_focus_on_click(@self, focus_on_click);
end;

procedure TGtkComboBox.set_id_column(id_column: gint); cdecl;
begin
  Gtk3.gtk_combo_box_set_id_column(@self, id_column);
end;

procedure TGtkComboBox.set_model(model: PGtkTreeModel); cdecl;
begin
  Gtk3.gtk_combo_box_set_model(@self, model);
end;

procedure TGtkComboBox.set_popup_fixed_width(fixed: gboolean); cdecl;
begin
  Gtk3.gtk_combo_box_set_popup_fixed_width(@self, fixed);
end;

procedure TGtkComboBox.set_row_separator_func(func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_combo_box_set_row_separator_func(@self, func, data, destroy_);
end;

procedure TGtkComboBox.set_row_span_column(row_span: gint); cdecl;
begin
  Gtk3.gtk_combo_box_set_row_span_column(@self, row_span);
end;

procedure TGtkComboBox.set_title(title: Pgchar); cdecl;
begin
  Gtk3.gtk_combo_box_set_title(@self, title);
end;

procedure TGtkComboBox.set_wrap_width(width: gint); cdecl;
begin
  Gtk3.gtk_combo_box_set_wrap_width(@self, width);
end;

function TGtkAppChooserButton.new(content_type: Pgchar): PGtkAppChooserButton; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_button_new(content_type);
end;

procedure TGtkAppChooserButton.append_custom_item(name: Pgchar; label_: Pgchar; icon: PGIcon); cdecl;
begin
  Gtk3.gtk_app_chooser_button_append_custom_item(@self, name, label_, icon);
end;

procedure TGtkAppChooserButton.append_separator; cdecl;
begin
  Gtk3.gtk_app_chooser_button_append_separator(@self);
end;

function TGtkAppChooserButton.get_heading: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_button_get_heading(@self);
end;

function TGtkAppChooserButton.get_show_dialog_item: gboolean; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_button_get_show_dialog_item(@self);
end;

procedure TGtkAppChooserButton.set_active_custom_item(name: Pgchar); cdecl;
begin
  Gtk3.gtk_app_chooser_button_set_active_custom_item(@self, name);
end;

procedure TGtkAppChooserButton.set_heading(heading: Pgchar); cdecl;
begin
  Gtk3.gtk_app_chooser_button_set_heading(@self, heading);
end;

procedure TGtkAppChooserButton.set_show_dialog_item(setting: gboolean); cdecl;
begin
  Gtk3.gtk_app_chooser_button_set_show_dialog_item(@self, setting);
end;

function TGtkAppChooserDialog.new(parent: PAtkWindow; flags: TGtkDialogFlags; file_: PGFile): PGtkAppChooserDialog; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_dialog_new(parent, flags, file_);
end;

function TGtkAppChooserDialog.new_for_content_type(parent: PAtkWindow; flags: TGtkDialogFlags; content_type: Pgchar): PGtkAppChooserDialog; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_dialog_new_for_content_type(parent, flags, content_type);
end;

function TGtkAppChooserDialog.get_heading: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_dialog_get_heading(@self);
end;

function TGtkAppChooserDialog.get_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_dialog_get_widget(@self);
end;

procedure TGtkAppChooserDialog.set_heading(heading: Pgchar); cdecl;
begin
  Gtk3.gtk_app_chooser_dialog_set_heading(@self, heading);
end;

function TGtkOrientable.get_orientation: TGtkOrientation; cdecl;
begin
  Result := Gtk3.gtk_orientable_get_orientation(@self);
end;

procedure TGtkOrientable.set_orientation(orientation: TGtkOrientation); cdecl;
begin
  Gtk3.gtk_orientable_set_orientation(@self, orientation);
end;

procedure TGtkMenuShell.activate_item(menu_item: PGtkWidget; force_deactivate: gboolean); cdecl;
begin
  Gtk3.gtk_menu_shell_activate_item(@self, menu_item, force_deactivate);
end;

procedure TGtkMenuShell.append(child: PGtkWidget); cdecl;
begin
  Gtk3.gtk_menu_shell_append(@self, child);
end;

procedure TGtkMenuShell.cancel; cdecl;
begin
  Gtk3.gtk_menu_shell_cancel(@self);
end;

procedure TGtkMenuShell.deactivate; cdecl;
begin
  Gtk3.gtk_menu_shell_deactivate(@self);
end;

procedure TGtkMenuShell.deselect; cdecl;
begin
  Gtk3.gtk_menu_shell_deselect(@self);
end;

function TGtkMenuShell.get_parent_shell: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_menu_shell_get_parent_shell(@self);
end;

function TGtkMenuShell.get_selected_item: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_menu_shell_get_selected_item(@self);
end;

function TGtkMenuShell.get_take_focus: gboolean; cdecl;
begin
  Result := Gtk3.gtk_menu_shell_get_take_focus(@self);
end;

procedure TGtkMenuShell.insert(child: PGtkWidget; position: gint); cdecl;
begin
  Gtk3.gtk_menu_shell_insert(@self, child, position);
end;

procedure TGtkMenuShell.prepend(child: PGtkWidget); cdecl;
begin
  Gtk3.gtk_menu_shell_prepend(@self, child);
end;

procedure TGtkMenuShell.select_first(search_sensitive: gboolean); cdecl;
begin
  Gtk3.gtk_menu_shell_select_first(@self, search_sensitive);
end;

procedure TGtkMenuShell.select_item(menu_item: PGtkWidget); cdecl;
begin
  Gtk3.gtk_menu_shell_select_item(@self, menu_item);
end;

procedure TGtkMenuShell.set_take_focus(take_focus: gboolean); cdecl;
begin
  Gtk3.gtk_menu_shell_set_take_focus(@self, take_focus);
end;

function TGtkMenu.new: PGtkMenu; cdecl;
begin
  Result := Gtk3.gtk_menu_new();
end;

function TGtkMenu.get_for_attach_widget(widget: PGtkWidget): PGList; cdecl;
begin
  Result := Gtk3.gtk_menu_get_for_attach_widget(widget);
end;

procedure TGtkMenu.attach(child: PGtkWidget; left_attach: guint; right_attach: guint; top_attach: guint; bottom_attach: guint); cdecl;
begin
  Gtk3.gtk_menu_attach(@self, child, left_attach, right_attach, top_attach, bottom_attach);
end;

procedure TGtkMenu.attach_to_widget(attach_widget: PGtkWidget; detacher: TGtkMenuDetachFunc); cdecl;
begin
  Gtk3.gtk_menu_attach_to_widget(@self, attach_widget, detacher);
end;

procedure TGtkMenu.detach; cdecl;
begin
  Gtk3.gtk_menu_detach(@self);
end;

function TGtkMenu.get_accel_group: PGtkAccelGroup; cdecl;
begin
  Result := Gtk3.gtk_menu_get_accel_group(@self);
end;

function TGtkMenu.get_accel_path: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_menu_get_accel_path(@self);
end;

function TGtkMenu.get_active: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_menu_get_active(@self);
end;

function TGtkMenu.get_attach_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_menu_get_attach_widget(@self);
end;

function TGtkMenu.get_monitor: gint; cdecl;
begin
  Result := Gtk3.gtk_menu_get_monitor(@self);
end;

function TGtkMenu.get_reserve_toggle_size: gboolean; cdecl;
begin
  Result := Gtk3.gtk_menu_get_reserve_toggle_size(@self);
end;

function TGtkMenu.get_tearoff_state: gboolean; cdecl;
begin
  Result := Gtk3.gtk_menu_get_tearoff_state(@self);
end;

function TGtkMenu.get_title: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_menu_get_title(@self);
end;

procedure TGtkMenu.popdown; cdecl;
begin
  Gtk3.gtk_menu_popdown(@self);
end;

procedure TGtkMenu.popup(parent_menu_shell: PGtkWidget; parent_menu_item: PGtkWidget; func: TGtkMenuPositionFunc; data: gpointer; button: guint; activate_time: guint32); cdecl;
begin
  Gtk3.gtk_menu_popup(@self, parent_menu_shell, parent_menu_item, func, data, button, activate_time);
end;

procedure TGtkMenu.popup_for_device(device: PGdkDevice; parent_menu_shell: PGtkWidget; parent_menu_item: PGtkWidget; func: TGtkMenuPositionFunc; data: gpointer; destroy_: TGDestroyNotify; button: guint; activate_time: guint32); cdecl;
begin
  Gtk3.gtk_menu_popup_for_device(@self, device, parent_menu_shell, parent_menu_item, func, data, destroy_, button, activate_time);
end;

procedure TGtkMenu.reorder_child(child: PGtkWidget; position: gint); cdecl;
begin
  Gtk3.gtk_menu_reorder_child(@self, child, position);
end;

procedure TGtkMenu.reposition; cdecl;
begin
  Gtk3.gtk_menu_reposition(@self);
end;

procedure TGtkMenu.set_accel_group(accel_group: PGtkAccelGroup); cdecl;
begin
  Gtk3.gtk_menu_set_accel_group(@self, accel_group);
end;

procedure TGtkMenu.set_accel_path(accel_path: Pgchar); cdecl;
begin
  Gtk3.gtk_menu_set_accel_path(@self, accel_path);
end;

procedure TGtkMenu.set_active(index: guint); cdecl;
begin
  Gtk3.gtk_menu_set_active(@self, index);
end;

procedure TGtkMenu.set_monitor(monitor_num: gint); cdecl;
begin
  Gtk3.gtk_menu_set_monitor(@self, monitor_num);
end;

procedure TGtkMenu.set_reserve_toggle_size(reserve_toggle_size: gboolean); cdecl;
begin
  Gtk3.gtk_menu_set_reserve_toggle_size(@self, reserve_toggle_size);
end;

procedure TGtkMenu.set_screen(screen: PGdkScreen); cdecl;
begin
  Gtk3.gtk_menu_set_screen(@self, screen);
end;

procedure TGtkMenu.set_tearoff_state(torn_off: gboolean); cdecl;
begin
  Gtk3.gtk_menu_set_tearoff_state(@self, torn_off);
end;

procedure TGtkMenu.set_title(title: Pgchar); cdecl;
begin
  Gtk3.gtk_menu_set_title(@self, title);
end;

function TGtkBox.new(orientation: TGtkOrientation; spacing: gint): PGtkBox; cdecl;
begin
  Result := Gtk3.gtk_box_new(orientation, spacing);
end;

function TGtkBox.get_homogeneous: gboolean; cdecl;
begin
  Result := Gtk3.gtk_box_get_homogeneous(@self);
end;

function TGtkBox.get_spacing: gint; cdecl;
begin
  Result := Gtk3.gtk_box_get_spacing(@self);
end;

procedure TGtkBox.pack_end(child: PGtkWidget; expand: gboolean; fill: gboolean; padding: guint); cdecl;
begin
  Gtk3.gtk_box_pack_end(@self, child, expand, fill, padding);
end;

procedure TGtkBox.pack_start(child: PGtkWidget; expand: gboolean; fill: gboolean; padding: guint); cdecl;
begin
  Gtk3.gtk_box_pack_start(@self, child, expand, fill, padding);
end;

procedure TGtkBox.query_child_packing(child: PGtkWidget; expand: Pgboolean; fill: Pgboolean; padding: Pguint; pack_type: PGtkPackType); cdecl;
begin
  Gtk3.gtk_box_query_child_packing(@self, child, expand, fill, padding, pack_type);
end;

procedure TGtkBox.reorder_child(child: PGtkWidget; position: gint); cdecl;
begin
  Gtk3.gtk_box_reorder_child(@self, child, position);
end;

procedure TGtkBox.set_child_packing(child: PGtkWidget; expand: gboolean; fill: gboolean; padding: guint; pack_type: TGtkPackType); cdecl;
begin
  Gtk3.gtk_box_set_child_packing(@self, child, expand, fill, padding, pack_type);
end;

procedure TGtkBox.set_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk3.gtk_box_set_homogeneous(@self, homogeneous);
end;

procedure TGtkBox.set_spacing(spacing: gint); cdecl;
begin
  Gtk3.gtk_box_set_spacing(@self, spacing);
end;

function TGtkAppChooserWidget.new(content_type: Pgchar): PGtkAppChooserWidget; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_widget_new(content_type);
end;

function TGtkAppChooserWidget.get_default_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_widget_get_default_text(@self);
end;

function TGtkAppChooserWidget.get_show_all: gboolean; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_widget_get_show_all(@self);
end;

function TGtkAppChooserWidget.get_show_default: gboolean; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_widget_get_show_default(@self);
end;

function TGtkAppChooserWidget.get_show_fallback: gboolean; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_widget_get_show_fallback(@self);
end;

function TGtkAppChooserWidget.get_show_other: gboolean; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_widget_get_show_other(@self);
end;

function TGtkAppChooserWidget.get_show_recommended: gboolean; cdecl;
begin
  Result := Gtk3.gtk_app_chooser_widget_get_show_recommended(@self);
end;

procedure TGtkAppChooserWidget.set_default_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_app_chooser_widget_set_default_text(@self, text);
end;

procedure TGtkAppChooserWidget.set_show_all(setting: gboolean); cdecl;
begin
  Gtk3.gtk_app_chooser_widget_set_show_all(@self, setting);
end;

procedure TGtkAppChooserWidget.set_show_default(setting: gboolean); cdecl;
begin
  Gtk3.gtk_app_chooser_widget_set_show_default(@self, setting);
end;

procedure TGtkAppChooserWidget.set_show_fallback(setting: gboolean); cdecl;
begin
  Gtk3.gtk_app_chooser_widget_set_show_fallback(@self, setting);
end;

procedure TGtkAppChooserWidget.set_show_other(setting: gboolean); cdecl;
begin
  Gtk3.gtk_app_chooser_widget_set_show_other(@self, setting);
end;

procedure TGtkAppChooserWidget.set_show_recommended(setting: gboolean); cdecl;
begin
  Gtk3.gtk_app_chooser_widget_set_show_recommended(@self, setting);
end;

function TGtkApplication.new(application_id: Pgchar; flags: TGApplicationFlags): PGtkApplication; cdecl;
begin
  Result := Gtk3.gtk_application_new(application_id, flags);
end;

procedure TGtkApplication.add_window(window: PAtkWindow); cdecl;
begin
  Gtk3.gtk_application_add_window(@self, window);
end;

function TGtkApplication.get_windows: PGList; cdecl;
begin
  Result := Gtk3.gtk_application_get_windows(@self);
end;

procedure TGtkApplication.remove_window(window: PAtkWindow); cdecl;
begin
  Gtk3.gtk_application_remove_window(@self, window);
end;

function TGtkArrow.new(arrow_type: TGtkArrowType; shadow_type: TGtkShadowType): PGtkArrow; cdecl;
begin
  Result := Gtk3.gtk_arrow_new(arrow_type, shadow_type);
end;

procedure TGtkArrow.set_(arrow_type: TGtkArrowType; shadow_type: TGtkShadowType); cdecl;
begin
  Gtk3.gtk_arrow_set(@self, arrow_type, shadow_type);
end;

function TGtkFrame.new(label_: Pgchar): PGtkFrame; cdecl;
begin
  Result := Gtk3.gtk_frame_new(label_);
end;

function TGtkFrame.get_label: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_frame_get_label(@self);
end;

procedure TGtkFrame.get_label_align(xalign: Pgfloat; yalign: Pgfloat); cdecl;
begin
  Gtk3.gtk_frame_get_label_align(@self, xalign, yalign);
end;

function TGtkFrame.get_label_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_frame_get_label_widget(@self);
end;

function TGtkFrame.get_shadow_type: TGtkShadowType; cdecl;
begin
  Result := Gtk3.gtk_frame_get_shadow_type(@self);
end;

procedure TGtkFrame.set_label(label_: Pgchar); cdecl;
begin
  Gtk3.gtk_frame_set_label(@self, label_);
end;

procedure TGtkFrame.set_label_align(xalign: gfloat; yalign: gfloat); cdecl;
begin
  Gtk3.gtk_frame_set_label_align(@self, xalign, yalign);
end;

procedure TGtkFrame.set_label_widget(label_widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_frame_set_label_widget(@self, label_widget);
end;

procedure TGtkFrame.set_shadow_type(type_: TGtkShadowType); cdecl;
begin
  Gtk3.gtk_frame_set_shadow_type(@self, type_);
end;

function TGtkAspectFrame.new(label_: Pgchar; xalign: gfloat; yalign: gfloat; ratio: gfloat; obey_child: gboolean): PGtkAspectFrame; cdecl;
begin
  Result := Gtk3.gtk_aspect_frame_new(label_, xalign, yalign, ratio, obey_child);
end;

procedure TGtkAspectFrame.set_(xalign: gfloat; yalign: gfloat; ratio: gfloat; obey_child: gboolean); cdecl;
begin
  Gtk3.gtk_aspect_frame_set(@self, xalign, yalign, ratio, obey_child);
end;

function TGtkAssistant.new: PGtkAssistant; cdecl;
begin
  Result := Gtk3.gtk_assistant_new();
end;

procedure TGtkAssistant.add_action_widget(child: PGtkWidget); cdecl;
begin
  Gtk3.gtk_assistant_add_action_widget(@self, child);
end;

function TGtkAssistant.append_page(page: PGtkWidget): gint; cdecl;
begin
  Result := Gtk3.gtk_assistant_append_page(@self, page);
end;

procedure TGtkAssistant.commit; cdecl;
begin
  Gtk3.gtk_assistant_commit(@self);
end;

function TGtkAssistant.get_current_page: gint; cdecl;
begin
  Result := Gtk3.gtk_assistant_get_current_page(@self);
end;

function TGtkAssistant.get_n_pages: gint; cdecl;
begin
  Result := Gtk3.gtk_assistant_get_n_pages(@self);
end;

function TGtkAssistant.get_nth_page(page_num: gint): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_assistant_get_nth_page(@self, page_num);
end;

function TGtkAssistant.get_page_complete(page: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk3.gtk_assistant_get_page_complete(@self, page);
end;

function TGtkAssistant.get_page_title(page: PGtkWidget): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_assistant_get_page_title(@self, page);
end;

function TGtkAssistant.get_page_type(page: PGtkWidget): TGtkAssistantPageType; cdecl;
begin
  Result := Gtk3.gtk_assistant_get_page_type(@self, page);
end;

function TGtkAssistant.insert_page(page: PGtkWidget; position: gint): gint; cdecl;
begin
  Result := Gtk3.gtk_assistant_insert_page(@self, page, position);
end;

procedure TGtkAssistant.next_page; cdecl;
begin
  Gtk3.gtk_assistant_next_page(@self);
end;

function TGtkAssistant.prepend_page(page: PGtkWidget): gint; cdecl;
begin
  Result := Gtk3.gtk_assistant_prepend_page(@self, page);
end;

procedure TGtkAssistant.previous_page; cdecl;
begin
  Gtk3.gtk_assistant_previous_page(@self);
end;

procedure TGtkAssistant.remove_action_widget(child: PGtkWidget); cdecl;
begin
  Gtk3.gtk_assistant_remove_action_widget(@self, child);
end;

procedure TGtkAssistant.remove_page(page_num: gint); cdecl;
begin
  Gtk3.gtk_assistant_remove_page(@self, page_num);
end;

procedure TGtkAssistant.set_current_page(page_num: gint); cdecl;
begin
  Gtk3.gtk_assistant_set_current_page(@self, page_num);
end;

procedure TGtkAssistant.set_forward_page_func(page_func: TGtkAssistantPageFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_assistant_set_forward_page_func(@self, page_func, data, destroy_);
end;

procedure TGtkAssistant.set_page_complete(page: PGtkWidget; complete: gboolean); cdecl;
begin
  Gtk3.gtk_assistant_set_page_complete(@self, page, complete);
end;

procedure TGtkAssistant.set_page_title(page: PGtkWidget; title: Pgchar); cdecl;
begin
  Gtk3.gtk_assistant_set_page_title(@self, page, title);
end;

procedure TGtkAssistant.set_page_type(page: PGtkWidget; type_: TGtkAssistantPageType); cdecl;
begin
  Gtk3.gtk_assistant_set_page_type(@self, page, type_);
end;

procedure TGtkAssistant.update_buttons_state; cdecl;
begin
  Gtk3.gtk_assistant_update_buttons_state(@self);
end;


function TGtkBindingSet.activate(keyval: guint; modifiers: TGdkModifierType; object_: PGObject): gboolean; cdecl;
begin
  Result := Gtk3.gtk_binding_set_activate(@self, keyval, modifiers, object_);
end;

procedure TGtkBindingSet.add_path(path_type: TGtkPathType; path_pattern: Pgchar; priority: TGtkPathPriorityType); cdecl;
begin
  Gtk3.gtk_binding_set_add_path(@self, path_type, path_pattern, priority);
end;

function TGtkBindingSet.by_class(object_class: gpointer): PGtkBindingSet; cdecl;
begin
  Result := Gtk3.gtk_binding_set_by_class(object_class);
end;

function TGtkBindingSet.find(set_name: Pgchar): PGtkBindingSet; cdecl;
begin
  Result := Gtk3.gtk_binding_set_find(set_name);
end;

function TGtkBindingSet.new(set_name: Pgchar): PGtkBindingSet; cdecl;
begin
  Result := Gtk3.gtk_binding_set_new(set_name);
end;

function TGtkBindingEntry.add_signal_from_string(binding_set: PGtkBindingSet; signal_desc: Pgchar): TGTokenType; cdecl;
begin
  Result := Gtk3.gtk_binding_entry_add_signal_from_string(binding_set, signal_desc);
end;

procedure TGtkBindingEntry.add_signall(binding_set: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType; signal_name: Pgchar; binding_args: PGSList); cdecl;
begin
  Gtk3.gtk_binding_entry_add_signall(binding_set, keyval, modifiers, signal_name, binding_args);
end;

procedure TGtkBindingEntry.remove(binding_set: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType); cdecl;
begin
  Gtk3.gtk_binding_entry_remove(binding_set, keyval, modifiers);
end;

procedure TGtkBindingEntry.skip(binding_set: PGtkBindingSet; keyval: guint; modifiers: TGdkModifierType); cdecl;
begin
  Gtk3.gtk_binding_entry_skip(binding_set, keyval, modifiers);
end;

function TGtkBorder.new: PGtkBorder; cdecl;
begin
  Result := Gtk3.gtk_border_new();
end;

function TGtkBorder.copy: PGtkBorder; cdecl;
begin
  Result := Gtk3.gtk_border_copy(@self);
end;

procedure TGtkBorder.free; cdecl;
begin
  Gtk3.gtk_border_free(@self);
end;

function TGtkBuilder.new: PGtkBuilder; cdecl;
begin
  Result := Gtk3.gtk_builder_new();
end;

function TGtkBuilder.add_from_file(filename: Pgchar): guint; cdecl;
begin
  Result := Gtk3.gtk_builder_add_from_file(@self, filename);
end;

function TGtkBuilder.add_from_string(buffer: Pgchar; length: gsize): guint; cdecl;
begin
  Result := Gtk3.gtk_builder_add_from_string(@self, buffer, length);
end;

function TGtkBuilder.add_objects_from_file(filename: Pgchar; object_ids: PPgchar): guint; cdecl;
begin
  Result := Gtk3.gtk_builder_add_objects_from_file(@self, filename, object_ids);
end;

function TGtkBuilder.add_objects_from_string(buffer: Pgchar; length: gsize; object_ids: PPgchar): guint; cdecl;
begin
  Result := Gtk3.gtk_builder_add_objects_from_string(@self, buffer, length, object_ids);
end;

procedure TGtkBuilder.connect_signals(user_data: gpointer); cdecl;
begin
  Gtk3.gtk_builder_connect_signals(@self, user_data);
end;

procedure TGtkBuilder.connect_signals_full(func: TGtkBuilderConnectFunc; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_builder_connect_signals_full(@self, func, user_data);
end;

function TGtkBuilder.get_object(name: Pgchar): PGObject; cdecl;
begin
  Result := Gtk3.gtk_builder_get_object(@self, name);
end;

function TGtkBuilder.get_objects: PGSList; cdecl;
begin
  Result := Gtk3.gtk_builder_get_objects(@self);
end;

function TGtkBuilder.get_translation_domain: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_builder_get_translation_domain(@self);
end;

function TGtkBuilder.get_type_from_name(type_name: Pgchar): TGType; cdecl;
begin
  Result := Gtk3.gtk_builder_get_type_from_name(@self, type_name);
end;

procedure TGtkBuilder.set_translation_domain(domain: Pgchar); cdecl;
begin
  Gtk3.gtk_builder_set_translation_domain(@self, domain);
end;

function TGtkBuilder.value_from_string(pspec: PGParamSpec; string_: Pgchar; value: PGValue): gboolean; cdecl;
begin
  Result := Gtk3.gtk_builder_value_from_string(@self, pspec, string_, value);
end;

function TGtkBuilder.value_from_string_type(type_: TGType; string_: Pgchar; value: PGValue): gboolean; cdecl;
begin
  Result := Gtk3.gtk_builder_value_from_string_type(@self, type_, string_, value);
end;

function TGtkButton.new: PGtkButton; cdecl;
begin
  Result := Gtk3.gtk_button_new();
end;

function TGtkButton.new_from_stock(stock_id: Pgchar): PGtkButton; cdecl;
begin
  Result := Gtk3.gtk_button_new_from_stock(stock_id);
end;

function TGtkButton.new_with_label(label_: Pgchar): PGtkButton; cdecl;
begin
  Result := Gtk3.gtk_button_new_with_label(label_);
end;

function TGtkButton.new_with_mnemonic(label_: Pgchar): PGtkButton; cdecl;
begin
  Result := Gtk3.gtk_button_new_with_mnemonic(label_);
end;

procedure TGtkButton.clicked; cdecl;
begin
  Gtk3.gtk_button_clicked(@self);
end;

procedure TGtkButton.enter; cdecl;
begin
  Gtk3.gtk_button_enter(@self);
end;

procedure TGtkButton.get_alignment(xalign: Pgfloat; yalign: Pgfloat); cdecl;
begin
  Gtk3.gtk_button_get_alignment(@self, xalign, yalign);
end;

function TGtkButton.get_event_window: PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_button_get_event_window(@self);
end;

function TGtkButton.get_focus_on_click: gboolean; cdecl;
begin
  Result := Gtk3.gtk_button_get_focus_on_click(@self);
end;

function TGtkButton.get_image: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_button_get_image(@self);
end;

function TGtkButton.get_image_position: TGtkPositionType; cdecl;
begin
  Result := Gtk3.gtk_button_get_image_position(@self);
end;

function TGtkButton.get_label: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_button_get_label(@self);
end;

function TGtkButton.get_relief: TGtkReliefStyle; cdecl;
begin
  Result := Gtk3.gtk_button_get_relief(@self);
end;

function TGtkButton.get_use_stock: gboolean; cdecl;
begin
  Result := Gtk3.gtk_button_get_use_stock(@self);
end;

function TGtkButton.get_use_underline: gboolean; cdecl;
begin
  Result := Gtk3.gtk_button_get_use_underline(@self);
end;

procedure TGtkButton.leave; cdecl;
begin
  Gtk3.gtk_button_leave(@self);
end;

procedure TGtkButton.pressed; cdecl;
begin
  Gtk3.gtk_button_pressed(@self);
end;

procedure TGtkButton.released; cdecl;
begin
  Gtk3.gtk_button_released(@self);
end;

procedure TGtkButton.set_alignment(xalign: gfloat; yalign: gfloat); cdecl;
begin
  Gtk3.gtk_button_set_alignment(@self, xalign, yalign);
end;

procedure TGtkButton.set_focus_on_click(focus_on_click: gboolean); cdecl;
begin
  Gtk3.gtk_button_set_focus_on_click(@self, focus_on_click);
end;

procedure TGtkButton.set_image(image: PGtkWidget); cdecl;
begin
  Gtk3.gtk_button_set_image(@self, image);
end;

procedure TGtkButton.set_image_position(position: TGtkPositionType); cdecl;
begin
  Gtk3.gtk_button_set_image_position(@self, position);
end;

procedure TGtkButton.set_label(label_: Pgchar); cdecl;
begin
  Gtk3.gtk_button_set_label(@self, label_);
end;

procedure TGtkButton.set_relief(newstyle: TGtkReliefStyle); cdecl;
begin
  Gtk3.gtk_button_set_relief(@self, newstyle);
end;

procedure TGtkButton.set_use_stock(use_stock: gboolean); cdecl;
begin
  Gtk3.gtk_button_set_use_stock(@self, use_stock);
end;

procedure TGtkButton.set_use_underline(use_underline: gboolean); cdecl;
begin
  Gtk3.gtk_button_set_use_underline(@self, use_underline);
end;

function TGtkButtonBox.new(orientation: TGtkOrientation): PGtkButtonBox; cdecl;
begin
  Result := Gtk3.gtk_button_box_new(orientation);
end;

function TGtkButtonBox.get_child_non_homogeneous(child: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk3.gtk_button_box_get_child_non_homogeneous(@self, child);
end;

function TGtkButtonBox.get_child_secondary(child: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk3.gtk_button_box_get_child_secondary(@self, child);
end;

function TGtkButtonBox.get_layout: TGtkButtonBoxStyle; cdecl;
begin
  Result := Gtk3.gtk_button_box_get_layout(@self);
end;

procedure TGtkButtonBox.set_child_non_homogeneous(child: PGtkWidget; non_homogeneous: gboolean); cdecl;
begin
  Gtk3.gtk_button_box_set_child_non_homogeneous(@self, child, non_homogeneous);
end;

procedure TGtkButtonBox.set_child_secondary(child: PGtkWidget; is_secondary: gboolean); cdecl;
begin
  Gtk3.gtk_button_box_set_child_secondary(@self, child, is_secondary);
end;

procedure TGtkButtonBox.set_layout(layout_style: TGtkButtonBoxStyle); cdecl;
begin
  Gtk3.gtk_button_box_set_layout(@self, layout_style);
end;


function TGtkCalendar.new: PGtkCalendar; cdecl;
begin
  Result := Gtk3.gtk_calendar_new();
end;

procedure TGtkCalendar.clear_marks; cdecl;
begin
  Gtk3.gtk_calendar_clear_marks(@self);
end;

procedure TGtkCalendar.get_date(year: Pguint; month: Pguint; day: Pguint); cdecl;
begin
  Gtk3.gtk_calendar_get_date(@self, year, month, day);
end;

function TGtkCalendar.get_day_is_marked(day: guint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_calendar_get_day_is_marked(@self, day);
end;

function TGtkCalendar.get_detail_height_rows: gint; cdecl;
begin
  Result := Gtk3.gtk_calendar_get_detail_height_rows(@self);
end;

function TGtkCalendar.get_detail_width_chars: gint; cdecl;
begin
  Result := Gtk3.gtk_calendar_get_detail_width_chars(@self);
end;

function TGtkCalendar.get_display_options: TGtkCalendarDisplayOptions; cdecl;
begin
  Result := Gtk3.gtk_calendar_get_display_options(@self);
end;

procedure TGtkCalendar.mark_day(day: guint); cdecl;
begin
  Gtk3.gtk_calendar_mark_day(@self, day);
end;

procedure TGtkCalendar.select_day(day: guint); cdecl;
begin
  Gtk3.gtk_calendar_select_day(@self, day);
end;

procedure TGtkCalendar.select_month(month: guint; year: guint); cdecl;
begin
  Gtk3.gtk_calendar_select_month(@self, month, year);
end;

procedure TGtkCalendar.set_detail_func(func: TGtkCalendarDetailFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_calendar_set_detail_func(@self, func, data, destroy_);
end;

procedure TGtkCalendar.set_detail_height_rows(rows: gint); cdecl;
begin
  Gtk3.gtk_calendar_set_detail_height_rows(@self, rows);
end;

procedure TGtkCalendar.set_detail_width_chars(chars: gint); cdecl;
begin
  Gtk3.gtk_calendar_set_detail_width_chars(@self, chars);
end;

procedure TGtkCalendar.set_display_options(flags: TGtkCalendarDisplayOptions); cdecl;
begin
  Gtk3.gtk_calendar_set_display_options(@self, flags);
end;

procedure TGtkCalendar.unmark_day(day: guint); cdecl;
begin
  Gtk3.gtk_calendar_unmark_day(@self, day);
end;


function TGtkCellRenderer.activate(event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_activate(@self, event, widget, path, background_area, cell_area, flags);
end;

procedure TGtkCellRenderer.get_aligned_area(widget: PGtkWidget; flags: TGtkCellRendererState; cell_area: PGdkRectangle; aligned_area: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_cell_renderer_get_aligned_area(@self, widget, flags, cell_area, aligned_area);
end;

procedure TGtkCellRenderer.get_alignment(xalign: Pgfloat; yalign: Pgfloat); cdecl;
begin
  Gtk3.gtk_cell_renderer_get_alignment(@self, xalign, yalign);
end;

procedure TGtkCellRenderer.get_fixed_size(width: Pgint; height: Pgint); cdecl;
begin
  Gtk3.gtk_cell_renderer_get_fixed_size(@self, width, height);
end;

procedure TGtkCellRenderer.get_padding(xpad: Pgint; ypad: Pgint); cdecl;
begin
  Gtk3.gtk_cell_renderer_get_padding(@self, xpad, ypad);
end;

procedure TGtkCellRenderer.get_preferred_height(widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl;
begin
  Gtk3.gtk_cell_renderer_get_preferred_height(@self, widget, minimum_size, natural_size);
end;

procedure TGtkCellRenderer.get_preferred_height_for_width(widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk3.gtk_cell_renderer_get_preferred_height_for_width(@self, widget, width, minimum_height, natural_height);
end;

procedure TGtkCellRenderer.get_preferred_size(widget: PGtkWidget; minimum_size: PGtkRequisition; natural_size: PGtkRequisition); cdecl;
begin
  Gtk3.gtk_cell_renderer_get_preferred_size(@self, widget, minimum_size, natural_size);
end;

procedure TGtkCellRenderer.get_preferred_width(widget: PGtkWidget; minimum_size: Pgint; natural_size: Pgint); cdecl;
begin
  Gtk3.gtk_cell_renderer_get_preferred_width(@self, widget, minimum_size, natural_size);
end;

procedure TGtkCellRenderer.get_preferred_width_for_height(widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk3.gtk_cell_renderer_get_preferred_width_for_height(@self, widget, height, minimum_width, natural_width);
end;

function TGtkCellRenderer.get_request_mode: TGtkSizeRequestMode; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_get_request_mode(@self);
end;

function TGtkCellRenderer.get_sensitive: gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_get_sensitive(@self);
end;

function TGtkCellRenderer.get_state(widget: PGtkWidget; cell_state: TGtkCellRendererState): TGtkStateFlags; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_get_state(@self, widget, cell_state);
end;

function TGtkCellRenderer.get_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_get_visible(@self);
end;

function TGtkCellRenderer.is_activatable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_is_activatable(@self);
end;

procedure TGtkCellRenderer.render(cr: Pcairo_t; widget: PGtkWidget; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState); cdecl;
begin
  Gtk3.gtk_cell_renderer_render(@self, cr, widget, background_area, cell_area, flags);
end;

procedure TGtkCellRenderer.set_alignment(xalign: gfloat; yalign: gfloat); cdecl;
begin
  Gtk3.gtk_cell_renderer_set_alignment(@self, xalign, yalign);
end;

procedure TGtkCellRenderer.set_fixed_size(width: gint; height: gint); cdecl;
begin
  Gtk3.gtk_cell_renderer_set_fixed_size(@self, width, height);
end;

procedure TGtkCellRenderer.set_padding(xpad: gint; ypad: gint); cdecl;
begin
  Gtk3.gtk_cell_renderer_set_padding(@self, xpad, ypad);
end;

procedure TGtkCellRenderer.set_sensitive(sensitive: gboolean); cdecl;
begin
  Gtk3.gtk_cell_renderer_set_sensitive(@self, sensitive);
end;

procedure TGtkCellRenderer.set_visible(visible: gboolean); cdecl;
begin
  Gtk3.gtk_cell_renderer_set_visible(@self, visible);
end;

function TGtkCellRenderer.start_editing(event: PGdkEvent; widget: PGtkWidget; path: Pgchar; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState): PGtkCellEditable; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_start_editing(@self, event, widget, path, background_area, cell_area, flags);
end;

procedure TGtkCellRenderer.stop_editing(canceled: gboolean); cdecl;
begin
  Gtk3.gtk_cell_renderer_stop_editing(@self, canceled);
end;

procedure TGtkCellAreaContext.allocate(width: gint; height: gint); cdecl;
begin
  Gtk3.gtk_cell_area_context_allocate(@self, width, height);
end;

procedure TGtkCellAreaContext.get_allocation(width: Pgint; height: Pgint); cdecl;
begin
  Gtk3.gtk_cell_area_context_get_allocation(@self, width, height);
end;

function TGtkCellAreaContext.get_area: PGtkCellArea; cdecl;
begin
  Result := Gtk3.gtk_cell_area_context_get_area(@self);
end;

procedure TGtkCellAreaContext.get_preferred_height(minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk3.gtk_cell_area_context_get_preferred_height(@self, minimum_height, natural_height);
end;

procedure TGtkCellAreaContext.get_preferred_height_for_width(width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk3.gtk_cell_area_context_get_preferred_height_for_width(@self, width, minimum_height, natural_height);
end;

procedure TGtkCellAreaContext.get_preferred_width(minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk3.gtk_cell_area_context_get_preferred_width(@self, minimum_width, natural_width);
end;

procedure TGtkCellAreaContext.get_preferred_width_for_height(height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk3.gtk_cell_area_context_get_preferred_width_for_height(@self, height, minimum_width, natural_width);
end;

procedure TGtkCellAreaContext.push_preferred_height(minimum_height: gint; natural_height: gint); cdecl;
begin
  Gtk3.gtk_cell_area_context_push_preferred_height(@self, minimum_height, natural_height);
end;

procedure TGtkCellAreaContext.push_preferred_width(minimum_width: gint; natural_width: gint); cdecl;
begin
  Gtk3.gtk_cell_area_context_push_preferred_width(@self, minimum_width, natural_width);
end;

procedure TGtkCellAreaContext.reset; cdecl;
begin
  Gtk3.gtk_cell_area_context_reset(@self);
end;

function TGtkTreeModel.filter_new(root: PGtkTreePath): PGtkTreeModel; cdecl;
begin
  Result := Gtk3.gtk_tree_model_filter_new(@self, root);
end;

procedure TGtkTreeModel.foreach(func: TGtkTreeModelForeachFunc; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_tree_model_foreach(@self, func, user_data);
end;

function TGtkTreeModel.get_column_type(index_: gint): TGType; cdecl;
begin
  Result := Gtk3.gtk_tree_model_get_column_type(@self, index_);
end;


function TGtkTreeModel.get_flags: TGtkTreeModelFlags; cdecl;
begin
  Result := Gtk3.gtk_tree_model_get_flags(@self);
end;

function TGtkTreeModel.get_iter(iter: PGtkTreeIter; path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_get_iter(@self, iter, path);
end;

function TGtkTreeModel.get_iter_first(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_get_iter_first(@self, iter);
end;

function TGtkTreeModel.get_iter_from_string(iter: PGtkTreeIter; path_string: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_get_iter_from_string(@self, iter, path_string);
end;

function TGtkTreeModel.get_n_columns: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_model_get_n_columns(@self);
end;

function TGtkTreeModel.get_path(iter: PGtkTreeIter): PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_tree_model_get_path(@self, iter);
end;

function TGtkTreeModel.get_string_from_iter(iter: PGtkTreeIter): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_tree_model_get_string_from_iter(@self, iter);
end;

procedure TGtkTreeModel.get_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl;
begin
  Gtk3.gtk_tree_model_get_value(@self, iter, column, value);
end;

function TGtkTreeModel.iter_children(iter: PGtkTreeIter; parent: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_iter_children(@self, iter, parent);
end;

function TGtkTreeModel.iter_has_child(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_iter_has_child(@self, iter);
end;

function TGtkTreeModel.iter_n_children(iter: PGtkTreeIter): gint; cdecl;
begin
  Result := Gtk3.gtk_tree_model_iter_n_children(@self, iter);
end;

function TGtkTreeModel.iter_next(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_iter_next(@self, iter);
end;

function TGtkTreeModel.iter_nth_child(iter: PGtkTreeIter; parent: PGtkTreeIter; n: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_iter_nth_child(@self, iter, parent, n);
end;

function TGtkTreeModel.iter_parent(iter: PGtkTreeIter; child: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_iter_parent(@self, iter, child);
end;

function TGtkTreeModel.iter_previous(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_iter_previous(@self, iter);
end;

procedure TGtkTreeModel.ref_node(iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_model_ref_node(@self, iter);
end;

procedure TGtkTreeModel.row_changed(path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_model_row_changed(@self, path, iter);
end;

procedure TGtkTreeModel.row_deleted(path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_tree_model_row_deleted(@self, path);
end;

procedure TGtkTreeModel.row_has_child_toggled(path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_model_row_has_child_toggled(@self, path, iter);
end;

procedure TGtkTreeModel.row_inserted(path: PGtkTreePath; iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_model_row_inserted(@self, path, iter);
end;

procedure TGtkTreeModel.rows_reordered(path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl;
begin
  Gtk3.gtk_tree_model_rows_reordered(@self, path, iter, new_order);
end;

function TGtkTreeModel.sort_new_with_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk3.gtk_tree_model_sort_new_with_model(@self);
end;

procedure TGtkTreeModel.unref_node(iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_model_unref_node(@self, iter);
end;

function TGtkTreePath.new: PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_tree_path_new();
end;

function TGtkTreePath.new_first: PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_tree_path_new_first();
end;

function TGtkTreePath.new_from_string(path: Pgchar): PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_tree_path_new_from_string(path);
end;

procedure TGtkTreePath.append_index(index_: gint); cdecl;
begin
  Gtk3.gtk_tree_path_append_index(@self, index_);
end;

function TGtkTreePath.compare(b: PGtkTreePath): gint; cdecl;
begin
  Result := Gtk3.gtk_tree_path_compare(@self, b);
end;

function TGtkTreePath.copy: PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_tree_path_copy(@self);
end;

procedure TGtkTreePath.down; cdecl;
begin
  Gtk3.gtk_tree_path_down(@self);
end;

procedure TGtkTreePath.free; cdecl;
begin
  Gtk3.gtk_tree_path_free(@self);
end;

function TGtkTreePath.get_depth: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_path_get_depth(@self);
end;

function TGtkTreePath.get_indices: Pgint; cdecl;
begin
  Result := Gtk3.gtk_tree_path_get_indices(@self);
end;

function TGtkTreePath.get_indices_with_depth(depth: Pgint): Pgint; cdecl;
begin
  Result := Gtk3.gtk_tree_path_get_indices_with_depth(@self, depth);
end;

function TGtkTreePath.is_ancestor(descendant: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_path_is_ancestor(@self, descendant);
end;

function TGtkTreePath.is_descendant(ancestor: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_path_is_descendant(@self, ancestor);
end;

procedure TGtkTreePath.next; cdecl;
begin
  Gtk3.gtk_tree_path_next(@self);
end;

procedure TGtkTreePath.prepend_index(index_: gint); cdecl;
begin
  Gtk3.gtk_tree_path_prepend_index(@self, index_);
end;

function TGtkTreePath.prev: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_path_prev(@self);
end;

function TGtkTreePath.to_string: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_tree_path_to_string(@self);
end;

function TGtkTreePath.up: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_path_up(@self);
end;

function TGtkTreeIter.copy: PGtkTreeIter; cdecl;
begin
  Result := Gtk3.gtk_tree_iter_copy(@self);
end;

procedure TGtkTreeIter.free; cdecl;
begin
  Gtk3.gtk_tree_iter_free(@self);
end;

function TGtkCellArea.activate(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; flags: TGtkCellRendererState; edit_only: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_area_activate(@self, context, widget, cell_area, flags, edit_only);
end;

function TGtkCellArea.activate_cell(widget: PGtkWidget; renderer: PGtkCellRenderer; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_area_activate_cell(@self, widget, renderer, event, cell_area, flags);
end;

procedure TGtkCellArea.add(renderer: PGtkCellRenderer); cdecl;
begin
  Gtk3.gtk_cell_area_add(@self, renderer);
end;

procedure TGtkCellArea.add_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl;
begin
  Gtk3.gtk_cell_area_add_focus_sibling(@self, renderer, sibling);
end;

procedure TGtkCellArea.apply_attributes(tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl;
begin
  Gtk3.gtk_cell_area_apply_attributes(@self, tree_model, iter, is_expander, is_expanded);
end;

procedure TGtkCellArea.attribute_connect(renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl;
begin
  Gtk3.gtk_cell_area_attribute_connect(@self, renderer, attribute, column);
end;

procedure TGtkCellArea.attribute_disconnect(renderer: PGtkCellRenderer; attribute: Pgchar); cdecl;
begin
  Gtk3.gtk_cell_area_attribute_disconnect(@self, renderer, attribute);
end;

procedure TGtkCellArea.cell_get_property(renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl;
begin
  Gtk3.gtk_cell_area_cell_get_property(@self, renderer, property_name, value);
end;

procedure TGtkCellArea.cell_set_property(renderer: PGtkCellRenderer; property_name: Pgchar; value: PGValue); cdecl;
begin
  Gtk3.gtk_cell_area_cell_set_property(@self, renderer, property_name, value);
end;

function TGtkCellArea.copy_context(context: PGtkCellAreaContext): PGtkCellAreaContext; cdecl;
begin
  Result := Gtk3.gtk_cell_area_copy_context(@self, context);
end;

function TGtkCellArea.create_context: PGtkCellAreaContext; cdecl;
begin
  Result := Gtk3.gtk_cell_area_create_context(@self);
end;

function TGtkCellArea.event(context: PGtkCellAreaContext; widget: PGtkWidget; event: PGdkEvent; cell_area: PGdkRectangle; flags: TGtkCellRendererState): gint; cdecl;
begin
  Result := Gtk3.gtk_cell_area_event(@self, context, widget, event, cell_area, flags);
end;

function TGtkCellArea.focus(direction: TGtkDirectionType): gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_area_focus(@self, direction);
end;

procedure TGtkCellArea.foreach(callback: TGtkCellCallback; callback_data: gpointer); cdecl;
begin
  Gtk3.gtk_cell_area_foreach(@self, callback, callback_data);
end;

procedure TGtkCellArea.foreach_alloc(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; background_area: PGdkRectangle; callback: TGtkCellAllocCallback; callback_data: gpointer); cdecl;
begin
  Gtk3.gtk_cell_area_foreach_alloc(@self, context, widget, cell_area, background_area, callback, callback_data);
end;

procedure TGtkCellArea.get_cell_allocation(context: PGtkCellAreaContext; widget: PGtkWidget; renderer: PGtkCellRenderer; cell_area: PGdkRectangle; allocation: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_cell_area_get_cell_allocation(@self, context, widget, renderer, cell_area, allocation);
end;

function TGtkCellArea.get_cell_at_position(context: PGtkCellAreaContext; widget: PGtkWidget; cell_area: PGdkRectangle; x: gint; y: gint; alloc_area: PGdkRectangle): PGtkCellRenderer; cdecl;
begin
  Result := Gtk3.gtk_cell_area_get_cell_at_position(@self, context, widget, cell_area, x, y, alloc_area);
end;

function TGtkCellArea.get_current_path_string: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_cell_area_get_current_path_string(@self);
end;

function TGtkCellArea.get_edit_widget: PGtkCellEditable; cdecl;
begin
  Result := Gtk3.gtk_cell_area_get_edit_widget(@self);
end;

function TGtkCellArea.get_edited_cell: PGtkCellRenderer; cdecl;
begin
  Result := Gtk3.gtk_cell_area_get_edited_cell(@self);
end;

function TGtkCellArea.get_focus_cell: PGtkCellRenderer; cdecl;
begin
  Result := Gtk3.gtk_cell_area_get_focus_cell(@self);
end;

function TGtkCellArea.get_focus_from_sibling(renderer: PGtkCellRenderer): PGtkCellRenderer; cdecl;
begin
  Result := Gtk3.gtk_cell_area_get_focus_from_sibling(@self, renderer);
end;

function TGtkCellArea.get_focus_siblings(renderer: PGtkCellRenderer): PGList; cdecl;
begin
  Result := Gtk3.gtk_cell_area_get_focus_siblings(@self, renderer);
end;

procedure TGtkCellArea.get_preferred_height(context: PGtkCellAreaContext; widget: PGtkWidget; minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk3.gtk_cell_area_get_preferred_height(@self, context, widget, minimum_height, natural_height);
end;

procedure TGtkCellArea.get_preferred_height_for_width(context: PGtkCellAreaContext; widget: PGtkWidget; width: gint; minimum_height: Pgint; natural_height: Pgint); cdecl;
begin
  Gtk3.gtk_cell_area_get_preferred_height_for_width(@self, context, widget, width, minimum_height, natural_height);
end;

procedure TGtkCellArea.get_preferred_width(context: PGtkCellAreaContext; widget: PGtkWidget; minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk3.gtk_cell_area_get_preferred_width(@self, context, widget, minimum_width, natural_width);
end;

procedure TGtkCellArea.get_preferred_width_for_height(context: PGtkCellAreaContext; widget: PGtkWidget; height: gint; minimum_width: Pgint; natural_width: Pgint); cdecl;
begin
  Gtk3.gtk_cell_area_get_preferred_width_for_height(@self, context, widget, height, minimum_width, natural_width);
end;

function TGtkCellArea.get_request_mode: TGtkSizeRequestMode; cdecl;
begin
  Result := Gtk3.gtk_cell_area_get_request_mode(@self);
end;

function TGtkCellArea.has_renderer(renderer: PGtkCellRenderer): gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_area_has_renderer(@self, renderer);
end;

procedure TGtkCellArea.inner_cell_area(widget: PGtkWidget; cell_area: PGdkRectangle; inner_area: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_cell_area_inner_cell_area(@self, widget, cell_area, inner_area);
end;

function TGtkCellArea.is_activatable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_area_is_activatable(@self);
end;

function TGtkCellArea.is_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer): gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_area_is_focus_sibling(@self, renderer, sibling);
end;

procedure TGtkCellArea.remove(renderer: PGtkCellRenderer); cdecl;
begin
  Gtk3.gtk_cell_area_remove(@self, renderer);
end;

procedure TGtkCellArea.remove_focus_sibling(renderer: PGtkCellRenderer; sibling: PGtkCellRenderer); cdecl;
begin
  Gtk3.gtk_cell_area_remove_focus_sibling(@self, renderer, sibling);
end;

procedure TGtkCellArea.render(context: PGtkCellAreaContext; widget: PGtkWidget; cr: Pcairo_t; background_area: PGdkRectangle; cell_area: PGdkRectangle; flags: TGtkCellRendererState; paint_focus: gboolean); cdecl;
begin
  Gtk3.gtk_cell_area_render(@self, context, widget, cr, background_area, cell_area, flags, paint_focus);
end;

procedure TGtkCellArea.request_renderer(renderer: PGtkCellRenderer; orientation: TGtkOrientation; widget: PGtkWidget; for_size: gint; minimum_size: Pgint; natural_size: Pgint); cdecl;
begin
  Gtk3.gtk_cell_area_request_renderer(@self, renderer, orientation, widget, for_size, minimum_size, natural_size);
end;

procedure TGtkCellArea.set_focus_cell(renderer: PGtkCellRenderer); cdecl;
begin
  Gtk3.gtk_cell_area_set_focus_cell(@self, renderer);
end;

procedure TGtkCellArea.stop_editing(canceled: gboolean); cdecl;
begin
  Gtk3.gtk_cell_area_stop_editing(@self, canceled);
end;

function TGtkCellAreaBox.new: PGtkCellAreaBox; cdecl;
begin
  Result := Gtk3.gtk_cell_area_box_new();
end;

function TGtkCellAreaBox.get_spacing: gint; cdecl;
begin
  Result := Gtk3.gtk_cell_area_box_get_spacing(@self);
end;

procedure TGtkCellAreaBox.pack_end(renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl;
begin
  Gtk3.gtk_cell_area_box_pack_end(@self, renderer, expand, align, fixed);
end;

procedure TGtkCellAreaBox.pack_start(renderer: PGtkCellRenderer; expand: gboolean; align: gboolean; fixed: gboolean); cdecl;
begin
  Gtk3.gtk_cell_area_box_pack_start(@self, renderer, expand, align, fixed);
end;

procedure TGtkCellAreaBox.set_spacing(spacing: gint); cdecl;
begin
  Gtk3.gtk_cell_area_box_set_spacing(@self, spacing);
end;

function TGtkCellAreaClass.find_cell_property(property_name: Pgchar): PGParamSpec; cdecl;
begin
  Result := Gtk3.gtk_cell_area_class_find_cell_property(@self, property_name);
end;

procedure TGtkCellAreaClass.install_cell_property(property_id: guint; pspec: PGParamSpec); cdecl;
begin
  Gtk3.gtk_cell_area_class_install_cell_property(@self, property_id, pspec);
end;

function TGtkCellAreaClass.list_cell_properties(n_properties: Pguint): PPGParamSpec; cdecl;
begin
  Result := Gtk3.gtk_cell_area_class_list_cell_properties(@self, n_properties);
end;

function TGtkRequisition.new: PGtkRequisition; cdecl;
begin
  Result := Gtk3.gtk_requisition_new();
end;

function TGtkRequisition.copy: PGtkRequisition; cdecl;
begin
  Result := Gtk3.gtk_requisition_copy(@self);
end;

procedure TGtkRequisition.free; cdecl;
begin
  Gtk3.gtk_requisition_free(@self);
end;

function TGtkCellRendererText.new: PGtkCellRendererText; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_text_new();
end;

procedure TGtkCellRendererText.set_fixed_height_from_font(number_of_rows: gint); cdecl;
begin
  Gtk3.gtk_cell_renderer_text_set_fixed_height_from_font(@self, number_of_rows);
end;

function TGtkCellRendererAccel.new: PGtkCellRendererAccel; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_accel_new();
end;

function TGtkCellRendererCombo.new: PGtkCellRendererCombo; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_combo_new();
end;

function TGtkCellRendererPixbuf.new: PGtkCellRendererPixbuf; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_pixbuf_new();
end;

function TGtkCellRendererProgress.new: PGtkCellRendererProgress; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_progress_new();
end;

function TGtkCellRendererSpin.new: PGtkCellRendererSpin; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_spin_new();
end;

function TGtkCellRendererSpinner.new: PGtkCellRendererSpinner; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_spinner_new();
end;

function TGtkCellRendererToggle.new: PGtkCellRendererToggle; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_toggle_new();
end;

function TGtkCellRendererToggle.get_activatable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_toggle_get_activatable(@self);
end;

function TGtkCellRendererToggle.get_active: gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_toggle_get_active(@self);
end;

function TGtkCellRendererToggle.get_radio: gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_renderer_toggle_get_radio(@self);
end;

procedure TGtkCellRendererToggle.set_activatable(setting: gboolean); cdecl;
begin
  Gtk3.gtk_cell_renderer_toggle_set_activatable(@self, setting);
end;

procedure TGtkCellRendererToggle.set_active(setting: gboolean); cdecl;
begin
  Gtk3.gtk_cell_renderer_toggle_set_active(@self, setting);
end;

procedure TGtkCellRendererToggle.set_radio(radio: gboolean); cdecl;
begin
  Gtk3.gtk_cell_renderer_toggle_set_radio(@self, radio);
end;

function TGtkCellView.new: PGtkCellView; cdecl;
begin
  Result := Gtk3.gtk_cell_view_new();
end;

function TGtkCellView.new_with_context(area: PGtkCellArea; context: PGtkCellAreaContext): PGtkCellView; cdecl;
begin
  Result := Gtk3.gtk_cell_view_new_with_context(area, context);
end;

function TGtkCellView.new_with_markup(markup: Pgchar): PGtkCellView; cdecl;
begin
  Result := Gtk3.gtk_cell_view_new_with_markup(markup);
end;

function TGtkCellView.new_with_pixbuf(pixbuf: PGdkPixbuf): PGtkCellView; cdecl;
begin
  Result := Gtk3.gtk_cell_view_new_with_pixbuf(pixbuf);
end;

function TGtkCellView.new_with_text(text: Pgchar): PGtkCellView; cdecl;
begin
  Result := Gtk3.gtk_cell_view_new_with_text(text);
end;

function TGtkCellView.get_displayed_row: PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_cell_view_get_displayed_row(@self);
end;

function TGtkCellView.get_draw_sensitive: gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_view_get_draw_sensitive(@self);
end;

function TGtkCellView.get_fit_model: gboolean; cdecl;
begin
  Result := Gtk3.gtk_cell_view_get_fit_model(@self);
end;

function TGtkCellView.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk3.gtk_cell_view_get_model(@self);
end;

procedure TGtkCellView.set_background_color(color: PGdkColor); cdecl;
begin
  Gtk3.gtk_cell_view_set_background_color(@self, color);
end;

procedure TGtkCellView.set_background_rgba(rgba: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_cell_view_set_background_rgba(@self, rgba);
end;

procedure TGtkCellView.set_displayed_row(path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_cell_view_set_displayed_row(@self, path);
end;

procedure TGtkCellView.set_draw_sensitive(draw_sensitive: gboolean); cdecl;
begin
  Gtk3.gtk_cell_view_set_draw_sensitive(@self, draw_sensitive);
end;

procedure TGtkCellView.set_fit_model(fit_model: gboolean); cdecl;
begin
  Gtk3.gtk_cell_view_set_fit_model(@self, fit_model);
end;

procedure TGtkCellView.set_model(model: PGtkTreeModel); cdecl;
begin
  Gtk3.gtk_cell_view_set_model(@self, model);
end;

function TGtkToggleButton.new: PGtkToggleButton; cdecl;
begin
  Result := Gtk3.gtk_toggle_button_new();
end;

function TGtkToggleButton.new_with_label(label_: Pgchar): PGtkToggleButton; cdecl;
begin
  Result := Gtk3.gtk_toggle_button_new_with_label(label_);
end;

function TGtkToggleButton.new_with_mnemonic(label_: Pgchar): PGtkToggleButton; cdecl;
begin
  Result := Gtk3.gtk_toggle_button_new_with_mnemonic(label_);
end;

function TGtkToggleButton.get_active: gboolean; cdecl;
begin
  Result := Gtk3.gtk_toggle_button_get_active(@self);
end;

function TGtkToggleButton.get_inconsistent: gboolean; cdecl;
begin
  Result := Gtk3.gtk_toggle_button_get_inconsistent(@self);
end;

function TGtkToggleButton.get_mode: gboolean; cdecl;
begin
  Result := Gtk3.gtk_toggle_button_get_mode(@self);
end;

procedure TGtkToggleButton.set_active(is_active: gboolean); cdecl;
begin
  Gtk3.gtk_toggle_button_set_active(@self, is_active);
end;

procedure TGtkToggleButton.set_inconsistent(setting: gboolean); cdecl;
begin
  Gtk3.gtk_toggle_button_set_inconsistent(@self, setting);
end;

procedure TGtkToggleButton.set_mode(draw_indicator: gboolean); cdecl;
begin
  Gtk3.gtk_toggle_button_set_mode(@self, draw_indicator);
end;

procedure TGtkToggleButton.toggled; cdecl;
begin
  Gtk3.gtk_toggle_button_toggled(@self);
end;

function TGtkCheckButton.new: PGtkCheckButton; cdecl;
begin
  Result := Gtk3.gtk_check_button_new();
end;

function TGtkCheckButton.new_with_label(label_: Pgchar): PGtkCheckButton; cdecl;
begin
  Result := Gtk3.gtk_check_button_new_with_label(label_);
end;

function TGtkCheckButton.new_with_mnemonic(label_: Pgchar): PGtkCheckButton; cdecl;
begin
  Result := Gtk3.gtk_check_button_new_with_mnemonic(label_);
end;

function TGtkMenuItem.new: PGtkMenuItem; cdecl;
begin
  Result := Gtk3.gtk_menu_item_new();
end;

function TGtkMenuItem.new_with_label(label_: Pgchar): PGtkMenuItem; cdecl;
begin
  Result := Gtk3.gtk_menu_item_new_with_label(label_);
end;

function TGtkMenuItem.new_with_mnemonic(label_: Pgchar): PGtkMenuItem; cdecl;
begin
  Result := Gtk3.gtk_menu_item_new_with_mnemonic(label_);
end;

procedure TGtkMenuItem.activate; cdecl;
begin
  Gtk3.gtk_menu_item_activate(@self);
end;

procedure TGtkMenuItem.deselect; cdecl;
begin
  Gtk3.gtk_menu_item_deselect(@self);
end;

function TGtkMenuItem.get_accel_path: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_menu_item_get_accel_path(@self);
end;

function TGtkMenuItem.get_label: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_menu_item_get_label(@self);
end;

function TGtkMenuItem.get_reserve_indicator: gboolean; cdecl;
begin
  Result := Gtk3.gtk_menu_item_get_reserve_indicator(@self);
end;

function TGtkMenuItem.get_submenu: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_menu_item_get_submenu(@self);
end;

function TGtkMenuItem.get_use_underline: gboolean; cdecl;
begin
  Result := Gtk3.gtk_menu_item_get_use_underline(@self);
end;

procedure TGtkMenuItem.select; cdecl;
begin
  Gtk3.gtk_menu_item_select(@self);
end;

procedure TGtkMenuItem.set_accel_path(accel_path: Pgchar); cdecl;
begin
  Gtk3.gtk_menu_item_set_accel_path(@self, accel_path);
end;

procedure TGtkMenuItem.set_label(label_: Pgchar); cdecl;
begin
  Gtk3.gtk_menu_item_set_label(@self, label_);
end;

procedure TGtkMenuItem.set_reserve_indicator(reserve: gboolean); cdecl;
begin
  Gtk3.gtk_menu_item_set_reserve_indicator(@self, reserve);
end;

procedure TGtkMenuItem.set_submenu(submenu: PGtkWidget); cdecl;
begin
  Gtk3.gtk_menu_item_set_submenu(@self, submenu);
end;

procedure TGtkMenuItem.set_use_underline(setting: gboolean); cdecl;
begin
  Gtk3.gtk_menu_item_set_use_underline(@self, setting);
end;

procedure TGtkMenuItem.toggle_size_allocate(allocation: gint); cdecl;
begin
  Gtk3.gtk_menu_item_toggle_size_allocate(@self, allocation);
end;

procedure TGtkMenuItem.toggle_size_request(requisition: Pgint); cdecl;
begin
  Gtk3.gtk_menu_item_toggle_size_request(@self, requisition);
end;

function TGtkCheckMenuItem.new: PGtkCheckMenuItem; cdecl;
begin
  Result := Gtk3.gtk_check_menu_item_new();
end;

function TGtkCheckMenuItem.new_with_label(label_: Pgchar): PGtkCheckMenuItem; cdecl;
begin
  Result := Gtk3.gtk_check_menu_item_new_with_label(label_);
end;

function TGtkCheckMenuItem.new_with_mnemonic(label_: Pgchar): PGtkCheckMenuItem; cdecl;
begin
  Result := Gtk3.gtk_check_menu_item_new_with_mnemonic(label_);
end;

function TGtkCheckMenuItem.get_active: gboolean; cdecl;
begin
  Result := Gtk3.gtk_check_menu_item_get_active(@self);
end;

function TGtkCheckMenuItem.get_draw_as_radio: gboolean; cdecl;
begin
  Result := Gtk3.gtk_check_menu_item_get_draw_as_radio(@self);
end;

function TGtkCheckMenuItem.get_inconsistent: gboolean; cdecl;
begin
  Result := Gtk3.gtk_check_menu_item_get_inconsistent(@self);
end;

procedure TGtkCheckMenuItem.set_active(is_active: gboolean); cdecl;
begin
  Gtk3.gtk_check_menu_item_set_active(@self, is_active);
end;

procedure TGtkCheckMenuItem.set_draw_as_radio(draw_as_radio: gboolean); cdecl;
begin
  Gtk3.gtk_check_menu_item_set_draw_as_radio(@self, draw_as_radio);
end;

procedure TGtkCheckMenuItem.set_inconsistent(setting: gboolean); cdecl;
begin
  Gtk3.gtk_check_menu_item_set_inconsistent(@self, setting);
end;

procedure TGtkCheckMenuItem.toggled; cdecl;
begin
  Gtk3.gtk_check_menu_item_toggled(@self);
end;

function TGtkClipboard.get(selection: TGdkAtom): PGtkClipboard; cdecl;
begin
  Result := Gtk3.gtk_clipboard_get(selection);
end;

function TGtkClipboard.get_for_display(display: PGdkDisplay; selection: TGdkAtom): PGtkClipboard; cdecl;
begin
  Result := Gtk3.gtk_clipboard_get_for_display(display, selection);
end;

procedure TGtkClipboard.clear; cdecl;
begin
  Gtk3.gtk_clipboard_clear(@self);
end;

function TGtkClipboard.get_display: PGdkDisplay; cdecl;
begin
  Result := Gtk3.gtk_clipboard_get_display(@self);
end;

function TGtkClipboard.get_owner: PGObject; cdecl;
begin
  Result := Gtk3.gtk_clipboard_get_owner(@self);
end;

procedure TGtkClipboard.request_contents(target: TGdkAtom; callback: TGtkClipboardReceivedFunc; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_clipboard_request_contents(@self, target, callback, user_data);
end;

procedure TGtkClipboard.request_image(callback: TGtkClipboardImageReceivedFunc; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_clipboard_request_image(@self, callback, user_data);
end;

procedure TGtkClipboard.request_rich_text(buffer: PGtkTextBuffer; callback: TGtkClipboardRichTextReceivedFunc; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_clipboard_request_rich_text(@self, buffer, callback, user_data);
end;

procedure TGtkClipboard.request_targets(callback: TGtkClipboardTargetsReceivedFunc; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_clipboard_request_targets(@self, callback, user_data);
end;

procedure TGtkClipboard.request_text(callback: TGtkClipboardTextReceivedFunc; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_clipboard_request_text(@self, callback, user_data);
end;

procedure TGtkClipboard.request_uris(callback: TGtkClipboardURIReceivedFunc; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_clipboard_request_uris(@self, callback, user_data);
end;

procedure TGtkClipboard.set_can_store(targets: PGtkTargetEntry; n_targets: gint); cdecl;
begin
  Gtk3.gtk_clipboard_set_can_store(@self, targets, n_targets);
end;

procedure TGtkClipboard.set_image(pixbuf: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_clipboard_set_image(@self, pixbuf);
end;

procedure TGtkClipboard.set_text(text: Pgchar; len: gint); cdecl;
begin
  Gtk3.gtk_clipboard_set_text(@self, text, len);
end;

function TGtkClipboard.set_with_data(targets: PGtkTargetEntry; n_targets: guint; get_func: TGtkClipboardGetFunc; clear_func: TGtkClipboardClearFunc; user_data: gpointer): gboolean; cdecl;
begin
  Result := Gtk3.gtk_clipboard_set_with_data(@self, targets, n_targets, get_func, clear_func, user_data);
end;

function TGtkClipboard.set_with_owner(targets: PGtkTargetEntry; n_targets: guint; get_func: TGtkClipboardGetFunc; clear_func: TGtkClipboardClearFunc; owner: PGObject): gboolean; cdecl;
begin
  Result := Gtk3.gtk_clipboard_set_with_owner(@self, targets, n_targets, get_func, clear_func, owner);
end;

procedure TGtkClipboard.store; cdecl;
begin
  Gtk3.gtk_clipboard_store(@self);
end;

function TGtkClipboard.wait_for_contents(target: TGdkAtom): PGtkSelectionData; cdecl;
begin
  Result := Gtk3.gtk_clipboard_wait_for_contents(@self, target);
end;

function TGtkClipboard.wait_for_image: PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_clipboard_wait_for_image(@self);
end;

function TGtkClipboard.wait_for_rich_text(buffer: PGtkTextBuffer; format: PGdkAtom; length: Pgsize): Pguint8; cdecl;
begin
  Result := Gtk3.gtk_clipboard_wait_for_rich_text(@self, buffer, format, length);
end;

function TGtkClipboard.wait_for_targets(targets: PPGdkAtom; n_targets: Pgint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_clipboard_wait_for_targets(@self, targets, n_targets);
end;

function TGtkClipboard.wait_for_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_clipboard_wait_for_text(@self);
end;

function TGtkClipboard.wait_for_uris: PPgchar; cdecl;
begin
  Result := Gtk3.gtk_clipboard_wait_for_uris(@self);
end;

function TGtkClipboard.wait_is_image_available: gboolean; cdecl;
begin
  Result := Gtk3.gtk_clipboard_wait_is_image_available(@self);
end;

function TGtkClipboard.wait_is_rich_text_available(buffer: PGtkTextBuffer): gboolean; cdecl;
begin
  Result := Gtk3.gtk_clipboard_wait_is_rich_text_available(@self, buffer);
end;

function TGtkClipboard.wait_is_target_available(target: TGdkAtom): gboolean; cdecl;
begin
  Result := Gtk3.gtk_clipboard_wait_is_target_available(@self, target);
end;

function TGtkClipboard.wait_is_text_available: gboolean; cdecl;
begin
  Result := Gtk3.gtk_clipboard_wait_is_text_available(@self);
end;

function TGtkClipboard.wait_is_uris_available: gboolean; cdecl;
begin
  Result := Gtk3.gtk_clipboard_wait_is_uris_available(@self);
end;

function TGtkTextBuffer.new(table: PGtkTextTagTable): PGtkTextBuffer; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_new(table);
end;

procedure TGtkTextBuffer.add_mark(mark: PGtkTextMark; where: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_add_mark(@self, mark, where);
end;

procedure TGtkTextBuffer.add_selection_clipboard(clipboard: PGtkClipboard); cdecl;
begin
  Gtk3.gtk_text_buffer_add_selection_clipboard(@self, clipboard);
end;

procedure TGtkTextBuffer.apply_tag(tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_apply_tag(@self, tag, start, end_);
end;

procedure TGtkTextBuffer.apply_tag_by_name(name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_apply_tag_by_name(@self, name, start, end_);
end;

function TGtkTextBuffer.backspace(iter: PGtkTextIter; interactive: gboolean; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_backspace(@self, iter, interactive, default_editable);
end;

procedure TGtkTextBuffer.begin_user_action; cdecl;
begin
  Gtk3.gtk_text_buffer_begin_user_action(@self);
end;

procedure TGtkTextBuffer.copy_clipboard(clipboard: PGtkClipboard); cdecl;
begin
  Gtk3.gtk_text_buffer_copy_clipboard(@self, clipboard);
end;

function TGtkTextBuffer.create_child_anchor(iter: PGtkTextIter): PGtkTextChildAnchor; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_create_child_anchor(@self, iter);
end;

function TGtkTextBuffer.create_mark(mark_name: Pgchar; where: PGtkTextIter; left_gravity: gboolean): PGtkTextMark; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_create_mark(@self, mark_name, where, left_gravity);
end;

procedure TGtkTextBuffer.cut_clipboard(clipboard: PGtkClipboard; default_editable: gboolean); cdecl;
begin
  Gtk3.gtk_text_buffer_cut_clipboard(@self, clipboard, default_editable);
end;

procedure TGtkTextBuffer.delete(start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_delete(@self, start, end_);
end;

function TGtkTextBuffer.delete_interactive(start_iter: PGtkTextIter; end_iter: PGtkTextIter; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_delete_interactive(@self, start_iter, end_iter, default_editable);
end;

procedure TGtkTextBuffer.delete_mark(mark: PGtkTextMark); cdecl;
begin
  Gtk3.gtk_text_buffer_delete_mark(@self, mark);
end;

procedure TGtkTextBuffer.delete_mark_by_name(name: Pgchar); cdecl;
begin
  Gtk3.gtk_text_buffer_delete_mark_by_name(@self, name);
end;

function TGtkTextBuffer.delete_selection(interactive: gboolean; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_delete_selection(@self, interactive, default_editable);
end;

function TGtkTextBuffer.deserialize(content_buffer: PGtkTextBuffer; format: TGdkAtom; iter: PGtkTextIter; data: Pguint8; length: gsize): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_deserialize(@self, content_buffer, format, iter, data, length);
end;

function TGtkTextBuffer.deserialize_get_can_create_tags(format: TGdkAtom): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_deserialize_get_can_create_tags(@self, format);
end;

procedure TGtkTextBuffer.deserialize_set_can_create_tags(format: TGdkAtom; can_create_tags: gboolean); cdecl;
begin
  Gtk3.gtk_text_buffer_deserialize_set_can_create_tags(@self, format, can_create_tags);
end;

procedure TGtkTextBuffer.end_user_action; cdecl;
begin
  Gtk3.gtk_text_buffer_end_user_action(@self);
end;

procedure TGtkTextBuffer.get_bounds(start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_get_bounds(@self, start, end_);
end;

function TGtkTextBuffer.get_char_count: gint; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_char_count(@self);
end;

function TGtkTextBuffer.get_copy_target_list: PGtkTargetList; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_copy_target_list(@self);
end;

function TGtkTextBuffer.get_deserialize_formats(n_formats: Pgint): PGdkAtom; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_deserialize_formats(@self, n_formats);
end;

procedure TGtkTextBuffer.get_end_iter(iter: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_get_end_iter(@self, iter);
end;

function TGtkTextBuffer.get_has_selection: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_has_selection(@self);
end;

function TGtkTextBuffer.get_insert: PGtkTextMark; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_insert(@self);
end;

procedure TGtkTextBuffer.get_iter_at_child_anchor(iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl;
begin
  Gtk3.gtk_text_buffer_get_iter_at_child_anchor(@self, iter, anchor);
end;

procedure TGtkTextBuffer.get_iter_at_line(iter: PGtkTextIter; line_number: gint); cdecl;
begin
  Gtk3.gtk_text_buffer_get_iter_at_line(@self, iter, line_number);
end;

procedure TGtkTextBuffer.get_iter_at_line_index(iter: PGtkTextIter; line_number: gint; byte_index: gint); cdecl;
begin
  Gtk3.gtk_text_buffer_get_iter_at_line_index(@self, iter, line_number, byte_index);
end;

procedure TGtkTextBuffer.get_iter_at_line_offset(iter: PGtkTextIter; line_number: gint; char_offset: gint); cdecl;
begin
  Gtk3.gtk_text_buffer_get_iter_at_line_offset(@self, iter, line_number, char_offset);
end;

procedure TGtkTextBuffer.get_iter_at_mark(iter: PGtkTextIter; mark: PGtkTextMark); cdecl;
begin
  Gtk3.gtk_text_buffer_get_iter_at_mark(@self, iter, mark);
end;

procedure TGtkTextBuffer.get_iter_at_offset(iter: PGtkTextIter; char_offset: gint); cdecl;
begin
  Gtk3.gtk_text_buffer_get_iter_at_offset(@self, iter, char_offset);
end;

function TGtkTextBuffer.get_line_count: gint; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_line_count(@self);
end;

function TGtkTextBuffer.get_mark(name: Pgchar): PGtkTextMark; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_mark(@self, name);
end;

function TGtkTextBuffer.get_modified: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_modified(@self);
end;

function TGtkTextBuffer.get_paste_target_list: PGtkTargetList; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_paste_target_list(@self);
end;

function TGtkTextBuffer.get_selection_bound: PGtkTextMark; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_selection_bound(@self);
end;

function TGtkTextBuffer.get_selection_bounds(start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_selection_bounds(@self, start, end_);
end;

function TGtkTextBuffer.get_serialize_formats(n_formats: Pgint): PGdkAtom; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_serialize_formats(@self, n_formats);
end;

function TGtkTextBuffer.get_slice(start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_slice(@self, start, end_, include_hidden_chars);
end;

procedure TGtkTextBuffer.get_start_iter(iter: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_get_start_iter(@self, iter);
end;

function TGtkTextBuffer.get_tag_table: PGtkTextTagTable; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_tag_table(@self);
end;

function TGtkTextBuffer.get_text(start: PGtkTextIter; end_: PGtkTextIter; include_hidden_chars: gboolean): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_get_text(@self, start, end_, include_hidden_chars);
end;

procedure TGtkTextBuffer.insert(iter: PGtkTextIter; text: Pgchar; len: gint); cdecl;
begin
  Gtk3.gtk_text_buffer_insert(@self, iter, text, len);
end;

procedure TGtkTextBuffer.insert_at_cursor(text: Pgchar; len: gint); cdecl;
begin
  Gtk3.gtk_text_buffer_insert_at_cursor(@self, text, len);
end;

procedure TGtkTextBuffer.insert_child_anchor(iter: PGtkTextIter; anchor: PGtkTextChildAnchor); cdecl;
begin
  Gtk3.gtk_text_buffer_insert_child_anchor(@self, iter, anchor);
end;

function TGtkTextBuffer.insert_interactive(iter: PGtkTextIter; text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_insert_interactive(@self, iter, text, len, default_editable);
end;

function TGtkTextBuffer.insert_interactive_at_cursor(text: Pgchar; len: gint; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_insert_interactive_at_cursor(@self, text, len, default_editable);
end;

procedure TGtkTextBuffer.insert_pixbuf(iter: PGtkTextIter; pixbuf: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_text_buffer_insert_pixbuf(@self, iter, pixbuf);
end;

procedure TGtkTextBuffer.insert_range(iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_insert_range(@self, iter, start, end_);
end;

function TGtkTextBuffer.insert_range_interactive(iter: PGtkTextIter; start: PGtkTextIter; end_: PGtkTextIter; default_editable: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_insert_range_interactive(@self, iter, start, end_, default_editable);
end;

procedure TGtkTextBuffer.move_mark(mark: PGtkTextMark; where: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_move_mark(@self, mark, where);
end;

procedure TGtkTextBuffer.move_mark_by_name(name: Pgchar; where: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_move_mark_by_name(@self, name, where);
end;

procedure TGtkTextBuffer.paste_clipboard(clipboard: PGtkClipboard; override_location: PGtkTextIter; default_editable: gboolean); cdecl;
begin
  Gtk3.gtk_text_buffer_paste_clipboard(@self, clipboard, override_location, default_editable);
end;

procedure TGtkTextBuffer.place_cursor(where: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_place_cursor(@self, where);
end;

function TGtkTextBuffer.register_deserialize_format(mime_type: Pgchar; function_: TGtkTextBufferDeserializeFunc; user_data: gpointer; user_data_destroy: TGDestroyNotify): TGdkAtom; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_register_deserialize_format(@self, mime_type, function_, user_data, user_data_destroy);
end;

function TGtkTextBuffer.register_deserialize_tagset(tagset_name: Pgchar): TGdkAtom; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_register_deserialize_tagset(@self, tagset_name);
end;

function TGtkTextBuffer.register_serialize_format(mime_type: Pgchar; function_: TGtkTextBufferSerializeFunc; user_data: gpointer; user_data_destroy: TGDestroyNotify): TGdkAtom; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_register_serialize_format(@self, mime_type, function_, user_data, user_data_destroy);
end;

function TGtkTextBuffer.register_serialize_tagset(tagset_name: Pgchar): TGdkAtom; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_register_serialize_tagset(@self, tagset_name);
end;

procedure TGtkTextBuffer.remove_all_tags(start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_remove_all_tags(@self, start, end_);
end;

procedure TGtkTextBuffer.remove_selection_clipboard(clipboard: PGtkClipboard); cdecl;
begin
  Gtk3.gtk_text_buffer_remove_selection_clipboard(@self, clipboard);
end;

procedure TGtkTextBuffer.remove_tag(tag: PGtkTextTag; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_remove_tag(@self, tag, start, end_);
end;

procedure TGtkTextBuffer.remove_tag_by_name(name: Pgchar; start: PGtkTextIter; end_: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_remove_tag_by_name(@self, name, start, end_);
end;

procedure TGtkTextBuffer.select_range(ins: PGtkTextIter; bound: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_buffer_select_range(@self, ins, bound);
end;

function TGtkTextBuffer.serialize(content_buffer: PGtkTextBuffer; format: TGdkAtom; start: PGtkTextIter; end_: PGtkTextIter; length: Pgsize): Pguint8; cdecl;
begin
  Result := Gtk3.gtk_text_buffer_serialize(@self, content_buffer, format, start, end_, length);
end;

procedure TGtkTextBuffer.set_modified(setting: gboolean); cdecl;
begin
  Gtk3.gtk_text_buffer_set_modified(@self, setting);
end;

procedure TGtkTextBuffer.set_text(text: Pgchar; len: gint); cdecl;
begin
  Gtk3.gtk_text_buffer_set_text(@self, text, len);
end;

procedure TGtkTextBuffer.unregister_deserialize_format(format: TGdkAtom); cdecl;
begin
  Gtk3.gtk_text_buffer_unregister_deserialize_format(@self, format);
end;

procedure TGtkTextBuffer.unregister_serialize_format(format: TGdkAtom); cdecl;
begin
  Gtk3.gtk_text_buffer_unregister_serialize_format(@self, format);
end;

function TGtkTargetEntry.new(target: Pgchar; flags: guint; info: guint): PGtkTargetEntry; cdecl;
begin
  Result := Gtk3.gtk_target_entry_new(target, flags, info);
end;

function TGtkTargetEntry.copy: PGtkTargetEntry; cdecl;
begin
  Result := Gtk3.gtk_target_entry_copy(@self);
end;

procedure TGtkTargetEntry.free; cdecl;
begin
  Gtk3.gtk_target_entry_free(@self);
end;

function TGtkSelectionData.copy: PGtkSelectionData; cdecl;
begin
  Result := Gtk3.gtk_selection_data_copy(@self);
end;

procedure TGtkSelectionData.free; cdecl;
begin
  Gtk3.gtk_selection_data_free(@self);
end;

function TGtkSelectionData.get_data: Pguint8; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_data(@self);
end;

function TGtkSelectionData.get_data_type: TGdkAtom; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_data_type(@self);
end;

function TGtkSelectionData.get_data_with_length(length: Pgint): Pguint8; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_data_with_length(@self, length);
end;

function TGtkSelectionData.get_display: PGdkDisplay; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_display(@self);
end;

function TGtkSelectionData.get_format: gint; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_format(@self);
end;

function TGtkSelectionData.get_length: gint; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_length(@self);
end;

function TGtkSelectionData.get_pixbuf: PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_pixbuf(@self);
end;

function TGtkSelectionData.get_selection: TGdkAtom; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_selection(@self);
end;

function TGtkSelectionData.get_target: TGdkAtom; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_target(@self);
end;

function TGtkSelectionData.get_targets(targets: PPGdkAtom; n_atoms: Pgint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_targets(@self, targets, n_atoms);
end;

function TGtkSelectionData.get_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_text(@self);
end;

function TGtkSelectionData.get_uris: PPgchar; cdecl;
begin
  Result := Gtk3.gtk_selection_data_get_uris(@self);
end;

procedure TGtkSelectionData.set_(type_: TGdkAtom; format: gint; data: Pguint8; length: gint); cdecl;
begin
  Gtk3.gtk_selection_data_set(@self, type_, format, data, length);
end;

function TGtkSelectionData.set_pixbuf(pixbuf: PGdkPixbuf): gboolean; cdecl;
begin
  Result := Gtk3.gtk_selection_data_set_pixbuf(@self, pixbuf);
end;

function TGtkSelectionData.set_text(str: Pgchar; len: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_selection_data_set_text(@self, str, len);
end;

function TGtkSelectionData.set_uris(uris: PPgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_selection_data_set_uris(@self, uris);
end;

function TGtkSelectionData.targets_include_image(writable: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_selection_data_targets_include_image(@self, writable);
end;

function TGtkSelectionData.targets_include_rich_text(buffer: PGtkTextBuffer): gboolean; cdecl;
begin
  Result := Gtk3.gtk_selection_data_targets_include_rich_text(@self, buffer);
end;

function TGtkSelectionData.targets_include_text: gboolean; cdecl;
begin
  Result := Gtk3.gtk_selection_data_targets_include_text(@self);
end;

function TGtkSelectionData.targets_include_uri: gboolean; cdecl;
begin
  Result := Gtk3.gtk_selection_data_targets_include_uri(@self);
end;

function TGtkColorButton.new: PGtkColorButton; cdecl;
begin
  Result := Gtk3.gtk_color_button_new();
end;

function TGtkColorButton.new_with_color(color: PGdkColor): PGtkColorButton; cdecl;
begin
  Result := Gtk3.gtk_color_button_new_with_color(color);
end;

function TGtkColorButton.new_with_rgba(rgba: PGdkRGBA): PGtkColorButton; cdecl;
begin
  Result := Gtk3.gtk_color_button_new_with_rgba(rgba);
end;

function TGtkColorButton.get_alpha: guint16; cdecl;
begin
  Result := Gtk3.gtk_color_button_get_alpha(@self);
end;

procedure TGtkColorButton.get_color(color: PGdkColor); cdecl;
begin
  Gtk3.gtk_color_button_get_color(@self, color);
end;

procedure TGtkColorButton.get_rgba(rgba: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_color_button_get_rgba(@self, rgba);
end;

function TGtkColorButton.get_title: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_color_button_get_title(@self);
end;

function TGtkColorButton.get_use_alpha: gboolean; cdecl;
begin
  Result := Gtk3.gtk_color_button_get_use_alpha(@self);
end;

procedure TGtkColorButton.set_alpha(alpha: guint16); cdecl;
begin
  Gtk3.gtk_color_button_set_alpha(@self, alpha);
end;

procedure TGtkColorButton.set_color(color: PGdkColor); cdecl;
begin
  Gtk3.gtk_color_button_set_color(@self, color);
end;

procedure TGtkColorButton.set_rgba(rgba: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_color_button_set_rgba(@self, rgba);
end;

procedure TGtkColorButton.set_title(title: Pgchar); cdecl;
begin
  Gtk3.gtk_color_button_set_title(@self, title);
end;

procedure TGtkColorButton.set_use_alpha(use_alpha: gboolean); cdecl;
begin
  Gtk3.gtk_color_button_set_use_alpha(@self, use_alpha);
end;

function TGtkColorSelection.new: PGtkColorSelection; cdecl;
begin
  Result := Gtk3.gtk_color_selection_new();
end;

function TGtkColorSelection.palette_from_string(str: Pgchar; colors: PPGdkColor; n_colors: Pgint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_color_selection_palette_from_string(str, colors, n_colors);
end;

function TGtkColorSelection.palette_to_string(colors: PGdkColor; n_colors: gint): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_color_selection_palette_to_string(colors, n_colors);
end;

function TGtkColorSelection.set_change_palette_with_screen_hook(func: TGtkColorSelectionChangePaletteWithScreenFunc): TGtkColorSelectionChangePaletteWithScreenFunc; cdecl;
begin
  Result := Gtk3.gtk_color_selection_set_change_palette_with_screen_hook(func);
end;

function TGtkColorSelection.get_current_alpha: guint16; cdecl;
begin
  Result := Gtk3.gtk_color_selection_get_current_alpha(@self);
end;

procedure TGtkColorSelection.get_current_color(color: PGdkColor); cdecl;
begin
  Gtk3.gtk_color_selection_get_current_color(@self, color);
end;

procedure TGtkColorSelection.get_current_rgba(rgba: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_color_selection_get_current_rgba(@self, rgba);
end;

function TGtkColorSelection.get_has_opacity_control: gboolean; cdecl;
begin
  Result := Gtk3.gtk_color_selection_get_has_opacity_control(@self);
end;

function TGtkColorSelection.get_has_palette: gboolean; cdecl;
begin
  Result := Gtk3.gtk_color_selection_get_has_palette(@self);
end;

function TGtkColorSelection.get_previous_alpha: guint16; cdecl;
begin
  Result := Gtk3.gtk_color_selection_get_previous_alpha(@self);
end;

procedure TGtkColorSelection.get_previous_color(color: PGdkColor); cdecl;
begin
  Gtk3.gtk_color_selection_get_previous_color(@self, color);
end;

procedure TGtkColorSelection.get_previous_rgba(rgba: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_color_selection_get_previous_rgba(@self, rgba);
end;

function TGtkColorSelection.is_adjusting: gboolean; cdecl;
begin
  Result := Gtk3.gtk_color_selection_is_adjusting(@self);
end;

procedure TGtkColorSelection.set_current_alpha(alpha: guint16); cdecl;
begin
  Gtk3.gtk_color_selection_set_current_alpha(@self, alpha);
end;

procedure TGtkColorSelection.set_current_color(color: PGdkColor); cdecl;
begin
  Gtk3.gtk_color_selection_set_current_color(@self, color);
end;

procedure TGtkColorSelection.set_current_rgba(rgba: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_color_selection_set_current_rgba(@self, rgba);
end;

procedure TGtkColorSelection.set_has_opacity_control(has_opacity: gboolean); cdecl;
begin
  Gtk3.gtk_color_selection_set_has_opacity_control(@self, has_opacity);
end;

procedure TGtkColorSelection.set_has_palette(has_palette: gboolean); cdecl;
begin
  Gtk3.gtk_color_selection_set_has_palette(@self, has_palette);
end;

procedure TGtkColorSelection.set_previous_alpha(alpha: guint16); cdecl;
begin
  Gtk3.gtk_color_selection_set_previous_alpha(@self, alpha);
end;

procedure TGtkColorSelection.set_previous_color(color: PGdkColor); cdecl;
begin
  Gtk3.gtk_color_selection_set_previous_color(@self, color);
end;

procedure TGtkColorSelection.set_previous_rgba(rgba: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_color_selection_set_previous_rgba(@self, rgba);
end;

function TGtkColorSelectionDialog.new(title: Pgchar): PGtkColorSelectionDialog; cdecl;
begin
  Result := Gtk3.gtk_color_selection_dialog_new(title);
end;

function TGtkColorSelectionDialog.get_color_selection: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_color_selection_dialog_get_color_selection(@self);
end;

function TGtkComboBoxText.new: PGtkComboBoxText; cdecl;
begin
  Result := Gtk3.gtk_combo_box_text_new();
end;

function TGtkComboBoxText.new_with_entry: PGtkComboBoxText; cdecl;
begin
  Result := Gtk3.gtk_combo_box_text_new_with_entry();
end;

procedure TGtkComboBoxText.append(id: Pgchar; text: Pgchar); cdecl;
begin
  Gtk3.gtk_combo_box_text_append(@self, id, text);
end;

procedure TGtkComboBoxText.append_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_combo_box_text_append_text(@self, text);
end;

function TGtkComboBoxText.get_active_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_combo_box_text_get_active_text(@self);
end;

procedure TGtkComboBoxText.insert(position: gint; id: Pgchar; text: Pgchar); cdecl;
begin
  Gtk3.gtk_combo_box_text_insert(@self, position, id, text);
end;

procedure TGtkComboBoxText.insert_text(position: gint; text: Pgchar); cdecl;
begin
  Gtk3.gtk_combo_box_text_insert_text(@self, position, text);
end;

procedure TGtkComboBoxText.prepend(id: Pgchar; text: Pgchar); cdecl;
begin
  Gtk3.gtk_combo_box_text_prepend(@self, id, text);
end;

procedure TGtkComboBoxText.prepend_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_combo_box_text_prepend_text(@self, text);
end;

procedure TGtkComboBoxText.remove(position: gint); cdecl;
begin
  Gtk3.gtk_combo_box_text_remove(@self, position);
end;

procedure TGtkComboBoxText.remove_all; cdecl;
begin
  Gtk3.gtk_combo_box_text_remove_all(@self);
end;

function TGtkWidgetPath.new: PGtkWidgetPath; cdecl;
begin
  Result := Gtk3.gtk_widget_path_new();
end;

function TGtkWidgetPath.append_for_widget(widget: PGtkWidget): gint; cdecl;
begin
  Result := Gtk3.gtk_widget_path_append_for_widget(@self, widget);
end;

function TGtkWidgetPath.append_type(type_: TGType): gint; cdecl;
begin
  Result := Gtk3.gtk_widget_path_append_type(@self, type_);
end;

function TGtkWidgetPath.append_with_siblings(siblings: PGtkWidgetPath; sibling_index: guint): gint; cdecl;
begin
  Result := Gtk3.gtk_widget_path_append_with_siblings(@self, siblings, sibling_index);
end;

function TGtkWidgetPath.copy: PGtkWidgetPath; cdecl;
begin
  Result := Gtk3.gtk_widget_path_copy(@self);
end;

procedure TGtkWidgetPath.free; cdecl;
begin
  Gtk3.gtk_widget_path_free(@self);
end;

function TGtkWidgetPath.get_object_type: TGType; cdecl;
begin
  Result := Gtk3.gtk_widget_path_get_object_type(@self);
end;

function TGtkWidgetPath.has_parent(type_: TGType): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_path_has_parent(@self, type_);
end;

function TGtkWidgetPath.is_type(type_: TGType): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_path_is_type(@self, type_);
end;

procedure TGtkWidgetPath.iter_add_class(pos: gint; name: Pgchar); cdecl;
begin
  Gtk3.gtk_widget_path_iter_add_class(@self, pos, name);
end;


procedure TGtkWidgetPath.iter_add_region(pos: gint; name: Pgchar; flags: TGtkRegionFlags); cdecl;
begin
  Gtk3.gtk_widget_path_iter_add_region(@self, pos, name, flags);
end;

procedure TGtkWidgetPath.iter_clear_classes(pos: gint); cdecl;
begin
  Gtk3.gtk_widget_path_iter_clear_classes(@self, pos);
end;

procedure TGtkWidgetPath.iter_clear_regions(pos: gint); cdecl;
begin
  Gtk3.gtk_widget_path_iter_clear_regions(@self, pos);
end;

function TGtkWidgetPath.iter_get_name(pos: gint): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_get_name(@self, pos);
end;

function TGtkWidgetPath.iter_get_object_type(pos: gint): TGType; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_get_object_type(@self, pos);
end;

function TGtkWidgetPath.iter_get_sibling_index(pos: gint): guint; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_get_sibling_index(@self, pos);
end;

function TGtkWidgetPath.iter_get_siblings(pos: gint): PGtkWidgetPath; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_get_siblings(@self, pos);
end;

function TGtkWidgetPath.iter_has_class(pos: gint; name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_has_class(@self, pos, name);
end;

function TGtkWidgetPath.iter_has_name(pos: gint; name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_has_name(@self, pos, name);
end;

function TGtkWidgetPath.iter_has_qclass(pos: gint; qname: TGQuark): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_has_qclass(@self, pos, qname);
end;

function TGtkWidgetPath.iter_has_qname(pos: gint; qname: TGQuark): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_has_qname(@self, pos, qname);
end;

function TGtkWidgetPath.iter_has_qregion(pos: gint; qname: TGQuark; flags: PGtkRegionFlags): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_has_qregion(@self, pos, qname, flags);
end;

function TGtkWidgetPath.iter_has_region(pos: gint; name: Pgchar; flags: PGtkRegionFlags): gboolean; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_has_region(@self, pos, name, flags);
end;

function TGtkWidgetPath.iter_list_classes(pos: gint): PGSList; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_list_classes(@self, pos);
end;

function TGtkWidgetPath.iter_list_regions(pos: gint): PGSList; cdecl;
begin
  Result := Gtk3.gtk_widget_path_iter_list_regions(@self, pos);
end;

procedure TGtkWidgetPath.iter_remove_class(pos: gint; name: Pgchar); cdecl;
begin
  Gtk3.gtk_widget_path_iter_remove_class(@self, pos, name);
end;

procedure TGtkWidgetPath.iter_remove_region(pos: gint; name: Pgchar); cdecl;
begin
  Gtk3.gtk_widget_path_iter_remove_region(@self, pos, name);
end;

procedure TGtkWidgetPath.iter_set_name(pos: gint; name: Pgchar); cdecl;
begin
  Gtk3.gtk_widget_path_iter_set_name(@self, pos, name);
end;

procedure TGtkWidgetPath.iter_set_object_type(pos: gint; type_: TGType); cdecl;
begin
  Gtk3.gtk_widget_path_iter_set_object_type(@self, pos, type_);
end;

function TGtkWidgetPath.length: gint; cdecl;
begin
  Result := Gtk3.gtk_widget_path_length(@self);
end;

procedure TGtkWidgetPath.prepend_type(type_: TGType); cdecl;
begin
  Gtk3.gtk_widget_path_prepend_type(@self, type_);
end;

function TGtkWidgetPath.ref: PGtkWidgetPath; cdecl;
begin
  Result := Gtk3.gtk_widget_path_ref(@self);
end;

function TGtkWidgetPath.to_string: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_widget_path_to_string(@self);
end;

procedure TGtkWidgetPath.unref; cdecl;
begin
  Gtk3.gtk_widget_path_unref(@self);
end;

function TGtkStyleProvider.get_icon_factory(path: PGtkWidgetPath): PGtkIconFactory; cdecl;
begin
  Result := Gtk3.gtk_style_provider_get_icon_factory(@self, path);
end;

function TGtkStyleProvider.get_style(path: PGtkWidgetPath): PGtkStyleProperties; cdecl;
begin
  Result := Gtk3.gtk_style_provider_get_style(@self, path);
end;

function TGtkStyleProvider.get_style_property(path: PGtkWidgetPath; state: TGtkStateFlags; pspec: PGParamSpec; value: PGValue): gboolean; cdecl;
begin
  Result := Gtk3.gtk_style_provider_get_style_property(@self, path, state, pspec, value);
end;

function TGtkCssProvider.new: PGtkCssProvider; cdecl;
begin
  Result := Gtk3.gtk_css_provider_new();
end;

function TGtkCssProvider.get_default: PGtkCssProvider; cdecl;
begin
  Result := Gtk3.gtk_css_provider_get_default();
end;

function TGtkCssProvider.get_named(name: Pgchar; variant: Pgchar): PGtkCssProvider; cdecl;
begin
  Result := Gtk3.gtk_css_provider_get_named(name, variant);
end;

function TGtkCssProvider.load_from_data(data: Pgchar; length: gssize): gboolean; cdecl;
begin
  Result := Gtk3.gtk_css_provider_load_from_data(@self, data, length);
end;

function TGtkCssProvider.load_from_file(file_: PGFile): gboolean; cdecl;
begin
  Result := Gtk3.gtk_css_provider_load_from_file(@self, file_);
end;

function TGtkCssProvider.load_from_path(path: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_css_provider_load_from_path(@self, path);
end;

function TGtkCssProvider.to_string: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_css_provider_to_string(@self);
end;

function TGtkCssSection.get_end_line: guint; cdecl;
begin
  Result := Gtk3.gtk_css_section_get_end_line(@self);
end;

function TGtkCssSection.get_end_position: guint; cdecl;
begin
  Result := Gtk3.gtk_css_section_get_end_position(@self);
end;

function TGtkCssSection.get_file: PGFile; cdecl;
begin
  Result := Gtk3.gtk_css_section_get_file(@self);
end;

function TGtkCssSection.get_parent: PGtkCssSection; cdecl;
begin
  Result := Gtk3.gtk_css_section_get_parent(@self);
end;

function TGtkCssSection.get_section_type: TGtkCssSectionType; cdecl;
begin
  Result := Gtk3.gtk_css_section_get_section_type(@self);
end;

function TGtkCssSection.get_start_line: guint; cdecl;
begin
  Result := Gtk3.gtk_css_section_get_start_line(@self);
end;

function TGtkCssSection.get_start_position: guint; cdecl;
begin
  Result := Gtk3.gtk_css_section_get_start_position(@self);
end;

function TGtkCssSection.ref: PGtkCssSection; cdecl;
begin
  Result := Gtk3.gtk_css_section_ref(@self);
end;

procedure TGtkCssSection.unref; cdecl;
begin
  Gtk3.gtk_css_section_unref(@self);
end;


function TGtkDrawingArea.new: PGtkDrawingArea; cdecl;
begin
  Result := Gtk3.gtk_drawing_area_new();
end;

procedure TGtkEditable.copy_clipboard; cdecl;
begin
  Gtk3.gtk_editable_copy_clipboard(@self);
end;

procedure TGtkEditable.cut_clipboard; cdecl;
begin
  Gtk3.gtk_editable_cut_clipboard(@self);
end;

procedure TGtkEditable.delete_selection; cdecl;
begin
  Gtk3.gtk_editable_delete_selection(@self);
end;

procedure TGtkEditable.delete_text(start_pos: gint; end_pos: gint); cdecl;
begin
  Gtk3.gtk_editable_delete_text(@self, start_pos, end_pos);
end;

function TGtkEditable.get_chars(start_pos: gint; end_pos: gint): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_editable_get_chars(@self, start_pos, end_pos);
end;

function TGtkEditable.get_editable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_editable_get_editable(@self);
end;

function TGtkEditable.get_position: gint; cdecl;
begin
  Result := Gtk3.gtk_editable_get_position(@self);
end;

function TGtkEditable.get_selection_bounds(start_pos: Pgint; end_pos: Pgint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_editable_get_selection_bounds(@self, start_pos, end_pos);
end;

procedure TGtkEditable.insert_text(new_text: Pgchar; new_text_length: gint; position: Pgint); cdecl;
begin
  Gtk3.gtk_editable_insert_text(@self, new_text, new_text_length, position);
end;

procedure TGtkEditable.paste_clipboard; cdecl;
begin
  Gtk3.gtk_editable_paste_clipboard(@self);
end;

procedure TGtkEditable.select_region(start_pos: gint; end_pos: gint); cdecl;
begin
  Gtk3.gtk_editable_select_region(@self, start_pos, end_pos);
end;

procedure TGtkEditable.set_editable(is_editable: gboolean); cdecl;
begin
  Gtk3.gtk_editable_set_editable(@self, is_editable);
end;

procedure TGtkEditable.set_position(position: gint); cdecl;
begin
  Gtk3.gtk_editable_set_position(@self, position);
end;

function TGtkEntryBuffer.new(initial_chars: Pgchar; n_initial_chars: gint): PGtkEntryBuffer; cdecl;
begin
  Result := Gtk3.gtk_entry_buffer_new(initial_chars, n_initial_chars);
end;

function TGtkEntryBuffer.delete_text(position: guint; n_chars: gint): guint; cdecl;
begin
  Result := Gtk3.gtk_entry_buffer_delete_text(@self, position, n_chars);
end;

procedure TGtkEntryBuffer.emit_deleted_text(position: guint; n_chars: guint); cdecl;
begin
  Gtk3.gtk_entry_buffer_emit_deleted_text(@self, position, n_chars);
end;

procedure TGtkEntryBuffer.emit_inserted_text(position: guint; chars: Pgchar; n_chars: guint); cdecl;
begin
  Gtk3.gtk_entry_buffer_emit_inserted_text(@self, position, chars, n_chars);
end;

function TGtkEntryBuffer.get_bytes: gsize; cdecl;
begin
  Result := Gtk3.gtk_entry_buffer_get_bytes(@self);
end;

function TGtkEntryBuffer.get_length: guint; cdecl;
begin
  Result := Gtk3.gtk_entry_buffer_get_length(@self);
end;

function TGtkEntryBuffer.get_max_length: gint; cdecl;
begin
  Result := Gtk3.gtk_entry_buffer_get_max_length(@self);
end;

function TGtkEntryBuffer.get_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_entry_buffer_get_text(@self);
end;

function TGtkEntryBuffer.insert_text(position: guint; chars: Pgchar; n_chars: gint): guint; cdecl;
begin
  Result := Gtk3.gtk_entry_buffer_insert_text(@self, position, chars, n_chars);
end;

procedure TGtkEntryBuffer.set_max_length(max_length: gint); cdecl;
begin
  Gtk3.gtk_entry_buffer_set_max_length(@self, max_length);
end;

procedure TGtkEntryBuffer.set_text(chars: Pgchar; n_chars: gint); cdecl;
begin
  Gtk3.gtk_entry_buffer_set_text(@self, chars, n_chars);
end;

function TGtkEntryCompletion.new: PGtkEntryCompletion; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_new();
end;

function TGtkEntryCompletion.new_with_area(area: PGtkCellArea): PGtkEntryCompletion; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_new_with_area(area);
end;

procedure TGtkEntryCompletion.complete; cdecl;
begin
  Gtk3.gtk_entry_completion_complete(@self);
end;

procedure TGtkEntryCompletion.delete_action(index_: gint); cdecl;
begin
  Gtk3.gtk_entry_completion_delete_action(@self, index_);
end;

function TGtkEntryCompletion.get_completion_prefix: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_get_completion_prefix(@self);
end;

function TGtkEntryCompletion.get_entry: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_get_entry(@self);
end;

function TGtkEntryCompletion.get_inline_completion: gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_get_inline_completion(@self);
end;

function TGtkEntryCompletion.get_inline_selection: gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_get_inline_selection(@self);
end;

function TGtkEntryCompletion.get_minimum_key_length: gint; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_get_minimum_key_length(@self);
end;

function TGtkEntryCompletion.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_get_model(@self);
end;

function TGtkEntryCompletion.get_popup_completion: gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_get_popup_completion(@self);
end;

function TGtkEntryCompletion.get_popup_set_width: gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_get_popup_set_width(@self);
end;

function TGtkEntryCompletion.get_popup_single_match: gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_get_popup_single_match(@self);
end;

function TGtkEntryCompletion.get_text_column: gint; cdecl;
begin
  Result := Gtk3.gtk_entry_completion_get_text_column(@self);
end;

procedure TGtkEntryCompletion.insert_action_markup(index_: gint; markup: Pgchar); cdecl;
begin
  Gtk3.gtk_entry_completion_insert_action_markup(@self, index_, markup);
end;

procedure TGtkEntryCompletion.insert_action_text(index_: gint; text: Pgchar); cdecl;
begin
  Gtk3.gtk_entry_completion_insert_action_text(@self, index_, text);
end;

procedure TGtkEntryCompletion.insert_prefix; cdecl;
begin
  Gtk3.gtk_entry_completion_insert_prefix(@self);
end;

procedure TGtkEntryCompletion.set_inline_completion(inline_completion: gboolean); cdecl;
begin
  Gtk3.gtk_entry_completion_set_inline_completion(@self, inline_completion);
end;

procedure TGtkEntryCompletion.set_inline_selection(inline_selection: gboolean); cdecl;
begin
  Gtk3.gtk_entry_completion_set_inline_selection(@self, inline_selection);
end;

procedure TGtkEntryCompletion.set_match_func(func: TGtkEntryCompletionMatchFunc; func_data: gpointer; func_notify: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_entry_completion_set_match_func(@self, func, func_data, func_notify);
end;

procedure TGtkEntryCompletion.set_minimum_key_length(length: gint); cdecl;
begin
  Gtk3.gtk_entry_completion_set_minimum_key_length(@self, length);
end;

procedure TGtkEntryCompletion.set_model(model: PGtkTreeModel); cdecl;
begin
  Gtk3.gtk_entry_completion_set_model(@self, model);
end;

procedure TGtkEntryCompletion.set_popup_completion(popup_completion: gboolean); cdecl;
begin
  Gtk3.gtk_entry_completion_set_popup_completion(@self, popup_completion);
end;

procedure TGtkEntryCompletion.set_popup_set_width(popup_set_width: gboolean); cdecl;
begin
  Gtk3.gtk_entry_completion_set_popup_set_width(@self, popup_set_width);
end;

procedure TGtkEntryCompletion.set_popup_single_match(popup_single_match: gboolean); cdecl;
begin
  Gtk3.gtk_entry_completion_set_popup_single_match(@self, popup_single_match);
end;

procedure TGtkEntryCompletion.set_text_column(column: gint); cdecl;
begin
  Gtk3.gtk_entry_completion_set_text_column(@self, column);
end;

function TGtkTargetList.new(targets: PGtkTargetEntry; ntargets: guint): PGtkTargetList; cdecl;
begin
  Result := Gtk3.gtk_target_list_new(targets, ntargets);
end;

procedure TGtkTargetList.add(target: TGdkAtom; flags: guint; info: guint); cdecl;
begin
  Gtk3.gtk_target_list_add(@self, target, flags, info);
end;

procedure TGtkTargetList.add_image_targets(info: guint; writable: gboolean); cdecl;
begin
  Gtk3.gtk_target_list_add_image_targets(@self, info, writable);
end;

procedure TGtkTargetList.add_rich_text_targets(info: guint; deserializable: gboolean; buffer: PGtkTextBuffer); cdecl;
begin
  Gtk3.gtk_target_list_add_rich_text_targets(@self, info, deserializable, buffer);
end;

procedure TGtkTargetList.add_table(targets: PGtkTargetEntry; ntargets: guint); cdecl;
begin
  Gtk3.gtk_target_list_add_table(@self, targets, ntargets);
end;

procedure TGtkTargetList.add_text_targets(info: guint); cdecl;
begin
  Gtk3.gtk_target_list_add_text_targets(@self, info);
end;

procedure TGtkTargetList.add_uri_targets(info: guint); cdecl;
begin
  Gtk3.gtk_target_list_add_uri_targets(@self, info);
end;

function TGtkTargetList.find(target: TGdkAtom; info: Pguint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_target_list_find(@self, target, info);
end;

function TGtkTargetList.ref: PGtkTargetList; cdecl;
begin
  Result := Gtk3.gtk_target_list_ref(@self);
end;

procedure TGtkTargetList.remove(target: TGdkAtom); cdecl;
begin
  Gtk3.gtk_target_list_remove(@self, target);
end;

procedure TGtkTargetList.unref; cdecl;
begin
  Gtk3.gtk_target_list_unref(@self);
end;

function TGtkEntry.new: PGtkEntry; cdecl;
begin
  Result := Gtk3.gtk_entry_new();
end;

function TGtkEntry.new_with_buffer(buffer: PGtkEntryBuffer): PGtkEntry; cdecl;
begin
  Result := Gtk3.gtk_entry_new_with_buffer(buffer);
end;

function TGtkEntry.get_activates_default: gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_get_activates_default(@self);
end;

function TGtkEntry.get_alignment: gfloat; cdecl;
begin
  Result := Gtk3.gtk_entry_get_alignment(@self);
end;

function TGtkEntry.get_buffer: PGtkEntryBuffer; cdecl;
begin
  Result := Gtk3.gtk_entry_get_buffer(@self);
end;

function TGtkEntry.get_completion: PGtkEntryCompletion; cdecl;
begin
  Result := Gtk3.gtk_entry_get_completion(@self);
end;

function TGtkEntry.get_current_icon_drag_source: gint; cdecl;
begin
  Result := Gtk3.gtk_entry_get_current_icon_drag_source(@self);
end;

function TGtkEntry.get_cursor_hadjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk3.gtk_entry_get_cursor_hadjustment(@self);
end;

function TGtkEntry.get_has_frame: gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_get_has_frame(@self);
end;

function TGtkEntry.get_icon_activatable(icon_pos: TGtkEntryIconPosition): gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_get_icon_activatable(@self, icon_pos);
end;

procedure TGtkEntry.get_icon_area(icon_pos: TGtkEntryIconPosition; icon_area: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_entry_get_icon_area(@self, icon_pos, icon_area);
end;

function TGtkEntry.get_icon_at_pos(x: gint; y: gint): gint; cdecl;
begin
  Result := Gtk3.gtk_entry_get_icon_at_pos(@self, x, y);
end;

function TGtkEntry.get_icon_gicon(icon_pos: TGtkEntryIconPosition): PGIcon; cdecl;
begin
  Result := Gtk3.gtk_entry_get_icon_gicon(@self, icon_pos);
end;

function TGtkEntry.get_icon_name(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_entry_get_icon_name(@self, icon_pos);
end;

function TGtkEntry.get_icon_pixbuf(icon_pos: TGtkEntryIconPosition): PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_entry_get_icon_pixbuf(@self, icon_pos);
end;

function TGtkEntry.get_icon_sensitive(icon_pos: TGtkEntryIconPosition): gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_get_icon_sensitive(@self, icon_pos);
end;

function TGtkEntry.get_icon_stock(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_entry_get_icon_stock(@self, icon_pos);
end;

function TGtkEntry.get_icon_storage_type(icon_pos: TGtkEntryIconPosition): TGtkImageType; cdecl;
begin
  Result := Gtk3.gtk_entry_get_icon_storage_type(@self, icon_pos);
end;

function TGtkEntry.get_icon_tooltip_markup(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_entry_get_icon_tooltip_markup(@self, icon_pos);
end;

function TGtkEntry.get_icon_tooltip_text(icon_pos: TGtkEntryIconPosition): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_entry_get_icon_tooltip_text(@self, icon_pos);
end;

function TGtkEntry.get_inner_border: PGtkBorder; cdecl;
begin
  Result := Gtk3.gtk_entry_get_inner_border(@self);
end;

function TGtkEntry.get_invisible_char: gunichar; cdecl;
begin
  Result := Gtk3.gtk_entry_get_invisible_char(@self);
end;

function TGtkEntry.get_layout: PPangoLayout; cdecl;
begin
  Result := Gtk3.gtk_entry_get_layout(@self);
end;

procedure TGtkEntry.get_layout_offsets(x: Pgint; y: Pgint); cdecl;
begin
  Gtk3.gtk_entry_get_layout_offsets(@self, x, y);
end;

function TGtkEntry.get_max_length: gint; cdecl;
begin
  Result := Gtk3.gtk_entry_get_max_length(@self);
end;

function TGtkEntry.get_overwrite_mode: gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_get_overwrite_mode(@self);
end;

function TGtkEntry.get_placeholder_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_entry_get_placeholder_text(@self);
end;

function TGtkEntry.get_progress_fraction: gdouble; cdecl;
begin
  Result := Gtk3.gtk_entry_get_progress_fraction(@self);
end;

function TGtkEntry.get_progress_pulse_step: gdouble; cdecl;
begin
  Result := Gtk3.gtk_entry_get_progress_pulse_step(@self);
end;

function TGtkEntry.get_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_entry_get_text(@self);
end;

procedure TGtkEntry.get_text_area(text_area: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_entry_get_text_area(@self, text_area);
end;

function TGtkEntry.get_text_length: guint16; cdecl;
begin
  Result := Gtk3.gtk_entry_get_text_length(@self);
end;

function TGtkEntry.get_visibility: gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_get_visibility(@self);
end;

function TGtkEntry.get_width_chars: gint; cdecl;
begin
  Result := Gtk3.gtk_entry_get_width_chars(@self);
end;

function TGtkEntry.im_context_filter_keypress(event: PGdkEventKey): gboolean; cdecl;
begin
  Result := Gtk3.gtk_entry_im_context_filter_keypress(@self, event);
end;

function TGtkEntry.layout_index_to_text_index(layout_index: gint): gint; cdecl;
begin
  Result := Gtk3.gtk_entry_layout_index_to_text_index(@self, layout_index);
end;

procedure TGtkEntry.progress_pulse; cdecl;
begin
  Gtk3.gtk_entry_progress_pulse(@self);
end;

procedure TGtkEntry.reset_im_context; cdecl;
begin
  Gtk3.gtk_entry_reset_im_context(@self);
end;

procedure TGtkEntry.set_activates_default(setting: gboolean); cdecl;
begin
  Gtk3.gtk_entry_set_activates_default(@self, setting);
end;

procedure TGtkEntry.set_alignment(xalign: gfloat); cdecl;
begin
  Gtk3.gtk_entry_set_alignment(@self, xalign);
end;

procedure TGtkEntry.set_buffer(buffer: PGtkEntryBuffer); cdecl;
begin
  Gtk3.gtk_entry_set_buffer(@self, buffer);
end;

procedure TGtkEntry.set_completion(completion: PGtkEntryCompletion); cdecl;
begin
  Gtk3.gtk_entry_set_completion(@self, completion);
end;

procedure TGtkEntry.set_cursor_hadjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk3.gtk_entry_set_cursor_hadjustment(@self, adjustment);
end;

procedure TGtkEntry.set_has_frame(setting: gboolean); cdecl;
begin
  Gtk3.gtk_entry_set_has_frame(@self, setting);
end;

procedure TGtkEntry.set_icon_activatable(icon_pos: TGtkEntryIconPosition; activatable: gboolean); cdecl;
begin
  Gtk3.gtk_entry_set_icon_activatable(@self, icon_pos, activatable);
end;

procedure TGtkEntry.set_icon_drag_source(icon_pos: TGtkEntryIconPosition; target_list: PGtkTargetList; actions: TGdkDragAction); cdecl;
begin
  Gtk3.gtk_entry_set_icon_drag_source(@self, icon_pos, target_list, actions);
end;

procedure TGtkEntry.set_icon_from_gicon(icon_pos: TGtkEntryIconPosition; icon: PGIcon); cdecl;
begin
  Gtk3.gtk_entry_set_icon_from_gicon(@self, icon_pos, icon);
end;

procedure TGtkEntry.set_icon_from_icon_name(icon_pos: TGtkEntryIconPosition; icon_name: Pgchar); cdecl;
begin
  Gtk3.gtk_entry_set_icon_from_icon_name(@self, icon_pos, icon_name);
end;

procedure TGtkEntry.set_icon_from_pixbuf(icon_pos: TGtkEntryIconPosition; pixbuf: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_entry_set_icon_from_pixbuf(@self, icon_pos, pixbuf);
end;

procedure TGtkEntry.set_icon_from_stock(icon_pos: TGtkEntryIconPosition; stock_id: Pgchar); cdecl;
begin
  Gtk3.gtk_entry_set_icon_from_stock(@self, icon_pos, stock_id);
end;

procedure TGtkEntry.set_icon_sensitive(icon_pos: TGtkEntryIconPosition; sensitive: gboolean); cdecl;
begin
  Gtk3.gtk_entry_set_icon_sensitive(@self, icon_pos, sensitive);
end;

procedure TGtkEntry.set_icon_tooltip_markup(icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl;
begin
  Gtk3.gtk_entry_set_icon_tooltip_markup(@self, icon_pos, tooltip);
end;

procedure TGtkEntry.set_icon_tooltip_text(icon_pos: TGtkEntryIconPosition; tooltip: Pgchar); cdecl;
begin
  Gtk3.gtk_entry_set_icon_tooltip_text(@self, icon_pos, tooltip);
end;

procedure TGtkEntry.set_inner_border(border: PGtkBorder); cdecl;
begin
  Gtk3.gtk_entry_set_inner_border(@self, border);
end;

procedure TGtkEntry.set_invisible_char(ch: gunichar); cdecl;
begin
  Gtk3.gtk_entry_set_invisible_char(@self, ch);
end;

procedure TGtkEntry.set_max_length(max: gint); cdecl;
begin
  Gtk3.gtk_entry_set_max_length(@self, max);
end;

procedure TGtkEntry.set_overwrite_mode(overwrite: gboolean); cdecl;
begin
  Gtk3.gtk_entry_set_overwrite_mode(@self, overwrite);
end;

procedure TGtkEntry.set_placeholder_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_entry_set_placeholder_text(@self, text);
end;

procedure TGtkEntry.set_progress_fraction(fraction: gdouble); cdecl;
begin
  Gtk3.gtk_entry_set_progress_fraction(@self, fraction);
end;

procedure TGtkEntry.set_progress_pulse_step(fraction: gdouble); cdecl;
begin
  Gtk3.gtk_entry_set_progress_pulse_step(@self, fraction);
end;

procedure TGtkEntry.set_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_entry_set_text(@self, text);
end;

procedure TGtkEntry.set_visibility(visible: gboolean); cdecl;
begin
  Gtk3.gtk_entry_set_visibility(@self, visible);
end;

procedure TGtkEntry.set_width_chars(n_chars: gint); cdecl;
begin
  Gtk3.gtk_entry_set_width_chars(@self, n_chars);
end;

function TGtkEntry.text_index_to_layout_index(text_index: gint): gint; cdecl;
begin
  Result := Gtk3.gtk_entry_text_index_to_layout_index(@self, text_index);
end;

procedure TGtkEntry.unset_invisible_char; cdecl;
begin
  Gtk3.gtk_entry_unset_invisible_char(@self);
end;

function TGtkEventBox.new: PGtkEventBox; cdecl;
begin
  Result := Gtk3.gtk_event_box_new();
end;

function TGtkEventBox.get_above_child: gboolean; cdecl;
begin
  Result := Gtk3.gtk_event_box_get_above_child(@self);
end;

function TGtkEventBox.get_visible_window: gboolean; cdecl;
begin
  Result := Gtk3.gtk_event_box_get_visible_window(@self);
end;

procedure TGtkEventBox.set_above_child(above_child: gboolean); cdecl;
begin
  Gtk3.gtk_event_box_set_above_child(@self, above_child);
end;

procedure TGtkEventBox.set_visible_window(visible_window: gboolean); cdecl;
begin
  Gtk3.gtk_event_box_set_visible_window(@self, visible_window);
end;

function TGtkExpander.new(label_: Pgchar): PGtkExpander; cdecl;
begin
  Result := Gtk3.gtk_expander_new(label_);
end;

function TGtkExpander.new_with_mnemonic(label_: Pgchar): PGtkExpander; cdecl;
begin
  Result := Gtk3.gtk_expander_new_with_mnemonic(label_);
end;

function TGtkExpander.get_expanded: gboolean; cdecl;
begin
  Result := Gtk3.gtk_expander_get_expanded(@self);
end;

function TGtkExpander.get_label: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_expander_get_label(@self);
end;

function TGtkExpander.get_label_fill: gboolean; cdecl;
begin
  Result := Gtk3.gtk_expander_get_label_fill(@self);
end;

function TGtkExpander.get_label_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_expander_get_label_widget(@self);
end;

function TGtkExpander.get_resize_toplevel: gboolean; cdecl;
begin
  Result := Gtk3.gtk_expander_get_resize_toplevel(@self);
end;

function TGtkExpander.get_spacing: gint; cdecl;
begin
  Result := Gtk3.gtk_expander_get_spacing(@self);
end;

function TGtkExpander.get_use_markup: gboolean; cdecl;
begin
  Result := Gtk3.gtk_expander_get_use_markup(@self);
end;

function TGtkExpander.get_use_underline: gboolean; cdecl;
begin
  Result := Gtk3.gtk_expander_get_use_underline(@self);
end;

procedure TGtkExpander.set_expanded(expanded: gboolean); cdecl;
begin
  Gtk3.gtk_expander_set_expanded(@self, expanded);
end;

procedure TGtkExpander.set_label(label_: Pgchar); cdecl;
begin
  Gtk3.gtk_expander_set_label(@self, label_);
end;

procedure TGtkExpander.set_label_fill(label_fill: gboolean); cdecl;
begin
  Gtk3.gtk_expander_set_label_fill(@self, label_fill);
end;

procedure TGtkExpander.set_label_widget(label_widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_expander_set_label_widget(@self, label_widget);
end;

procedure TGtkExpander.set_resize_toplevel(resize_toplevel: gboolean); cdecl;
begin
  Gtk3.gtk_expander_set_resize_toplevel(@self, resize_toplevel);
end;

procedure TGtkExpander.set_spacing(spacing: gint); cdecl;
begin
  Gtk3.gtk_expander_set_spacing(@self, spacing);
end;

procedure TGtkExpander.set_use_markup(use_markup: gboolean); cdecl;
begin
  Gtk3.gtk_expander_set_use_markup(@self, use_markup);
end;

procedure TGtkExpander.set_use_underline(use_underline: gboolean); cdecl;
begin
  Gtk3.gtk_expander_set_use_underline(@self, use_underline);
end;

function TGtkFileFilter.new: PGtkFileFilter; cdecl;
begin
  Result := Gtk3.gtk_file_filter_new();
end;


procedure TGtkFileFilter.add_custom(needed: TGtkFileFilterFlags; func: TGtkFileFilterFunc; data: gpointer; notify: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_file_filter_add_custom(@self, needed, func, data, notify);
end;

procedure TGtkFileFilter.add_mime_type(mime_type: Pgchar); cdecl;
begin
  Gtk3.gtk_file_filter_add_mime_type(@self, mime_type);
end;

procedure TGtkFileFilter.add_pattern(pattern: Pgchar); cdecl;
begin
  Gtk3.gtk_file_filter_add_pattern(@self, pattern);
end;

procedure TGtkFileFilter.add_pixbuf_formats; cdecl;
begin
  Gtk3.gtk_file_filter_add_pixbuf_formats(@self);
end;

function TGtkFileFilter.filter(filter_info: PGtkFileFilterInfo): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_filter_filter(@self, filter_info);
end;

function TGtkFileFilter.get_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_file_filter_get_name(@self);
end;

function TGtkFileFilter.get_needed: TGtkFileFilterFlags; cdecl;
begin
  Result := Gtk3.gtk_file_filter_get_needed(@self);
end;

procedure TGtkFileFilter.set_name(name: Pgchar); cdecl;
begin
  Gtk3.gtk_file_filter_set_name(@self, name);
end;

procedure TGtkFileChooser.add_filter(filter: PGtkFileFilter); cdecl;
begin
  Gtk3.gtk_file_chooser_add_filter(@self, filter);
end;

function TGtkFileChooser.add_shortcut_folder(folder: Pchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_add_shortcut_folder(@self, folder);
end;

function TGtkFileChooser.add_shortcut_folder_uri(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_add_shortcut_folder_uri(@self, uri);
end;

function TGtkFileChooser.get_action: TGtkFileChooserAction; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_action(@self);
end;

function TGtkFileChooser.get_create_folders: gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_create_folders(@self);
end;

function TGtkFileChooser.get_current_folder: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_current_folder(@self);
end;

function TGtkFileChooser.get_current_folder_file: PGFile; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_current_folder_file(@self);
end;

function TGtkFileChooser.get_current_folder_uri: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_current_folder_uri(@self);
end;

function TGtkFileChooser.get_do_overwrite_confirmation: gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_do_overwrite_confirmation(@self);
end;

function TGtkFileChooser.get_extra_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_extra_widget(@self);
end;

function TGtkFileChooser.get_file: PGFile; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_file(@self);
end;

function TGtkFileChooser.get_filename: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_filename(@self);
end;

function TGtkFileChooser.get_filenames: PGSList; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_filenames(@self);
end;

function TGtkFileChooser.get_files: PGSList; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_files(@self);
end;

function TGtkFileChooser.get_filter: PGtkFileFilter; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_filter(@self);
end;

function TGtkFileChooser.get_local_only: gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_local_only(@self);
end;

function TGtkFileChooser.get_preview_file: PGFile; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_preview_file(@self);
end;

function TGtkFileChooser.get_preview_filename: Pchar; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_preview_filename(@self);
end;

function TGtkFileChooser.get_preview_uri: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_preview_uri(@self);
end;

function TGtkFileChooser.get_preview_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_preview_widget(@self);
end;

function TGtkFileChooser.get_preview_widget_active: gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_preview_widget_active(@self);
end;

function TGtkFileChooser.get_select_multiple: gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_select_multiple(@self);
end;

function TGtkFileChooser.get_show_hidden: gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_show_hidden(@self);
end;

function TGtkFileChooser.get_uri: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_uri(@self);
end;

function TGtkFileChooser.get_uris: PGSList; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_uris(@self);
end;

function TGtkFileChooser.get_use_preview_label: gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_get_use_preview_label(@self);
end;

function TGtkFileChooser.list_filters: PGSList; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_list_filters(@self);
end;

function TGtkFileChooser.list_shortcut_folder_uris: PGSList; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_list_shortcut_folder_uris(@self);
end;

function TGtkFileChooser.list_shortcut_folders: PGSList; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_list_shortcut_folders(@self);
end;

procedure TGtkFileChooser.remove_filter(filter: PGtkFileFilter); cdecl;
begin
  Gtk3.gtk_file_chooser_remove_filter(@self, filter);
end;

function TGtkFileChooser.remove_shortcut_folder(folder: Pchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_remove_shortcut_folder(@self, folder);
end;

function TGtkFileChooser.remove_shortcut_folder_uri(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_remove_shortcut_folder_uri(@self, uri);
end;

procedure TGtkFileChooser.select_all; cdecl;
begin
  Gtk3.gtk_file_chooser_select_all(@self);
end;

function TGtkFileChooser.select_file(file_: PGFile): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_select_file(@self, file_);
end;

function TGtkFileChooser.select_filename(filename: Pchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_select_filename(@self, filename);
end;

function TGtkFileChooser.select_uri(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_select_uri(@self, uri);
end;

procedure TGtkFileChooser.set_action(action: TGtkFileChooserAction); cdecl;
begin
  Gtk3.gtk_file_chooser_set_action(@self, action);
end;

procedure TGtkFileChooser.set_create_folders(create_folders: gboolean); cdecl;
begin
  Gtk3.gtk_file_chooser_set_create_folders(@self, create_folders);
end;

function TGtkFileChooser.set_current_folder(filename: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_set_current_folder(@self, filename);
end;

function TGtkFileChooser.set_current_folder_file(file_: PGFile): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_set_current_folder_file(@self, file_);
end;

function TGtkFileChooser.set_current_folder_uri(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_set_current_folder_uri(@self, uri);
end;

procedure TGtkFileChooser.set_current_name(name: Pgchar); cdecl;
begin
  Gtk3.gtk_file_chooser_set_current_name(@self, name);
end;

procedure TGtkFileChooser.set_do_overwrite_confirmation(do_overwrite_confirmation: gboolean); cdecl;
begin
  Gtk3.gtk_file_chooser_set_do_overwrite_confirmation(@self, do_overwrite_confirmation);
end;

procedure TGtkFileChooser.set_extra_widget(extra_widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_file_chooser_set_extra_widget(@self, extra_widget);
end;

function TGtkFileChooser.set_file(file_: PGFile): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_set_file(@self, file_);
end;

function TGtkFileChooser.set_filename(filename: Pchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_set_filename(@self, filename);
end;

procedure TGtkFileChooser.set_filter(filter: PGtkFileFilter); cdecl;
begin
  Gtk3.gtk_file_chooser_set_filter(@self, filter);
end;

procedure TGtkFileChooser.set_local_only(local_only: gboolean); cdecl;
begin
  Gtk3.gtk_file_chooser_set_local_only(@self, local_only);
end;

procedure TGtkFileChooser.set_preview_widget(preview_widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_file_chooser_set_preview_widget(@self, preview_widget);
end;

procedure TGtkFileChooser.set_preview_widget_active(active: gboolean); cdecl;
begin
  Gtk3.gtk_file_chooser_set_preview_widget_active(@self, active);
end;

procedure TGtkFileChooser.set_select_multiple(select_multiple: gboolean); cdecl;
begin
  Gtk3.gtk_file_chooser_set_select_multiple(@self, select_multiple);
end;

procedure TGtkFileChooser.set_show_hidden(show_hidden: gboolean); cdecl;
begin
  Gtk3.gtk_file_chooser_set_show_hidden(@self, show_hidden);
end;

function TGtkFileChooser.set_uri(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_set_uri(@self, uri);
end;

procedure TGtkFileChooser.set_use_preview_label(use_label: gboolean); cdecl;
begin
  Gtk3.gtk_file_chooser_set_use_preview_label(@self, use_label);
end;

procedure TGtkFileChooser.unselect_all; cdecl;
begin
  Gtk3.gtk_file_chooser_unselect_all(@self);
end;

procedure TGtkFileChooser.unselect_file(file_: PGFile); cdecl;
begin
  Gtk3.gtk_file_chooser_unselect_file(@self, file_);
end;

procedure TGtkFileChooser.unselect_filename(filename: Pchar); cdecl;
begin
  Gtk3.gtk_file_chooser_unselect_filename(@self, filename);
end;

procedure TGtkFileChooser.unselect_uri(uri: Pgchar); cdecl;
begin
  Gtk3.gtk_file_chooser_unselect_uri(@self, uri);
end;

function TGtkFileChooserButton.new(title: Pgchar; action: TGtkFileChooserAction): PGtkFileChooserButton; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_button_new(title, action);
end;

function TGtkFileChooserButton.new_with_dialog(dialog: PGtkWidget): PGtkFileChooserButton; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_button_new_with_dialog(dialog);
end;

function TGtkFileChooserButton.get_focus_on_click: gboolean; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_button_get_focus_on_click(@self);
end;

function TGtkFileChooserButton.get_title: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_button_get_title(@self);
end;

function TGtkFileChooserButton.get_width_chars: gint; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_button_get_width_chars(@self);
end;

procedure TGtkFileChooserButton.set_focus_on_click(focus_on_click: gboolean); cdecl;
begin
  Gtk3.gtk_file_chooser_button_set_focus_on_click(@self, focus_on_click);
end;

procedure TGtkFileChooserButton.set_title(title: Pgchar); cdecl;
begin
  Gtk3.gtk_file_chooser_button_set_title(@self, title);
end;

procedure TGtkFileChooserButton.set_width_chars(n_chars: gint); cdecl;
begin
  Gtk3.gtk_file_chooser_button_set_width_chars(@self, n_chars);
end;

function TGtkFileChooserWidget.new(action: TGtkFileChooserAction): PGtkFileChooserWidget; cdecl;
begin
  Result := Gtk3.gtk_file_chooser_widget_new(action);
end;

function TGtkFixed.new: PGtkFixed; cdecl;
begin
  Result := Gtk3.gtk_fixed_new();
end;

procedure TGtkFixed.move(widget: PGtkWidget; x: gint; y: gint); cdecl;
begin
  Gtk3.gtk_fixed_move(@self, widget, x, y);
end;

procedure TGtkFixed.put(widget: PGtkWidget; x: gint; y: gint); cdecl;
begin
  Gtk3.gtk_fixed_put(@self, widget, x, y);
end;

function TGtkFontButton.new: PGtkFontButton; cdecl;
begin
  Result := Gtk3.gtk_font_button_new();
end;

function TGtkFontButton.new_with_font(fontname: Pgchar): PGtkFontButton; cdecl;
begin
  Result := Gtk3.gtk_font_button_new_with_font(fontname);
end;

function TGtkFontButton.get_font_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_font_button_get_font_name(@self);
end;

function TGtkFontButton.get_show_size: gboolean; cdecl;
begin
  Result := Gtk3.gtk_font_button_get_show_size(@self);
end;

function TGtkFontButton.get_show_style: gboolean; cdecl;
begin
  Result := Gtk3.gtk_font_button_get_show_style(@self);
end;

function TGtkFontButton.get_title: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_font_button_get_title(@self);
end;

function TGtkFontButton.get_use_font: gboolean; cdecl;
begin
  Result := Gtk3.gtk_font_button_get_use_font(@self);
end;

function TGtkFontButton.get_use_size: gboolean; cdecl;
begin
  Result := Gtk3.gtk_font_button_get_use_size(@self);
end;

function TGtkFontButton.set_font_name(fontname: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_font_button_set_font_name(@self, fontname);
end;

procedure TGtkFontButton.set_show_size(show_size: gboolean); cdecl;
begin
  Gtk3.gtk_font_button_set_show_size(@self, show_size);
end;

procedure TGtkFontButton.set_show_style(show_style: gboolean); cdecl;
begin
  Gtk3.gtk_font_button_set_show_style(@self, show_style);
end;

procedure TGtkFontButton.set_title(title: Pgchar); cdecl;
begin
  Gtk3.gtk_font_button_set_title(@self, title);
end;

procedure TGtkFontButton.set_use_font(use_font: gboolean); cdecl;
begin
  Gtk3.gtk_font_button_set_use_font(@self, use_font);
end;

procedure TGtkFontButton.set_use_size(use_size: gboolean); cdecl;
begin
  Gtk3.gtk_font_button_set_use_size(@self, use_size);
end;

function TGtkFontChooser.new: PGtkFontChooser; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_new();
end;

function TGtkFontChooser.get_face: PPangoFontFace; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_get_face(@self);
end;

function TGtkFontChooser.get_family: PPangoFontFamily; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_get_family(@self);
end;

function TGtkFontChooser.get_font_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_get_font_name(@self);
end;

function TGtkFontChooser.get_preview_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_get_preview_text(@self);
end;

function TGtkFontChooser.get_show_preview_entry: gboolean; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_get_show_preview_entry(@self);
end;

function TGtkFontChooser.get_size: gint; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_get_size(@self);
end;

procedure TGtkFontChooser.set_filter_func(filter: TGtkFontFilterFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_font_chooser_set_filter_func(@self, filter, data, destroy_);
end;

function TGtkFontChooser.set_font_name(fontname: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_set_font_name(@self, fontname);
end;

procedure TGtkFontChooser.set_preview_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_font_chooser_set_preview_text(@self, text);
end;

procedure TGtkFontChooser.set_show_preview_entry(show_preview_entry: gboolean); cdecl;
begin
  Gtk3.gtk_font_chooser_set_show_preview_entry(@self, show_preview_entry);
end;

function TGtkFontChooserDialog.new(title: Pgchar; window: PAtkWindow): PGtkFontChooserDialog; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_dialog_new(title, window);
end;

function TGtkFontChooserDialog.get_font_chooser: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_dialog_get_font_chooser(@self);
end;

function TGtkFontChooserDialog.get_font_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_dialog_get_font_name(@self);
end;

function TGtkFontChooserDialog.get_preview_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_dialog_get_preview_text(@self);
end;

function TGtkFontChooserDialog.set_font_name(fontname: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_font_chooser_dialog_set_font_name(@self, fontname);
end;

procedure TGtkFontChooserDialog.set_preview_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_font_chooser_dialog_set_preview_text(@self, text);
end;

function TGtkFontSelection.new: PGtkFontSelection; cdecl;
begin
  Result := Gtk3.gtk_font_selection_new();
end;

function TGtkGradient.new_linear(x0: gdouble; y0: gdouble; x1: gdouble; y1: gdouble): PGtkGradient; cdecl;
begin
  Result := Gtk3.gtk_gradient_new_linear(x0, y0, x1, y1);
end;

function TGtkGradient.new_radial(x0: gdouble; y0: gdouble; radius0: gdouble; x1: gdouble; y1: gdouble; radius1: gdouble): PGtkGradient; cdecl;
begin
  Result := Gtk3.gtk_gradient_new_radial(x0, y0, radius0, x1, y1, radius1);
end;

procedure TGtkGradient.add_color_stop(offset: gdouble; color: PGtkSymbolicColor); cdecl;
begin
  Gtk3.gtk_gradient_add_color_stop(@self, offset, color);
end;

function TGtkGradient.ref: PGtkGradient; cdecl;
begin
  Result := Gtk3.gtk_gradient_ref(@self);
end;

function TGtkGradient.resolve(props: PGtkStyleProperties; resolved_gradient: PPcairo_pattern_t): gboolean; cdecl;
begin
  Result := Gtk3.gtk_gradient_resolve(@self, props, resolved_gradient);
end;

function TGtkGradient.to_string: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_gradient_to_string(@self);
end;

procedure TGtkGradient.unref; cdecl;
begin
  Gtk3.gtk_gradient_unref(@self);
end;

function TGtkSymbolicColor.new_literal(color: PGdkRGBA): PGtkSymbolicColor; cdecl;
begin
  Result := Gtk3.gtk_symbolic_color_new_literal(color);
end;

function TGtkSymbolicColor.new_name(name: Pgchar): PGtkSymbolicColor; cdecl;
begin
  Result := Gtk3.gtk_symbolic_color_new_name(name);
end;

function TGtkSymbolicColor.new_alpha(factor: gdouble): PGtkSymbolicColor; cdecl;
begin
  Result := Gtk3.gtk_symbolic_color_new_alpha(@self, factor);
end;

function TGtkSymbolicColor.new_mix(color2: PGtkSymbolicColor; factor: gdouble): PGtkSymbolicColor; cdecl;
begin
  Result := Gtk3.gtk_symbolic_color_new_mix(@self, color2, factor);
end;

function TGtkSymbolicColor.new_shade(factor: gdouble): PGtkSymbolicColor; cdecl;
begin
  Result := Gtk3.gtk_symbolic_color_new_shade(@self, factor);
end;

function TGtkSymbolicColor.ref: PGtkSymbolicColor; cdecl;
begin
  Result := Gtk3.gtk_symbolic_color_ref(@self);
end;

function TGtkSymbolicColor.resolve(props: PGtkStyleProperties; resolved_color: PGdkRGBA): gboolean; cdecl;
begin
  Result := Gtk3.gtk_symbolic_color_resolve(@self, props, resolved_color);
end;

function TGtkSymbolicColor.to_string: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_symbolic_color_to_string(@self);
end;

procedure TGtkSymbolicColor.unref; cdecl;
begin
  Gtk3.gtk_symbolic_color_unref(@self);
end;

function TGtkStyleProperties.new: PGtkStyleProperties; cdecl;
begin
  Result := Gtk3.gtk_style_properties_new();
end;

function TGtkStyleProperties.lookup_property(property_name: Pgchar; parse_func: PGtkStylePropertyParser; pspec: PPGParamSpec): gboolean; cdecl;
begin
  Result := Gtk3.gtk_style_properties_lookup_property(property_name, parse_func, pspec);
end;

procedure TGtkStyleProperties.register_property(parse_func: TGtkStylePropertyParser; pspec: PGParamSpec); cdecl;
begin
  Gtk3.gtk_style_properties_register_property(parse_func, pspec);
end;

procedure TGtkStyleProperties.clear; cdecl;
begin
  Gtk3.gtk_style_properties_clear(@self);
end;

function TGtkStyleProperties.get_property(property_: Pgchar; state: TGtkStateFlags; value: PGValue): gboolean; cdecl;
begin
  Result := Gtk3.gtk_style_properties_get_property(@self, property_, state, value);
end;

function TGtkStyleProperties.lookup_color(name: Pgchar): PGtkSymbolicColor; cdecl;
begin
  Result := Gtk3.gtk_style_properties_lookup_color(@self, name);
end;

procedure TGtkStyleProperties.map_color(name: Pgchar; color: PGtkSymbolicColor); cdecl;
begin
  Gtk3.gtk_style_properties_map_color(@self, name, color);
end;

procedure TGtkStyleProperties.merge(props_to_merge: PGtkStyleProperties; replace: gboolean); cdecl;
begin
  Gtk3.gtk_style_properties_merge(@self, props_to_merge, replace);
end;

procedure TGtkStyleProperties.set_property(property_: Pgchar; state: TGtkStateFlags; value: PGValue); cdecl;
begin
  Gtk3.gtk_style_properties_set_property(@self, property_, state, value);
end;

procedure TGtkStyleProperties.unset_property(property_: Pgchar; state: TGtkStateFlags); cdecl;
begin
  Gtk3.gtk_style_properties_unset_property(@self, property_, state);
end;

function TGtkGrid.new: PGtkGrid; cdecl;
begin
  Result := Gtk3.gtk_grid_new();
end;

procedure TGtkGrid.attach(child: PGtkWidget; left: gint; top: gint; width: gint; height: gint); cdecl;
begin
  Gtk3.gtk_grid_attach(@self, child, left, top, width, height);
end;

procedure TGtkGrid.attach_next_to(child: PGtkWidget; sibling: PGtkWidget; side: TGtkPositionType; width: gint; height: gint); cdecl;
begin
  Gtk3.gtk_grid_attach_next_to(@self, child, sibling, side, width, height);
end;

function TGtkGrid.get_child_at(left: gint; top: gint): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_grid_get_child_at(@self, left, top);
end;

function TGtkGrid.get_column_homogeneous: gboolean; cdecl;
begin
  Result := Gtk3.gtk_grid_get_column_homogeneous(@self);
end;

function TGtkGrid.get_column_spacing: guint; cdecl;
begin
  Result := Gtk3.gtk_grid_get_column_spacing(@self);
end;

function TGtkGrid.get_row_homogeneous: gboolean; cdecl;
begin
  Result := Gtk3.gtk_grid_get_row_homogeneous(@self);
end;

function TGtkGrid.get_row_spacing: guint; cdecl;
begin
  Result := Gtk3.gtk_grid_get_row_spacing(@self);
end;

procedure TGtkGrid.insert_column(position: gint); cdecl;
begin
  Gtk3.gtk_grid_insert_column(@self, position);
end;

procedure TGtkGrid.insert_next_to(sibling: PGtkWidget; side: TGtkPositionType); cdecl;
begin
  Gtk3.gtk_grid_insert_next_to(@self, sibling, side);
end;

procedure TGtkGrid.insert_row(position: gint); cdecl;
begin
  Gtk3.gtk_grid_insert_row(@self, position);
end;

procedure TGtkGrid.set_column_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk3.gtk_grid_set_column_homogeneous(@self, homogeneous);
end;

procedure TGtkGrid.set_column_spacing(spacing: guint); cdecl;
begin
  Gtk3.gtk_grid_set_column_spacing(@self, spacing);
end;

procedure TGtkGrid.set_row_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk3.gtk_grid_set_row_homogeneous(@self, homogeneous);
end;

procedure TGtkGrid.set_row_spacing(spacing: guint); cdecl;
begin
  Gtk3.gtk_grid_set_row_spacing(@self, spacing);
end;

function TGtkPaned.new(orientation: TGtkOrientation): PGtkPaned; cdecl;
begin
  Result := Gtk3.gtk_paned_new(orientation);
end;

procedure TGtkPaned.add1(child: PGtkWidget); cdecl;
begin
  Gtk3.gtk_paned_add1(@self, child);
end;

procedure TGtkPaned.add2(child: PGtkWidget); cdecl;
begin
  Gtk3.gtk_paned_add2(@self, child);
end;

function TGtkPaned.get_child1: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_paned_get_child1(@self);
end;

function TGtkPaned.get_child2: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_paned_get_child2(@self);
end;

function TGtkPaned.get_handle_window: PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_paned_get_handle_window(@self);
end;

function TGtkPaned.get_position: gint; cdecl;
begin
  Result := Gtk3.gtk_paned_get_position(@self);
end;

procedure TGtkPaned.pack1(child: PGtkWidget; resize: gboolean; shrink: gboolean); cdecl;
begin
  Gtk3.gtk_paned_pack1(@self, child, resize, shrink);
end;

procedure TGtkPaned.pack2(child: PGtkWidget; resize: gboolean; shrink: gboolean); cdecl;
begin
  Gtk3.gtk_paned_pack2(@self, child, resize, shrink);
end;

procedure TGtkPaned.set_position(position: gint); cdecl;
begin
  Gtk3.gtk_paned_set_position(@self, position);
end;

function TGtkHSV.new: PGtkHSV; cdecl;
begin
  Result := Gtk3.gtk_hsv_new();
end;

procedure TGtkHSV.to_rgb(h: gdouble; s: gdouble; v: gdouble; r: Pgdouble; g: Pgdouble; b: Pgdouble); cdecl;
begin
  Gtk3.gtk_hsv_to_rgb(h, s, v, r, g, b);
end;

procedure TGtkHSV.get_color(h: Pgdouble; s: Pgdouble; v: Pgdouble); cdecl;
begin
  Gtk3.gtk_hsv_get_color(@self, h, s, v);
end;

procedure TGtkHSV.get_metrics(size: Pgint; ring_width: Pgint); cdecl;
begin
  Gtk3.gtk_hsv_get_metrics(@self, size, ring_width);
end;

function TGtkHSV.is_adjusting: gboolean; cdecl;
begin
  Result := Gtk3.gtk_hsv_is_adjusting(@self);
end;

procedure TGtkHSV.set_color(h: gdouble; s: gdouble; v: gdouble); cdecl;
begin
  Gtk3.gtk_hsv_set_color(@self, h, s, v);
end;

procedure TGtkHSV.set_metrics(size: gint; ring_width: gint); cdecl;
begin
  Gtk3.gtk_hsv_set_metrics(@self, size, ring_width);
end;

function TGtkRange.get_adjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk3.gtk_range_get_adjustment(@self);
end;

function TGtkRange.get_fill_level: gdouble; cdecl;
begin
  Result := Gtk3.gtk_range_get_fill_level(@self);
end;

function TGtkRange.get_flippable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_range_get_flippable(@self);
end;

function TGtkRange.get_inverted: gboolean; cdecl;
begin
  Result := Gtk3.gtk_range_get_inverted(@self);
end;

function TGtkRange.get_lower_stepper_sensitivity: TGtkSensitivityType; cdecl;
begin
  Result := Gtk3.gtk_range_get_lower_stepper_sensitivity(@self);
end;

function TGtkRange.get_min_slider_size: gint; cdecl;
begin
  Result := Gtk3.gtk_range_get_min_slider_size(@self);
end;

procedure TGtkRange.get_range_rect(range_rect: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_range_get_range_rect(@self, range_rect);
end;

function TGtkRange.get_restrict_to_fill_level: gboolean; cdecl;
begin
  Result := Gtk3.gtk_range_get_restrict_to_fill_level(@self);
end;

function TGtkRange.get_round_digits: gint; cdecl;
begin
  Result := Gtk3.gtk_range_get_round_digits(@self);
end;

function TGtkRange.get_show_fill_level: gboolean; cdecl;
begin
  Result := Gtk3.gtk_range_get_show_fill_level(@self);
end;

procedure TGtkRange.get_slider_range(slider_start: Pgint; slider_end: Pgint); cdecl;
begin
  Gtk3.gtk_range_get_slider_range(@self, slider_start, slider_end);
end;

function TGtkRange.get_slider_size_fixed: gboolean; cdecl;
begin
  Result := Gtk3.gtk_range_get_slider_size_fixed(@self);
end;

function TGtkRange.get_upper_stepper_sensitivity: TGtkSensitivityType; cdecl;
begin
  Result := Gtk3.gtk_range_get_upper_stepper_sensitivity(@self);
end;

function TGtkRange.get_value: gdouble; cdecl;
begin
  Result := Gtk3.gtk_range_get_value(@self);
end;

procedure TGtkRange.set_adjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk3.gtk_range_set_adjustment(@self, adjustment);
end;

procedure TGtkRange.set_fill_level(fill_level: gdouble); cdecl;
begin
  Gtk3.gtk_range_set_fill_level(@self, fill_level);
end;

procedure TGtkRange.set_flippable(flippable: gboolean); cdecl;
begin
  Gtk3.gtk_range_set_flippable(@self, flippable);
end;

procedure TGtkRange.set_increments(step: gdouble; page: gdouble); cdecl;
begin
  Gtk3.gtk_range_set_increments(@self, step, page);
end;

procedure TGtkRange.set_inverted(setting: gboolean); cdecl;
begin
  Gtk3.gtk_range_set_inverted(@self, setting);
end;

procedure TGtkRange.set_lower_stepper_sensitivity(sensitivity: TGtkSensitivityType); cdecl;
begin
  Gtk3.gtk_range_set_lower_stepper_sensitivity(@self, sensitivity);
end;

procedure TGtkRange.set_min_slider_size(min_size: gint); cdecl;
begin
  Gtk3.gtk_range_set_min_slider_size(@self, min_size);
end;

procedure TGtkRange.set_range(min: gdouble; max: gdouble); cdecl;
begin
  Gtk3.gtk_range_set_range(@self, min, max);
end;

procedure TGtkRange.set_restrict_to_fill_level(restrict_to_fill_level: gboolean); cdecl;
begin
  Gtk3.gtk_range_set_restrict_to_fill_level(@self, restrict_to_fill_level);
end;

procedure TGtkRange.set_round_digits(round_digits: gint); cdecl;
begin
  Gtk3.gtk_range_set_round_digits(@self, round_digits);
end;

procedure TGtkRange.set_show_fill_level(show_fill_level: gboolean); cdecl;
begin
  Gtk3.gtk_range_set_show_fill_level(@self, show_fill_level);
end;

procedure TGtkRange.set_slider_size_fixed(size_fixed: gboolean); cdecl;
begin
  Gtk3.gtk_range_set_slider_size_fixed(@self, size_fixed);
end;

procedure TGtkRange.set_upper_stepper_sensitivity(sensitivity: TGtkSensitivityType); cdecl;
begin
  Gtk3.gtk_range_set_upper_stepper_sensitivity(@self, sensitivity);
end;

procedure TGtkRange.set_value(value: gdouble); cdecl;
begin
  Gtk3.gtk_range_set_value(@self, value);
end;

function TGtkScale.new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScale; cdecl;
begin
  Result := Gtk3.gtk_scale_new(orientation, adjustment);
end;

function TGtkScale.new_with_range(orientation: TGtkOrientation; min: gdouble; max: gdouble; step: gdouble): PGtkScale; cdecl;
begin
  Result := Gtk3.gtk_scale_new_with_range(orientation, min, max, step);
end;

procedure TGtkScale.add_mark(value: gdouble; position: TGtkPositionType; markup: Pgchar); cdecl;
begin
  Gtk3.gtk_scale_add_mark(@self, value, position, markup);
end;

procedure TGtkScale.clear_marks; cdecl;
begin
  Gtk3.gtk_scale_clear_marks(@self);
end;

function TGtkScale.get_digits: gint; cdecl;
begin
  Result := Gtk3.gtk_scale_get_digits(@self);
end;

function TGtkScale.get_draw_value: gboolean; cdecl;
begin
  Result := Gtk3.gtk_scale_get_draw_value(@self);
end;

function TGtkScale.get_layout: PPangoLayout; cdecl;
begin
  Result := Gtk3.gtk_scale_get_layout(@self);
end;

procedure TGtkScale.get_layout_offsets(x: Pgint; y: Pgint); cdecl;
begin
  Gtk3.gtk_scale_get_layout_offsets(@self, x, y);
end;

function TGtkScale.get_value_pos: TGtkPositionType; cdecl;
begin
  Result := Gtk3.gtk_scale_get_value_pos(@self);
end;

procedure TGtkScale.set_digits(digits: gint); cdecl;
begin
  Gtk3.gtk_scale_set_digits(@self, digits);
end;

procedure TGtkScale.set_draw_value(draw_value: gboolean); cdecl;
begin
  Gtk3.gtk_scale_set_draw_value(@self, draw_value);
end;

procedure TGtkScale.set_value_pos(pos: TGtkPositionType); cdecl;
begin
  Gtk3.gtk_scale_set_value_pos(@self, pos);
end;

function TGtkScrollbar.new(orientation: TGtkOrientation; adjustment: PGtkAdjustment): PGtkScrollbar; cdecl;
begin
  Result := Gtk3.gtk_scrollbar_new(orientation, adjustment);
end;

function TGtkSeparator.new(orientation: TGtkOrientation): PGtkSeparator; cdecl;
begin
  Result := Gtk3.gtk_separator_new(orientation);
end;

function TGtkHandleBox.new: PGtkHandleBox; cdecl;
begin
  Result := Gtk3.gtk_handle_box_new();
end;

function TGtkHandleBox.get_child_detached: gboolean; cdecl;
begin
  Result := Gtk3.gtk_handle_box_get_child_detached(@self);
end;

function TGtkHandleBox.get_handle_position: TGtkPositionType; cdecl;
begin
  Result := Gtk3.gtk_handle_box_get_handle_position(@self);
end;

function TGtkHandleBox.get_shadow_type: TGtkShadowType; cdecl;
begin
  Result := Gtk3.gtk_handle_box_get_shadow_type(@self);
end;

function TGtkHandleBox.get_snap_edge: TGtkPositionType; cdecl;
begin
  Result := Gtk3.gtk_handle_box_get_snap_edge(@self);
end;

procedure TGtkHandleBox.set_handle_position(position: TGtkPositionType); cdecl;
begin
  Gtk3.gtk_handle_box_set_handle_position(@self, position);
end;

procedure TGtkHandleBox.set_shadow_type(type_: TGtkShadowType); cdecl;
begin
  Gtk3.gtk_handle_box_set_shadow_type(@self, type_);
end;

procedure TGtkHandleBox.set_snap_edge(edge: TGtkPositionType); cdecl;
begin
  Gtk3.gtk_handle_box_set_snap_edge(@self, edge);
end;

function TGtkIMContext.delete_surrounding(offset: gint; n_chars: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_im_context_delete_surrounding(@self, offset, n_chars);
end;

function TGtkIMContext.filter_keypress(event: PGdkEventKey): gboolean; cdecl;
begin
  Result := Gtk3.gtk_im_context_filter_keypress(@self, event);
end;

procedure TGtkIMContext.focus_in; cdecl;
begin
  Gtk3.gtk_im_context_focus_in(@self);
end;

procedure TGtkIMContext.focus_out; cdecl;
begin
  Gtk3.gtk_im_context_focus_out(@self);
end;

procedure TGtkIMContext.get_preedit_string(str: PPgchar; attrs: PPPangoAttrList; cursor_pos: Pgint); cdecl;
begin
  Gtk3.gtk_im_context_get_preedit_string(@self, str, attrs, cursor_pos);
end;

function TGtkIMContext.get_surrounding(text: PPgchar; cursor_index: Pgint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_im_context_get_surrounding(@self, text, cursor_index);
end;

procedure TGtkIMContext.reset; cdecl;
begin
  Gtk3.gtk_im_context_reset(@self);
end;

procedure TGtkIMContext.set_client_window(window: PGdkWindow); cdecl;
begin
  Gtk3.gtk_im_context_set_client_window(@self, window);
end;

procedure TGtkIMContext.set_cursor_location(area: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_im_context_set_cursor_location(@self, area);
end;

procedure TGtkIMContext.set_surrounding(text: Pgchar; len: gint; cursor_index: gint); cdecl;
begin
  Gtk3.gtk_im_context_set_surrounding(@self, text, len, cursor_index);
end;

procedure TGtkIMContext.set_use_preedit(use_preedit: gboolean); cdecl;
begin
  Gtk3.gtk_im_context_set_use_preedit(@self, use_preedit);
end;

function TGtkIMContextSimple.new: PGtkIMContextSimple; cdecl;
begin
  Result := Gtk3.gtk_im_context_simple_new();
end;

procedure TGtkIMContextSimple.add_table(data: Pguint16; max_seq_len: gint; n_seqs: gint); cdecl;
begin
  Gtk3.gtk_im_context_simple_add_table(@self, data, max_seq_len, n_seqs);
end;

function TGtkIMMulticontext.new: PGtkIMMulticontext; cdecl;
begin
  Result := Gtk3.gtk_im_multicontext_new();
end;

procedure TGtkIMMulticontext.append_menuitems(menushell: PGtkMenuShell); cdecl;
begin
  Gtk3.gtk_im_multicontext_append_menuitems(@self, menushell);
end;

function TGtkIMMulticontext.get_context_id: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_im_multicontext_get_context_id(@self);
end;

procedure TGtkIMMulticontext.set_context_id(context_id: Pgchar); cdecl;
begin
  Gtk3.gtk_im_multicontext_set_context_id(@self, context_id);
end;

function TGtkIconFactory.new: PGtkIconFactory; cdecl;
begin
  Result := Gtk3.gtk_icon_factory_new();
end;

function TGtkIconFactory.lookup_default(stock_id: Pgchar): PGtkIconSet; cdecl;
begin
  Result := Gtk3.gtk_icon_factory_lookup_default(stock_id);
end;

procedure TGtkIconFactory.add(stock_id: Pgchar; icon_set: PGtkIconSet); cdecl;
begin
  Gtk3.gtk_icon_factory_add(@self, stock_id, icon_set);
end;

procedure TGtkIconFactory.add_default; cdecl;
begin
  Gtk3.gtk_icon_factory_add_default(@self);
end;

function TGtkIconFactory.lookup(stock_id: Pgchar): PGtkIconSet; cdecl;
begin
  Result := Gtk3.gtk_icon_factory_lookup(@self, stock_id);
end;

procedure TGtkIconFactory.remove_default; cdecl;
begin
  Gtk3.gtk_icon_factory_remove_default(@self);
end;

function TGtkIconSet.new: PGtkIconSet; cdecl;
begin
  Result := Gtk3.gtk_icon_set_new();
end;

function TGtkIconSet.new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkIconSet; cdecl;
begin
  Result := Gtk3.gtk_icon_set_new_from_pixbuf(pixbuf);
end;

procedure TGtkIconSet.add_source(source: PGtkIconSource); cdecl;
begin
  Gtk3.gtk_icon_set_add_source(@self, source);
end;

function TGtkIconSet.copy: PGtkIconSet; cdecl;
begin
  Result := Gtk3.gtk_icon_set_copy(@self);
end;

procedure TGtkIconSet.get_sizes(sizes: PPgint; n_sizes: Pgint); cdecl;
begin
  Gtk3.gtk_icon_set_get_sizes(@self, sizes, n_sizes);
end;

function TGtkIconSet.ref: PGtkIconSet; cdecl;
begin
  Result := Gtk3.gtk_icon_set_ref(@self);
end;

function TGtkIconSet.render_icon_pixbuf(context: PGtkStyleContext; size: gint): PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_icon_set_render_icon_pixbuf(@self, context, size);
end;

procedure TGtkIconSet.unref; cdecl;
begin
  Gtk3.gtk_icon_set_unref(@self);
end;

function TGtkIconInfo.new_for_pixbuf(icon_theme: PGtkIconTheme; pixbuf: PGdkPixbuf): PGtkIconInfo; cdecl;
begin
  Result := Gtk3.gtk_icon_info_new_for_pixbuf(icon_theme, pixbuf);
end;

function TGtkIconInfo.copy: PGtkIconInfo; cdecl;
begin
  Result := Gtk3.gtk_icon_info_copy(@self);
end;

procedure TGtkIconInfo.free; cdecl;
begin
  Gtk3.gtk_icon_info_free(@self);
end;

function TGtkIconInfo.get_attach_points(points: PPGdkPoint; n_points: Pgint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_info_get_attach_points(@self, points, n_points);
end;

function TGtkIconInfo.get_base_size: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_info_get_base_size(@self);
end;

function TGtkIconInfo.get_builtin_pixbuf: PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_icon_info_get_builtin_pixbuf(@self);
end;

function TGtkIconInfo.get_display_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_icon_info_get_display_name(@self);
end;

function TGtkIconInfo.get_embedded_rect(rectangle: PGdkRectangle): gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_info_get_embedded_rect(@self, rectangle);
end;

function TGtkIconInfo.get_filename: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_icon_info_get_filename(@self);
end;

function TGtkIconInfo.load_icon: PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_icon_info_load_icon(@self);
end;

function TGtkIconInfo.load_symbolic(fg: PGdkRGBA; success_color: PGdkRGBA; warning_color: PGdkRGBA; error_color: PGdkRGBA; was_symbolic: Pgboolean): PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_icon_info_load_symbolic(@self, fg, success_color, warning_color, error_color, was_symbolic);
end;

function TGtkIconInfo.load_symbolic_for_context(context: PGtkStyleContext; was_symbolic: Pgboolean): PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_icon_info_load_symbolic_for_context(@self, context, was_symbolic);
end;

procedure TGtkIconInfo.set_raw_coordinates(raw_coordinates: gboolean); cdecl;
begin
  Gtk3.gtk_icon_info_set_raw_coordinates(@self, raw_coordinates);
end;

function TGtkIconTheme.new: PGtkIconTheme; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_new();
end;

procedure TGtkIconTheme.add_builtin_icon(icon_name: Pgchar; size: gint; pixbuf: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_icon_theme_add_builtin_icon(icon_name, size, pixbuf);
end;

function TGtkIconTheme.get_default: PGtkIconTheme; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_get_default();
end;

function TGtkIconTheme.get_for_screen(screen: PGdkScreen): PGtkIconTheme; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_get_for_screen(screen);
end;

procedure TGtkIconTheme.append_search_path(path: Pgchar); cdecl;
begin
  Gtk3.gtk_icon_theme_append_search_path(@self, path);
end;


function TGtkIconTheme.choose_icon(icon_names: Pgchar; size: gint; flags: TGtkIconLookupFlags): PGtkIconInfo; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_choose_icon(@self, icon_names, size, flags);
end;

function TGtkIconTheme.get_example_icon_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_get_example_icon_name(@self);
end;

function TGtkIconTheme.get_icon_sizes(icon_name: Pgchar): Pgint; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_get_icon_sizes(@self, icon_name);
end;

procedure TGtkIconTheme.get_search_path(path: PPgchar; n_elements: Pgint); cdecl;
begin
  Gtk3.gtk_icon_theme_get_search_path(@self, path, n_elements);
end;

function TGtkIconTheme.has_icon(icon_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_has_icon(@self, icon_name);
end;

function TGtkIconTheme.list_contexts: PGList; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_list_contexts(@self);
end;

function TGtkIconTheme.list_icons(context: Pgchar): PGList; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_list_icons(@self, context);
end;

function TGtkIconTheme.load_icon(icon_name: Pgchar; size: gint; flags: TGtkIconLookupFlags): PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_load_icon(@self, icon_name, size, flags);
end;

function TGtkIconTheme.lookup_by_gicon(icon: PGIcon; size: gint; flags: TGtkIconLookupFlags): PGtkIconInfo; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_lookup_by_gicon(@self, icon, size, flags);
end;

function TGtkIconTheme.lookup_icon(icon_name: Pgchar; size: gint; flags: TGtkIconLookupFlags): PGtkIconInfo; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_lookup_icon(@self, icon_name, size, flags);
end;

procedure TGtkIconTheme.prepend_search_path(path: Pgchar); cdecl;
begin
  Gtk3.gtk_icon_theme_prepend_search_path(@self, path);
end;

function TGtkIconTheme.rescan_if_needed: gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_theme_rescan_if_needed(@self);
end;

procedure TGtkIconTheme.set_custom_theme(theme_name: Pgchar); cdecl;
begin
  Gtk3.gtk_icon_theme_set_custom_theme(@self, theme_name);
end;

procedure TGtkIconTheme.set_screen(screen: PGdkScreen); cdecl;
begin
  Gtk3.gtk_icon_theme_set_screen(@self, screen);
end;

procedure TGtkIconTheme.set_search_path(path: Pgchar; n_elements: gint); cdecl;
begin
  Gtk3.gtk_icon_theme_set_search_path(@self, path, n_elements);
end;

function TGtkStyleContext.new: PGtkStyleContext; cdecl;
begin
  Result := Gtk3.gtk_style_context_new();
end;

procedure TGtkStyleContext.add_provider_for_screen(screen: PGdkScreen; provider: PGtkStyleProvider; priority: guint); cdecl;
begin
  Gtk3.gtk_style_context_add_provider_for_screen(screen, provider, priority);
end;

procedure TGtkStyleContext.remove_provider_for_screen(screen: PGdkScreen; provider: PGtkStyleProvider); cdecl;
begin
  Gtk3.gtk_style_context_remove_provider_for_screen(screen, provider);
end;

procedure TGtkStyleContext.reset_widgets(screen: PGdkScreen); cdecl;
begin
  Gtk3.gtk_style_context_reset_widgets(screen);
end;

procedure TGtkStyleContext.add_class(class_name: Pgchar); cdecl;
begin
  Gtk3.gtk_style_context_add_class(@self, class_name);
end;

procedure TGtkStyleContext.add_provider(provider: PGtkStyleProvider; priority: guint); cdecl;
begin
  Gtk3.gtk_style_context_add_provider(@self, provider, priority);
end;

procedure TGtkStyleContext.add_region(region_name: Pgchar; flags: TGtkRegionFlags); cdecl;
begin
  Gtk3.gtk_style_context_add_region(@self, region_name, flags);
end;

procedure TGtkStyleContext.cancel_animations(region_id: gpointer); cdecl;
begin
  Gtk3.gtk_style_context_cancel_animations(@self, region_id);
end;

procedure TGtkStyleContext.get_background_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_style_context_get_background_color(@self, state, color);
end;

procedure TGtkStyleContext.get_border(state: TGtkStateFlags; border: PGtkBorder); cdecl;
begin
  Gtk3.gtk_style_context_get_border(@self, state, border);
end;

procedure TGtkStyleContext.get_border_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_style_context_get_border_color(@self, state, color);
end;

procedure TGtkStyleContext.get_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_style_context_get_color(@self, state, color);
end;

function TGtkStyleContext.get_direction: TGtkTextDirection; cdecl;
begin
  Result := Gtk3.gtk_style_context_get_direction(@self);
end;

function TGtkStyleContext.get_font(state: TGtkStateFlags): PPangoFontDescription; cdecl;
begin
  Result := Gtk3.gtk_style_context_get_font(@self, state);
end;


function TGtkStyleContext.get_junction_sides: TGtkJunctionSides; cdecl;
begin
  Result := Gtk3.gtk_style_context_get_junction_sides(@self);
end;

procedure TGtkStyleContext.get_margin(state: TGtkStateFlags; margin: PGtkBorder); cdecl;
begin
  Gtk3.gtk_style_context_get_margin(@self, state, margin);
end;

procedure TGtkStyleContext.get_padding(state: TGtkStateFlags; padding: PGtkBorder); cdecl;
begin
  Gtk3.gtk_style_context_get_padding(@self, state, padding);
end;

function TGtkStyleContext.get_path: PGtkWidgetPath; cdecl;
begin
  Result := Gtk3.gtk_style_context_get_path(@self);
end;

procedure TGtkStyleContext.get_property(property_: Pgchar; state: TGtkStateFlags; value: PGValue); cdecl;
begin
  Gtk3.gtk_style_context_get_property(@self, property_, state, value);
end;

function TGtkStyleContext.get_screen: PGdkScreen; cdecl;
begin
  Result := Gtk3.gtk_style_context_get_screen(@self);
end;

function TGtkStyleContext.get_state: TGtkStateFlags; cdecl;
begin
  Result := Gtk3.gtk_style_context_get_state(@self);
end;

procedure TGtkStyleContext.get_style_property(property_name: Pgchar; value: PGValue); cdecl;
begin
  Gtk3.gtk_style_context_get_style_property(@self, property_name, value);
end;

function TGtkStyleContext.has_class(class_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_style_context_has_class(@self, class_name);
end;

function TGtkStyleContext.has_region(region_name: Pgchar; flags_return: PGtkRegionFlags): gboolean; cdecl;
begin
  Result := Gtk3.gtk_style_context_has_region(@self, region_name, flags_return);
end;

procedure TGtkStyleContext.invalidate; cdecl;
begin
  Gtk3.gtk_style_context_invalidate(@self);
end;

function TGtkStyleContext.list_classes: PGList; cdecl;
begin
  Result := Gtk3.gtk_style_context_list_classes(@self);
end;

function TGtkStyleContext.list_regions: PGList; cdecl;
begin
  Result := Gtk3.gtk_style_context_list_regions(@self);
end;

function TGtkStyleContext.lookup_color(color_name: Pgchar; color: PGdkRGBA): gboolean; cdecl;
begin
  Result := Gtk3.gtk_style_context_lookup_color(@self, color_name, color);
end;

function TGtkStyleContext.lookup_icon_set(stock_id: Pgchar): PGtkIconSet; cdecl;
begin
  Result := Gtk3.gtk_style_context_lookup_icon_set(@self, stock_id);
end;

procedure TGtkStyleContext.notify_state_change(window: PGdkWindow; region_id: gpointer; state: TGtkStateType; state_value: gboolean); cdecl;
begin
  Gtk3.gtk_style_context_notify_state_change(@self, window, region_id, state, state_value);
end;

procedure TGtkStyleContext.pop_animatable_region; cdecl;
begin
  Gtk3.gtk_style_context_pop_animatable_region(@self);
end;

procedure TGtkStyleContext.push_animatable_region(region_id: gpointer); cdecl;
begin
  Gtk3.gtk_style_context_push_animatable_region(@self, region_id);
end;

procedure TGtkStyleContext.remove_class(class_name: Pgchar); cdecl;
begin
  Gtk3.gtk_style_context_remove_class(@self, class_name);
end;

procedure TGtkStyleContext.remove_provider(provider: PGtkStyleProvider); cdecl;
begin
  Gtk3.gtk_style_context_remove_provider(@self, provider);
end;

procedure TGtkStyleContext.remove_region(region_name: Pgchar); cdecl;
begin
  Gtk3.gtk_style_context_remove_region(@self, region_name);
end;

procedure TGtkStyleContext.restore; cdecl;
begin
  Gtk3.gtk_style_context_restore(@self);
end;

procedure TGtkStyleContext.save; cdecl;
begin
  Gtk3.gtk_style_context_save(@self);
end;

procedure TGtkStyleContext.scroll_animations(window: PGdkWindow; dx: gint; dy: gint); cdecl;
begin
  Gtk3.gtk_style_context_scroll_animations(@self, window, dx, dy);
end;

procedure TGtkStyleContext.set_background(window: PGdkWindow); cdecl;
begin
  Gtk3.gtk_style_context_set_background(@self, window);
end;

procedure TGtkStyleContext.set_direction(direction: TGtkTextDirection); cdecl;
begin
  Gtk3.gtk_style_context_set_direction(@self, direction);
end;

procedure TGtkStyleContext.set_junction_sides(sides: TGtkJunctionSides); cdecl;
begin
  Gtk3.gtk_style_context_set_junction_sides(@self, sides);
end;

procedure TGtkStyleContext.set_path(path: PGtkWidgetPath); cdecl;
begin
  Gtk3.gtk_style_context_set_path(@self, path);
end;

procedure TGtkStyleContext.set_screen(screen: PGdkScreen); cdecl;
begin
  Gtk3.gtk_style_context_set_screen(@self, screen);
end;

procedure TGtkStyleContext.set_state(flags: TGtkStateFlags); cdecl;
begin
  Gtk3.gtk_style_context_set_state(@self, flags);
end;

function TGtkStyleContext.state_is_running(state: TGtkStateType; progress: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk3.gtk_style_context_state_is_running(@self, state, progress);
end;

function TGtkIconSource.new: PGtkIconSource; cdecl;
begin
  Result := Gtk3.gtk_icon_source_new();
end;

function TGtkIconSource.copy: PGtkIconSource; cdecl;
begin
  Result := Gtk3.gtk_icon_source_copy(@self);
end;

procedure TGtkIconSource.free; cdecl;
begin
  Gtk3.gtk_icon_source_free(@self);
end;

function TGtkIconSource.get_direction: TGtkTextDirection; cdecl;
begin
  Result := Gtk3.gtk_icon_source_get_direction(@self);
end;

function TGtkIconSource.get_direction_wildcarded: gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_source_get_direction_wildcarded(@self);
end;

function TGtkIconSource.get_filename: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_icon_source_get_filename(@self);
end;

function TGtkIconSource.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_icon_source_get_icon_name(@self);
end;

function TGtkIconSource.get_pixbuf: PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_icon_source_get_pixbuf(@self);
end;

function TGtkIconSource.get_size: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_source_get_size(@self);
end;

function TGtkIconSource.get_size_wildcarded: gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_source_get_size_wildcarded(@self);
end;

function TGtkIconSource.get_state: TAtkStateType; cdecl;
begin
  Result := Gtk3.gtk_icon_source_get_state(@self);
end;

function TGtkIconSource.get_state_wildcarded: gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_source_get_state_wildcarded(@self);
end;

procedure TGtkIconSource.set_direction(direction: TGtkTextDirection); cdecl;
begin
  Gtk3.gtk_icon_source_set_direction(@self, direction);
end;

procedure TGtkIconSource.set_direction_wildcarded(setting: gboolean); cdecl;
begin
  Gtk3.gtk_icon_source_set_direction_wildcarded(@self, setting);
end;

procedure TGtkIconSource.set_filename(filename: Pgchar); cdecl;
begin
  Gtk3.gtk_icon_source_set_filename(@self, filename);
end;

procedure TGtkIconSource.set_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk3.gtk_icon_source_set_icon_name(@self, icon_name);
end;

procedure TGtkIconSource.set_pixbuf(pixbuf: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_icon_source_set_pixbuf(@self, pixbuf);
end;

procedure TGtkIconSource.set_size(size: gint); cdecl;
begin
  Gtk3.gtk_icon_source_set_size(@self, size);
end;

procedure TGtkIconSource.set_size_wildcarded(setting: gboolean); cdecl;
begin
  Gtk3.gtk_icon_source_set_size_wildcarded(@self, setting);
end;

procedure TGtkIconSource.set_state(state: TAtkStateType); cdecl;
begin
  Gtk3.gtk_icon_source_set_state(@self, state);
end;

procedure TGtkIconSource.set_state_wildcarded(setting: gboolean); cdecl;
begin
  Gtk3.gtk_icon_source_set_state_wildcarded(@self, setting);
end;

function TGtkScrollable.get_hadjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk3.gtk_scrollable_get_hadjustment(@self);
end;

function TGtkScrollable.get_hscroll_policy: TGtkScrollablePolicy; cdecl;
begin
  Result := Gtk3.gtk_scrollable_get_hscroll_policy(@self);
end;

function TGtkScrollable.get_vadjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk3.gtk_scrollable_get_vadjustment(@self);
end;

function TGtkScrollable.get_vscroll_policy: TGtkScrollablePolicy; cdecl;
begin
  Result := Gtk3.gtk_scrollable_get_vscroll_policy(@self);
end;

procedure TGtkScrollable.set_hadjustment(hadjustment: PGtkAdjustment); cdecl;
begin
  Gtk3.gtk_scrollable_set_hadjustment(@self, hadjustment);
end;

procedure TGtkScrollable.set_hscroll_policy(policy: TGtkScrollablePolicy); cdecl;
begin
  Gtk3.gtk_scrollable_set_hscroll_policy(@self, policy);
end;

procedure TGtkScrollable.set_vadjustment(vadjustment: PGtkAdjustment); cdecl;
begin
  Gtk3.gtk_scrollable_set_vadjustment(@self, vadjustment);
end;

procedure TGtkScrollable.set_vscroll_policy(policy: TGtkScrollablePolicy); cdecl;
begin
  Gtk3.gtk_scrollable_set_vscroll_policy(@self, policy);
end;

procedure TGtkTooltip.trigger_tooltip_query(display: PGdkDisplay); cdecl;
begin
  Gtk3.gtk_tooltip_trigger_tooltip_query(display);
end;

procedure TGtkTooltip.set_custom(custom_widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_tooltip_set_custom(@self, custom_widget);
end;

procedure TGtkTooltip.set_icon(pixbuf: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_tooltip_set_icon(@self, pixbuf);
end;

procedure TGtkTooltip.set_icon_from_gicon(gicon: PGIcon; size: gint); cdecl;
begin
  Gtk3.gtk_tooltip_set_icon_from_gicon(@self, gicon, size);
end;

procedure TGtkTooltip.set_icon_from_icon_name(icon_name: Pgchar; size: gint); cdecl;
begin
  Gtk3.gtk_tooltip_set_icon_from_icon_name(@self, icon_name, size);
end;

procedure TGtkTooltip.set_icon_from_stock(stock_id: Pgchar; size: gint); cdecl;
begin
  Gtk3.gtk_tooltip_set_icon_from_stock(@self, stock_id, size);
end;

procedure TGtkTooltip.set_markup(markup: Pgchar); cdecl;
begin
  Gtk3.gtk_tooltip_set_markup(@self, markup);
end;

procedure TGtkTooltip.set_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_tooltip_set_text(@self, text);
end;

procedure TGtkTooltip.set_tip_area(rect: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_tooltip_set_tip_area(@self, rect);
end;

function TGtkIconView.new: PGtkIconView; cdecl;
begin
  Result := Gtk3.gtk_icon_view_new();
end;

function TGtkIconView.new_with_area(area: PGtkCellArea): PGtkIconView; cdecl;
begin
  Result := Gtk3.gtk_icon_view_new_with_area(area);
end;

function TGtkIconView.new_with_model(model: PGtkTreeModel): PGtkIconView; cdecl;
begin
  Result := Gtk3.gtk_icon_view_new_with_model(model);
end;

procedure TGtkIconView.convert_widget_to_bin_window_coords(wx: gint; wy: gint; bx: Pgint; by: Pgint); cdecl;
begin
  Gtk3.gtk_icon_view_convert_widget_to_bin_window_coords(@self, wx, wy, bx, by);
end;

function TGtkIconView.create_drag_icon(path: PGtkTreePath): Pcairo_surface_t; cdecl;
begin
  Result := Gtk3.gtk_icon_view_create_drag_icon(@self, path);
end;

procedure TGtkIconView.enable_model_drag_dest(targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl;
begin
  Gtk3.gtk_icon_view_enable_model_drag_dest(@self, targets, n_targets, actions);
end;

procedure TGtkIconView.enable_model_drag_source(start_button_mask: TGdkModifierType; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl;
begin
  Gtk3.gtk_icon_view_enable_model_drag_source(@self, start_button_mask, targets, n_targets, actions);
end;

function TGtkIconView.get_column_spacing: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_column_spacing(@self);
end;

function TGtkIconView.get_columns: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_columns(@self);
end;

function TGtkIconView.get_cursor(path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_cursor(@self, path, cell);
end;

function TGtkIconView.get_dest_item_at_pos(drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkIconViewDropPosition): gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_dest_item_at_pos(@self, drag_x, drag_y, path, pos);
end;

procedure TGtkIconView.get_drag_dest_item(path: PPGtkTreePath; pos: PGtkIconViewDropPosition); cdecl;
begin
  Gtk3.gtk_icon_view_get_drag_dest_item(@self, path, pos);
end;

function TGtkIconView.get_item_at_pos(x: gint; y: gint; path: PPGtkTreePath; cell: PPGtkCellRenderer): gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_item_at_pos(@self, x, y, path, cell);
end;

function TGtkIconView.get_item_column(path: PGtkTreePath): gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_item_column(@self, path);
end;

function TGtkIconView.get_item_orientation: TGtkOrientation; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_item_orientation(@self);
end;

function TGtkIconView.get_item_padding: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_item_padding(@self);
end;

function TGtkIconView.get_item_row(path: PGtkTreePath): gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_item_row(@self, path);
end;

function TGtkIconView.get_item_width: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_item_width(@self);
end;

function TGtkIconView.get_margin: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_margin(@self);
end;

function TGtkIconView.get_markup_column: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_markup_column(@self);
end;

function TGtkIconView.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_model(@self);
end;

function TGtkIconView.get_path_at_pos(x: gint; y: gint): PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_path_at_pos(@self, x, y);
end;

function TGtkIconView.get_pixbuf_column: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_pixbuf_column(@self);
end;

function TGtkIconView.get_reorderable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_reorderable(@self);
end;

function TGtkIconView.get_row_spacing: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_row_spacing(@self);
end;

function TGtkIconView.get_selected_items: PGList; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_selected_items(@self);
end;

function TGtkIconView.get_selection_mode: TGtkSelectionMode; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_selection_mode(@self);
end;

function TGtkIconView.get_spacing: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_spacing(@self);
end;

function TGtkIconView.get_text_column: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_text_column(@self);
end;

function TGtkIconView.get_tooltip_column: gint; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_tooltip_column(@self);
end;

function TGtkIconView.get_tooltip_context(x: Pgint; y: Pgint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_tooltip_context(@self, x, y, keyboard_tip, model, path, iter);
end;

function TGtkIconView.get_visible_range(start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_view_get_visible_range(@self, start_path, end_path);
end;

procedure TGtkIconView.item_activated(path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_icon_view_item_activated(@self, path);
end;

function TGtkIconView.path_is_selected(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk3.gtk_icon_view_path_is_selected(@self, path);
end;

procedure TGtkIconView.scroll_to_path(path: PGtkTreePath; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl;
begin
  Gtk3.gtk_icon_view_scroll_to_path(@self, path, use_align, row_align, col_align);
end;

procedure TGtkIconView.select_all; cdecl;
begin
  Gtk3.gtk_icon_view_select_all(@self);
end;

procedure TGtkIconView.select_path(path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_icon_view_select_path(@self, path);
end;

procedure TGtkIconView.selected_foreach(func: TGtkIconViewForeachFunc; data: gpointer); cdecl;
begin
  Gtk3.gtk_icon_view_selected_foreach(@self, func, data);
end;

procedure TGtkIconView.set_column_spacing(column_spacing: gint); cdecl;
begin
  Gtk3.gtk_icon_view_set_column_spacing(@self, column_spacing);
end;

procedure TGtkIconView.set_columns(columns: gint); cdecl;
begin
  Gtk3.gtk_icon_view_set_columns(@self, columns);
end;

procedure TGtkIconView.set_cursor(path: PGtkTreePath; cell: PGtkCellRenderer; start_editing: gboolean); cdecl;
begin
  Gtk3.gtk_icon_view_set_cursor(@self, path, cell, start_editing);
end;

procedure TGtkIconView.set_drag_dest_item(path: PGtkTreePath; pos: TGtkIconViewDropPosition); cdecl;
begin
  Gtk3.gtk_icon_view_set_drag_dest_item(@self, path, pos);
end;

procedure TGtkIconView.set_item_orientation(orientation: TGtkOrientation); cdecl;
begin
  Gtk3.gtk_icon_view_set_item_orientation(@self, orientation);
end;

procedure TGtkIconView.set_item_padding(item_padding: gint); cdecl;
begin
  Gtk3.gtk_icon_view_set_item_padding(@self, item_padding);
end;

procedure TGtkIconView.set_item_width(item_width: gint); cdecl;
begin
  Gtk3.gtk_icon_view_set_item_width(@self, item_width);
end;

procedure TGtkIconView.set_margin(margin: gint); cdecl;
begin
  Gtk3.gtk_icon_view_set_margin(@self, margin);
end;

procedure TGtkIconView.set_markup_column(column: gint); cdecl;
begin
  Gtk3.gtk_icon_view_set_markup_column(@self, column);
end;

procedure TGtkIconView.set_model(model: PGtkTreeModel); cdecl;
begin
  Gtk3.gtk_icon_view_set_model(@self, model);
end;

procedure TGtkIconView.set_pixbuf_column(column: gint); cdecl;
begin
  Gtk3.gtk_icon_view_set_pixbuf_column(@self, column);
end;

procedure TGtkIconView.set_reorderable(reorderable: gboolean); cdecl;
begin
  Gtk3.gtk_icon_view_set_reorderable(@self, reorderable);
end;

procedure TGtkIconView.set_row_spacing(row_spacing: gint); cdecl;
begin
  Gtk3.gtk_icon_view_set_row_spacing(@self, row_spacing);
end;

procedure TGtkIconView.set_selection_mode(mode: TGtkSelectionMode); cdecl;
begin
  Gtk3.gtk_icon_view_set_selection_mode(@self, mode);
end;

procedure TGtkIconView.set_spacing(spacing: gint); cdecl;
begin
  Gtk3.gtk_icon_view_set_spacing(@self, spacing);
end;

procedure TGtkIconView.set_text_column(column: gint); cdecl;
begin
  Gtk3.gtk_icon_view_set_text_column(@self, column);
end;

procedure TGtkIconView.set_tooltip_cell(tooltip: PGtkTooltip; path: PGtkTreePath; cell: PGtkCellRenderer); cdecl;
begin
  Gtk3.gtk_icon_view_set_tooltip_cell(@self, tooltip, path, cell);
end;

procedure TGtkIconView.set_tooltip_column(column: gint); cdecl;
begin
  Gtk3.gtk_icon_view_set_tooltip_column(@self, column);
end;

procedure TGtkIconView.set_tooltip_item(tooltip: PGtkTooltip; path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_icon_view_set_tooltip_item(@self, tooltip, path);
end;

procedure TGtkIconView.unselect_all; cdecl;
begin
  Gtk3.gtk_icon_view_unselect_all(@self);
end;

procedure TGtkIconView.unselect_path(path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_icon_view_unselect_path(@self, path);
end;

procedure TGtkIconView.unset_model_drag_dest; cdecl;
begin
  Gtk3.gtk_icon_view_unset_model_drag_dest(@self);
end;

procedure TGtkIconView.unset_model_drag_source; cdecl;
begin
  Gtk3.gtk_icon_view_unset_model_drag_source(@self);
end;

function TGtkImage.new: PGtkImage; cdecl;
begin
  Result := Gtk3.gtk_image_new();
end;

function TGtkImage.new_from_animation(animation: PGdkPixbufAnimation): PGtkImage; cdecl;
begin
  Result := Gtk3.gtk_image_new_from_animation(animation);
end;

function TGtkImage.new_from_file(filename: Pgchar): PGtkImage; cdecl;
begin
  Result := Gtk3.gtk_image_new_from_file(filename);
end;

function TGtkImage.new_from_gicon(icon: PGIcon; size: gint): PGtkImage; cdecl;
begin
  Result := Gtk3.gtk_image_new_from_gicon(icon, size);
end;

function TGtkImage.new_from_icon_name(icon_name: Pgchar; size: gint): PGtkImage; cdecl;
begin
  Result := Gtk3.gtk_image_new_from_icon_name(icon_name, size);
end;

function TGtkImage.new_from_icon_set(icon_set: PGtkIconSet; size: gint): PGtkImage; cdecl;
begin
  Result := Gtk3.gtk_image_new_from_icon_set(icon_set, size);
end;

function TGtkImage.new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkImage; cdecl;
begin
  Result := Gtk3.gtk_image_new_from_pixbuf(pixbuf);
end;

function TGtkImage.new_from_stock(stock_id: Pgchar; size: gint): PGtkImage; cdecl;
begin
  Result := Gtk3.gtk_image_new_from_stock(stock_id, size);
end;

procedure TGtkImage.clear; cdecl;
begin
  Gtk3.gtk_image_clear(@self);
end;

function TGtkImage.get_animation: PGdkPixbufAnimation; cdecl;
begin
  Result := Gtk3.gtk_image_get_animation(@self);
end;

procedure TGtkImage.get_gicon(gicon: PPGIcon; size: Pgint); cdecl;
begin
  Gtk3.gtk_image_get_gicon(@self, gicon, size);
end;

procedure TGtkImage.get_icon_name(icon_name: PPgchar; size: Pgint); cdecl;
begin
  Gtk3.gtk_image_get_icon_name(@self, icon_name, size);
end;

procedure TGtkImage.get_icon_set(icon_set: PPGtkIconSet; size: Pgint); cdecl;
begin
  Gtk3.gtk_image_get_icon_set(@self, icon_set, size);
end;

function TGtkImage.get_pixbuf: PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_image_get_pixbuf(@self);
end;

function TGtkImage.get_pixel_size: gint; cdecl;
begin
  Result := Gtk3.gtk_image_get_pixel_size(@self);
end;

procedure TGtkImage.get_stock(stock_id: PPgchar; size: Pgint); cdecl;
begin
  Gtk3.gtk_image_get_stock(@self, stock_id, size);
end;

function TGtkImage.get_storage_type: TGtkImageType; cdecl;
begin
  Result := Gtk3.gtk_image_get_storage_type(@self);
end;

procedure TGtkImage.set_from_animation(animation: PGdkPixbufAnimation); cdecl;
begin
  Gtk3.gtk_image_set_from_animation(@self, animation);
end;

procedure TGtkImage.set_from_file(filename: Pgchar); cdecl;
begin
  Gtk3.gtk_image_set_from_file(@self, filename);
end;

procedure TGtkImage.set_from_gicon(icon: PGIcon; size: gint); cdecl;
begin
  Gtk3.gtk_image_set_from_gicon(@self, icon, size);
end;

procedure TGtkImage.set_from_icon_name(icon_name: Pgchar; size: gint); cdecl;
begin
  Gtk3.gtk_image_set_from_icon_name(@self, icon_name, size);
end;

procedure TGtkImage.set_from_icon_set(icon_set: PGtkIconSet; size: gint); cdecl;
begin
  Gtk3.gtk_image_set_from_icon_set(@self, icon_set, size);
end;

procedure TGtkImage.set_from_pixbuf(pixbuf: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_image_set_from_pixbuf(@self, pixbuf);
end;

procedure TGtkImage.set_from_stock(stock_id: Pgchar; size: gint); cdecl;
begin
  Gtk3.gtk_image_set_from_stock(@self, stock_id, size);
end;

procedure TGtkImage.set_pixel_size(pixel_size: gint); cdecl;
begin
  Gtk3.gtk_image_set_pixel_size(@self, pixel_size);
end;

function TGtkImageMenuItem.new: PGtkImageMenuItem; cdecl;
begin
  Result := Gtk3.gtk_image_menu_item_new();
end;

function TGtkImageMenuItem.new_from_stock(stock_id: Pgchar; accel_group: PGtkAccelGroup): PGtkImageMenuItem; cdecl;
begin
  Result := Gtk3.gtk_image_menu_item_new_from_stock(stock_id, accel_group);
end;

function TGtkImageMenuItem.new_with_label(label_: Pgchar): PGtkImageMenuItem; cdecl;
begin
  Result := Gtk3.gtk_image_menu_item_new_with_label(label_);
end;

function TGtkImageMenuItem.new_with_mnemonic(label_: Pgchar): PGtkImageMenuItem; cdecl;
begin
  Result := Gtk3.gtk_image_menu_item_new_with_mnemonic(label_);
end;

function TGtkImageMenuItem.get_always_show_image: gboolean; cdecl;
begin
  Result := Gtk3.gtk_image_menu_item_get_always_show_image(@self);
end;

function TGtkImageMenuItem.get_image: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_image_menu_item_get_image(@self);
end;

function TGtkImageMenuItem.get_use_stock: gboolean; cdecl;
begin
  Result := Gtk3.gtk_image_menu_item_get_use_stock(@self);
end;

procedure TGtkImageMenuItem.set_accel_group(accel_group: PGtkAccelGroup); cdecl;
begin
  Gtk3.gtk_image_menu_item_set_accel_group(@self, accel_group);
end;

procedure TGtkImageMenuItem.set_always_show_image(always_show: gboolean); cdecl;
begin
  Gtk3.gtk_image_menu_item_set_always_show_image(@self, always_show);
end;

procedure TGtkImageMenuItem.set_image(image: PGtkWidget); cdecl;
begin
  Gtk3.gtk_image_menu_item_set_image(@self, image);
end;

procedure TGtkImageMenuItem.set_use_stock(use_stock: gboolean); cdecl;
begin
  Gtk3.gtk_image_menu_item_set_use_stock(@self, use_stock);
end;

function TGtkInfoBar.new: PGtkInfoBar; cdecl;
begin
  Result := Gtk3.gtk_info_bar_new();
end;

procedure TGtkInfoBar.add_action_widget(child: PGtkWidget; response_id: gint); cdecl;
begin
  Gtk3.gtk_info_bar_add_action_widget(@self, child, response_id);
end;

function TGtkInfoBar.add_button(button_text: Pgchar; response_id: gint): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_info_bar_add_button(@self, button_text, response_id);
end;

function TGtkInfoBar.get_action_area: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_info_bar_get_action_area(@self);
end;

function TGtkInfoBar.get_content_area: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_info_bar_get_content_area(@self);
end;

function TGtkInfoBar.get_message_type: TGtkMessageType; cdecl;
begin
  Result := Gtk3.gtk_info_bar_get_message_type(@self);
end;

procedure TGtkInfoBar.response(response_id: gint); cdecl;
begin
  Gtk3.gtk_info_bar_response(@self, response_id);
end;

procedure TGtkInfoBar.set_default_response(response_id: gint); cdecl;
begin
  Gtk3.gtk_info_bar_set_default_response(@self, response_id);
end;

procedure TGtkInfoBar.set_message_type(message_type: TGtkMessageType); cdecl;
begin
  Gtk3.gtk_info_bar_set_message_type(@self, message_type);
end;

procedure TGtkInfoBar.set_response_sensitive(response_id: gint; setting: gboolean); cdecl;
begin
  Gtk3.gtk_info_bar_set_response_sensitive(@self, response_id, setting);
end;

function TGtkInvisible.new: PGtkInvisible; cdecl;
begin
  Result := Gtk3.gtk_invisible_new();
end;

function TGtkInvisible.new_for_screen(screen: PGdkScreen): PGtkInvisible; cdecl;
begin
  Result := Gtk3.gtk_invisible_new_for_screen(screen);
end;

function TGtkInvisible.get_screen: PGdkScreen; cdecl;
begin
  Result := Gtk3.gtk_invisible_get_screen(@self);
end;

procedure TGtkInvisible.set_screen(screen: PGdkScreen); cdecl;
begin
  Gtk3.gtk_invisible_set_screen(@self, screen);
end;

function TGtkLayout.new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkLayout; cdecl;
begin
  Result := Gtk3.gtk_layout_new(hadjustment, vadjustment);
end;

function TGtkLayout.get_bin_window: PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_layout_get_bin_window(@self);
end;

procedure TGtkLayout.get_size(width: Pguint; height: Pguint); cdecl;
begin
  Gtk3.gtk_layout_get_size(@self, width, height);
end;

procedure TGtkLayout.move(child_widget: PGtkWidget; x: gint; y: gint); cdecl;
begin
  Gtk3.gtk_layout_move(@self, child_widget, x, y);
end;

procedure TGtkLayout.put(child_widget: PGtkWidget; x: gint; y: gint); cdecl;
begin
  Gtk3.gtk_layout_put(@self, child_widget, x, y);
end;

procedure TGtkLayout.set_size(width: guint; height: guint); cdecl;
begin
  Gtk3.gtk_layout_set_size(@self, width, height);
end;

function TGtkLinkButton.new(uri: Pgchar): PGtkLinkButton; cdecl;
begin
  Result := Gtk3.gtk_link_button_new(uri);
end;

function TGtkLinkButton.new_with_label(uri: Pgchar; label_: Pgchar): PGtkLinkButton; cdecl;
begin
  Result := Gtk3.gtk_link_button_new_with_label(uri, label_);
end;

function TGtkLinkButton.get_uri: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_link_button_get_uri(@self);
end;

function TGtkLinkButton.get_visited: gboolean; cdecl;
begin
  Result := Gtk3.gtk_link_button_get_visited(@self);
end;

procedure TGtkLinkButton.set_uri(uri: Pgchar); cdecl;
begin
  Gtk3.gtk_link_button_set_uri(@self, uri);
end;

procedure TGtkLinkButton.set_visited(visited: gboolean); cdecl;
begin
  Gtk3.gtk_link_button_set_visited(@self, visited);
end;

function TGtkTreeDragDest.drag_data_received(dest: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_drag_dest_drag_data_received(@self, dest, selection_data);
end;

function TGtkTreeDragDest.row_drop_possible(dest_path: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_drag_dest_row_drop_possible(@self, dest_path, selection_data);
end;

function TGtkTreeDragSource.drag_data_delete(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_drag_source_drag_data_delete(@self, path);
end;

function TGtkTreeDragSource.drag_data_get(path: PGtkTreePath; selection_data: PGtkSelectionData): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_drag_source_drag_data_get(@self, path, selection_data);
end;

function TGtkTreeDragSource.row_draggable(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_drag_source_row_draggable(@self, path);
end;

function TGtkTreeSortable.get_sort_column_id(sort_column_id: Pgint; order: PGtkSortType): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_sortable_get_sort_column_id(@self, sort_column_id, order);
end;

function TGtkTreeSortable.has_default_sort_func: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_sortable_has_default_sort_func(@self);
end;

procedure TGtkTreeSortable.set_default_sort_func(sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_tree_sortable_set_default_sort_func(@self, sort_func, user_data, destroy_);
end;

procedure TGtkTreeSortable.set_sort_column_id(sort_column_id: gint; order: TGtkSortType); cdecl;
begin
  Gtk3.gtk_tree_sortable_set_sort_column_id(@self, sort_column_id, order);
end;

procedure TGtkTreeSortable.set_sort_func(sort_column_id: gint; sort_func: TGtkTreeIterCompareFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_tree_sortable_set_sort_func(@self, sort_column_id, sort_func, user_data, destroy_);
end;

procedure TGtkTreeSortable.sort_column_changed; cdecl;
begin
  Gtk3.gtk_tree_sortable_sort_column_changed(@self);
end;

function TGtkListStore.newv(n_columns: gint; types: PGType): PGtkListStore; cdecl;
begin
  Result := Gtk3.gtk_list_store_newv(n_columns, types);
end;

procedure TGtkListStore.append(iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_list_store_append(@self, iter);
end;

procedure TGtkListStore.clear; cdecl;
begin
  Gtk3.gtk_list_store_clear(@self);
end;

procedure TGtkListStore.insert(iter: PGtkTreeIter; position: gint); cdecl;
begin
  Gtk3.gtk_list_store_insert(@self, iter, position);
end;

procedure TGtkListStore.insert_after(iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_list_store_insert_after(@self, iter, sibling);
end;

procedure TGtkListStore.insert_before(iter: PGtkTreeIter; sibling: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_list_store_insert_before(@self, iter, sibling);
end;

procedure TGtkListStore.insert_with_valuesv(iter: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl;
begin
  Gtk3.gtk_list_store_insert_with_valuesv(@self, iter, position, columns, values, n_values);
end;

function TGtkListStore.iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_list_store_iter_is_valid(@self, iter);
end;

procedure TGtkListStore.move_after(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_list_store_move_after(@self, iter, position);
end;

procedure TGtkListStore.move_before(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_list_store_move_before(@self, iter, position);
end;

procedure TGtkListStore.prepend(iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_list_store_prepend(@self, iter);
end;

function TGtkListStore.remove(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_list_store_remove(@self, iter);
end;

procedure TGtkListStore.reorder(new_order: Pgint); cdecl;
begin
  Gtk3.gtk_list_store_reorder(@self, new_order);
end;

procedure TGtkListStore.set_column_types(n_columns: gint; types: PGType); cdecl;
begin
  Gtk3.gtk_list_store_set_column_types(@self, n_columns, types);
end;

procedure TGtkListStore.set_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl;
begin
  Gtk3.gtk_list_store_set_value(@self, iter, column, value);
end;

procedure TGtkListStore.set_valuesv(iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl;
begin
  Gtk3.gtk_list_store_set_valuesv(@self, iter, columns, values, n_values);
end;

procedure TGtkListStore.swap(a: PGtkTreeIter; b: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_list_store_swap(@self, a, b);
end;

function TGtkLockButton.new(permission: PGPermission): PGtkLockButton; cdecl;
begin
  Result := Gtk3.gtk_lock_button_new(permission);
end;

function TGtkLockButton.get_permission: PGPermission; cdecl;
begin
  Result := Gtk3.gtk_lock_button_get_permission(@self);
end;

procedure TGtkLockButton.set_permission(permission: PGPermission); cdecl;
begin
  Gtk3.gtk_lock_button_set_permission(@self, permission);
end;

function TGtkMenuBar.new: PGtkMenuBar; cdecl;
begin
  Result := Gtk3.gtk_menu_bar_new();
end;

function TGtkMenuBar.get_child_pack_direction: TGtkPackDirection; cdecl;
begin
  Result := Gtk3.gtk_menu_bar_get_child_pack_direction(@self);
end;

function TGtkMenuBar.get_pack_direction: TGtkPackDirection; cdecl;
begin
  Result := Gtk3.gtk_menu_bar_get_pack_direction(@self);
end;

procedure TGtkMenuBar.set_child_pack_direction(child_pack_dir: TGtkPackDirection); cdecl;
begin
  Gtk3.gtk_menu_bar_set_child_pack_direction(@self, child_pack_dir);
end;

procedure TGtkMenuBar.set_pack_direction(pack_dir: TGtkPackDirection); cdecl;
begin
  Gtk3.gtk_menu_bar_set_pack_direction(@self, pack_dir);
end;

function TGtkToolItem.new: PGtkToolItem; cdecl;
begin
  Result := Gtk3.gtk_tool_item_new();
end;

function TGtkToolItem.get_ellipsize_mode: TPangoEllipsizeMode; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_ellipsize_mode(@self);
end;

function TGtkToolItem.get_expand: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_expand(@self);
end;

function TGtkToolItem.get_homogeneous: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_homogeneous(@self);
end;

function TGtkToolItem.get_icon_size: gint; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_icon_size(@self);
end;

function TGtkToolItem.get_is_important: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_is_important(@self);
end;

function TGtkToolItem.get_orientation: TGtkOrientation; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_orientation(@self);
end;

function TGtkToolItem.get_proxy_menu_item(menu_item_id: Pgchar): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_proxy_menu_item(@self, menu_item_id);
end;

function TGtkToolItem.get_relief_style: TGtkReliefStyle; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_relief_style(@self);
end;

function TGtkToolItem.get_text_alignment: gfloat; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_text_alignment(@self);
end;

function TGtkToolItem.get_text_orientation: TGtkOrientation; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_text_orientation(@self);
end;

function TGtkToolItem.get_text_size_group: PGtkSizeGroup; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_text_size_group(@self);
end;

function TGtkToolItem.get_toolbar_style: TGtkToolbarStyle; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_toolbar_style(@self);
end;

function TGtkToolItem.get_use_drag_window: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_use_drag_window(@self);
end;

function TGtkToolItem.get_visible_horizontal: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_visible_horizontal(@self);
end;

function TGtkToolItem.get_visible_vertical: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tool_item_get_visible_vertical(@self);
end;

procedure TGtkToolItem.rebuild_menu; cdecl;
begin
  Gtk3.gtk_tool_item_rebuild_menu(@self);
end;

function TGtkToolItem.retrieve_proxy_menu_item: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_tool_item_retrieve_proxy_menu_item(@self);
end;

procedure TGtkToolItem.set_expand(expand: gboolean); cdecl;
begin
  Gtk3.gtk_tool_item_set_expand(@self, expand);
end;

procedure TGtkToolItem.set_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk3.gtk_tool_item_set_homogeneous(@self, homogeneous);
end;

procedure TGtkToolItem.set_is_important(is_important: gboolean); cdecl;
begin
  Gtk3.gtk_tool_item_set_is_important(@self, is_important);
end;

procedure TGtkToolItem.set_proxy_menu_item(menu_item_id: Pgchar; menu_item: PGtkWidget); cdecl;
begin
  Gtk3.gtk_tool_item_set_proxy_menu_item(@self, menu_item_id, menu_item);
end;

procedure TGtkToolItem.set_tooltip_markup(markup: Pgchar); cdecl;
begin
  Gtk3.gtk_tool_item_set_tooltip_markup(@self, markup);
end;

procedure TGtkToolItem.set_tooltip_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_tool_item_set_tooltip_text(@self, text);
end;

procedure TGtkToolItem.set_use_drag_window(use_drag_window: gboolean); cdecl;
begin
  Gtk3.gtk_tool_item_set_use_drag_window(@self, use_drag_window);
end;

procedure TGtkToolItem.set_visible_horizontal(visible_horizontal: gboolean); cdecl;
begin
  Gtk3.gtk_tool_item_set_visible_horizontal(@self, visible_horizontal);
end;

procedure TGtkToolItem.set_visible_vertical(visible_vertical: gboolean); cdecl;
begin
  Gtk3.gtk_tool_item_set_visible_vertical(@self, visible_vertical);
end;

procedure TGtkToolItem.toolbar_reconfigured; cdecl;
begin
  Gtk3.gtk_tool_item_toolbar_reconfigured(@self);
end;

function TGtkToolButton.new(icon_widget: PGtkWidget; label_: Pgchar): PGtkToolButton; cdecl;
begin
  Result := Gtk3.gtk_tool_button_new(icon_widget, label_);
end;

function TGtkToolButton.new_from_stock(stock_id: Pgchar): PGtkToolButton; cdecl;
begin
  Result := Gtk3.gtk_tool_button_new_from_stock(stock_id);
end;

function TGtkToolButton.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_tool_button_get_icon_name(@self);
end;

function TGtkToolButton.get_icon_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_tool_button_get_icon_widget(@self);
end;

function TGtkToolButton.get_label: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_tool_button_get_label(@self);
end;

function TGtkToolButton.get_label_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_tool_button_get_label_widget(@self);
end;

function TGtkToolButton.get_stock_id: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_tool_button_get_stock_id(@self);
end;

function TGtkToolButton.get_use_underline: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tool_button_get_use_underline(@self);
end;

procedure TGtkToolButton.set_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk3.gtk_tool_button_set_icon_name(@self, icon_name);
end;

procedure TGtkToolButton.set_icon_widget(icon_widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_tool_button_set_icon_widget(@self, icon_widget);
end;

procedure TGtkToolButton.set_label(label_: Pgchar); cdecl;
begin
  Gtk3.gtk_tool_button_set_label(@self, label_);
end;

procedure TGtkToolButton.set_label_widget(label_widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_tool_button_set_label_widget(@self, label_widget);
end;

procedure TGtkToolButton.set_stock_id(stock_id: Pgchar); cdecl;
begin
  Gtk3.gtk_tool_button_set_stock_id(@self, stock_id);
end;

procedure TGtkToolButton.set_use_underline(use_underline: gboolean); cdecl;
begin
  Gtk3.gtk_tool_button_set_use_underline(@self, use_underline);
end;

function TGtkMenuToolButton.new(icon_widget: PGtkWidget; label_: Pgchar): PGtkMenuToolButton; cdecl;
begin
  Result := Gtk3.gtk_menu_tool_button_new(icon_widget, label_);
end;

function TGtkMenuToolButton.new_from_stock(stock_id: Pgchar): PGtkMenuToolButton; cdecl;
begin
  Result := Gtk3.gtk_menu_tool_button_new_from_stock(stock_id);
end;

function TGtkMenuToolButton.get_menu: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_menu_tool_button_get_menu(@self);
end;

procedure TGtkMenuToolButton.set_arrow_tooltip_markup(markup: Pgchar); cdecl;
begin
  Gtk3.gtk_menu_tool_button_set_arrow_tooltip_markup(@self, markup);
end;

procedure TGtkMenuToolButton.set_arrow_tooltip_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_menu_tool_button_set_arrow_tooltip_text(@self, text);
end;

procedure TGtkMenuToolButton.set_menu(menu: PGtkWidget); cdecl;
begin
  Gtk3.gtk_menu_tool_button_set_menu(@self, menu);
end;

function TGtkMessageDialog.get_image: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_message_dialog_get_image(@self);
end;

function TGtkMessageDialog.get_message_area: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_message_dialog_get_message_area(@self);
end;

procedure TGtkMessageDialog.set_image(image: PGtkWidget); cdecl;
begin
  Gtk3.gtk_message_dialog_set_image(@self, image);
end;

procedure TGtkMessageDialog.set_markup(str: Pgchar); cdecl;
begin
  Gtk3.gtk_message_dialog_set_markup(@self, str);
end;

procedure TGtkMisc.get_alignment(xalign: Pgfloat; yalign: Pgfloat); cdecl;
begin
  Gtk3.gtk_misc_get_alignment(@self, xalign, yalign);
end;

procedure TGtkMisc.get_padding(xpad: Pgint; ypad: Pgint); cdecl;
begin
  Gtk3.gtk_misc_get_padding(@self, xpad, ypad);
end;

procedure TGtkMisc.set_alignment(xalign: gfloat; yalign: gfloat); cdecl;
begin
  Gtk3.gtk_misc_set_alignment(@self, xalign, yalign);
end;

procedure TGtkMisc.set_padding(xpad: gint; ypad: gint); cdecl;
begin
  Gtk3.gtk_misc_set_padding(@self, xpad, ypad);
end;

function TGtkMountOperation.new(parent: PAtkWindow): PGtkMountOperation; cdecl;
begin
  Result := Gtk3.gtk_mount_operation_new(parent);
end;

function TGtkMountOperation.get_parent: PAtkWindow; cdecl;
begin
  Result := Gtk3.gtk_mount_operation_get_parent(@self);
end;

function TGtkMountOperation.get_screen: PGdkScreen; cdecl;
begin
  Result := Gtk3.gtk_mount_operation_get_screen(@self);
end;

function TGtkMountOperation.is_showing: gboolean; cdecl;
begin
  Result := Gtk3.gtk_mount_operation_is_showing(@self);
end;

procedure TGtkMountOperation.set_parent(parent: PAtkWindow); cdecl;
begin
  Gtk3.gtk_mount_operation_set_parent(@self, parent);
end;

procedure TGtkMountOperation.set_screen(screen: PGdkScreen); cdecl;
begin
  Gtk3.gtk_mount_operation_set_screen(@self, screen);
end;

function TGtkNotebook.new: PGtkNotebook; cdecl;
begin
  Result := Gtk3.gtk_notebook_new();
end;

function TGtkNotebook.append_page(child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl;
begin
  Result := Gtk3.gtk_notebook_append_page(@self, child, tab_label);
end;

function TGtkNotebook.append_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl;
begin
  Result := Gtk3.gtk_notebook_append_page_menu(@self, child, tab_label, menu_label);
end;

function TGtkNotebook.get_action_widget(pack_type: TGtkPackType): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_action_widget(@self, pack_type);
end;

function TGtkNotebook.get_current_page: gint; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_current_page(@self);
end;

function TGtkNotebook.get_group_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_group_name(@self);
end;

function TGtkNotebook.get_menu_label(child: PGtkWidget): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_menu_label(@self, child);
end;

function TGtkNotebook.get_menu_label_text(child: PGtkWidget): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_menu_label_text(@self, child);
end;

function TGtkNotebook.get_n_pages: gint; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_n_pages(@self);
end;

function TGtkNotebook.get_nth_page(page_num: gint): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_nth_page(@self, page_num);
end;

function TGtkNotebook.get_scrollable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_scrollable(@self);
end;

function TGtkNotebook.get_show_border: gboolean; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_show_border(@self);
end;

function TGtkNotebook.get_show_tabs: gboolean; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_show_tabs(@self);
end;

function TGtkNotebook.get_tab_detachable(child: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_tab_detachable(@self, child);
end;

function TGtkNotebook.get_tab_hborder: guint16; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_tab_hborder(@self);
end;

function TGtkNotebook.get_tab_label(child: PGtkWidget): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_tab_label(@self, child);
end;

function TGtkNotebook.get_tab_label_text(child: PGtkWidget): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_tab_label_text(@self, child);
end;

function TGtkNotebook.get_tab_pos: TGtkPositionType; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_tab_pos(@self);
end;

function TGtkNotebook.get_tab_reorderable(child: PGtkWidget): gboolean; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_tab_reorderable(@self, child);
end;

function TGtkNotebook.get_tab_vborder: guint16; cdecl;
begin
  Result := Gtk3.gtk_notebook_get_tab_vborder(@self);
end;

function TGtkNotebook.insert_page(child: PGtkWidget; tab_label: PGtkWidget; position: gint): gint; cdecl;
begin
  Result := Gtk3.gtk_notebook_insert_page(@self, child, tab_label, position);
end;

function TGtkNotebook.insert_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget; position: gint): gint; cdecl;
begin
  Result := Gtk3.gtk_notebook_insert_page_menu(@self, child, tab_label, menu_label, position);
end;

procedure TGtkNotebook.next_page; cdecl;
begin
  Gtk3.gtk_notebook_next_page(@self);
end;

function TGtkNotebook.page_num(child: PGtkWidget): gint; cdecl;
begin
  Result := Gtk3.gtk_notebook_page_num(@self, child);
end;

procedure TGtkNotebook.popup_disable; cdecl;
begin
  Gtk3.gtk_notebook_popup_disable(@self);
end;

procedure TGtkNotebook.popup_enable; cdecl;
begin
  Gtk3.gtk_notebook_popup_enable(@self);
end;

function TGtkNotebook.prepend_page(child: PGtkWidget; tab_label: PGtkWidget): gint; cdecl;
begin
  Result := Gtk3.gtk_notebook_prepend_page(@self, child, tab_label);
end;

function TGtkNotebook.prepend_page_menu(child: PGtkWidget; tab_label: PGtkWidget; menu_label: PGtkWidget): gint; cdecl;
begin
  Result := Gtk3.gtk_notebook_prepend_page_menu(@self, child, tab_label, menu_label);
end;

procedure TGtkNotebook.prev_page; cdecl;
begin
  Gtk3.gtk_notebook_prev_page(@self);
end;

procedure TGtkNotebook.remove_page(page_num: gint); cdecl;
begin
  Gtk3.gtk_notebook_remove_page(@self, page_num);
end;

procedure TGtkNotebook.reorder_child(child: PGtkWidget; position: gint); cdecl;
begin
  Gtk3.gtk_notebook_reorder_child(@self, child, position);
end;

procedure TGtkNotebook.set_action_widget(widget: PGtkWidget; pack_type: TGtkPackType); cdecl;
begin
  Gtk3.gtk_notebook_set_action_widget(@self, widget, pack_type);
end;

procedure TGtkNotebook.set_current_page(page_num: gint); cdecl;
begin
  Gtk3.gtk_notebook_set_current_page(@self, page_num);
end;

procedure TGtkNotebook.set_group_name(group_name: Pgchar); cdecl;
begin
  Gtk3.gtk_notebook_set_group_name(@self, group_name);
end;

procedure TGtkNotebook.set_menu_label(child: PGtkWidget; menu_label: PGtkWidget); cdecl;
begin
  Gtk3.gtk_notebook_set_menu_label(@self, child, menu_label);
end;

procedure TGtkNotebook.set_menu_label_text(child: PGtkWidget; menu_text: Pgchar); cdecl;
begin
  Gtk3.gtk_notebook_set_menu_label_text(@self, child, menu_text);
end;

procedure TGtkNotebook.set_scrollable(scrollable: gboolean); cdecl;
begin
  Gtk3.gtk_notebook_set_scrollable(@self, scrollable);
end;

procedure TGtkNotebook.set_show_border(show_border: gboolean); cdecl;
begin
  Gtk3.gtk_notebook_set_show_border(@self, show_border);
end;

procedure TGtkNotebook.set_show_tabs(show_tabs: gboolean); cdecl;
begin
  Gtk3.gtk_notebook_set_show_tabs(@self, show_tabs);
end;

procedure TGtkNotebook.set_tab_detachable(child: PGtkWidget; detachable: gboolean); cdecl;
begin
  Gtk3.gtk_notebook_set_tab_detachable(@self, child, detachable);
end;

procedure TGtkNotebook.set_tab_label(child: PGtkWidget; tab_label: PGtkWidget); cdecl;
begin
  Gtk3.gtk_notebook_set_tab_label(@self, child, tab_label);
end;

procedure TGtkNotebook.set_tab_label_text(child: PGtkWidget; tab_text: Pgchar); cdecl;
begin
  Gtk3.gtk_notebook_set_tab_label_text(@self, child, tab_text);
end;

procedure TGtkNotebook.set_tab_pos(pos: TGtkPositionType); cdecl;
begin
  Gtk3.gtk_notebook_set_tab_pos(@self, pos);
end;

procedure TGtkNotebook.set_tab_reorderable(child: PGtkWidget; reorderable: gboolean); cdecl;
begin
  Gtk3.gtk_notebook_set_tab_reorderable(@self, child, reorderable);
end;

function TGtkNumerableIcon.new(base_icon: PGIcon): PGIcon; cdecl;
begin
  Result := Gtk3.gtk_numerable_icon_new(base_icon);
end;

function TGtkNumerableIcon.new_with_style_context(base_icon: PGIcon; context: PGtkStyleContext): PGIcon; cdecl;
begin
  Result := Gtk3.gtk_numerable_icon_new_with_style_context(base_icon, context);
end;

function TGtkNumerableIcon.get_background_gicon: PGIcon; cdecl;
begin
  Result := Gtk3.gtk_numerable_icon_get_background_gicon(@self);
end;

function TGtkNumerableIcon.get_background_icon_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_numerable_icon_get_background_icon_name(@self);
end;

function TGtkNumerableIcon.get_count: gint; cdecl;
begin
  Result := Gtk3.gtk_numerable_icon_get_count(@self);
end;

function TGtkNumerableIcon.get_label: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_numerable_icon_get_label(@self);
end;

function TGtkNumerableIcon.get_style_context: PGtkStyleContext; cdecl;
begin
  Result := Gtk3.gtk_numerable_icon_get_style_context(@self);
end;

procedure TGtkNumerableIcon.set_background_gicon(icon: PGIcon); cdecl;
begin
  Gtk3.gtk_numerable_icon_set_background_gicon(@self, icon);
end;

procedure TGtkNumerableIcon.set_background_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk3.gtk_numerable_icon_set_background_icon_name(@self, icon_name);
end;

procedure TGtkNumerableIcon.set_count(count: gint); cdecl;
begin
  Gtk3.gtk_numerable_icon_set_count(@self, count);
end;

procedure TGtkNumerableIcon.set_label(label_: Pgchar); cdecl;
begin
  Gtk3.gtk_numerable_icon_set_label(@self, label_);
end;

procedure TGtkNumerableIcon.set_style_context(style: PGtkStyleContext); cdecl;
begin
  Gtk3.gtk_numerable_icon_set_style_context(@self, style);
end;

function TGtkOffscreenWindow.new: PGtkOffscreenWindow; cdecl;
begin
  Result := Gtk3.gtk_offscreen_window_new();
end;

function TGtkOffscreenWindow.get_pixbuf: PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_offscreen_window_get_pixbuf(@self);
end;

function TGtkOffscreenWindow.get_surface: Pcairo_surface_t; cdecl;
begin
  Result := Gtk3.gtk_offscreen_window_get_surface(@self);
end;

function TGtkOverlay.new: PGtkOverlay; cdecl;
begin
  Result := Gtk3.gtk_overlay_new();
end;

procedure TGtkOverlay.add_overlay(widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_overlay_add_overlay(@self, widget);
end;

function TGtkPageSetup.new: PGtkPageSetup; cdecl;
begin
  Result := Gtk3.gtk_page_setup_new();
end;

function TGtkPageSetup.new_from_file(file_name: Pgchar): PGtkPageSetup; cdecl;
begin
  Result := Gtk3.gtk_page_setup_new_from_file(file_name);
end;

function TGtkPageSetup.new_from_key_file(key_file: PGKeyFile; group_name: Pgchar): PGtkPageSetup; cdecl;
begin
  Result := Gtk3.gtk_page_setup_new_from_key_file(key_file, group_name);
end;

function TGtkPageSetup.copy: PGtkPageSetup; cdecl;
begin
  Result := Gtk3.gtk_page_setup_copy(@self);
end;

function TGtkPageSetup.get_bottom_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_page_setup_get_bottom_margin(@self, unit_);
end;

function TGtkPageSetup.get_left_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_page_setup_get_left_margin(@self, unit_);
end;

function TGtkPageSetup.get_orientation: TGtkPageOrientation; cdecl;
begin
  Result := Gtk3.gtk_page_setup_get_orientation(@self);
end;

function TGtkPageSetup.get_page_height(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_page_setup_get_page_height(@self, unit_);
end;

function TGtkPageSetup.get_page_width(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_page_setup_get_page_width(@self, unit_);
end;

function TGtkPageSetup.get_paper_height(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_page_setup_get_paper_height(@self, unit_);
end;

function TGtkPageSetup.get_paper_size: PGtkPaperSize; cdecl;
begin
  Result := Gtk3.gtk_page_setup_get_paper_size(@self);
end;

function TGtkPageSetup.get_paper_width(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_page_setup_get_paper_width(@self, unit_);
end;

function TGtkPageSetup.get_right_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_page_setup_get_right_margin(@self, unit_);
end;

function TGtkPageSetup.get_top_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_page_setup_get_top_margin(@self, unit_);
end;

function TGtkPageSetup.load_file(file_name: Pchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_page_setup_load_file(@self, file_name);
end;

function TGtkPageSetup.load_key_file(key_file: PGKeyFile; group_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_page_setup_load_key_file(@self, key_file, group_name);
end;

procedure TGtkPageSetup.set_bottom_margin(margin: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk3.gtk_page_setup_set_bottom_margin(@self, margin, unit_);
end;

procedure TGtkPageSetup.set_left_margin(margin: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk3.gtk_page_setup_set_left_margin(@self, margin, unit_);
end;

procedure TGtkPageSetup.set_orientation(orientation: TGtkPageOrientation); cdecl;
begin
  Gtk3.gtk_page_setup_set_orientation(@self, orientation);
end;

procedure TGtkPageSetup.set_paper_size(size: PGtkPaperSize); cdecl;
begin
  Gtk3.gtk_page_setup_set_paper_size(@self, size);
end;

procedure TGtkPageSetup.set_paper_size_and_default_margins(size: PGtkPaperSize); cdecl;
begin
  Gtk3.gtk_page_setup_set_paper_size_and_default_margins(@self, size);
end;

procedure TGtkPageSetup.set_right_margin(margin: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk3.gtk_page_setup_set_right_margin(@self, margin, unit_);
end;

procedure TGtkPageSetup.set_top_margin(margin: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk3.gtk_page_setup_set_top_margin(@self, margin, unit_);
end;

function TGtkPageSetup.to_file(file_name: Pchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_page_setup_to_file(@self, file_name);
end;

procedure TGtkPageSetup.to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl;
begin
  Gtk3.gtk_page_setup_to_key_file(@self, key_file, group_name);
end;

function TGtkPaperSize.new(name: Pgchar): PGtkPaperSize; cdecl;
begin
  Result := Gtk3.gtk_paper_size_new(name);
end;

function TGtkPaperSize.new_custom(name: Pgchar; display_name: Pgchar; width: gdouble; height: gdouble; unit_: TGtkUnit): PGtkPaperSize; cdecl;
begin
  Result := Gtk3.gtk_paper_size_new_custom(name, display_name, width, height, unit_);
end;

function TGtkPaperSize.new_from_key_file(key_file: PGKeyFile; group_name: Pgchar): PGtkPaperSize; cdecl;
begin
  Result := Gtk3.gtk_paper_size_new_from_key_file(key_file, group_name);
end;

function TGtkPaperSize.new_from_ppd(ppd_name: Pgchar; ppd_display_name: Pgchar; width: gdouble; height: gdouble): PGtkPaperSize; cdecl;
begin
  Result := Gtk3.gtk_paper_size_new_from_ppd(ppd_name, ppd_display_name, width, height);
end;

function TGtkPaperSize.copy: PGtkPaperSize; cdecl;
begin
  Result := Gtk3.gtk_paper_size_copy(@self);
end;

procedure TGtkPaperSize.free; cdecl;
begin
  Gtk3.gtk_paper_size_free(@self);
end;

function TGtkPaperSize.get_default_bottom_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_paper_size_get_default_bottom_margin(@self, unit_);
end;

function TGtkPaperSize.get_default_left_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_paper_size_get_default_left_margin(@self, unit_);
end;

function TGtkPaperSize.get_default_right_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_paper_size_get_default_right_margin(@self, unit_);
end;

function TGtkPaperSize.get_default_top_margin(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_paper_size_get_default_top_margin(@self, unit_);
end;

function TGtkPaperSize.get_display_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_paper_size_get_display_name(@self);
end;

function TGtkPaperSize.get_height(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_paper_size_get_height(@self, unit_);
end;

function TGtkPaperSize.get_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_paper_size_get_name(@self);
end;

function TGtkPaperSize.get_ppd_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_paper_size_get_ppd_name(@self);
end;

function TGtkPaperSize.get_width(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_paper_size_get_width(@self, unit_);
end;

function TGtkPaperSize.is_custom: gboolean; cdecl;
begin
  Result := Gtk3.gtk_paper_size_is_custom(@self);
end;

function TGtkPaperSize.is_equal(size2: PGtkPaperSize): gboolean; cdecl;
begin
  Result := Gtk3.gtk_paper_size_is_equal(@self, size2);
end;

procedure TGtkPaperSize.set_size(width: gdouble; height: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk3.gtk_paper_size_set_size(@self, width, height, unit_);
end;

procedure TGtkPaperSize.to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl;
begin
  Gtk3.gtk_paper_size_to_key_file(@self, key_file, group_name);
end;

function TGtkPaperSize.get_default: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_paper_size_get_default();
end;

function TGtkPaperSize.get_paper_sizes(include_custom: gboolean): PGList; cdecl;
begin
  Result := Gtk3.gtk_paper_size_get_paper_sizes(include_custom);
end;

function TGtkPlug.new(socket_id: TWindow): PGtkPlug; cdecl;
begin
  Result := Gtk3.gtk_plug_new(socket_id);
end;

function TGtkPlug.new_for_display(display: PGdkDisplay; socket_id: TWindow): PGtkPlug; cdecl;
begin
  Result := Gtk3.gtk_plug_new_for_display(display, socket_id);
end;

procedure TGtkPlug.construct(socket_id: TWindow); cdecl;
begin
  Gtk3.gtk_plug_construct(@self, socket_id);
end;

procedure TGtkPlug.construct_for_display(display: PGdkDisplay; socket_id: TWindow); cdecl;
begin
  Gtk3.gtk_plug_construct_for_display(@self, display, socket_id);
end;

function TGtkPlug.get_embedded: gboolean; cdecl;
begin
  Result := Gtk3.gtk_plug_get_embedded(@self);
end;

function TGtkPlug.get_id: TWindow; cdecl;
begin
  Result := Gtk3.gtk_plug_get_id(@self);
end;

function TGtkPlug.get_socket_window: PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_plug_get_socket_window(@self);
end;

function TGtkPrintContext.create_pango_context: PPangoContext; cdecl;
begin
  Result := Gtk3.gtk_print_context_create_pango_context(@self);
end;

function TGtkPrintContext.create_pango_layout: PPangoLayout; cdecl;
begin
  Result := Gtk3.gtk_print_context_create_pango_layout(@self);
end;

function TGtkPrintContext.get_cairo_context: Pcairo_t; cdecl;
begin
  Result := Gtk3.gtk_print_context_get_cairo_context(@self);
end;

function TGtkPrintContext.get_dpi_x: gdouble; cdecl;
begin
  Result := Gtk3.gtk_print_context_get_dpi_x(@self);
end;

function TGtkPrintContext.get_dpi_y: gdouble; cdecl;
begin
  Result := Gtk3.gtk_print_context_get_dpi_y(@self);
end;

function TGtkPrintContext.get_hard_margins(top: Pgdouble; bottom: Pgdouble; left: Pgdouble; right: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_context_get_hard_margins(@self, top, bottom, left, right);
end;

function TGtkPrintContext.get_height: gdouble; cdecl;
begin
  Result := Gtk3.gtk_print_context_get_height(@self);
end;

function TGtkPrintContext.get_page_setup: PGtkPageSetup; cdecl;
begin
  Result := Gtk3.gtk_print_context_get_page_setup(@self);
end;

function TGtkPrintContext.get_pango_fontmap: PPangoFontMap; cdecl;
begin
  Result := Gtk3.gtk_print_context_get_pango_fontmap(@self);
end;

function TGtkPrintContext.get_width: gdouble; cdecl;
begin
  Result := Gtk3.gtk_print_context_get_width(@self);
end;

procedure TGtkPrintContext.set_cairo_context(cr: Pcairo_t; dpi_x: gdouble; dpi_y: gdouble); cdecl;
begin
  Gtk3.gtk_print_context_set_cairo_context(@self, cr, dpi_x, dpi_y);
end;

procedure TGtkPrintOperationPreview.end_preview; cdecl;
begin
  Gtk3.gtk_print_operation_preview_end_preview(@self);
end;

function TGtkPrintOperationPreview.is_selected(page_nr: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_operation_preview_is_selected(@self, page_nr);
end;

procedure TGtkPrintOperationPreview.render_page(page_nr: gint); cdecl;
begin
  Gtk3.gtk_print_operation_preview_render_page(@self, page_nr);
end;

function TGtkPrintOperation.new: PGtkPrintOperation; cdecl;
begin
  Result := Gtk3.gtk_print_operation_new();
end;

procedure TGtkPrintOperation.cancel; cdecl;
begin
  Gtk3.gtk_print_operation_cancel(@self);
end;

procedure TGtkPrintOperation.draw_page_finish; cdecl;
begin
  Gtk3.gtk_print_operation_draw_page_finish(@self);
end;

function TGtkPrintOperation.get_default_page_setup: PGtkPageSetup; cdecl;
begin
  Result := Gtk3.gtk_print_operation_get_default_page_setup(@self);
end;

function TGtkPrintOperation.get_embed_page_setup: gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_operation_get_embed_page_setup(@self);
end;

procedure TGtkPrintOperation.get_error; cdecl;
begin
  Gtk3.gtk_print_operation_get_error(@self);
end;

function TGtkPrintOperation.get_has_selection: gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_operation_get_has_selection(@self);
end;

function TGtkPrintOperation.get_n_pages_to_print: gint; cdecl;
begin
  Result := Gtk3.gtk_print_operation_get_n_pages_to_print(@self);
end;

function TGtkPrintOperation.get_print_settings: PGtkPrintSettings; cdecl;
begin
  Result := Gtk3.gtk_print_operation_get_print_settings(@self);
end;

function TGtkPrintOperation.get_status: TGtkPrintStatus; cdecl;
begin
  Result := Gtk3.gtk_print_operation_get_status(@self);
end;

function TGtkPrintOperation.get_status_string: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_print_operation_get_status_string(@self);
end;

function TGtkPrintOperation.get_support_selection: gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_operation_get_support_selection(@self);
end;

function TGtkPrintOperation.is_finished: gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_operation_is_finished(@self);
end;

function TGtkPrintOperation.run(action: TGtkPrintOperationAction; parent: PAtkWindow): TGtkPrintOperationResult; cdecl;
begin
  Result := Gtk3.gtk_print_operation_run(@self, action, parent);
end;

procedure TGtkPrintOperation.set_allow_async(allow_async: gboolean); cdecl;
begin
  Gtk3.gtk_print_operation_set_allow_async(@self, allow_async);
end;

procedure TGtkPrintOperation.set_current_page(current_page: gint); cdecl;
begin
  Gtk3.gtk_print_operation_set_current_page(@self, current_page);
end;

procedure TGtkPrintOperation.set_custom_tab_label(label_: Pgchar); cdecl;
begin
  Gtk3.gtk_print_operation_set_custom_tab_label(@self, label_);
end;

procedure TGtkPrintOperation.set_default_page_setup(default_page_setup: PGtkPageSetup); cdecl;
begin
  Gtk3.gtk_print_operation_set_default_page_setup(@self, default_page_setup);
end;

procedure TGtkPrintOperation.set_defer_drawing; cdecl;
begin
  Gtk3.gtk_print_operation_set_defer_drawing(@self);
end;

procedure TGtkPrintOperation.set_embed_page_setup(embed: gboolean); cdecl;
begin
  Gtk3.gtk_print_operation_set_embed_page_setup(@self, embed);
end;

procedure TGtkPrintOperation.set_export_filename(filename: Pgchar); cdecl;
begin
  Gtk3.gtk_print_operation_set_export_filename(@self, filename);
end;

procedure TGtkPrintOperation.set_has_selection(has_selection: gboolean); cdecl;
begin
  Gtk3.gtk_print_operation_set_has_selection(@self, has_selection);
end;

procedure TGtkPrintOperation.set_job_name(job_name: Pgchar); cdecl;
begin
  Gtk3.gtk_print_operation_set_job_name(@self, job_name);
end;

procedure TGtkPrintOperation.set_n_pages(n_pages: gint); cdecl;
begin
  Gtk3.gtk_print_operation_set_n_pages(@self, n_pages);
end;

procedure TGtkPrintOperation.set_print_settings(print_settings: PGtkPrintSettings); cdecl;
begin
  Gtk3.gtk_print_operation_set_print_settings(@self, print_settings);
end;

procedure TGtkPrintOperation.set_show_progress(show_progress: gboolean); cdecl;
begin
  Gtk3.gtk_print_operation_set_show_progress(@self, show_progress);
end;

procedure TGtkPrintOperation.set_support_selection(support_selection: gboolean); cdecl;
begin
  Gtk3.gtk_print_operation_set_support_selection(@self, support_selection);
end;

procedure TGtkPrintOperation.set_track_print_status(track_status: gboolean); cdecl;
begin
  Gtk3.gtk_print_operation_set_track_print_status(@self, track_status);
end;

procedure TGtkPrintOperation.set_unit(unit_: TGtkUnit); cdecl;
begin
  Gtk3.gtk_print_operation_set_unit(@self, unit_);
end;

procedure TGtkPrintOperation.set_use_full_page(full_page: gboolean); cdecl;
begin
  Gtk3.gtk_print_operation_set_use_full_page(@self, full_page);
end;

function TGtkPrintSettings.new: PGtkPrintSettings; cdecl;
begin
  Result := Gtk3.gtk_print_settings_new();
end;

function TGtkPrintSettings.new_from_file(file_name: Pgchar): PGtkPrintSettings; cdecl;
begin
  Result := Gtk3.gtk_print_settings_new_from_file(file_name);
end;

function TGtkPrintSettings.new_from_key_file(key_file: PGKeyFile; group_name: Pgchar): PGtkPrintSettings; cdecl;
begin
  Result := Gtk3.gtk_print_settings_new_from_key_file(key_file, group_name);
end;

function TGtkPrintSettings.copy: PGtkPrintSettings; cdecl;
begin
  Result := Gtk3.gtk_print_settings_copy(@self);
end;

procedure TGtkPrintSettings.foreach(func: TGtkPrintSettingsFunc; user_data: gpointer); cdecl;
begin
  Gtk3.gtk_print_settings_foreach(@self, func, user_data);
end;

function TGtkPrintSettings.get(key: Pgchar): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get(@self, key);
end;

function TGtkPrintSettings.get_bool(key: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_bool(@self, key);
end;

function TGtkPrintSettings.get_collate: gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_collate(@self);
end;

function TGtkPrintSettings.get_default_source: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_default_source(@self);
end;

function TGtkPrintSettings.get_dither: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_dither(@self);
end;

function TGtkPrintSettings.get_double(key: Pgchar): gdouble; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_double(@self, key);
end;

function TGtkPrintSettings.get_double_with_default(key: Pgchar; def: gdouble): gdouble; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_double_with_default(@self, key, def);
end;

function TGtkPrintSettings.get_duplex: TGtkPrintDuplex; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_duplex(@self);
end;

function TGtkPrintSettings.get_finishings: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_finishings(@self);
end;

function TGtkPrintSettings.get_int(key: Pgchar): gint; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_int(@self, key);
end;

function TGtkPrintSettings.get_int_with_default(key: Pgchar; def: gint): gint; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_int_with_default(@self, key, def);
end;

function TGtkPrintSettings.get_length(key: Pgchar; unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_length(@self, key, unit_);
end;

function TGtkPrintSettings.get_media_type: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_media_type(@self);
end;

function TGtkPrintSettings.get_n_copies: gint; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_n_copies(@self);
end;

function TGtkPrintSettings.get_number_up: gint; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_number_up(@self);
end;

function TGtkPrintSettings.get_number_up_layout: TGtkNumberUpLayout; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_number_up_layout(@self);
end;

function TGtkPrintSettings.get_orientation: TGtkPageOrientation; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_orientation(@self);
end;

function TGtkPrintSettings.get_output_bin: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_output_bin(@self);
end;

function TGtkPrintSettings.get_page_ranges(num_ranges: Pgint): PGtkPageRange; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_page_ranges(@self, num_ranges);
end;

function TGtkPrintSettings.get_page_set: TGtkPageSet; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_page_set(@self);
end;

function TGtkPrintSettings.get_paper_height(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_paper_height(@self, unit_);
end;

function TGtkPrintSettings.get_paper_size: PGtkPaperSize; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_paper_size(@self);
end;

function TGtkPrintSettings.get_paper_width(unit_: TGtkUnit): gdouble; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_paper_width(@self, unit_);
end;

function TGtkPrintSettings.get_print_pages: TGtkPrintPages; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_print_pages(@self);
end;

function TGtkPrintSettings.get_printer: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_printer(@self);
end;

function TGtkPrintSettings.get_printer_lpi: gdouble; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_printer_lpi(@self);
end;

function TGtkPrintSettings.get_quality: TGtkPrintQuality; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_quality(@self);
end;

function TGtkPrintSettings.get_resolution: gint; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_resolution(@self);
end;

function TGtkPrintSettings.get_resolution_x: gint; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_resolution_x(@self);
end;

function TGtkPrintSettings.get_resolution_y: gint; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_resolution_y(@self);
end;

function TGtkPrintSettings.get_reverse: gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_reverse(@self);
end;

function TGtkPrintSettings.get_scale: gdouble; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_scale(@self);
end;

function TGtkPrintSettings.get_use_color: gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_settings_get_use_color(@self);
end;

function TGtkPrintSettings.has_key(key: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_settings_has_key(@self, key);
end;

function TGtkPrintSettings.load_file(file_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_settings_load_file(@self, file_name);
end;

function TGtkPrintSettings.load_key_file(key_file: PGKeyFile; group_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_settings_load_key_file(@self, key_file, group_name);
end;

procedure TGtkPrintSettings.set_(key: Pgchar; value: Pgchar); cdecl;
begin
  Gtk3.gtk_print_settings_set(@self, key, value);
end;

procedure TGtkPrintSettings.set_bool(key: Pgchar; value: gboolean); cdecl;
begin
  Gtk3.gtk_print_settings_set_bool(@self, key, value);
end;

procedure TGtkPrintSettings.set_collate(collate: gboolean); cdecl;
begin
  Gtk3.gtk_print_settings_set_collate(@self, collate);
end;

procedure TGtkPrintSettings.set_default_source(default_source: Pgchar); cdecl;
begin
  Gtk3.gtk_print_settings_set_default_source(@self, default_source);
end;

procedure TGtkPrintSettings.set_dither(dither: Pgchar); cdecl;
begin
  Gtk3.gtk_print_settings_set_dither(@self, dither);
end;

procedure TGtkPrintSettings.set_double(key: Pgchar; value: gdouble); cdecl;
begin
  Gtk3.gtk_print_settings_set_double(@self, key, value);
end;

procedure TGtkPrintSettings.set_duplex(duplex: TGtkPrintDuplex); cdecl;
begin
  Gtk3.gtk_print_settings_set_duplex(@self, duplex);
end;

procedure TGtkPrintSettings.set_finishings(finishings: Pgchar); cdecl;
begin
  Gtk3.gtk_print_settings_set_finishings(@self, finishings);
end;

procedure TGtkPrintSettings.set_int(key: Pgchar; value: gint); cdecl;
begin
  Gtk3.gtk_print_settings_set_int(@self, key, value);
end;

procedure TGtkPrintSettings.set_length(key: Pgchar; value: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk3.gtk_print_settings_set_length(@self, key, value, unit_);
end;

procedure TGtkPrintSettings.set_media_type(media_type: Pgchar); cdecl;
begin
  Gtk3.gtk_print_settings_set_media_type(@self, media_type);
end;

procedure TGtkPrintSettings.set_n_copies(num_copies: gint); cdecl;
begin
  Gtk3.gtk_print_settings_set_n_copies(@self, num_copies);
end;

procedure TGtkPrintSettings.set_number_up(number_up: gint); cdecl;
begin
  Gtk3.gtk_print_settings_set_number_up(@self, number_up);
end;

procedure TGtkPrintSettings.set_number_up_layout(number_up_layout: TGtkNumberUpLayout); cdecl;
begin
  Gtk3.gtk_print_settings_set_number_up_layout(@self, number_up_layout);
end;

procedure TGtkPrintSettings.set_orientation(orientation: TGtkPageOrientation); cdecl;
begin
  Gtk3.gtk_print_settings_set_orientation(@self, orientation);
end;

procedure TGtkPrintSettings.set_output_bin(output_bin: Pgchar); cdecl;
begin
  Gtk3.gtk_print_settings_set_output_bin(@self, output_bin);
end;

procedure TGtkPrintSettings.set_page_ranges(page_ranges: PGtkPageRange; num_ranges: gint); cdecl;
begin
  Gtk3.gtk_print_settings_set_page_ranges(@self, page_ranges, num_ranges);
end;

procedure TGtkPrintSettings.set_page_set(page_set: TGtkPageSet); cdecl;
begin
  Gtk3.gtk_print_settings_set_page_set(@self, page_set);
end;

procedure TGtkPrintSettings.set_paper_height(height: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk3.gtk_print_settings_set_paper_height(@self, height, unit_);
end;

procedure TGtkPrintSettings.set_paper_size(paper_size: PGtkPaperSize); cdecl;
begin
  Gtk3.gtk_print_settings_set_paper_size(@self, paper_size);
end;

procedure TGtkPrintSettings.set_paper_width(width: gdouble; unit_: TGtkUnit); cdecl;
begin
  Gtk3.gtk_print_settings_set_paper_width(@self, width, unit_);
end;

procedure TGtkPrintSettings.set_print_pages(pages: TGtkPrintPages); cdecl;
begin
  Gtk3.gtk_print_settings_set_print_pages(@self, pages);
end;

procedure TGtkPrintSettings.set_printer(printer: Pgchar); cdecl;
begin
  Gtk3.gtk_print_settings_set_printer(@self, printer);
end;

procedure TGtkPrintSettings.set_printer_lpi(lpi: gdouble); cdecl;
begin
  Gtk3.gtk_print_settings_set_printer_lpi(@self, lpi);
end;

procedure TGtkPrintSettings.set_quality(quality: TGtkPrintQuality); cdecl;
begin
  Gtk3.gtk_print_settings_set_quality(@self, quality);
end;

procedure TGtkPrintSettings.set_resolution(resolution: gint); cdecl;
begin
  Gtk3.gtk_print_settings_set_resolution(@self, resolution);
end;

procedure TGtkPrintSettings.set_resolution_xy(resolution_x: gint; resolution_y: gint); cdecl;
begin
  Gtk3.gtk_print_settings_set_resolution_xy(@self, resolution_x, resolution_y);
end;

procedure TGtkPrintSettings.set_reverse(reverse: gboolean); cdecl;
begin
  Gtk3.gtk_print_settings_set_reverse(@self, reverse);
end;

procedure TGtkPrintSettings.set_scale(scale: gdouble); cdecl;
begin
  Gtk3.gtk_print_settings_set_scale(@self, scale);
end;

procedure TGtkPrintSettings.set_use_color(use_color: gboolean); cdecl;
begin
  Gtk3.gtk_print_settings_set_use_color(@self, use_color);
end;

function TGtkPrintSettings.to_file(file_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_print_settings_to_file(@self, file_name);
end;

procedure TGtkPrintSettings.to_key_file(key_file: PGKeyFile; group_name: Pgchar); cdecl;
begin
  Gtk3.gtk_print_settings_to_key_file(@self, key_file, group_name);
end;

procedure TGtkPrintSettings.unset(key: Pgchar); cdecl;
begin
  Gtk3.gtk_print_settings_unset(@self, key);
end;

function TGtkProgressBar.new: PGtkProgressBar; cdecl;
begin
  Result := Gtk3.gtk_progress_bar_new();
end;

function TGtkProgressBar.get_ellipsize: TPangoEllipsizeMode; cdecl;
begin
  Result := Gtk3.gtk_progress_bar_get_ellipsize(@self);
end;

function TGtkProgressBar.get_fraction: gdouble; cdecl;
begin
  Result := Gtk3.gtk_progress_bar_get_fraction(@self);
end;

function TGtkProgressBar.get_inverted: gboolean; cdecl;
begin
  Result := Gtk3.gtk_progress_bar_get_inverted(@self);
end;

function TGtkProgressBar.get_pulse_step: gdouble; cdecl;
begin
  Result := Gtk3.gtk_progress_bar_get_pulse_step(@self);
end;

function TGtkProgressBar.get_show_text: gboolean; cdecl;
begin
  Result := Gtk3.gtk_progress_bar_get_show_text(@self);
end;

function TGtkProgressBar.get_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_progress_bar_get_text(@self);
end;

procedure TGtkProgressBar.pulse; cdecl;
begin
  Gtk3.gtk_progress_bar_pulse(@self);
end;

procedure TGtkProgressBar.set_ellipsize(mode: TPangoEllipsizeMode); cdecl;
begin
  Gtk3.gtk_progress_bar_set_ellipsize(@self, mode);
end;

procedure TGtkProgressBar.set_fraction(fraction: gdouble); cdecl;
begin
  Gtk3.gtk_progress_bar_set_fraction(@self, fraction);
end;

procedure TGtkProgressBar.set_inverted(inverted: gboolean); cdecl;
begin
  Gtk3.gtk_progress_bar_set_inverted(@self, inverted);
end;

procedure TGtkProgressBar.set_pulse_step(fraction: gdouble); cdecl;
begin
  Gtk3.gtk_progress_bar_set_pulse_step(@self, fraction);
end;

procedure TGtkProgressBar.set_show_text(show_text: gboolean); cdecl;
begin
  Gtk3.gtk_progress_bar_set_show_text(@self, show_text);
end;

procedure TGtkProgressBar.set_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_progress_bar_set_text(@self, text);
end;

function TGtkToggleAction.new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar): PGtkToggleAction; cdecl;
begin
  Result := Gtk3.gtk_toggle_action_new(name, label_, tooltip, stock_id);
end;

function TGtkToggleAction.get_active: gboolean; cdecl;
begin
  Result := Gtk3.gtk_toggle_action_get_active(@self);
end;

function TGtkToggleAction.get_draw_as_radio: gboolean; cdecl;
begin
  Result := Gtk3.gtk_toggle_action_get_draw_as_radio(@self);
end;

procedure TGtkToggleAction.set_active(is_active: gboolean); cdecl;
begin
  Gtk3.gtk_toggle_action_set_active(@self, is_active);
end;

procedure TGtkToggleAction.set_draw_as_radio(draw_as_radio: gboolean); cdecl;
begin
  Gtk3.gtk_toggle_action_set_draw_as_radio(@self, draw_as_radio);
end;

procedure TGtkToggleAction.toggled; cdecl;
begin
  Gtk3.gtk_toggle_action_toggled(@self);
end;

function TGtkRadioAction.new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar; value: gint): PGtkRadioAction; cdecl;
begin
  Result := Gtk3.gtk_radio_action_new(name, label_, tooltip, stock_id, value);
end;

function TGtkRadioAction.get_current_value: gint; cdecl;
begin
  Result := Gtk3.gtk_radio_action_get_current_value(@self);
end;

function TGtkRadioAction.get_group: PGSList; cdecl;
begin
  Result := Gtk3.gtk_radio_action_get_group(@self);
end;

procedure TGtkRadioAction.join_group(group_source: PGtkRadioAction); cdecl;
begin
  Gtk3.gtk_radio_action_join_group(@self, group_source);
end;

procedure TGtkRadioAction.set_current_value(current_value: gint); cdecl;
begin
  Gtk3.gtk_radio_action_set_current_value(@self, current_value);
end;

procedure TGtkRadioAction.set_group(group: PGSList); cdecl;
begin
  Gtk3.gtk_radio_action_set_group(@self, group);
end;

function TGtkRadioButton.new(group: PGSList): PGtkRadioButton; cdecl;
begin
  Result := Gtk3.gtk_radio_button_new(group);
end;

function TGtkRadioButton.new_with_label(group: PGSList; label_: Pgchar): PGtkRadioButton; cdecl;
begin
  Result := Gtk3.gtk_radio_button_new_with_label(group, label_);
end;

function TGtkRadioButton.new_with_label_from_widget(radio_group_member: PGtkRadioButton; label_: Pgchar): PGtkRadioButton; cdecl;
begin
  Result := Gtk3.gtk_radio_button_new_with_label_from_widget(radio_group_member, label_);
end;

function TGtkRadioButton.new_with_mnemonic(group: PGSList; label_: Pgchar): PGtkRadioButton; cdecl;
begin
  Result := Gtk3.gtk_radio_button_new_with_mnemonic(group, label_);
end;

function TGtkRadioButton.new_with_mnemonic_from_widget(radio_group_member: PGtkRadioButton; label_: Pgchar): PGtkRadioButton; cdecl;
begin
  Result := Gtk3.gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member, label_);
end;

function TGtkRadioButton.get_group: PGSList; cdecl;
begin
  Result := Gtk3.gtk_radio_button_get_group(@self);
end;

procedure TGtkRadioButton.join_group(group_source: PGtkRadioButton); cdecl;
begin
  Gtk3.gtk_radio_button_join_group(@self, group_source);
end;

function TGtkRadioButton.new_from_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_radio_button_new_from_widget(@self);
end;

procedure TGtkRadioButton.set_group(group: PGSList); cdecl;
begin
  Gtk3.gtk_radio_button_set_group(@self, group);
end;

function TGtkRadioMenuItem.new(group: PGSList): PGtkRadioMenuItem; cdecl;
begin
  Result := Gtk3.gtk_radio_menu_item_new(group);
end;

function TGtkRadioMenuItem.new_with_label(group: PGSList; label_: Pgchar): PGtkRadioMenuItem; cdecl;
begin
  Result := Gtk3.gtk_radio_menu_item_new_with_label(group, label_);
end;

function TGtkRadioMenuItem.new_with_mnemonic(group: PGSList; label_: Pgchar): PGtkRadioMenuItem; cdecl;
begin
  Result := Gtk3.gtk_radio_menu_item_new_with_mnemonic(group, label_);
end;

function TGtkRadioMenuItem.get_group: PGSList; cdecl;
begin
  Result := Gtk3.gtk_radio_menu_item_get_group(@self);
end;

function TGtkRadioMenuItem.new_from_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_radio_menu_item_new_from_widget(@self);
end;

function TGtkRadioMenuItem.new_with_label_from_widget(label_: Pgchar): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_radio_menu_item_new_with_label_from_widget(@self, label_);
end;

function TGtkRadioMenuItem.new_with_mnemonic_from_widget(label_: Pgchar): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_radio_menu_item_new_with_mnemonic_from_widget(@self, label_);
end;

procedure TGtkRadioMenuItem.set_group(group: PGSList); cdecl;
begin
  Gtk3.gtk_radio_menu_item_set_group(@self, group);
end;

function TGtkToggleToolButton.new: PGtkToggleToolButton; cdecl;
begin
  Result := Gtk3.gtk_toggle_tool_button_new();
end;

function TGtkToggleToolButton.new_from_stock(stock_id: Pgchar): PGtkToggleToolButton; cdecl;
begin
  Result := Gtk3.gtk_toggle_tool_button_new_from_stock(stock_id);
end;

function TGtkToggleToolButton.get_active: gboolean; cdecl;
begin
  Result := Gtk3.gtk_toggle_tool_button_get_active(@self);
end;

procedure TGtkToggleToolButton.set_active(is_active: gboolean); cdecl;
begin
  Gtk3.gtk_toggle_tool_button_set_active(@self, is_active);
end;

function TGtkRadioToolButton.new(group: PGSList): PGtkRadioToolButton; cdecl;
begin
  Result := Gtk3.gtk_radio_tool_button_new(group);
end;

function TGtkRadioToolButton.new_from_stock(group: PGSList; stock_id: Pgchar): PGtkRadioToolButton; cdecl;
begin
  Result := Gtk3.gtk_radio_tool_button_new_from_stock(group, stock_id);
end;

function TGtkRadioToolButton.get_group: PGSList; cdecl;
begin
  Result := Gtk3.gtk_radio_tool_button_get_group(@self);
end;

function TGtkRadioToolButton.new_from_widget: PGtkToolItem; cdecl;
begin
  Result := Gtk3.gtk_radio_tool_button_new_from_widget(@self);
end;

function TGtkRadioToolButton.new_with_stock_from_widget(stock_id: Pgchar): PGtkToolItem; cdecl;
begin
  Result := Gtk3.gtk_radio_tool_button_new_with_stock_from_widget(@self, stock_id);
end;

procedure TGtkRadioToolButton.set_group(group: PGSList); cdecl;
begin
  Gtk3.gtk_radio_tool_button_set_group(@self, group);
end;


function TGtkRcProperty.parse_border(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl;
begin
  Result := Gtk3.gtk_rc_property_parse_border(pspec, gstring, property_value);
end;

function TGtkRcProperty.parse_color(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl;
begin
  Result := Gtk3.gtk_rc_property_parse_color(pspec, gstring, property_value);
end;

function TGtkRcProperty.parse_enum(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl;
begin
  Result := Gtk3.gtk_rc_property_parse_enum(pspec, gstring, property_value);
end;

function TGtkRcProperty.parse_flags(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl;
begin
  Result := Gtk3.gtk_rc_property_parse_flags(pspec, gstring, property_value);
end;

function TGtkRcProperty.parse_requisition(pspec: PGParamSpec; gstring: PGString; property_value: PGValue): gboolean; cdecl;
begin
  Result := Gtk3.gtk_rc_property_parse_requisition(pspec, gstring, property_value);
end;

procedure TGtkRecentChooser.add_filter(filter: PGtkRecentFilter); cdecl;
begin
  Gtk3.gtk_recent_chooser_add_filter(@self, filter);
end;

function TGtkRecentChooser.get_current_item: PGtkRecentInfo; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_current_item(@self);
end;

function TGtkRecentChooser.get_current_uri: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_current_uri(@self);
end;

function TGtkRecentChooser.get_filter: PGtkRecentFilter; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_filter(@self);
end;

function TGtkRecentChooser.get_items: PGList; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_items(@self);
end;

function TGtkRecentChooser.get_limit: gint; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_limit(@self);
end;

function TGtkRecentChooser.get_local_only: gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_local_only(@self);
end;

function TGtkRecentChooser.get_select_multiple: gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_select_multiple(@self);
end;

function TGtkRecentChooser.get_show_icons: gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_show_icons(@self);
end;

function TGtkRecentChooser.get_show_not_found: gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_show_not_found(@self);
end;

function TGtkRecentChooser.get_show_private: gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_show_private(@self);
end;

function TGtkRecentChooser.get_show_tips: gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_show_tips(@self);
end;

function TGtkRecentChooser.get_sort_type: TGtkRecentSortType; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_sort_type(@self);
end;

function TGtkRecentChooser.get_uris(length: Pgsize): PPgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_get_uris(@self, length);
end;

function TGtkRecentChooser.list_filters: PGSList; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_list_filters(@self);
end;

procedure TGtkRecentChooser.remove_filter(filter: PGtkRecentFilter); cdecl;
begin
  Gtk3.gtk_recent_chooser_remove_filter(@self, filter);
end;

procedure TGtkRecentChooser.select_all; cdecl;
begin
  Gtk3.gtk_recent_chooser_select_all(@self);
end;

function TGtkRecentChooser.select_uri(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_select_uri(@self, uri);
end;

function TGtkRecentChooser.set_current_uri(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_set_current_uri(@self, uri);
end;

procedure TGtkRecentChooser.set_filter(filter: PGtkRecentFilter); cdecl;
begin
  Gtk3.gtk_recent_chooser_set_filter(@self, filter);
end;

procedure TGtkRecentChooser.set_limit(limit: gint); cdecl;
begin
  Gtk3.gtk_recent_chooser_set_limit(@self, limit);
end;

procedure TGtkRecentChooser.set_local_only(local_only: gboolean); cdecl;
begin
  Gtk3.gtk_recent_chooser_set_local_only(@self, local_only);
end;

procedure TGtkRecentChooser.set_select_multiple(select_multiple: gboolean); cdecl;
begin
  Gtk3.gtk_recent_chooser_set_select_multiple(@self, select_multiple);
end;

procedure TGtkRecentChooser.set_show_icons(show_icons: gboolean); cdecl;
begin
  Gtk3.gtk_recent_chooser_set_show_icons(@self, show_icons);
end;

procedure TGtkRecentChooser.set_show_not_found(show_not_found: gboolean); cdecl;
begin
  Gtk3.gtk_recent_chooser_set_show_not_found(@self, show_not_found);
end;

procedure TGtkRecentChooser.set_show_private(show_private: gboolean); cdecl;
begin
  Gtk3.gtk_recent_chooser_set_show_private(@self, show_private);
end;

procedure TGtkRecentChooser.set_show_tips(show_tips: gboolean); cdecl;
begin
  Gtk3.gtk_recent_chooser_set_show_tips(@self, show_tips);
end;

procedure TGtkRecentChooser.set_sort_func(sort_func: TGtkRecentSortFunc; sort_data: gpointer; data_destroy: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_recent_chooser_set_sort_func(@self, sort_func, sort_data, data_destroy);
end;

procedure TGtkRecentChooser.set_sort_type(sort_type: TGtkRecentSortType); cdecl;
begin
  Gtk3.gtk_recent_chooser_set_sort_type(@self, sort_type);
end;

procedure TGtkRecentChooser.unselect_all; cdecl;
begin
  Gtk3.gtk_recent_chooser_unselect_all(@self);
end;

procedure TGtkRecentChooser.unselect_uri(uri: Pgchar); cdecl;
begin
  Gtk3.gtk_recent_chooser_unselect_uri(@self, uri);
end;

function TGtkRecentManager.new: PGtkRecentManager; cdecl;
begin
  Result := Gtk3.gtk_recent_manager_new();
end;

function TGtkRecentManager.get_default: PGtkRecentManager; cdecl;
begin
  Result := Gtk3.gtk_recent_manager_get_default();
end;

function TGtkRecentManager.add_full(uri: Pgchar; recent_data: PGtkRecentData): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_manager_add_full(@self, uri, recent_data);
end;

function TGtkRecentManager.add_item(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_manager_add_item(@self, uri);
end;

function TGtkRecentManager.get_items: PGList; cdecl;
begin
  Result := Gtk3.gtk_recent_manager_get_items(@self);
end;

function TGtkRecentManager.has_item(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_manager_has_item(@self, uri);
end;

function TGtkRecentManager.lookup_item(uri: Pgchar): PGtkRecentInfo; cdecl;
begin
  Result := Gtk3.gtk_recent_manager_lookup_item(@self, uri);
end;

function TGtkRecentManager.move_item(uri: Pgchar; new_uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_manager_move_item(@self, uri, new_uri);
end;

function TGtkRecentManager.purge_items: gint; cdecl;
begin
  Result := Gtk3.gtk_recent_manager_purge_items(@self);
end;

function TGtkRecentManager.remove_item(uri: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_manager_remove_item(@self, uri);
end;

function TGtkRecentAction.new(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar): PGtkRecentAction; cdecl;
begin
  Result := Gtk3.gtk_recent_action_new(name, label_, tooltip, stock_id);
end;

function TGtkRecentAction.new_for_manager(name: Pgchar; label_: Pgchar; tooltip: Pgchar; stock_id: Pgchar; manager: PGtkRecentManager): PGtkRecentAction; cdecl;
begin
  Result := Gtk3.gtk_recent_action_new_for_manager(name, label_, tooltip, stock_id, manager);
end;

function TGtkRecentAction.get_show_numbers: gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_action_get_show_numbers(@self);
end;

procedure TGtkRecentAction.set_show_numbers(show_numbers: gboolean); cdecl;
begin
  Gtk3.gtk_recent_action_set_show_numbers(@self, show_numbers);
end;

function TGtkRecentFilter.new: PGtkRecentFilter; cdecl;
begin
  Result := Gtk3.gtk_recent_filter_new();
end;

procedure TGtkRecentFilter.add_age(days: gint); cdecl;
begin
  Gtk3.gtk_recent_filter_add_age(@self, days);
end;

procedure TGtkRecentFilter.add_application(application: Pgchar); cdecl;
begin
  Gtk3.gtk_recent_filter_add_application(@self, application);
end;


procedure TGtkRecentFilter.add_custom(needed: TGtkRecentFilterFlags; func: TGtkRecentFilterFunc; data: gpointer; data_destroy: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_recent_filter_add_custom(@self, needed, func, data, data_destroy);
end;

procedure TGtkRecentFilter.add_group(group: Pgchar); cdecl;
begin
  Gtk3.gtk_recent_filter_add_group(@self, group);
end;

procedure TGtkRecentFilter.add_mime_type(mime_type: Pgchar); cdecl;
begin
  Gtk3.gtk_recent_filter_add_mime_type(@self, mime_type);
end;

procedure TGtkRecentFilter.add_pattern(pattern: Pgchar); cdecl;
begin
  Gtk3.gtk_recent_filter_add_pattern(@self, pattern);
end;

procedure TGtkRecentFilter.add_pixbuf_formats; cdecl;
begin
  Gtk3.gtk_recent_filter_add_pixbuf_formats(@self);
end;

function TGtkRecentFilter.filter(filter_info: PGtkRecentFilterInfo): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_filter_filter(@self, filter_info);
end;

function TGtkRecentFilter.get_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_filter_get_name(@self);
end;

function TGtkRecentFilter.get_needed: TGtkRecentFilterFlags; cdecl;
begin
  Result := Gtk3.gtk_recent_filter_get_needed(@self);
end;

procedure TGtkRecentFilter.set_name(name: Pgchar); cdecl;
begin
  Gtk3.gtk_recent_filter_set_name(@self, name);
end;

function TGtkRecentInfo.create_app_info(app_name: Pgchar): PGAppInfo; cdecl;
begin
  Result := Gtk3.gtk_recent_info_create_app_info(@self, app_name);
end;

function TGtkRecentInfo.exists: gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_info_exists(@self);
end;

function TGtkRecentInfo.get_added: glong; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_added(@self);
end;

function TGtkRecentInfo.get_age: gint; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_age(@self);
end;

function TGtkRecentInfo.get_application_info(app_name: Pgchar; app_exec: PPgchar; count: Pguint; time_: Pglong): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_application_info(@self, app_name, app_exec, count, time_);
end;

function TGtkRecentInfo.get_applications(length: Pgsize): PPgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_applications(@self, length);
end;

function TGtkRecentInfo.get_description: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_description(@self);
end;

function TGtkRecentInfo.get_display_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_display_name(@self);
end;

function TGtkRecentInfo.get_gicon: PGIcon; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_gicon(@self);
end;

function TGtkRecentInfo.get_groups(length: Pgsize): PPgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_groups(@self, length);
end;

function TGtkRecentInfo.get_icon(size: gint): PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_icon(@self, size);
end;

function TGtkRecentInfo.get_mime_type: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_mime_type(@self);
end;

function TGtkRecentInfo.get_modified: glong; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_modified(@self);
end;

function TGtkRecentInfo.get_private_hint: gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_private_hint(@self);
end;

function TGtkRecentInfo.get_short_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_short_name(@self);
end;

function TGtkRecentInfo.get_uri: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_uri(@self);
end;

function TGtkRecentInfo.get_uri_display: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_uri_display(@self);
end;

function TGtkRecentInfo.get_visited: glong; cdecl;
begin
  Result := Gtk3.gtk_recent_info_get_visited(@self);
end;

function TGtkRecentInfo.has_application(app_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_info_has_application(@self, app_name);
end;

function TGtkRecentInfo.has_group(group_name: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_info_has_group(@self, group_name);
end;

function TGtkRecentInfo.is_local: gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_info_is_local(@self);
end;

function TGtkRecentInfo.last_application: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_recent_info_last_application(@self);
end;

function TGtkRecentInfo.match(info_b: PGtkRecentInfo): gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_info_match(@self, info_b);
end;

function TGtkRecentInfo.ref: PGtkRecentInfo; cdecl;
begin
  Result := Gtk3.gtk_recent_info_ref(@self);
end;

procedure TGtkRecentInfo.unref; cdecl;
begin
  Gtk3.gtk_recent_info_unref(@self);
end;

function TGtkRecentChooserMenu.new: PGtkRecentChooserMenu; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_menu_new();
end;

function TGtkRecentChooserMenu.new_for_manager(manager: PGtkRecentManager): PGtkRecentChooserMenu; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_menu_new_for_manager(manager);
end;

function TGtkRecentChooserMenu.get_show_numbers: gboolean; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_menu_get_show_numbers(@self);
end;

procedure TGtkRecentChooserMenu.set_show_numbers(show_numbers: gboolean); cdecl;
begin
  Gtk3.gtk_recent_chooser_menu_set_show_numbers(@self, show_numbers);
end;

function TGtkRecentChooserWidget.new: PGtkRecentChooserWidget; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_widget_new();
end;

function TGtkRecentChooserWidget.new_for_manager(manager: PGtkRecentManager): PGtkRecentChooserWidget; cdecl;
begin
  Result := Gtk3.gtk_recent_chooser_widget_new_for_manager(manager);
end;

function TGtkScaleButton.new(size: gint; min: gdouble; max: gdouble; step: gdouble; icons: PPgchar): PGtkScaleButton; cdecl;
begin
  Result := Gtk3.gtk_scale_button_new(size, min, max, step, icons);
end;

function TGtkScaleButton.get_adjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk3.gtk_scale_button_get_adjustment(@self);
end;

function TGtkScaleButton.get_minus_button: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_scale_button_get_minus_button(@self);
end;

function TGtkScaleButton.get_plus_button: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_scale_button_get_plus_button(@self);
end;

function TGtkScaleButton.get_popup: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_scale_button_get_popup(@self);
end;

function TGtkScaleButton.get_value: gdouble; cdecl;
begin
  Result := Gtk3.gtk_scale_button_get_value(@self);
end;

procedure TGtkScaleButton.set_adjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk3.gtk_scale_button_set_adjustment(@self, adjustment);
end;

procedure TGtkScaleButton.set_icons(icons: PPgchar); cdecl;
begin
  Gtk3.gtk_scale_button_set_icons(@self, icons);
end;

procedure TGtkScaleButton.set_value(value: gdouble); cdecl;
begin
  Gtk3.gtk_scale_button_set_value(@self, value);
end;

function TGtkScrolledWindow.new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkScrolledWindow; cdecl;
begin
  Result := Gtk3.gtk_scrolled_window_new(hadjustment, vadjustment);
end;

procedure TGtkScrolledWindow.add_with_viewport(child: PGtkWidget); cdecl;
begin
  Gtk3.gtk_scrolled_window_add_with_viewport(@self, child);
end;

function TGtkScrolledWindow.get_hadjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk3.gtk_scrolled_window_get_hadjustment(@self);
end;

function TGtkScrolledWindow.get_hscrollbar: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_scrolled_window_get_hscrollbar(@self);
end;

function TGtkScrolledWindow.get_min_content_height: gint; cdecl;
begin
  Result := Gtk3.gtk_scrolled_window_get_min_content_height(@self);
end;

function TGtkScrolledWindow.get_min_content_width: gint; cdecl;
begin
  Result := Gtk3.gtk_scrolled_window_get_min_content_width(@self);
end;

function TGtkScrolledWindow.get_placement: TGtkCornerType; cdecl;
begin
  Result := Gtk3.gtk_scrolled_window_get_placement(@self);
end;

procedure TGtkScrolledWindow.get_policy(hscrollbar_policy: PGtkPolicyType; vscrollbar_policy: PGtkPolicyType); cdecl;
begin
  Gtk3.gtk_scrolled_window_get_policy(@self, hscrollbar_policy, vscrollbar_policy);
end;

function TGtkScrolledWindow.get_shadow_type: TGtkShadowType; cdecl;
begin
  Result := Gtk3.gtk_scrolled_window_get_shadow_type(@self);
end;

function TGtkScrolledWindow.get_vadjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk3.gtk_scrolled_window_get_vadjustment(@self);
end;

function TGtkScrolledWindow.get_vscrollbar: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_scrolled_window_get_vscrollbar(@self);
end;

procedure TGtkScrolledWindow.set_hadjustment(hadjustment: PGtkAdjustment); cdecl;
begin
  Gtk3.gtk_scrolled_window_set_hadjustment(@self, hadjustment);
end;

procedure TGtkScrolledWindow.set_min_content_height(height: gint); cdecl;
begin
  Gtk3.gtk_scrolled_window_set_min_content_height(@self, height);
end;

procedure TGtkScrolledWindow.set_min_content_width(width: gint); cdecl;
begin
  Gtk3.gtk_scrolled_window_set_min_content_width(@self, width);
end;

procedure TGtkScrolledWindow.set_placement(window_placement: TGtkCornerType); cdecl;
begin
  Gtk3.gtk_scrolled_window_set_placement(@self, window_placement);
end;

procedure TGtkScrolledWindow.set_policy(hscrollbar_policy: TGtkPolicyType; vscrollbar_policy: TGtkPolicyType); cdecl;
begin
  Gtk3.gtk_scrolled_window_set_policy(@self, hscrollbar_policy, vscrollbar_policy);
end;

procedure TGtkScrolledWindow.set_shadow_type(type_: TGtkShadowType); cdecl;
begin
  Gtk3.gtk_scrolled_window_set_shadow_type(@self, type_);
end;

procedure TGtkScrolledWindow.set_vadjustment(vadjustment: PGtkAdjustment); cdecl;
begin
  Gtk3.gtk_scrolled_window_set_vadjustment(@self, vadjustment);
end;

procedure TGtkScrolledWindow.unset_placement; cdecl;
begin
  Gtk3.gtk_scrolled_window_unset_placement(@self);
end;

function TGtkSeparatorMenuItem.new: PGtkSeparatorMenuItem; cdecl;
begin
  Result := Gtk3.gtk_separator_menu_item_new();
end;

function TGtkSeparatorToolItem.new: PGtkSeparatorToolItem; cdecl;
begin
  Result := Gtk3.gtk_separator_tool_item_new();
end;

function TGtkSeparatorToolItem.get_draw: gboolean; cdecl;
begin
  Result := Gtk3.gtk_separator_tool_item_get_draw(@self);
end;

procedure TGtkSeparatorToolItem.set_draw(draw: gboolean); cdecl;
begin
  Gtk3.gtk_separator_tool_item_set_draw(@self, draw);
end;

function TGtkSettings.get_default: PGSettings; cdecl;
begin
  Result := Gtk3.gtk_settings_get_default();
end;

function TGtkSettings.get_for_screen(screen: PGdkScreen): PGSettings; cdecl;
begin
  Result := Gtk3.gtk_settings_get_for_screen(screen);
end;

procedure TGtkSettings.install_property(pspec: PGParamSpec); cdecl;
begin
  Gtk3.gtk_settings_install_property(pspec);
end;

procedure TGtkSettings.install_property_parser(pspec: PGParamSpec; parser: TGtkRcPropertyParser); cdecl;
begin
  Gtk3.gtk_settings_install_property_parser(pspec, parser);
end;

procedure TGtkSettings.set_double_property(name: Pgchar; v_double: gdouble; origin: Pgchar); cdecl;
begin
  Gtk3.gtk_settings_set_double_property(@self, name, v_double, origin);
end;

procedure TGtkSettings.set_long_property(name: Pgchar; v_long: glong; origin: Pgchar); cdecl;
begin
  Gtk3.gtk_settings_set_long_property(@self, name, v_long, origin);
end;

procedure TGtkSettings.set_property_value(name: Pgchar; svalue: PGtkSettingsValue); cdecl;
begin
  Gtk3.gtk_settings_set_property_value(@self, name, svalue);
end;

procedure TGtkSettings.set_string_property(name: Pgchar; v_string: Pgchar; origin: Pgchar); cdecl;
begin
  Gtk3.gtk_settings_set_string_property(@self, name, v_string, origin);
end;

function TGtkSizeGroup.new(mode: TGtkSizeGroupMode): PGtkSizeGroup; cdecl;
begin
  Result := Gtk3.gtk_size_group_new(mode);
end;

procedure TGtkSizeGroup.add_widget(widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_size_group_add_widget(@self, widget);
end;

function TGtkSizeGroup.get_ignore_hidden: gboolean; cdecl;
begin
  Result := Gtk3.gtk_size_group_get_ignore_hidden(@self);
end;

function TGtkSizeGroup.get_mode: TGtkSizeGroupMode; cdecl;
begin
  Result := Gtk3.gtk_size_group_get_mode(@self);
end;

function TGtkSizeGroup.get_widgets: PGSList; cdecl;
begin
  Result := Gtk3.gtk_size_group_get_widgets(@self);
end;

procedure TGtkSizeGroup.remove_widget(widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_size_group_remove_widget(@self, widget);
end;

procedure TGtkSizeGroup.set_ignore_hidden(ignore_hidden: gboolean); cdecl;
begin
  Gtk3.gtk_size_group_set_ignore_hidden(@self, ignore_hidden);
end;

procedure TGtkSizeGroup.set_mode(mode: TGtkSizeGroupMode); cdecl;
begin
  Gtk3.gtk_size_group_set_mode(@self, mode);
end;

function TGtkSocket.new: PGtkSocket; cdecl;
begin
  Result := Gtk3.gtk_socket_new();
end;

procedure TGtkSocket.add_id(window: TWindow); cdecl;
begin
  Gtk3.gtk_socket_add_id(@self, window);
end;

function TGtkSocket.get_id: TWindow; cdecl;
begin
  Result := Gtk3.gtk_socket_get_id(@self);
end;

function TGtkSocket.get_plug_window: PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_socket_get_plug_window(@self);
end;

function TGtkSpinButton.new(adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint): PGtkSpinButton; cdecl;
begin
  Result := Gtk3.gtk_spin_button_new(adjustment, climb_rate, digits);
end;

function TGtkSpinButton.new_with_range(min: gdouble; max: gdouble; step: gdouble): PGtkSpinButton; cdecl;
begin
  Result := Gtk3.gtk_spin_button_new_with_range(min, max, step);
end;

procedure TGtkSpinButton.configure(adjustment: PGtkAdjustment; climb_rate: gdouble; digits: guint); cdecl;
begin
  Gtk3.gtk_spin_button_configure(@self, adjustment, climb_rate, digits);
end;

function TGtkSpinButton.get_adjustment: PGtkAdjustment; cdecl;
begin
  Result := Gtk3.gtk_spin_button_get_adjustment(@self);
end;

function TGtkSpinButton.get_digits: guint; cdecl;
begin
  Result := Gtk3.gtk_spin_button_get_digits(@self);
end;

procedure TGtkSpinButton.get_increments(step: Pgdouble; page: Pgdouble); cdecl;
begin
  Gtk3.gtk_spin_button_get_increments(@self, step, page);
end;

function TGtkSpinButton.get_numeric: gboolean; cdecl;
begin
  Result := Gtk3.gtk_spin_button_get_numeric(@self);
end;

procedure TGtkSpinButton.get_range(min: Pgdouble; max: Pgdouble); cdecl;
begin
  Gtk3.gtk_spin_button_get_range(@self, min, max);
end;

function TGtkSpinButton.get_snap_to_ticks: gboolean; cdecl;
begin
  Result := Gtk3.gtk_spin_button_get_snap_to_ticks(@self);
end;

function TGtkSpinButton.get_update_policy: TGtkSpinButtonUpdatePolicy; cdecl;
begin
  Result := Gtk3.gtk_spin_button_get_update_policy(@self);
end;

function TGtkSpinButton.get_value: gdouble; cdecl;
begin
  Result := Gtk3.gtk_spin_button_get_value(@self);
end;

function TGtkSpinButton.get_value_as_int: gint; cdecl;
begin
  Result := Gtk3.gtk_spin_button_get_value_as_int(@self);
end;

function TGtkSpinButton.get_wrap: gboolean; cdecl;
begin
  Result := Gtk3.gtk_spin_button_get_wrap(@self);
end;

procedure TGtkSpinButton.set_adjustment(adjustment: PGtkAdjustment); cdecl;
begin
  Gtk3.gtk_spin_button_set_adjustment(@self, adjustment);
end;

procedure TGtkSpinButton.set_digits(digits: guint); cdecl;
begin
  Gtk3.gtk_spin_button_set_digits(@self, digits);
end;

procedure TGtkSpinButton.set_increments(step: gdouble; page: gdouble); cdecl;
begin
  Gtk3.gtk_spin_button_set_increments(@self, step, page);
end;

procedure TGtkSpinButton.set_numeric(numeric: gboolean); cdecl;
begin
  Gtk3.gtk_spin_button_set_numeric(@self, numeric);
end;

procedure TGtkSpinButton.set_range(min: gdouble; max: gdouble); cdecl;
begin
  Gtk3.gtk_spin_button_set_range(@self, min, max);
end;

procedure TGtkSpinButton.set_snap_to_ticks(snap_to_ticks: gboolean); cdecl;
begin
  Gtk3.gtk_spin_button_set_snap_to_ticks(@self, snap_to_ticks);
end;

procedure TGtkSpinButton.set_update_policy(policy: TGtkSpinButtonUpdatePolicy); cdecl;
begin
  Gtk3.gtk_spin_button_set_update_policy(@self, policy);
end;

procedure TGtkSpinButton.set_value(value: gdouble); cdecl;
begin
  Gtk3.gtk_spin_button_set_value(@self, value);
end;

procedure TGtkSpinButton.set_wrap(wrap: gboolean); cdecl;
begin
  Gtk3.gtk_spin_button_set_wrap(@self, wrap);
end;

procedure TGtkSpinButton.spin(direction: TGtkSpinType; increment: gdouble); cdecl;
begin
  Gtk3.gtk_spin_button_spin(@self, direction, increment);
end;

procedure TGtkSpinButton.update; cdecl;
begin
  Gtk3.gtk_spin_button_update(@self);
end;

function TGtkSpinner.new: PGtkSpinner; cdecl;
begin
  Result := Gtk3.gtk_spinner_new();
end;

procedure TGtkSpinner.start; cdecl;
begin
  Gtk3.gtk_spinner_start(@self);
end;

procedure TGtkSpinner.stop; cdecl;
begin
  Gtk3.gtk_spinner_stop(@self);
end;

function TGtkStatusIcon.new: PGtkStatusIcon; cdecl;
begin
  Result := Gtk3.gtk_status_icon_new();
end;

function TGtkStatusIcon.new_from_file(filename: Pgchar): PGtkStatusIcon; cdecl;
begin
  Result := Gtk3.gtk_status_icon_new_from_file(filename);
end;

function TGtkStatusIcon.new_from_gicon(icon: PGIcon): PGtkStatusIcon; cdecl;
begin
  Result := Gtk3.gtk_status_icon_new_from_gicon(icon);
end;

function TGtkStatusIcon.new_from_icon_name(icon_name: Pgchar): PGtkStatusIcon; cdecl;
begin
  Result := Gtk3.gtk_status_icon_new_from_icon_name(icon_name);
end;

function TGtkStatusIcon.new_from_pixbuf(pixbuf: PGdkPixbuf): PGtkStatusIcon; cdecl;
begin
  Result := Gtk3.gtk_status_icon_new_from_pixbuf(pixbuf);
end;

function TGtkStatusIcon.new_from_stock(stock_id: Pgchar): PGtkStatusIcon; cdecl;
begin
  Result := Gtk3.gtk_status_icon_new_from_stock(stock_id);
end;

procedure TGtkStatusIcon.position_menu(menu: PGtkMenu; x: Pgint; y: Pgint; push_in: Pgboolean; user_data: TGtkStatusIcon); cdecl;
begin
  Gtk3.gtk_status_icon_position_menu(menu, x, y, push_in, user_data);
end;

function TGtkStatusIcon.get_geometry(screen: PPGdkScreen; area: PGdkRectangle; orientation: PGtkOrientation): gboolean; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_geometry(@self, screen, area, orientation);
end;

function TGtkStatusIcon.get_gicon: PGIcon; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_gicon(@self);
end;

function TGtkStatusIcon.get_has_tooltip: gboolean; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_has_tooltip(@self);
end;

function TGtkStatusIcon.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_icon_name(@self);
end;

function TGtkStatusIcon.get_pixbuf: PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_pixbuf(@self);
end;

function TGtkStatusIcon.get_screen: PGdkScreen; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_screen(@self);
end;

function TGtkStatusIcon.get_size: gint; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_size(@self);
end;

function TGtkStatusIcon.get_stock: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_stock(@self);
end;

function TGtkStatusIcon.get_storage_type: TGtkImageType; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_storage_type(@self);
end;

function TGtkStatusIcon.get_title: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_title(@self);
end;

function TGtkStatusIcon.get_tooltip_markup: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_tooltip_markup(@self);
end;

function TGtkStatusIcon.get_tooltip_text: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_tooltip_text(@self);
end;

function TGtkStatusIcon.get_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_visible(@self);
end;

function TGtkStatusIcon.get_x11_window_id: guint32; cdecl;
begin
  Result := Gtk3.gtk_status_icon_get_x11_window_id(@self);
end;

function TGtkStatusIcon.is_embedded: gboolean; cdecl;
begin
  Result := Gtk3.gtk_status_icon_is_embedded(@self);
end;

procedure TGtkStatusIcon.set_from_file(filename: Pgchar); cdecl;
begin
  Gtk3.gtk_status_icon_set_from_file(@self, filename);
end;

procedure TGtkStatusIcon.set_from_gicon(icon: PGIcon); cdecl;
begin
  Gtk3.gtk_status_icon_set_from_gicon(@self, icon);
end;

procedure TGtkStatusIcon.set_from_icon_name(icon_name: Pgchar); cdecl;
begin
  Gtk3.gtk_status_icon_set_from_icon_name(@self, icon_name);
end;

procedure TGtkStatusIcon.set_from_pixbuf(pixbuf: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_status_icon_set_from_pixbuf(@self, pixbuf);
end;

procedure TGtkStatusIcon.set_from_stock(stock_id: Pgchar); cdecl;
begin
  Gtk3.gtk_status_icon_set_from_stock(@self, stock_id);
end;

procedure TGtkStatusIcon.set_has_tooltip(has_tooltip: gboolean); cdecl;
begin
  Gtk3.gtk_status_icon_set_has_tooltip(@self, has_tooltip);
end;

procedure TGtkStatusIcon.set_name(name: Pgchar); cdecl;
begin
  Gtk3.gtk_status_icon_set_name(@self, name);
end;

procedure TGtkStatusIcon.set_screen(screen: PGdkScreen); cdecl;
begin
  Gtk3.gtk_status_icon_set_screen(@self, screen);
end;

procedure TGtkStatusIcon.set_title(title: Pgchar); cdecl;
begin
  Gtk3.gtk_status_icon_set_title(@self, title);
end;

procedure TGtkStatusIcon.set_tooltip_markup(markup: Pgchar); cdecl;
begin
  Gtk3.gtk_status_icon_set_tooltip_markup(@self, markup);
end;

procedure TGtkStatusIcon.set_tooltip_text(text: Pgchar); cdecl;
begin
  Gtk3.gtk_status_icon_set_tooltip_text(@self, text);
end;

procedure TGtkStatusIcon.set_visible(visible: gboolean); cdecl;
begin
  Gtk3.gtk_status_icon_set_visible(@self, visible);
end;

function TGtkStatusbar.new: PGtkStatusbar; cdecl;
begin
  Result := Gtk3.gtk_statusbar_new();
end;

function TGtkStatusbar.get_context_id(context_description: Pgchar): guint; cdecl;
begin
  Result := Gtk3.gtk_statusbar_get_context_id(@self, context_description);
end;

function TGtkStatusbar.get_message_area: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_statusbar_get_message_area(@self);
end;

procedure TGtkStatusbar.pop(context_id: guint); cdecl;
begin
  Gtk3.gtk_statusbar_pop(@self, context_id);
end;

function TGtkStatusbar.push(context_id: guint; text: Pgchar): guint; cdecl;
begin
  Result := Gtk3.gtk_statusbar_push(@self, context_id, text);
end;

procedure TGtkStatusbar.remove(context_id: guint; message_id: guint); cdecl;
begin
  Gtk3.gtk_statusbar_remove(@self, context_id, message_id);
end;

procedure TGtkStatusbar.remove_all(context_id: guint); cdecl;
begin
  Gtk3.gtk_statusbar_remove_all(@self, context_id);
end;

function TGtkStockItem.copy: PGtkStockItem; cdecl;
begin
  Result := Gtk3.gtk_stock_item_copy(@self);
end;

procedure TGtkStockItem.free; cdecl;
begin
  Gtk3.gtk_stock_item_free(@self);
end;

procedure TGtkStyle.apply_default_background(cr: Pcairo_t; window: PGdkWindow; state_type: TGtkStateType; x: gint; y: gint; width: gint; height: gint); cdecl;
begin
  Gtk3.gtk_style_apply_default_background(@self, cr, window, state_type, x, y, width, height);
end;

function TGtkStyle.attach(window: PGdkWindow): PPangoStyle; cdecl;
begin
  Result := Gtk3.gtk_style_attach(@self, window);
end;

function TGtkStyle.copy: PPangoStyle; cdecl;
begin
  Result := Gtk3.gtk_style_copy(@self);
end;

procedure TGtkStyle.detach; cdecl;
begin
  Gtk3.gtk_style_detach(@self);
end;

procedure TGtkStyle.get_style_property(widget_type: TGType; property_name: Pgchar; value: PGValue); cdecl;
begin
  Gtk3.gtk_style_get_style_property(@self, widget_type, property_name, value);
end;

function TGtkStyle.has_context: gboolean; cdecl;
begin
  Result := Gtk3.gtk_style_has_context(@self);
end;

function TGtkStyle.lookup_color(color_name: Pgchar; color: PGdkColor): gboolean; cdecl;
begin
  Result := Gtk3.gtk_style_lookup_color(@self, color_name, color);
end;

function TGtkStyle.lookup_icon_set(stock_id: Pgchar): PGtkIconSet; cdecl;
begin
  Result := Gtk3.gtk_style_lookup_icon_set(@self, stock_id);
end;

function TGtkStyle.render_icon(source: PGtkIconSource; direction: TGtkTextDirection; state: TGtkStateType; size: gint; widget: PGtkWidget; detail: Pgchar): PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_style_render_icon(@self, source, direction, state, size, widget, detail);
end;

procedure TGtkStyle.set_background(window: PGdkWindow; state_type: TGtkStateType); cdecl;
begin
  Gtk3.gtk_style_set_background(@self, window, state_type);
end;

function TGtkSwitch.new: PGtkSwitch; cdecl;
begin
  Result := Gtk3.gtk_switch_new();
end;

function TGtkSwitch.get_active: gboolean; cdecl;
begin
  Result := Gtk3.gtk_switch_get_active(@self);
end;

procedure TGtkSwitch.set_active(is_active: gboolean); cdecl;
begin
  Gtk3.gtk_switch_set_active(@self, is_active);
end;

function TGtkTable.new(rows: guint; columns: guint; homogeneous: gboolean): PGtkTable; cdecl;
begin
  Result := Gtk3.gtk_table_new(rows, columns, homogeneous);
end;

procedure TGtkTable.attach(child: PGtkWidget; left_attach: guint; right_attach: guint; top_attach: guint; bottom_attach: guint; xoptions: TGtkAttachOptions; yoptions: TGtkAttachOptions; xpadding: guint; ypadding: guint); cdecl;
begin
  Gtk3.gtk_table_attach(@self, child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding);
end;

procedure TGtkTable.attach_defaults(widget: PGtkWidget; left_attach: guint; right_attach: guint; top_attach: guint; bottom_attach: guint); cdecl;
begin
  Gtk3.gtk_table_attach_defaults(@self, widget, left_attach, right_attach, top_attach, bottom_attach);
end;

function TGtkTable.get_col_spacing(column: guint): guint; cdecl;
begin
  Result := Gtk3.gtk_table_get_col_spacing(@self, column);
end;

function TGtkTable.get_default_col_spacing: guint; cdecl;
begin
  Result := Gtk3.gtk_table_get_default_col_spacing(@self);
end;

function TGtkTable.get_default_row_spacing: guint; cdecl;
begin
  Result := Gtk3.gtk_table_get_default_row_spacing(@self);
end;

function TGtkTable.get_homogeneous: gboolean; cdecl;
begin
  Result := Gtk3.gtk_table_get_homogeneous(@self);
end;

function TGtkTable.get_row_spacing(row: guint): guint; cdecl;
begin
  Result := Gtk3.gtk_table_get_row_spacing(@self, row);
end;

procedure TGtkTable.get_size(rows: Pguint; columns: Pguint); cdecl;
begin
  Gtk3.gtk_table_get_size(@self, rows, columns);
end;

procedure TGtkTable.resize(rows: guint; columns: guint); cdecl;
begin
  Gtk3.gtk_table_resize(@self, rows, columns);
end;

procedure TGtkTable.set_col_spacing(column: guint; spacing: guint); cdecl;
begin
  Gtk3.gtk_table_set_col_spacing(@self, column, spacing);
end;

procedure TGtkTable.set_col_spacings(spacing: guint); cdecl;
begin
  Gtk3.gtk_table_set_col_spacings(@self, spacing);
end;

procedure TGtkTable.set_homogeneous(homogeneous: gboolean); cdecl;
begin
  Gtk3.gtk_table_set_homogeneous(@self, homogeneous);
end;

procedure TGtkTable.set_row_spacing(row: guint; spacing: guint); cdecl;
begin
  Gtk3.gtk_table_set_row_spacing(@self, row, spacing);
end;

procedure TGtkTable.set_row_spacings(spacing: guint); cdecl;
begin
  Gtk3.gtk_table_set_row_spacings(@self, spacing);
end;


function TGtkTearoffMenuItem.new: PGtkTearoffMenuItem; cdecl;
begin
  Result := Gtk3.gtk_tearoff_menu_item_new();
end;

function TGtkTextAttributes.new: PGtkTextAttributes; cdecl;
begin
  Result := Gtk3.gtk_text_attributes_new();
end;

function TGtkTextAttributes.copy: PGtkTextAttributes; cdecl;
begin
  Result := Gtk3.gtk_text_attributes_copy(@self);
end;

procedure TGtkTextAttributes.copy_values(dest: PGtkTextAttributes); cdecl;
begin
  Gtk3.gtk_text_attributes_copy_values(@self, dest);
end;

function TGtkTextAttributes.ref: PGtkTextAttributes; cdecl;
begin
  Result := Gtk3.gtk_text_attributes_ref(@self);
end;

procedure TGtkTextAttributes.unref; cdecl;
begin
  Gtk3.gtk_text_attributes_unref(@self);
end;

function TGtkTextTagTable.new: PGtkTextTagTable; cdecl;
begin
  Result := Gtk3.gtk_text_tag_table_new();
end;

procedure TGtkTextTagTable.add(tag: PGtkTextTag); cdecl;
begin
  Gtk3.gtk_text_tag_table_add(@self, tag);
end;

procedure TGtkTextTagTable.foreach(func: TGtkTextTagTableForeach; data: gpointer); cdecl;
begin
  Gtk3.gtk_text_tag_table_foreach(@self, func, data);
end;

function TGtkTextTagTable.get_size: gint; cdecl;
begin
  Result := Gtk3.gtk_text_tag_table_get_size(@self);
end;

function TGtkTextTagTable.lookup(name: Pgchar): PGtkTextTag; cdecl;
begin
  Result := Gtk3.gtk_text_tag_table_lookup(@self, name);
end;

procedure TGtkTextTagTable.remove(tag: PGtkTextTag); cdecl;
begin
  Gtk3.gtk_text_tag_table_remove(@self, tag);
end;

function TGtkTextTag.new(name: Pgchar): PGtkTextTag; cdecl;
begin
  Result := Gtk3.gtk_text_tag_new(name);
end;

function TGtkTextTag.event(event_object: PGObject; event: PGdkEvent; iter: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_tag_event(@self, event_object, event, iter);
end;

function TGtkTextTag.get_priority: gint; cdecl;
begin
  Result := Gtk3.gtk_text_tag_get_priority(@self);
end;

procedure TGtkTextTag.set_priority(priority: gint); cdecl;
begin
  Gtk3.gtk_text_tag_set_priority(@self, priority);
end;

procedure TGtkTextIter.assign(other: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_iter_assign(@self, other);
end;

function TGtkTextIter.backward_char: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_char(@self);
end;

function TGtkTextIter.backward_chars(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_chars(@self, count);
end;

function TGtkTextIter.backward_cursor_position: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_cursor_position(@self);
end;

function TGtkTextIter.backward_cursor_positions(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_cursor_positions(@self, count);
end;

function TGtkTextIter.backward_find_char(pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_find_char(@self, pred, user_data, limit);
end;

function TGtkTextIter.backward_line: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_line(@self);
end;

function TGtkTextIter.backward_lines(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_lines(@self, count);
end;


function TGtkTextIter.backward_search(str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_search(@self, str, flags, match_start, match_end, limit);
end;

function TGtkTextIter.backward_sentence_start: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_sentence_start(@self);
end;

function TGtkTextIter.backward_sentence_starts(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_sentence_starts(@self, count);
end;

function TGtkTextIter.backward_to_tag_toggle(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_to_tag_toggle(@self, tag);
end;

function TGtkTextIter.backward_visible_cursor_position: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_visible_cursor_position(@self);
end;

function TGtkTextIter.backward_visible_cursor_positions(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_visible_cursor_positions(@self, count);
end;

function TGtkTextIter.backward_visible_line: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_visible_line(@self);
end;

function TGtkTextIter.backward_visible_lines(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_visible_lines(@self, count);
end;

function TGtkTextIter.backward_visible_word_start: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_visible_word_start(@self);
end;

function TGtkTextIter.backward_visible_word_starts(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_visible_word_starts(@self, count);
end;

function TGtkTextIter.backward_word_start: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_word_start(@self);
end;

function TGtkTextIter.backward_word_starts(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_backward_word_starts(@self, count);
end;

function TGtkTextIter.begins_tag(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_begins_tag(@self, tag);
end;

function TGtkTextIter.can_insert(default_editability: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_can_insert(@self, default_editability);
end;

function TGtkTextIter.compare(rhs: PGtkTextIter): gint; cdecl;
begin
  Result := Gtk3.gtk_text_iter_compare(@self, rhs);
end;

function TGtkTextIter.copy: PGtkTextIter; cdecl;
begin
  Result := Gtk3.gtk_text_iter_copy(@self);
end;

function TGtkTextIter.editable(default_setting: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_editable(@self, default_setting);
end;

function TGtkTextIter.ends_line: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_ends_line(@self);
end;

function TGtkTextIter.ends_sentence: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_ends_sentence(@self);
end;

function TGtkTextIter.ends_tag(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_ends_tag(@self, tag);
end;

function TGtkTextIter.ends_word: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_ends_word(@self);
end;

function TGtkTextIter.equal(rhs: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_equal(@self, rhs);
end;

function TGtkTextIter.forward_char: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_char(@self);
end;

function TGtkTextIter.forward_chars(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_chars(@self, count);
end;

function TGtkTextIter.forward_cursor_position: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_cursor_position(@self);
end;

function TGtkTextIter.forward_cursor_positions(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_cursor_positions(@self, count);
end;

function TGtkTextIter.forward_find_char(pred: TGtkTextCharPredicate; user_data: gpointer; limit: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_find_char(@self, pred, user_data, limit);
end;

function TGtkTextIter.forward_line: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_line(@self);
end;

function TGtkTextIter.forward_lines(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_lines(@self, count);
end;

function TGtkTextIter.forward_search(str: Pgchar; flags: TGtkTextSearchFlags; match_start: PGtkTextIter; match_end: PGtkTextIter; limit: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_search(@self, str, flags, match_start, match_end, limit);
end;

function TGtkTextIter.forward_sentence_end: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_sentence_end(@self);
end;

function TGtkTextIter.forward_sentence_ends(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_sentence_ends(@self, count);
end;

procedure TGtkTextIter.forward_to_end; cdecl;
begin
  Gtk3.gtk_text_iter_forward_to_end(@self);
end;

function TGtkTextIter.forward_to_line_end: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_to_line_end(@self);
end;

function TGtkTextIter.forward_to_tag_toggle(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_to_tag_toggle(@self, tag);
end;

function TGtkTextIter.forward_visible_cursor_position: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_visible_cursor_position(@self);
end;

function TGtkTextIter.forward_visible_cursor_positions(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_visible_cursor_positions(@self, count);
end;

function TGtkTextIter.forward_visible_line: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_visible_line(@self);
end;

function TGtkTextIter.forward_visible_lines(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_visible_lines(@self, count);
end;

function TGtkTextIter.forward_visible_word_end: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_visible_word_end(@self);
end;

function TGtkTextIter.forward_visible_word_ends(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_visible_word_ends(@self, count);
end;

function TGtkTextIter.forward_word_end: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_word_end(@self);
end;

function TGtkTextIter.forward_word_ends(count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_forward_word_ends(@self, count);
end;

procedure TGtkTextIter.free; cdecl;
begin
  Gtk3.gtk_text_iter_free(@self);
end;

function TGtkTextIter.get_attributes(values: PGtkTextAttributes): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_attributes(@self, values);
end;

function TGtkTextIter.get_buffer: PGtkTextBuffer; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_buffer(@self);
end;

function TGtkTextIter.get_bytes_in_line: gint; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_bytes_in_line(@self);
end;

function TGtkTextIter.get_char: gunichar; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_char(@self);
end;

function TGtkTextIter.get_chars_in_line: gint; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_chars_in_line(@self);
end;

function TGtkTextIter.get_child_anchor: PGtkTextChildAnchor; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_child_anchor(@self);
end;

function TGtkTextIter.get_language: PPangoLanguage; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_language(@self);
end;

function TGtkTextIter.get_line: gint; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_line(@self);
end;

function TGtkTextIter.get_line_index: gint; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_line_index(@self);
end;

function TGtkTextIter.get_line_offset: gint; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_line_offset(@self);
end;

function TGtkTextIter.get_marks: PGSList; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_marks(@self);
end;

function TGtkTextIter.get_offset: gint; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_offset(@self);
end;

function TGtkTextIter.get_pixbuf: PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_pixbuf(@self);
end;

function TGtkTextIter.get_slice(end_: PGtkTextIter): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_slice(@self, end_);
end;

function TGtkTextIter.get_tags: PGSList; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_tags(@self);
end;

function TGtkTextIter.get_text(end_: PGtkTextIter): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_text(@self, end_);
end;

function TGtkTextIter.get_toggled_tags(toggled_on: gboolean): PGSList; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_toggled_tags(@self, toggled_on);
end;

function TGtkTextIter.get_visible_line_index: gint; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_visible_line_index(@self);
end;

function TGtkTextIter.get_visible_line_offset: gint; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_visible_line_offset(@self);
end;

function TGtkTextIter.get_visible_slice(end_: PGtkTextIter): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_visible_slice(@self, end_);
end;

function TGtkTextIter.get_visible_text(end_: PGtkTextIter): Pgchar; cdecl;
begin
  Result := Gtk3.gtk_text_iter_get_visible_text(@self, end_);
end;

function TGtkTextIter.has_tag(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_has_tag(@self, tag);
end;

function TGtkTextIter.in_range(start: PGtkTextIter; end_: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_in_range(@self, start, end_);
end;

function TGtkTextIter.inside_sentence: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_inside_sentence(@self);
end;

function TGtkTextIter.inside_word: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_inside_word(@self);
end;

function TGtkTextIter.is_cursor_position: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_is_cursor_position(@self);
end;

function TGtkTextIter.is_end: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_is_end(@self);
end;

function TGtkTextIter.is_start: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_is_start(@self);
end;

procedure TGtkTextIter.order(second: PGtkTextIter); cdecl;
begin
  Gtk3.gtk_text_iter_order(@self, second);
end;

procedure TGtkTextIter.set_line(line_number: gint); cdecl;
begin
  Gtk3.gtk_text_iter_set_line(@self, line_number);
end;

procedure TGtkTextIter.set_line_index(byte_on_line: gint); cdecl;
begin
  Gtk3.gtk_text_iter_set_line_index(@self, byte_on_line);
end;

procedure TGtkTextIter.set_line_offset(char_on_line: gint); cdecl;
begin
  Gtk3.gtk_text_iter_set_line_offset(@self, char_on_line);
end;

procedure TGtkTextIter.set_offset(char_offset: gint); cdecl;
begin
  Gtk3.gtk_text_iter_set_offset(@self, char_offset);
end;

procedure TGtkTextIter.set_visible_line_index(byte_on_line: gint); cdecl;
begin
  Gtk3.gtk_text_iter_set_visible_line_index(@self, byte_on_line);
end;

procedure TGtkTextIter.set_visible_line_offset(char_on_line: gint); cdecl;
begin
  Gtk3.gtk_text_iter_set_visible_line_offset(@self, char_on_line);
end;

function TGtkTextIter.starts_line: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_starts_line(@self);
end;

function TGtkTextIter.starts_sentence: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_starts_sentence(@self);
end;

function TGtkTextIter.starts_word: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_starts_word(@self);
end;

function TGtkTextIter.toggles_tag(tag: PGtkTextTag): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_iter_toggles_tag(@self, tag);
end;

function TGtkTextChildAnchor.new: PGtkTextChildAnchor; cdecl;
begin
  Result := Gtk3.gtk_text_child_anchor_new();
end;

function TGtkTextChildAnchor.get_deleted: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_child_anchor_get_deleted(@self);
end;

function TGtkTextChildAnchor.get_widgets: PGList; cdecl;
begin
  Result := Gtk3.gtk_text_child_anchor_get_widgets(@self);
end;

function TGtkTextMark.new(name: Pgchar; left_gravity: gboolean): PGtkTextMark; cdecl;
begin
  Result := Gtk3.gtk_text_mark_new(name, left_gravity);
end;

function TGtkTextMark.get_buffer: PGtkTextBuffer; cdecl;
begin
  Result := Gtk3.gtk_text_mark_get_buffer(@self);
end;

function TGtkTextMark.get_deleted: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_mark_get_deleted(@self);
end;

function TGtkTextMark.get_left_gravity: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_mark_get_left_gravity(@self);
end;

function TGtkTextMark.get_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_text_mark_get_name(@self);
end;

function TGtkTextMark.get_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_mark_get_visible(@self);
end;

procedure TGtkTextMark.set_visible(setting: gboolean); cdecl;
begin
  Gtk3.gtk_text_mark_set_visible(@self, setting);
end;

function TGtkTextView.new: PGtkTextView; cdecl;
begin
  Result := Gtk3.gtk_text_view_new();
end;

function TGtkTextView.new_with_buffer(buffer: PGtkTextBuffer): PGtkTextView; cdecl;
begin
  Result := Gtk3.gtk_text_view_new_with_buffer(buffer);
end;

procedure TGtkTextView.add_child_at_anchor(child: PGtkWidget; anchor: PGtkTextChildAnchor); cdecl;
begin
  Gtk3.gtk_text_view_add_child_at_anchor(@self, child, anchor);
end;

procedure TGtkTextView.add_child_in_window(child: PGtkWidget; which_window: TGtkTextWindowType; xpos: gint; ypos: gint); cdecl;
begin
  Gtk3.gtk_text_view_add_child_in_window(@self, child, which_window, xpos, ypos);
end;

function TGtkTextView.backward_display_line(iter: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_backward_display_line(@self, iter);
end;

function TGtkTextView.backward_display_line_start(iter: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_backward_display_line_start(@self, iter);
end;

procedure TGtkTextView.buffer_to_window_coords(win: TGtkTextWindowType; buffer_x: gint; buffer_y: gint; window_x: Pgint; window_y: Pgint); cdecl;
begin
  Gtk3.gtk_text_view_buffer_to_window_coords(@self, win, buffer_x, buffer_y, window_x, window_y);
end;

function TGtkTextView.forward_display_line(iter: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_forward_display_line(@self, iter);
end;

function TGtkTextView.forward_display_line_end(iter: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_forward_display_line_end(@self, iter);
end;

function TGtkTextView.get_accepts_tab: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_accepts_tab(@self);
end;

function TGtkTextView.get_border_window_size(type_: TGtkTextWindowType): gint; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_border_window_size(@self, type_);
end;

function TGtkTextView.get_buffer: PGtkTextBuffer; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_buffer(@self);
end;

procedure TGtkTextView.get_cursor_locations(iter: PGtkTextIter; strong: PGdkRectangle; weak: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_text_view_get_cursor_locations(@self, iter, strong, weak);
end;

function TGtkTextView.get_cursor_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_cursor_visible(@self);
end;

function TGtkTextView.get_default_attributes: PGtkTextAttributes; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_default_attributes(@self);
end;

function TGtkTextView.get_editable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_editable(@self);
end;

function TGtkTextView.get_indent: gint; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_indent(@self);
end;

procedure TGtkTextView.get_iter_at_location(iter: PGtkTextIter; x: gint; y: gint); cdecl;
begin
  Gtk3.gtk_text_view_get_iter_at_location(@self, iter, x, y);
end;

procedure TGtkTextView.get_iter_at_position(iter: PGtkTextIter; trailing: Pgint; x: gint; y: gint); cdecl;
begin
  Gtk3.gtk_text_view_get_iter_at_position(@self, iter, trailing, x, y);
end;

procedure TGtkTextView.get_iter_location(iter: PGtkTextIter; location: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_text_view_get_iter_location(@self, iter, location);
end;

function TGtkTextView.get_justification: TGtkJustification; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_justification(@self);
end;

function TGtkTextView.get_left_margin: gint; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_left_margin(@self);
end;

procedure TGtkTextView.get_line_at_y(target_iter: PGtkTextIter; y: gint; line_top: Pgint); cdecl;
begin
  Gtk3.gtk_text_view_get_line_at_y(@self, target_iter, y, line_top);
end;

procedure TGtkTextView.get_line_yrange(iter: PGtkTextIter; y: Pgint; height: Pgint); cdecl;
begin
  Gtk3.gtk_text_view_get_line_yrange(@self, iter, y, height);
end;

function TGtkTextView.get_overwrite: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_overwrite(@self);
end;

function TGtkTextView.get_pixels_above_lines: gint; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_pixels_above_lines(@self);
end;

function TGtkTextView.get_pixels_below_lines: gint; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_pixels_below_lines(@self);
end;

function TGtkTextView.get_pixels_inside_wrap: gint; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_pixels_inside_wrap(@self);
end;

function TGtkTextView.get_right_margin: gint; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_right_margin(@self);
end;

function TGtkTextView.get_tabs: PPangoTabArray; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_tabs(@self);
end;

procedure TGtkTextView.get_visible_rect(visible_rect: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_text_view_get_visible_rect(@self, visible_rect);
end;

function TGtkTextView.get_window(win: TGtkTextWindowType): PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_window(@self, win);
end;

function TGtkTextView.get_window_type(window: PGdkWindow): TGtkTextWindowType; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_window_type(@self, window);
end;

function TGtkTextView.get_wrap_mode: TPangoWrapMode; cdecl;
begin
  Result := Gtk3.gtk_text_view_get_wrap_mode(@self);
end;

function TGtkTextView.im_context_filter_keypress(event: PGdkEventKey): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_im_context_filter_keypress(@self, event);
end;

procedure TGtkTextView.move_child(child: PGtkWidget; xpos: gint; ypos: gint); cdecl;
begin
  Gtk3.gtk_text_view_move_child(@self, child, xpos, ypos);
end;

function TGtkTextView.move_mark_onscreen(mark: PGtkTextMark): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_move_mark_onscreen(@self, mark);
end;

function TGtkTextView.move_visually(iter: PGtkTextIter; count: gint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_move_visually(@self, iter, count);
end;

function TGtkTextView.place_cursor_onscreen: gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_place_cursor_onscreen(@self);
end;

procedure TGtkTextView.reset_im_context; cdecl;
begin
  Gtk3.gtk_text_view_reset_im_context(@self);
end;

procedure TGtkTextView.scroll_mark_onscreen(mark: PGtkTextMark); cdecl;
begin
  Gtk3.gtk_text_view_scroll_mark_onscreen(@self, mark);
end;

function TGtkTextView.scroll_to_iter(iter: PGtkTextIter; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_scroll_to_iter(@self, iter, within_margin, use_align, xalign, yalign);
end;

procedure TGtkTextView.scroll_to_mark(mark: PGtkTextMark; within_margin: gdouble; use_align: gboolean; xalign: gdouble; yalign: gdouble); cdecl;
begin
  Gtk3.gtk_text_view_scroll_to_mark(@self, mark, within_margin, use_align, xalign, yalign);
end;

procedure TGtkTextView.set_accepts_tab(accepts_tab: gboolean); cdecl;
begin
  Gtk3.gtk_text_view_set_accepts_tab(@self, accepts_tab);
end;

procedure TGtkTextView.set_border_window_size(type_: TGtkTextWindowType; size: gint); cdecl;
begin
  Gtk3.gtk_text_view_set_border_window_size(@self, type_, size);
end;

procedure TGtkTextView.set_buffer(buffer: PGtkTextBuffer); cdecl;
begin
  Gtk3.gtk_text_view_set_buffer(@self, buffer);
end;

procedure TGtkTextView.set_cursor_visible(setting: gboolean); cdecl;
begin
  Gtk3.gtk_text_view_set_cursor_visible(@self, setting);
end;

procedure TGtkTextView.set_editable(setting: gboolean); cdecl;
begin
  Gtk3.gtk_text_view_set_editable(@self, setting);
end;

procedure TGtkTextView.set_indent(indent: gint); cdecl;
begin
  Gtk3.gtk_text_view_set_indent(@self, indent);
end;

procedure TGtkTextView.set_justification(justification: TGtkJustification); cdecl;
begin
  Gtk3.gtk_text_view_set_justification(@self, justification);
end;

procedure TGtkTextView.set_left_margin(left_margin: gint); cdecl;
begin
  Gtk3.gtk_text_view_set_left_margin(@self, left_margin);
end;

procedure TGtkTextView.set_overwrite(overwrite: gboolean); cdecl;
begin
  Gtk3.gtk_text_view_set_overwrite(@self, overwrite);
end;

procedure TGtkTextView.set_pixels_above_lines(pixels_above_lines: gint); cdecl;
begin
  Gtk3.gtk_text_view_set_pixels_above_lines(@self, pixels_above_lines);
end;

procedure TGtkTextView.set_pixels_below_lines(pixels_below_lines: gint); cdecl;
begin
  Gtk3.gtk_text_view_set_pixels_below_lines(@self, pixels_below_lines);
end;

procedure TGtkTextView.set_pixels_inside_wrap(pixels_inside_wrap: gint); cdecl;
begin
  Gtk3.gtk_text_view_set_pixels_inside_wrap(@self, pixels_inside_wrap);
end;

procedure TGtkTextView.set_right_margin(right_margin: gint); cdecl;
begin
  Gtk3.gtk_text_view_set_right_margin(@self, right_margin);
end;

procedure TGtkTextView.set_tabs(tabs: PPangoTabArray); cdecl;
begin
  Gtk3.gtk_text_view_set_tabs(@self, tabs);
end;

procedure TGtkTextView.set_wrap_mode(wrap_mode: TPangoWrapMode); cdecl;
begin
  Gtk3.gtk_text_view_set_wrap_mode(@self, wrap_mode);
end;

function TGtkTextView.starts_display_line(iter: PGtkTextIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_text_view_starts_display_line(@self, iter);
end;

procedure TGtkTextView.window_to_buffer_coords(win: TGtkTextWindowType; window_x: gint; window_y: gint; buffer_x: Pgint; buffer_y: Pgint); cdecl;
begin
  Gtk3.gtk_text_view_window_to_buffer_coords(@self, win, window_x, window_y, buffer_x, buffer_y);
end;

function TGtkThemingEngine.load(name: Pgchar): PGtkThemingEngine; cdecl;
begin
  Result := Gtk3.gtk_theming_engine_load(name);
end;

procedure TGtkThemingEngine.register_property(name_space: Pgchar; parse_func: TGtkStylePropertyParser; pspec: PGParamSpec); cdecl;
begin
  Gtk3.gtk_theming_engine_register_property(name_space, parse_func, pspec);
end;

procedure TGtkThemingEngine.get_background_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_theming_engine_get_background_color(@self, state, color);
end;

procedure TGtkThemingEngine.get_border(state: TGtkStateFlags; border: PGtkBorder); cdecl;
begin
  Gtk3.gtk_theming_engine_get_border(@self, state, border);
end;

procedure TGtkThemingEngine.get_border_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_theming_engine_get_border_color(@self, state, color);
end;

procedure TGtkThemingEngine.get_color(state: TGtkStateFlags; color: PGdkRGBA); cdecl;
begin
  Gtk3.gtk_theming_engine_get_color(@self, state, color);
end;

function TGtkThemingEngine.get_direction: TGtkTextDirection; cdecl;
begin
  Result := Gtk3.gtk_theming_engine_get_direction(@self);
end;

function TGtkThemingEngine.get_font(state: TGtkStateFlags): PPangoFontDescription; cdecl;
begin
  Result := Gtk3.gtk_theming_engine_get_font(@self, state);
end;

function TGtkThemingEngine.get_junction_sides: TGtkJunctionSides; cdecl;
begin
  Result := Gtk3.gtk_theming_engine_get_junction_sides(@self);
end;

procedure TGtkThemingEngine.get_margin(state: TGtkStateFlags; margin: PGtkBorder); cdecl;
begin
  Gtk3.gtk_theming_engine_get_margin(@self, state, margin);
end;

procedure TGtkThemingEngine.get_padding(state: TGtkStateFlags; padding: PGtkBorder); cdecl;
begin
  Gtk3.gtk_theming_engine_get_padding(@self, state, padding);
end;

function TGtkThemingEngine.get_path: PGtkWidgetPath; cdecl;
begin
  Result := Gtk3.gtk_theming_engine_get_path(@self);
end;

procedure TGtkThemingEngine.get_property(property_: Pgchar; state: TGtkStateFlags; value: PGValue); cdecl;
begin
  Gtk3.gtk_theming_engine_get_property(@self, property_, state, value);
end;

function TGtkThemingEngine.get_screen: PGdkScreen; cdecl;
begin
  Result := Gtk3.gtk_theming_engine_get_screen(@self);
end;

function TGtkThemingEngine.get_state: TGtkStateFlags; cdecl;
begin
  Result := Gtk3.gtk_theming_engine_get_state(@self);
end;

procedure TGtkThemingEngine.get_style_property(property_name: Pgchar; value: PGValue); cdecl;
begin
  Gtk3.gtk_theming_engine_get_style_property(@self, property_name, value);
end;

function TGtkThemingEngine.has_class(style_class: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_theming_engine_has_class(@self, style_class);
end;

function TGtkThemingEngine.has_region(style_region: Pgchar; flags: PGtkRegionFlags): gboolean; cdecl;
begin
  Result := Gtk3.gtk_theming_engine_has_region(@self, style_region, flags);
end;

function TGtkThemingEngine.lookup_color(color_name: Pgchar; color: PGdkRGBA): gboolean; cdecl;
begin
  Result := Gtk3.gtk_theming_engine_lookup_color(@self, color_name, color);
end;

function TGtkThemingEngine.state_is_running(state: TGtkStateType; progress: Pgdouble): gboolean; cdecl;
begin
  Result := Gtk3.gtk_theming_engine_state_is_running(@self, state, progress);
end;

function TGtkToolShell.get_ellipsize_mode: TPangoEllipsizeMode; cdecl;
begin
  Result := Gtk3.gtk_tool_shell_get_ellipsize_mode(@self);
end;

function TGtkToolShell.get_icon_size: gint; cdecl;
begin
  Result := Gtk3.gtk_tool_shell_get_icon_size(@self);
end;

function TGtkToolShell.get_orientation: TGtkOrientation; cdecl;
begin
  Result := Gtk3.gtk_tool_shell_get_orientation(@self);
end;

function TGtkToolShell.get_relief_style: TGtkReliefStyle; cdecl;
begin
  Result := Gtk3.gtk_tool_shell_get_relief_style(@self);
end;

function TGtkToolShell.get_style: TGtkToolbarStyle; cdecl;
begin
  Result := Gtk3.gtk_tool_shell_get_style(@self);
end;

function TGtkToolShell.get_text_alignment: gfloat; cdecl;
begin
  Result := Gtk3.gtk_tool_shell_get_text_alignment(@self);
end;

function TGtkToolShell.get_text_orientation: TGtkOrientation; cdecl;
begin
  Result := Gtk3.gtk_tool_shell_get_text_orientation(@self);
end;

function TGtkToolShell.get_text_size_group: PGtkSizeGroup; cdecl;
begin
  Result := Gtk3.gtk_tool_shell_get_text_size_group(@self);
end;

procedure TGtkToolShell.rebuild_menu; cdecl;
begin
  Gtk3.gtk_tool_shell_rebuild_menu(@self);
end;

function TGtkToolItemGroup.new(label_: Pgchar): PGtkToolItemGroup; cdecl;
begin
  Result := Gtk3.gtk_tool_item_group_new(label_);
end;

function TGtkToolItemGroup.get_collapsed: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tool_item_group_get_collapsed(@self);
end;

function TGtkToolItemGroup.get_drop_item(x: gint; y: gint): PGtkToolItem; cdecl;
begin
  Result := Gtk3.gtk_tool_item_group_get_drop_item(@self, x, y);
end;

function TGtkToolItemGroup.get_ellipsize: TPangoEllipsizeMode; cdecl;
begin
  Result := Gtk3.gtk_tool_item_group_get_ellipsize(@self);
end;

function TGtkToolItemGroup.get_header_relief: TGtkReliefStyle; cdecl;
begin
  Result := Gtk3.gtk_tool_item_group_get_header_relief(@self);
end;

function TGtkToolItemGroup.get_item_position(item: PGtkToolItem): gint; cdecl;
begin
  Result := Gtk3.gtk_tool_item_group_get_item_position(@self, item);
end;

function TGtkToolItemGroup.get_label: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_tool_item_group_get_label(@self);
end;

function TGtkToolItemGroup.get_label_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_tool_item_group_get_label_widget(@self);
end;

function TGtkToolItemGroup.get_n_items: guint; cdecl;
begin
  Result := Gtk3.gtk_tool_item_group_get_n_items(@self);
end;

function TGtkToolItemGroup.get_nth_item(index: guint): PGtkToolItem; cdecl;
begin
  Result := Gtk3.gtk_tool_item_group_get_nth_item(@self, index);
end;

procedure TGtkToolItemGroup.insert(item: PGtkToolItem; position: gint); cdecl;
begin
  Gtk3.gtk_tool_item_group_insert(@self, item, position);
end;

procedure TGtkToolItemGroup.set_collapsed(collapsed: gboolean); cdecl;
begin
  Gtk3.gtk_tool_item_group_set_collapsed(@self, collapsed);
end;

procedure TGtkToolItemGroup.set_ellipsize(ellipsize: TPangoEllipsizeMode); cdecl;
begin
  Gtk3.gtk_tool_item_group_set_ellipsize(@self, ellipsize);
end;

procedure TGtkToolItemGroup.set_header_relief(style: TGtkReliefStyle); cdecl;
begin
  Gtk3.gtk_tool_item_group_set_header_relief(@self, style);
end;

procedure TGtkToolItemGroup.set_item_position(item: PGtkToolItem; position: gint); cdecl;
begin
  Gtk3.gtk_tool_item_group_set_item_position(@self, item, position);
end;

procedure TGtkToolItemGroup.set_label(label_: Pgchar); cdecl;
begin
  Gtk3.gtk_tool_item_group_set_label(@self, label_);
end;

procedure TGtkToolItemGroup.set_label_widget(label_widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_tool_item_group_set_label_widget(@self, label_widget);
end;


function TGtkToolPalette.new: PGtkToolPalette; cdecl;
begin
  Result := Gtk3.gtk_tool_palette_new();
end;

function TGtkToolPalette.get_drag_target_group: PGtkTargetEntry; cdecl;
begin
  Result := Gtk3.gtk_tool_palette_get_drag_target_group();
end;

function TGtkToolPalette.get_drag_target_item: PGtkTargetEntry; cdecl;
begin
  Result := Gtk3.gtk_tool_palette_get_drag_target_item();
end;

procedure TGtkToolPalette.add_drag_dest(widget: PGtkWidget; flags: TGtkDestDefaults; targets: TGtkToolPaletteDragTargets; actions: TGdkDragAction); cdecl;
begin
  Gtk3.gtk_tool_palette_add_drag_dest(@self, widget, flags, targets, actions);
end;

function TGtkToolPalette.get_drag_item(selection: PGtkSelectionData): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_tool_palette_get_drag_item(@self, selection);
end;

function TGtkToolPalette.get_drop_group(x: gint; y: gint): PGtkToolItemGroup; cdecl;
begin
  Result := Gtk3.gtk_tool_palette_get_drop_group(@self, x, y);
end;

function TGtkToolPalette.get_drop_item(x: gint; y: gint): PGtkToolItem; cdecl;
begin
  Result := Gtk3.gtk_tool_palette_get_drop_item(@self, x, y);
end;

function TGtkToolPalette.get_exclusive(group: PGtkToolItemGroup): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tool_palette_get_exclusive(@self, group);
end;

function TGtkToolPalette.get_expand(group: PGtkToolItemGroup): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tool_palette_get_expand(@self, group);
end;

function TGtkToolPalette.get_group_position(group: PGtkToolItemGroup): gint; cdecl;
begin
  Result := Gtk3.gtk_tool_palette_get_group_position(@self, group);
end;

function TGtkToolPalette.get_icon_size: gint; cdecl;
begin
  Result := Gtk3.gtk_tool_palette_get_icon_size(@self);
end;

function TGtkToolPalette.get_style: TGtkToolbarStyle; cdecl;
begin
  Result := Gtk3.gtk_tool_palette_get_style(@self);
end;

procedure TGtkToolPalette.set_drag_source(targets: TGtkToolPaletteDragTargets); cdecl;
begin
  Gtk3.gtk_tool_palette_set_drag_source(@self, targets);
end;

procedure TGtkToolPalette.set_exclusive(group: PGtkToolItemGroup; exclusive: gboolean); cdecl;
begin
  Gtk3.gtk_tool_palette_set_exclusive(@self, group, exclusive);
end;

procedure TGtkToolPalette.set_expand(group: PGtkToolItemGroup; expand: gboolean); cdecl;
begin
  Gtk3.gtk_tool_palette_set_expand(@self, group, expand);
end;

procedure TGtkToolPalette.set_group_position(group: PGtkToolItemGroup; position: gint); cdecl;
begin
  Gtk3.gtk_tool_palette_set_group_position(@self, group, position);
end;

procedure TGtkToolPalette.set_icon_size(icon_size: gint); cdecl;
begin
  Gtk3.gtk_tool_palette_set_icon_size(@self, icon_size);
end;

procedure TGtkToolPalette.set_style(style: TGtkToolbarStyle); cdecl;
begin
  Gtk3.gtk_tool_palette_set_style(@self, style);
end;

procedure TGtkToolPalette.unset_icon_size; cdecl;
begin
  Gtk3.gtk_tool_palette_unset_icon_size(@self);
end;

procedure TGtkToolPalette.unset_style; cdecl;
begin
  Gtk3.gtk_tool_palette_unset_style(@self);
end;

function TGtkToolbar.new: PGtkToolbar; cdecl;
begin
  Result := Gtk3.gtk_toolbar_new();
end;

function TGtkToolbar.get_drop_index(x: gint; y: gint): gint; cdecl;
begin
  Result := Gtk3.gtk_toolbar_get_drop_index(@self, x, y);
end;

function TGtkToolbar.get_icon_size: gint; cdecl;
begin
  Result := Gtk3.gtk_toolbar_get_icon_size(@self);
end;

function TGtkToolbar.get_item_index(item: PGtkToolItem): gint; cdecl;
begin
  Result := Gtk3.gtk_toolbar_get_item_index(@self, item);
end;

function TGtkToolbar.get_n_items: gint; cdecl;
begin
  Result := Gtk3.gtk_toolbar_get_n_items(@self);
end;

function TGtkToolbar.get_nth_item(n: gint): PGtkToolItem; cdecl;
begin
  Result := Gtk3.gtk_toolbar_get_nth_item(@self, n);
end;

function TGtkToolbar.get_relief_style: TGtkReliefStyle; cdecl;
begin
  Result := Gtk3.gtk_toolbar_get_relief_style(@self);
end;

function TGtkToolbar.get_show_arrow: gboolean; cdecl;
begin
  Result := Gtk3.gtk_toolbar_get_show_arrow(@self);
end;

function TGtkToolbar.get_style: TGtkToolbarStyle; cdecl;
begin
  Result := Gtk3.gtk_toolbar_get_style(@self);
end;

procedure TGtkToolbar.insert(item: PGtkToolItem; pos: gint); cdecl;
begin
  Gtk3.gtk_toolbar_insert(@self, item, pos);
end;

procedure TGtkToolbar.set_drop_highlight_item(tool_item: PGtkToolItem; index_: gint); cdecl;
begin
  Gtk3.gtk_toolbar_set_drop_highlight_item(@self, tool_item, index_);
end;

procedure TGtkToolbar.set_icon_size(icon_size: gint); cdecl;
begin
  Gtk3.gtk_toolbar_set_icon_size(@self, icon_size);
end;

procedure TGtkToolbar.set_show_arrow(show_arrow: gboolean); cdecl;
begin
  Gtk3.gtk_toolbar_set_show_arrow(@self, show_arrow);
end;

procedure TGtkToolbar.set_style(style: TGtkToolbarStyle); cdecl;
begin
  Gtk3.gtk_toolbar_set_style(@self, style);
end;

procedure TGtkToolbar.unset_icon_size; cdecl;
begin
  Gtk3.gtk_toolbar_unset_icon_size(@self);
end;

procedure TGtkToolbar.unset_style; cdecl;
begin
  Gtk3.gtk_toolbar_unset_style(@self);
end;

function TGtkTreeViewColumn.new: PGtkTreeViewColumn; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_new();
end;

function TGtkTreeViewColumn.new_with_area(area: PGtkCellArea): PGtkTreeViewColumn; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_new_with_area(area);
end;

procedure TGtkTreeViewColumn.add_attribute(cell_renderer: PGtkCellRenderer; attribute: Pgchar; column: gint); cdecl;
begin
  Gtk3.gtk_tree_view_column_add_attribute(@self, cell_renderer, attribute, column);
end;

function TGtkTreeViewColumn.cell_get_position(cell_renderer: PGtkCellRenderer; x_offset: Pgint; width: Pgint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_cell_get_position(@self, cell_renderer, x_offset, width);
end;

procedure TGtkTreeViewColumn.cell_get_size(cell_area: PGdkRectangle; x_offset: Pgint; y_offset: Pgint; width: Pgint; height: Pgint); cdecl;
begin
  Gtk3.gtk_tree_view_column_cell_get_size(@self, cell_area, x_offset, y_offset, width, height);
end;

function TGtkTreeViewColumn.cell_is_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_cell_is_visible(@self);
end;

procedure TGtkTreeViewColumn.cell_set_cell_data(tree_model: PGtkTreeModel; iter: PGtkTreeIter; is_expander: gboolean; is_expanded: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_column_cell_set_cell_data(@self, tree_model, iter, is_expander, is_expanded);
end;

procedure TGtkTreeViewColumn.clear; cdecl;
begin
  Gtk3.gtk_tree_view_column_clear(@self);
end;

procedure TGtkTreeViewColumn.clear_attributes(cell_renderer: PGtkCellRenderer); cdecl;
begin
  Gtk3.gtk_tree_view_column_clear_attributes(@self, cell_renderer);
end;

procedure TGtkTreeViewColumn.clicked; cdecl;
begin
  Gtk3.gtk_tree_view_column_clicked(@self);
end;

procedure TGtkTreeViewColumn.focus_cell(cell: PGtkCellRenderer); cdecl;
begin
  Gtk3.gtk_tree_view_column_focus_cell(@self, cell);
end;

function TGtkTreeViewColumn.get_alignment: gfloat; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_alignment(@self);
end;

function TGtkTreeViewColumn.get_button: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_button(@self);
end;

function TGtkTreeViewColumn.get_clickable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_clickable(@self);
end;

function TGtkTreeViewColumn.get_expand: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_expand(@self);
end;

function TGtkTreeViewColumn.get_fixed_width: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_fixed_width(@self);
end;

function TGtkTreeViewColumn.get_max_width: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_max_width(@self);
end;

function TGtkTreeViewColumn.get_min_width: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_min_width(@self);
end;

function TGtkTreeViewColumn.get_reorderable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_reorderable(@self);
end;

function TGtkTreeViewColumn.get_resizable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_resizable(@self);
end;

function TGtkTreeViewColumn.get_sizing: TGtkTreeViewColumnSizing; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_sizing(@self);
end;

function TGtkTreeViewColumn.get_sort_column_id: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_sort_column_id(@self);
end;

function TGtkTreeViewColumn.get_sort_indicator: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_sort_indicator(@self);
end;

function TGtkTreeViewColumn.get_sort_order: TGtkSortType; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_sort_order(@self);
end;

function TGtkTreeViewColumn.get_spacing: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_spacing(@self);
end;

function TGtkTreeViewColumn.get_title: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_title(@self);
end;

function TGtkTreeViewColumn.get_tree_view: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_tree_view(@self);
end;

function TGtkTreeViewColumn.get_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_visible(@self);
end;

function TGtkTreeViewColumn.get_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_widget(@self);
end;

function TGtkTreeViewColumn.get_width: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_width(@self);
end;

function TGtkTreeViewColumn.get_x_offset: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_column_get_x_offset(@self);
end;

procedure TGtkTreeViewColumn.pack_end(cell: PGtkCellRenderer; expand: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_column_pack_end(@self, cell, expand);
end;

procedure TGtkTreeViewColumn.pack_start(cell: PGtkCellRenderer; expand: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_column_pack_start(@self, cell, expand);
end;

procedure TGtkTreeViewColumn.queue_resize; cdecl;
begin
  Gtk3.gtk_tree_view_column_queue_resize(@self);
end;

procedure TGtkTreeViewColumn.set_alignment(xalign: gfloat); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_alignment(@self, xalign);
end;

procedure TGtkTreeViewColumn.set_cell_data_func(cell_renderer: PGtkCellRenderer; func: TGtkTreeCellDataFunc; func_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_cell_data_func(@self, cell_renderer, func, func_data, destroy_);
end;

procedure TGtkTreeViewColumn.set_clickable(clickable: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_clickable(@self, clickable);
end;

procedure TGtkTreeViewColumn.set_expand(expand: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_expand(@self, expand);
end;

procedure TGtkTreeViewColumn.set_fixed_width(fixed_width: gint); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_fixed_width(@self, fixed_width);
end;

procedure TGtkTreeViewColumn.set_max_width(max_width: gint); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_max_width(@self, max_width);
end;

procedure TGtkTreeViewColumn.set_min_width(min_width: gint); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_min_width(@self, min_width);
end;

procedure TGtkTreeViewColumn.set_reorderable(reorderable: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_reorderable(@self, reorderable);
end;

procedure TGtkTreeViewColumn.set_resizable(resizable: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_resizable(@self, resizable);
end;

procedure TGtkTreeViewColumn.set_sizing(type_: TGtkTreeViewColumnSizing); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_sizing(@self, type_);
end;

procedure TGtkTreeViewColumn.set_sort_column_id(sort_column_id: gint); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_sort_column_id(@self, sort_column_id);
end;

procedure TGtkTreeViewColumn.set_sort_indicator(setting: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_sort_indicator(@self, setting);
end;

procedure TGtkTreeViewColumn.set_sort_order(order: TGtkSortType); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_sort_order(@self, order);
end;

procedure TGtkTreeViewColumn.set_spacing(spacing: gint); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_spacing(@self, spacing);
end;

procedure TGtkTreeViewColumn.set_title(title: Pgchar); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_title(@self, title);
end;

procedure TGtkTreeViewColumn.set_visible(visible: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_visible(@self, visible);
end;

procedure TGtkTreeViewColumn.set_widget(widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_tree_view_column_set_widget(@self, widget);
end;

function TGtkTreeView.new: PGtkTreeView; cdecl;
begin
  Result := Gtk3.gtk_tree_view_new();
end;

function TGtkTreeView.new_with_model(model: PGtkTreeModel): PGtkTreeView; cdecl;
begin
  Result := Gtk3.gtk_tree_view_new_with_model(model);
end;

function TGtkTreeView.append_column(column: PGtkTreeViewColumn): gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_append_column(@self, column);
end;

procedure TGtkTreeView.collapse_all; cdecl;
begin
  Gtk3.gtk_tree_view_collapse_all(@self);
end;

function TGtkTreeView.collapse_row(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_collapse_row(@self, path);
end;

procedure TGtkTreeView.columns_autosize; cdecl;
begin
  Gtk3.gtk_tree_view_columns_autosize(@self);
end;

procedure TGtkTreeView.convert_bin_window_to_tree_coords(bx: gint; by: gint; tx: Pgint; ty: Pgint); cdecl;
begin
  Gtk3.gtk_tree_view_convert_bin_window_to_tree_coords(@self, bx, by, tx, ty);
end;

procedure TGtkTreeView.convert_bin_window_to_widget_coords(bx: gint; by: gint; wx: Pgint; wy: Pgint); cdecl;
begin
  Gtk3.gtk_tree_view_convert_bin_window_to_widget_coords(@self, bx, by, wx, wy);
end;

procedure TGtkTreeView.convert_tree_to_bin_window_coords(tx: gint; ty: gint; bx: Pgint; by: Pgint); cdecl;
begin
  Gtk3.gtk_tree_view_convert_tree_to_bin_window_coords(@self, tx, ty, bx, by);
end;

procedure TGtkTreeView.convert_tree_to_widget_coords(tx: gint; ty: gint; wx: Pgint; wy: Pgint); cdecl;
begin
  Gtk3.gtk_tree_view_convert_tree_to_widget_coords(@self, tx, ty, wx, wy);
end;

procedure TGtkTreeView.convert_widget_to_bin_window_coords(wx: gint; wy: gint; bx: Pgint; by: Pgint); cdecl;
begin
  Gtk3.gtk_tree_view_convert_widget_to_bin_window_coords(@self, wx, wy, bx, by);
end;

procedure TGtkTreeView.convert_widget_to_tree_coords(wx: gint; wy: gint; tx: Pgint; ty: Pgint); cdecl;
begin
  Gtk3.gtk_tree_view_convert_widget_to_tree_coords(@self, wx, wy, tx, ty);
end;

function TGtkTreeView.create_row_drag_icon(path: PGtkTreePath): Pcairo_surface_t; cdecl;
begin
  Result := Gtk3.gtk_tree_view_create_row_drag_icon(@self, path);
end;

procedure TGtkTreeView.enable_model_drag_dest(targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl;
begin
  Gtk3.gtk_tree_view_enable_model_drag_dest(@self, targets, n_targets, actions);
end;

procedure TGtkTreeView.enable_model_drag_source(start_button_mask: TGdkModifierType; targets: PGtkTargetEntry; n_targets: gint; actions: TGdkDragAction); cdecl;
begin
  Gtk3.gtk_tree_view_enable_model_drag_source(@self, start_button_mask, targets, n_targets, actions);
end;

procedure TGtkTreeView.expand_all; cdecl;
begin
  Gtk3.gtk_tree_view_expand_all(@self);
end;

function TGtkTreeView.expand_row(path: PGtkTreePath; open_all: gboolean): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_expand_row(@self, path, open_all);
end;

procedure TGtkTreeView.expand_to_path(path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_tree_view_expand_to_path(@self, path);
end;

procedure TGtkTreeView.get_background_area(path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_tree_view_get_background_area(@self, path, column, rect);
end;

function TGtkTreeView.get_bin_window: PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_bin_window(@self);
end;

procedure TGtkTreeView.get_cell_area(path: PGtkTreePath; column: PGtkTreeViewColumn; rect: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_tree_view_get_cell_area(@self, path, column, rect);
end;

function TGtkTreeView.get_column(n: gint): PGtkTreeViewColumn; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_column(@self, n);
end;

function TGtkTreeView.get_columns: PGList; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_columns(@self);
end;

procedure TGtkTreeView.get_cursor(path: PPGtkTreePath; focus_column: PPGtkTreeViewColumn); cdecl;
begin
  Gtk3.gtk_tree_view_get_cursor(@self, path, focus_column);
end;

function TGtkTreeView.get_dest_row_at_pos(drag_x: gint; drag_y: gint; path: PPGtkTreePath; pos: PGtkTreeViewDropPosition): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_dest_row_at_pos(@self, drag_x, drag_y, path, pos);
end;

procedure TGtkTreeView.get_drag_dest_row(path: PPGtkTreePath; pos: PGtkTreeViewDropPosition); cdecl;
begin
  Gtk3.gtk_tree_view_get_drag_dest_row(@self, path, pos);
end;

function TGtkTreeView.get_enable_search: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_enable_search(@self);
end;

function TGtkTreeView.get_enable_tree_lines: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_enable_tree_lines(@self);
end;

function TGtkTreeView.get_expander_column: PGtkTreeViewColumn; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_expander_column(@self);
end;

function TGtkTreeView.get_fixed_height_mode: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_fixed_height_mode(@self);
end;

function TGtkTreeView.get_grid_lines: TGtkTreeViewGridLines; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_grid_lines(@self);
end;

function TGtkTreeView.get_headers_clickable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_headers_clickable(@self);
end;

function TGtkTreeView.get_headers_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_headers_visible(@self);
end;

function TGtkTreeView.get_hover_expand: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_hover_expand(@self);
end;

function TGtkTreeView.get_hover_selection: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_hover_selection(@self);
end;

function TGtkTreeView.get_level_indentation: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_level_indentation(@self);
end;

function TGtkTreeView.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_model(@self);
end;

function TGtkTreeView.get_path_at_pos(x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_path_at_pos(@self, x, y, path, column, cell_x, cell_y);
end;

function TGtkTreeView.get_reorderable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_reorderable(@self);
end;

function TGtkTreeView.get_row_separator_func: TGtkTreeViewRowSeparatorFunc; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_row_separator_func(@self);
end;

function TGtkTreeView.get_rubber_banding: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_rubber_banding(@self);
end;

function TGtkTreeView.get_rules_hint: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_rules_hint(@self);
end;

function TGtkTreeView.get_search_column: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_search_column(@self);
end;

function TGtkTreeView.get_search_entry: PGtkEntry; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_search_entry(@self);
end;

function TGtkTreeView.get_search_equal_func: TGtkTreeViewSearchEqualFunc; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_search_equal_func(@self);
end;

function TGtkTreeView.get_search_position_func: TGtkTreeViewSearchPositionFunc; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_search_position_func(@self);
end;

function TGtkTreeView.get_selection: PGtkTreeSelection; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_selection(@self);
end;

function TGtkTreeView.get_show_expanders: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_show_expanders(@self);
end;

function TGtkTreeView.get_tooltip_column: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_tooltip_column(@self);
end;

function TGtkTreeView.get_tooltip_context(x: Pgint; y: Pgint; keyboard_tip: gboolean; model: PPGtkTreeModel; path: PPGtkTreePath; iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_tooltip_context(@self, x, y, keyboard_tip, model, path, iter);
end;

function TGtkTreeView.get_visible_range(start_path: PPGtkTreePath; end_path: PPGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_get_visible_range(@self, start_path, end_path);
end;

procedure TGtkTreeView.get_visible_rect(visible_rect: PGdkRectangle); cdecl;
begin
  Gtk3.gtk_tree_view_get_visible_rect(@self, visible_rect);
end;

function TGtkTreeView.insert_column(column: PGtkTreeViewColumn; position: gint): gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_insert_column(@self, column, position);
end;

function TGtkTreeView.insert_column_with_data_func(position: gint; title: Pgchar; cell: PGtkCellRenderer; func: TGtkTreeCellDataFunc; data: gpointer; dnotify: TGDestroyNotify): gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_insert_column_with_data_func(@self, position, title, cell, func, data, dnotify);
end;

function TGtkTreeView.is_blank_at_pos(x: gint; y: gint; path: PPGtkTreePath; column: PPGtkTreeViewColumn; cell_x: Pgint; cell_y: Pgint): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_is_blank_at_pos(@self, x, y, path, column, cell_x, cell_y);
end;

function TGtkTreeView.is_rubber_banding_active: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_is_rubber_banding_active(@self);
end;

procedure TGtkTreeView.map_expanded_rows(func: TGtkTreeViewMappingFunc; data: gpointer); cdecl;
begin
  Gtk3.gtk_tree_view_map_expanded_rows(@self, func, data);
end;

procedure TGtkTreeView.move_column_after(column: PGtkTreeViewColumn; base_column: PGtkTreeViewColumn); cdecl;
begin
  Gtk3.gtk_tree_view_move_column_after(@self, column, base_column);
end;

function TGtkTreeView.remove_column(column: PGtkTreeViewColumn): gint; cdecl;
begin
  Result := Gtk3.gtk_tree_view_remove_column(@self, column);
end;

procedure TGtkTreeView.row_activated(path: PGtkTreePath; column: PGtkTreeViewColumn); cdecl;
begin
  Gtk3.gtk_tree_view_row_activated(@self, path, column);
end;

function TGtkTreeView.row_expanded(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_view_row_expanded(@self, path);
end;

procedure TGtkTreeView.scroll_to_cell(path: PGtkTreePath; column: PGtkTreeViewColumn; use_align: gboolean; row_align: gfloat; col_align: gfloat); cdecl;
begin
  Gtk3.gtk_tree_view_scroll_to_cell(@self, path, column, use_align, row_align, col_align);
end;

procedure TGtkTreeView.scroll_to_point(tree_x: gint; tree_y: gint); cdecl;
begin
  Gtk3.gtk_tree_view_scroll_to_point(@self, tree_x, tree_y);
end;

procedure TGtkTreeView.set_column_drag_function(func: TGtkTreeViewColumnDropFunc; user_data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_tree_view_set_column_drag_function(@self, func, user_data, destroy_);
end;

procedure TGtkTreeView.set_cursor(path: PGtkTreePath; focus_column: PGtkTreeViewColumn; start_editing: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_cursor(@self, path, focus_column, start_editing);
end;

procedure TGtkTreeView.set_cursor_on_cell(path: PGtkTreePath; focus_column: PGtkTreeViewColumn; focus_cell: PGtkCellRenderer; start_editing: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_cursor_on_cell(@self, path, focus_column, focus_cell, start_editing);
end;

procedure TGtkTreeView.set_destroy_count_func(func: TGtkTreeDestroyCountFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_tree_view_set_destroy_count_func(@self, func, data, destroy_);
end;

procedure TGtkTreeView.set_drag_dest_row(path: PGtkTreePath; pos: TGtkTreeViewDropPosition); cdecl;
begin
  Gtk3.gtk_tree_view_set_drag_dest_row(@self, path, pos);
end;

procedure TGtkTreeView.set_enable_search(enable_search: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_enable_search(@self, enable_search);
end;

procedure TGtkTreeView.set_enable_tree_lines(enabled: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_enable_tree_lines(@self, enabled);
end;

procedure TGtkTreeView.set_expander_column(column: PGtkTreeViewColumn); cdecl;
begin
  Gtk3.gtk_tree_view_set_expander_column(@self, column);
end;

procedure TGtkTreeView.set_fixed_height_mode(enable: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_fixed_height_mode(@self, enable);
end;

procedure TGtkTreeView.set_grid_lines(grid_lines: TGtkTreeViewGridLines); cdecl;
begin
  Gtk3.gtk_tree_view_set_grid_lines(@self, grid_lines);
end;

procedure TGtkTreeView.set_headers_clickable(setting: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_headers_clickable(@self, setting);
end;

procedure TGtkTreeView.set_headers_visible(headers_visible: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_headers_visible(@self, headers_visible);
end;

procedure TGtkTreeView.set_hover_expand(expand: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_hover_expand(@self, expand);
end;

procedure TGtkTreeView.set_hover_selection(hover: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_hover_selection(@self, hover);
end;

procedure TGtkTreeView.set_level_indentation(indentation: gint); cdecl;
begin
  Gtk3.gtk_tree_view_set_level_indentation(@self, indentation);
end;

procedure TGtkTreeView.set_model(model: PGtkTreeModel); cdecl;
begin
  Gtk3.gtk_tree_view_set_model(@self, model);
end;

procedure TGtkTreeView.set_reorderable(reorderable: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_reorderable(@self, reorderable);
end;

procedure TGtkTreeView.set_row_separator_func(func: TGtkTreeViewRowSeparatorFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_tree_view_set_row_separator_func(@self, func, data, destroy_);
end;

procedure TGtkTreeView.set_rubber_banding(enable: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_rubber_banding(@self, enable);
end;

procedure TGtkTreeView.set_rules_hint(setting: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_rules_hint(@self, setting);
end;

procedure TGtkTreeView.set_search_column(column: gint); cdecl;
begin
  Gtk3.gtk_tree_view_set_search_column(@self, column);
end;

procedure TGtkTreeView.set_search_entry(entry: PGtkEntry); cdecl;
begin
  Gtk3.gtk_tree_view_set_search_entry(@self, entry);
end;

procedure TGtkTreeView.set_search_equal_func(search_equal_func: TGtkTreeViewSearchEqualFunc; search_user_data: gpointer; search_destroy: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_tree_view_set_search_equal_func(@self, search_equal_func, search_user_data, search_destroy);
end;

procedure TGtkTreeView.set_search_position_func(func: TGtkTreeViewSearchPositionFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_tree_view_set_search_position_func(@self, func, data, destroy_);
end;

procedure TGtkTreeView.set_show_expanders(enabled: gboolean); cdecl;
begin
  Gtk3.gtk_tree_view_set_show_expanders(@self, enabled);
end;

procedure TGtkTreeView.set_tooltip_cell(tooltip: PGtkTooltip; path: PGtkTreePath; column: PGtkTreeViewColumn; cell: PGtkCellRenderer); cdecl;
begin
  Gtk3.gtk_tree_view_set_tooltip_cell(@self, tooltip, path, column, cell);
end;

procedure TGtkTreeView.set_tooltip_column(column: gint); cdecl;
begin
  Gtk3.gtk_tree_view_set_tooltip_column(@self, column);
end;

procedure TGtkTreeView.set_tooltip_row(tooltip: PGtkTooltip; path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_tree_view_set_tooltip_row(@self, tooltip, path);
end;

procedure TGtkTreeView.unset_rows_drag_dest; cdecl;
begin
  Gtk3.gtk_tree_view_unset_rows_drag_dest(@self);
end;

procedure TGtkTreeView.unset_rows_drag_source; cdecl;
begin
  Gtk3.gtk_tree_view_unset_rows_drag_source(@self);
end;

procedure TGtkTreeModelFilter.clear_cache; cdecl;
begin
  Gtk3.gtk_tree_model_filter_clear_cache(@self);
end;

function TGtkTreeModelFilter.convert_child_iter_to_iter(filter_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_filter_convert_child_iter_to_iter(@self, filter_iter, child_iter);
end;

function TGtkTreeModelFilter.convert_child_path_to_path(child_path: PGtkTreePath): PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_tree_model_filter_convert_child_path_to_path(@self, child_path);
end;

procedure TGtkTreeModelFilter.convert_iter_to_child_iter(child_iter: PGtkTreeIter; filter_iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_model_filter_convert_iter_to_child_iter(@self, child_iter, filter_iter);
end;

function TGtkTreeModelFilter.convert_path_to_child_path(filter_path: PGtkTreePath): PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_tree_model_filter_convert_path_to_child_path(@self, filter_path);
end;

function TGtkTreeModelFilter.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk3.gtk_tree_model_filter_get_model(@self);
end;

procedure TGtkTreeModelFilter.refilter; cdecl;
begin
  Gtk3.gtk_tree_model_filter_refilter(@self);
end;

procedure TGtkTreeModelFilter.set_modify_func(n_columns: gint; types: PGType; func: TGtkTreeModelFilterModifyFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_tree_model_filter_set_modify_func(@self, n_columns, types, func, data, destroy_);
end;

procedure TGtkTreeModelFilter.set_visible_column(column: gint); cdecl;
begin
  Gtk3.gtk_tree_model_filter_set_visible_column(@self, column);
end;

procedure TGtkTreeModelFilter.set_visible_func(func: TGtkTreeModelFilterVisibleFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_tree_model_filter_set_visible_func(@self, func, data, destroy_);
end;

procedure TGtkTreeModelSort.clear_cache; cdecl;
begin
  Gtk3.gtk_tree_model_sort_clear_cache(@self);
end;

function TGtkTreeModelSort.convert_child_iter_to_iter(sort_iter: PGtkTreeIter; child_iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_sort_convert_child_iter_to_iter(@self, sort_iter, child_iter);
end;

function TGtkTreeModelSort.convert_child_path_to_path(child_path: PGtkTreePath): PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_tree_model_sort_convert_child_path_to_path(@self, child_path);
end;

procedure TGtkTreeModelSort.convert_iter_to_child_iter(child_iter: PGtkTreeIter; sorted_iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_model_sort_convert_iter_to_child_iter(@self, child_iter, sorted_iter);
end;

function TGtkTreeModelSort.convert_path_to_child_path(sorted_path: PGtkTreePath): PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_tree_model_sort_convert_path_to_child_path(@self, sorted_path);
end;

function TGtkTreeModelSort.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk3.gtk_tree_model_sort_get_model(@self);
end;

function TGtkTreeModelSort.iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_model_sort_iter_is_valid(@self, iter);
end;

procedure TGtkTreeModelSort.reset_default_sort_func; cdecl;
begin
  Gtk3.gtk_tree_model_sort_reset_default_sort_func(@self);
end;

function TGtkTreeRowReference.new(model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl;
begin
  Result := Gtk3.gtk_tree_row_reference_new(model, path);
end;

function TGtkTreeRowReference.new_proxy(proxy: PGObject; model: PGtkTreeModel; path: PGtkTreePath): PGtkTreeRowReference; cdecl;
begin
  Result := Gtk3.gtk_tree_row_reference_new_proxy(proxy, model, path);
end;

function TGtkTreeRowReference.copy: PGtkTreeRowReference; cdecl;
begin
  Result := Gtk3.gtk_tree_row_reference_copy(@self);
end;

procedure TGtkTreeRowReference.free; cdecl;
begin
  Gtk3.gtk_tree_row_reference_free(@self);
end;

function TGtkTreeRowReference.get_model: PGtkTreeModel; cdecl;
begin
  Result := Gtk3.gtk_tree_row_reference_get_model(@self);
end;

function TGtkTreeRowReference.get_path: PGtkTreePath; cdecl;
begin
  Result := Gtk3.gtk_tree_row_reference_get_path(@self);
end;

function TGtkTreeRowReference.valid: gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_row_reference_valid(@self);
end;

procedure TGtkTreeRowReference.deleted(proxy: PGObject; path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_tree_row_reference_deleted(proxy, path);
end;

procedure TGtkTreeRowReference.inserted(proxy: PGObject; path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_tree_row_reference_inserted(proxy, path);
end;

procedure TGtkTreeRowReference.reordered(proxy: PGObject; path: PGtkTreePath; iter: PGtkTreeIter; new_order: Pgint); cdecl;
begin
  Gtk3.gtk_tree_row_reference_reordered(proxy, path, iter, new_order);
end;

function TGtkTreeSelection.count_selected_rows: gint; cdecl;
begin
  Result := Gtk3.gtk_tree_selection_count_selected_rows(@self);
end;

function TGtkTreeSelection.get_mode: TGtkSelectionMode; cdecl;
begin
  Result := Gtk3.gtk_tree_selection_get_mode(@self);
end;

function TGtkTreeSelection.get_select_function: TGtkTreeSelectionFunc; cdecl;
begin
  Result := Gtk3.gtk_tree_selection_get_select_function(@self);
end;

function TGtkTreeSelection.get_selected(model: PPGtkTreeModel; iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_selection_get_selected(@self, model, iter);
end;

function TGtkTreeSelection.get_selected_rows(model: PPGtkTreeModel): PGList; cdecl;
begin
  Result := Gtk3.gtk_tree_selection_get_selected_rows(@self, model);
end;

function TGtkTreeSelection.get_tree_view: PGtkTreeView; cdecl;
begin
  Result := Gtk3.gtk_tree_selection_get_tree_view(@self);
end;

function TGtkTreeSelection.get_user_data: gpointer; cdecl;
begin
  Result := Gtk3.gtk_tree_selection_get_user_data(@self);
end;

function TGtkTreeSelection.iter_is_selected(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_selection_iter_is_selected(@self, iter);
end;

function TGtkTreeSelection.path_is_selected(path: PGtkTreePath): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_selection_path_is_selected(@self, path);
end;

procedure TGtkTreeSelection.select_all; cdecl;
begin
  Gtk3.gtk_tree_selection_select_all(@self);
end;

procedure TGtkTreeSelection.select_iter(iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_selection_select_iter(@self, iter);
end;

procedure TGtkTreeSelection.select_path(path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_tree_selection_select_path(@self, path);
end;

procedure TGtkTreeSelection.select_range(start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_tree_selection_select_range(@self, start_path, end_path);
end;

procedure TGtkTreeSelection.selected_foreach(func: TGtkTreeSelectionForeachFunc; data: gpointer); cdecl;
begin
  Gtk3.gtk_tree_selection_selected_foreach(@self, func, data);
end;

procedure TGtkTreeSelection.set_mode(type_: TGtkSelectionMode); cdecl;
begin
  Gtk3.gtk_tree_selection_set_mode(@self, type_);
end;

procedure TGtkTreeSelection.set_select_function(func: TGtkTreeSelectionFunc; data: gpointer; destroy_: TGDestroyNotify); cdecl;
begin
  Gtk3.gtk_tree_selection_set_select_function(@self, func, data, destroy_);
end;

procedure TGtkTreeSelection.unselect_all; cdecl;
begin
  Gtk3.gtk_tree_selection_unselect_all(@self);
end;

procedure TGtkTreeSelection.unselect_iter(iter: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_selection_unselect_iter(@self, iter);
end;

procedure TGtkTreeSelection.unselect_path(path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_tree_selection_unselect_path(@self, path);
end;

procedure TGtkTreeSelection.unselect_range(start_path: PGtkTreePath; end_path: PGtkTreePath); cdecl;
begin
  Gtk3.gtk_tree_selection_unselect_range(@self, start_path, end_path);
end;

function TGtkTreeStore.newv(n_columns: gint; types: PGType): PGtkTreeStore; cdecl;
begin
  Result := Gtk3.gtk_tree_store_newv(n_columns, types);
end;

procedure TGtkTreeStore.append(iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_store_append(@self, iter, parent);
end;

procedure TGtkTreeStore.clear; cdecl;
begin
  Gtk3.gtk_tree_store_clear(@self);
end;

procedure TGtkTreeStore.insert(iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint); cdecl;
begin
  Gtk3.gtk_tree_store_insert(@self, iter, parent, position);
end;

procedure TGtkTreeStore.insert_after(iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_store_insert_after(@self, iter, parent, sibling);
end;

procedure TGtkTreeStore.insert_before(iter: PGtkTreeIter; parent: PGtkTreeIter; sibling: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_store_insert_before(@self, iter, parent, sibling);
end;

procedure TGtkTreeStore.insert_with_valuesv(iter: PGtkTreeIter; parent: PGtkTreeIter; position: gint; columns: Pgint; values: PGValue; n_values: gint); cdecl;
begin
  Gtk3.gtk_tree_store_insert_with_valuesv(@self, iter, parent, position, columns, values, n_values);
end;

function TGtkTreeStore.is_ancestor(iter: PGtkTreeIter; descendant: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_store_is_ancestor(@self, iter, descendant);
end;

function TGtkTreeStore.iter_depth(iter: PGtkTreeIter): gint; cdecl;
begin
  Result := Gtk3.gtk_tree_store_iter_depth(@self, iter);
end;

function TGtkTreeStore.iter_is_valid(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_store_iter_is_valid(@self, iter);
end;

procedure TGtkTreeStore.move_after(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_store_move_after(@self, iter, position);
end;

procedure TGtkTreeStore.move_before(iter: PGtkTreeIter; position: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_store_move_before(@self, iter, position);
end;

procedure TGtkTreeStore.prepend(iter: PGtkTreeIter; parent: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_store_prepend(@self, iter, parent);
end;

function TGtkTreeStore.remove(iter: PGtkTreeIter): gboolean; cdecl;
begin
  Result := Gtk3.gtk_tree_store_remove(@self, iter);
end;

procedure TGtkTreeStore.reorder(parent: PGtkTreeIter; new_order: Pgint); cdecl;
begin
  Gtk3.gtk_tree_store_reorder(@self, parent, new_order);
end;

procedure TGtkTreeStore.set_column_types(n_columns: gint; types: PGType); cdecl;
begin
  Gtk3.gtk_tree_store_set_column_types(@self, n_columns, types);
end;

procedure TGtkTreeStore.set_value(iter: PGtkTreeIter; column: gint; value: PGValue); cdecl;
begin
  Gtk3.gtk_tree_store_set_value(@self, iter, column, value);
end;

procedure TGtkTreeStore.set_valuesv(iter: PGtkTreeIter; columns: Pgint; values: PGValue; n_values: gint); cdecl;
begin
  Gtk3.gtk_tree_store_set_valuesv(@self, iter, columns, values, n_values);
end;

procedure TGtkTreeStore.swap(a: PGtkTreeIter; b: PGtkTreeIter); cdecl;
begin
  Gtk3.gtk_tree_store_swap(@self, a, b);
end;

function TGtkUIManager.new: PGtkUIManager; cdecl;
begin
  Result := Gtk3.gtk_ui_manager_new();
end;


procedure TGtkUIManager.add_ui(merge_id: guint; path: Pgchar; name: Pgchar; action: Pgchar; type_: TGtkUIManagerItemType; top: gboolean); cdecl;
begin
  Gtk3.gtk_ui_manager_add_ui(@self, merge_id, path, name, action, type_, top);
end;

function TGtkUIManager.add_ui_from_file(filename: Pgchar): guint; cdecl;
begin
  Result := Gtk3.gtk_ui_manager_add_ui_from_file(@self, filename);
end;

function TGtkUIManager.add_ui_from_string(buffer: Pgchar; length: gssize): guint; cdecl;
begin
  Result := Gtk3.gtk_ui_manager_add_ui_from_string(@self, buffer, length);
end;

procedure TGtkUIManager.ensure_update; cdecl;
begin
  Gtk3.gtk_ui_manager_ensure_update(@self);
end;

function TGtkUIManager.get_accel_group: PGtkAccelGroup; cdecl;
begin
  Result := Gtk3.gtk_ui_manager_get_accel_group(@self);
end;

function TGtkUIManager.get_action(path: Pgchar): PGtkAction; cdecl;
begin
  Result := Gtk3.gtk_ui_manager_get_action(@self, path);
end;

function TGtkUIManager.get_action_groups: PGList; cdecl;
begin
  Result := Gtk3.gtk_ui_manager_get_action_groups(@self);
end;

function TGtkUIManager.get_add_tearoffs: gboolean; cdecl;
begin
  Result := Gtk3.gtk_ui_manager_get_add_tearoffs(@self);
end;

function TGtkUIManager.get_toplevels(types: TGtkUIManagerItemType): PGSList; cdecl;
begin
  Result := Gtk3.gtk_ui_manager_get_toplevels(@self, types);
end;

function TGtkUIManager.get_ui: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_ui_manager_get_ui(@self);
end;

function TGtkUIManager.get_widget(path: Pgchar): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_ui_manager_get_widget(@self, path);
end;

procedure TGtkUIManager.insert_action_group(action_group: PGtkActionGroup; pos: gint); cdecl;
begin
  Gtk3.gtk_ui_manager_insert_action_group(@self, action_group, pos);
end;

function TGtkUIManager.new_merge_id: guint; cdecl;
begin
  Result := Gtk3.gtk_ui_manager_new_merge_id(@self);
end;

procedure TGtkUIManager.remove_action_group(action_group: PGtkActionGroup); cdecl;
begin
  Gtk3.gtk_ui_manager_remove_action_group(@self, action_group);
end;

procedure TGtkUIManager.remove_ui(merge_id: guint); cdecl;
begin
  Gtk3.gtk_ui_manager_remove_ui(@self, merge_id);
end;

procedure TGtkUIManager.set_add_tearoffs(add_tearoffs: gboolean); cdecl;
begin
  Gtk3.gtk_ui_manager_set_add_tearoffs(@self, add_tearoffs);
end;

function TGtkViewport.new(hadjustment: PGtkAdjustment; vadjustment: PGtkAdjustment): PGtkViewport; cdecl;
begin
  Result := Gtk3.gtk_viewport_new(hadjustment, vadjustment);
end;

function TGtkViewport.get_bin_window: PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_viewport_get_bin_window(@self);
end;

function TGtkViewport.get_shadow_type: TGtkShadowType; cdecl;
begin
  Result := Gtk3.gtk_viewport_get_shadow_type(@self);
end;

function TGtkViewport.get_view_window: PGdkWindow; cdecl;
begin
  Result := Gtk3.gtk_viewport_get_view_window(@self);
end;

procedure TGtkViewport.set_shadow_type(type_: TGtkShadowType); cdecl;
begin
  Gtk3.gtk_viewport_set_shadow_type(@self, type_);
end;

function TGtkVolumeButton.new: PGtkVolumeButton; cdecl;
begin
  Result := Gtk3.gtk_volume_button_new();
end;

function TGtkWindowGroup.new: PGtkWindowGroup; cdecl;
begin
  Result := Gtk3.gtk_window_group_new();
end;

procedure TGtkWindowGroup.add_window(window: PGtkWindow); cdecl;
begin
  Gtk3.gtk_window_group_add_window(@self, window);
end;

function TGtkWindowGroup.get_current_device_grab(device: PGdkDevice): PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_window_group_get_current_device_grab(@self, device);
end;

function TGtkWindowGroup.get_current_grab: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_window_group_get_current_grab(@self);
end;

function TGtkWindowGroup.list_windows: PGList; cdecl;
begin
  Result := Gtk3.gtk_window_group_list_windows(@self);
end;

procedure TGtkWindowGroup.remove_window(window: PGtkWindow); cdecl;
begin
  Gtk3.gtk_window_group_remove_window(@self, window);
end;

function TGtkWindow.new(type_: TGdkWindowType): PGtkWindow; cdecl;
begin
  Result := Gtk3.gtk_window_new(type_);
end;

function TGtkWindow.get_default_icon_list: PGList; cdecl;
begin
  Result := Gtk3.gtk_window_get_default_icon_list();
end;

function TGtkWindow.get_default_icon_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_window_get_default_icon_name();
end;

function TGtkWindow.list_toplevels: PGList; cdecl;
begin
  Result := Gtk3.gtk_window_list_toplevels();
end;

procedure TGtkWindow.set_auto_startup_notification(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_auto_startup_notification(setting);
end;

procedure TGtkWindow.set_default_icon(icon: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_window_set_default_icon(icon);
end;

function TGtkWindow.set_default_icon_from_file(filename: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_set_default_icon_from_file(filename);
end;

procedure TGtkWindow.set_default_icon_list(list: PGList); cdecl;
begin
  Gtk3.gtk_window_set_default_icon_list(list);
end;

procedure TGtkWindow.set_default_icon_name(name: Pgchar); cdecl;
begin
  Gtk3.gtk_window_set_default_icon_name(name);
end;

function TGtkWindow.activate_default: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_activate_default(@self);
end;

function TGtkWindow.activate_focus: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_activate_focus(@self);
end;

function TGtkWindow.activate_key(event: PGdkEventKey): gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_activate_key(@self, event);
end;

procedure TGtkWindow.add_accel_group(accel_group: PGtkAccelGroup); cdecl;
begin
  Gtk3.gtk_window_add_accel_group(@self, accel_group);
end;

procedure TGtkWindow.add_mnemonic(keyval: guint; target: PGtkWidget); cdecl;
begin
  Gtk3.gtk_window_add_mnemonic(@self, keyval, target);
end;

procedure TGtkWindow.begin_move_drag(button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl;
begin
  Gtk3.gtk_window_begin_move_drag(@self, button, root_x, root_y, timestamp);
end;

procedure TGtkWindow.begin_resize_drag(edge: TGdkWindowEdge; button: gint; root_x: gint; root_y: gint; timestamp: guint32); cdecl;
begin
  Gtk3.gtk_window_begin_resize_drag(@self, edge, button, root_x, root_y, timestamp);
end;

procedure TGtkWindow.deiconify; cdecl;
begin
  Gtk3.gtk_window_deiconify(@self);
end;

procedure TGtkWindow.fullscreen; cdecl;
begin
  Gtk3.gtk_window_fullscreen(@self);
end;

function TGtkWindow.get_accept_focus: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_accept_focus(@self);
end;

function TGtkWindow.get_application: PGtkApplication; cdecl;
begin
  Result := Gtk3.gtk_window_get_application(@self);
end;

function TGtkWindow.get_decorated: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_decorated(@self);
end;

procedure TGtkWindow.get_default_size(width: Pgint; height: Pgint); cdecl;
begin
  Gtk3.gtk_window_get_default_size(@self, width, height);
end;

function TGtkWindow.get_default_widget: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_window_get_default_widget(@self);
end;

function TGtkWindow.get_deletable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_deletable(@self);
end;

function TGtkWindow.get_destroy_with_parent: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_destroy_with_parent(@self);
end;

function TGtkWindow.get_focus: PGtkWidget; cdecl;
begin
  Result := Gtk3.gtk_window_get_focus(@self);
end;

function TGtkWindow.get_focus_on_map: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_focus_on_map(@self);
end;

function TGtkWindow.get_focus_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_focus_visible(@self);
end;

function TGtkWindow.get_gravity: TGdkGravity; cdecl;
begin
  Result := Gtk3.gtk_window_get_gravity(@self);
end;

function TGtkWindow.get_group: PGtkWindowGroup; cdecl;
begin
  Result := Gtk3.gtk_window_get_group(@self);
end;

function TGtkWindow.get_has_resize_grip: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_has_resize_grip(@self);
end;

function TGtkWindow.get_icon: PGdkPixbuf; cdecl;
begin
  Result := Gtk3.gtk_window_get_icon(@self);
end;

function TGtkWindow.get_icon_list: PGList; cdecl;
begin
  Result := Gtk3.gtk_window_get_icon_list(@self);
end;

function TGtkWindow.get_icon_name: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_window_get_icon_name(@self);
end;

function TGtkWindow.get_mnemonic_modifier: TGdkModifierType; cdecl;
begin
  Result := Gtk3.gtk_window_get_mnemonic_modifier(@self);
end;

function TGtkWindow.get_mnemonics_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_mnemonics_visible(@self);
end;

function TGtkWindow.get_modal: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_modal(@self);
end;

function TGtkWindow.get_opacity: gdouble; cdecl;
begin
  Result := Gtk3.gtk_window_get_opacity(@self);
end;

procedure TGtkWindow.get_position(root_x: Pgint; root_y: Pgint); cdecl;
begin
  Gtk3.gtk_window_get_position(@self, root_x, root_y);
end;

function TGtkWindow.get_resizable: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_resizable(@self);
end;

function TGtkWindow.get_resize_grip_area(rect: PGdkRectangle): gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_resize_grip_area(@self, rect);
end;

function TGtkWindow.get_role: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_window_get_role(@self);
end;

function TGtkWindow.get_screen: PGdkScreen; cdecl;
begin
  Result := Gtk3.gtk_window_get_screen(@self);
end;

procedure TGtkWindow.get_size(width: Pgint; height: Pgint); cdecl;
begin
  Gtk3.gtk_window_get_size(@self, width, height);
end;

function TGtkWindow.get_skip_pager_hint: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_skip_pager_hint(@self);
end;

function TGtkWindow.get_skip_taskbar_hint: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_skip_taskbar_hint(@self);
end;

function TGtkWindow.get_title: Pgchar; cdecl;
begin
  Result := Gtk3.gtk_window_get_title(@self);
end;

function TGtkWindow.get_transient_for: PAtkWindow; cdecl;
begin
  Result := Gtk3.gtk_window_get_transient_for(@self);
end;

function TGtkWindow.get_type_hint: TGdkWindowTypeHint; cdecl;
begin
  Result := Gtk3.gtk_window_get_type_hint(@self);
end;

function TGtkWindow.get_urgency_hint: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_get_urgency_hint(@self);
end;

function TGtkWindow.get_window_type: TGdkWindowType; cdecl;
begin
  Result := Gtk3.gtk_window_get_window_type(@self);
end;

function TGtkWindow.has_group: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_has_group(@self);
end;

function TGtkWindow.has_toplevel_focus: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_has_toplevel_focus(@self);
end;

procedure TGtkWindow.iconify; cdecl;
begin
  Gtk3.gtk_window_iconify(@self);
end;

function TGtkWindow.is_active: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_is_active(@self);
end;

procedure TGtkWindow.maximize; cdecl;
begin
  Gtk3.gtk_window_maximize(@self);
end;

function TGtkWindow.mnemonic_activate(keyval: guint; modifier: TGdkModifierType): gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_mnemonic_activate(@self, keyval, modifier);
end;

procedure TGtkWindow.move(x: gint; y: gint); cdecl;
begin
  Gtk3.gtk_window_move(@self, x, y);
end;

function TGtkWindow.parse_geometry(geometry: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_parse_geometry(@self, geometry);
end;

procedure TGtkWindow.present; cdecl;
begin
  Gtk3.gtk_window_present(@self);
end;

procedure TGtkWindow.present_with_time(timestamp: guint32); cdecl;
begin
  Gtk3.gtk_window_present_with_time(@self, timestamp);
end;

function TGtkWindow.propagate_key_event(event: PGdkEventKey): gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_propagate_key_event(@self, event);
end;

procedure TGtkWindow.remove_accel_group(accel_group: PGtkAccelGroup); cdecl;
begin
  Gtk3.gtk_window_remove_accel_group(@self, accel_group);
end;

procedure TGtkWindow.remove_mnemonic(keyval: guint; target: PGtkWidget); cdecl;
begin
  Gtk3.gtk_window_remove_mnemonic(@self, keyval, target);
end;

procedure TGtkWindow.reshow_with_initial_size; cdecl;
begin
  Gtk3.gtk_window_reshow_with_initial_size(@self);
end;

procedure TGtkWindow.resize(width: gint; height: gint); cdecl;
begin
  Gtk3.gtk_window_resize(@self, width, height);
end;

function TGtkWindow.resize_grip_is_visible: gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_resize_grip_is_visible(@self);
end;

procedure TGtkWindow.resize_to_geometry(width: gint; height: gint); cdecl;
begin
  Gtk3.gtk_window_resize_to_geometry(@self, width, height);
end;

procedure TGtkWindow.set_accept_focus(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_accept_focus(@self, setting);
end;

procedure TGtkWindow.set_application(application: PGtkApplication); cdecl;
begin
  Gtk3.gtk_window_set_application(@self, application);
end;

procedure TGtkWindow.set_decorated(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_decorated(@self, setting);
end;

procedure TGtkWindow.set_default(default_widget: PGtkWidget); cdecl;
begin
  Gtk3.gtk_window_set_default(@self, default_widget);
end;

procedure TGtkWindow.set_default_geometry(width: gint; height: gint); cdecl;
begin
  Gtk3.gtk_window_set_default_geometry(@self, width, height);
end;

procedure TGtkWindow.set_default_size(width: gint; height: gint); cdecl;
begin
  Gtk3.gtk_window_set_default_size(@self, width, height);
end;

procedure TGtkWindow.set_deletable(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_deletable(@self, setting);
end;

procedure TGtkWindow.set_destroy_with_parent(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_destroy_with_parent(@self, setting);
end;

procedure TGtkWindow.set_focus(focus: PGtkWidget); cdecl;
begin
  Gtk3.gtk_window_set_focus(@self, focus);
end;

procedure TGtkWindow.set_focus_on_map(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_focus_on_map(@self, setting);
end;

procedure TGtkWindow.set_focus_visible(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_focus_visible(@self, setting);
end;

procedure TGtkWindow.set_geometry_hints(geometry_widget: PGtkWidget; geometry: PGdkGeometry; geom_mask: TGdkWindowHints); cdecl;
begin
  Gtk3.gtk_window_set_geometry_hints(@self, geometry_widget, geometry, geom_mask);
end;

procedure TGtkWindow.set_gravity(gravity: TGdkGravity); cdecl;
begin
  Gtk3.gtk_window_set_gravity(@self, gravity);
end;

procedure TGtkWindow.set_has_resize_grip(value: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_has_resize_grip(@self, value);
end;

procedure TGtkWindow.set_has_user_ref_count(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_has_user_ref_count(@self, setting);
end;

procedure TGtkWindow.set_icon(icon: PGdkPixbuf); cdecl;
begin
  Gtk3.gtk_window_set_icon(@self, icon);
end;

function TGtkWindow.set_icon_from_file(filename: Pgchar): gboolean; cdecl;
begin
  Result := Gtk3.gtk_window_set_icon_from_file(@self, filename);
end;

procedure TGtkWindow.set_icon_list(list: PGList); cdecl;
begin
  Gtk3.gtk_window_set_icon_list(@self, list);
end;

procedure TGtkWindow.set_icon_name(name: Pgchar); cdecl;
begin
  Gtk3.gtk_window_set_icon_name(@self, name);
end;

procedure TGtkWindow.set_keep_above(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_keep_above(@self, setting);
end;

procedure TGtkWindow.set_keep_below(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_keep_below(@self, setting);
end;

procedure TGtkWindow.set_mnemonic_modifier(modifier: TGdkModifierType); cdecl;
begin
  Gtk3.gtk_window_set_mnemonic_modifier(@self, modifier);
end;

procedure TGtkWindow.set_mnemonics_visible(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_mnemonics_visible(@self, setting);
end;

procedure TGtkWindow.set_modal(modal: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_modal(@self, modal);
end;

procedure TGtkWindow.set_opacity(opacity: gdouble); cdecl;
begin
  Gtk3.gtk_window_set_opacity(@self, opacity);
end;

procedure TGtkWindow.set_position(position: TGtkWindowPosition); cdecl;
begin
  Gtk3.gtk_window_set_position(@self, position);
end;

procedure TGtkWindow.set_resizable(resizable: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_resizable(@self, resizable);
end;

procedure TGtkWindow.set_role(role: Pgchar); cdecl;
begin
  Gtk3.gtk_window_set_role(@self, role);
end;

procedure TGtkWindow.set_screen(screen: PGdkScreen); cdecl;
begin
  Gtk3.gtk_window_set_screen(@self, screen);
end;

procedure TGtkWindow.set_skip_pager_hint(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_skip_pager_hint(@self, setting);
end;

procedure TGtkWindow.set_skip_taskbar_hint(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_skip_taskbar_hint(@self, setting);
end;

procedure TGtkWindow.set_startup_id(startup_id: Pgchar); cdecl;
begin
  Gtk3.gtk_window_set_startup_id(@self, startup_id);
end;

procedure TGtkWindow.set_title(title: Pgchar); cdecl;
begin
  Gtk3.gtk_window_set_title(@self, title);
end;

procedure TGtkWindow.set_transient_for(parent: PAtkWindow); cdecl;
begin
  Gtk3.gtk_window_set_transient_for(@self, parent);
end;

procedure TGtkWindow.set_type_hint(hint: TGdkWindowTypeHint); cdecl;
begin
  Gtk3.gtk_window_set_type_hint(@self, hint);
end;

procedure TGtkWindow.set_urgency_hint(setting: gboolean); cdecl;
begin
  Gtk3.gtk_window_set_urgency_hint(@self, setting);
end;

procedure TGtkWindow.set_wmclass(wmclass_name: Pgchar; wmclass_class: Pgchar); cdecl;
begin
  Gtk3.gtk_window_set_wmclass(@self, wmclass_name, wmclass_class);
end;

procedure TGtkWindow.stick; cdecl;
begin
  Gtk3.gtk_window_stick(@self);
end;

procedure TGtkWindow.unfullscreen; cdecl;
begin
  Gtk3.gtk_window_unfullscreen(@self);
end;

procedure TGtkWindow.unmaximize; cdecl;
begin
  Gtk3.gtk_window_unmaximize(@self);
end;

procedure TGtkWindow.unstick; cdecl;
begin
  Gtk3.gtk_window_unstick(@self);
end;

end.